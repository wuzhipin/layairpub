!function(e,t){"use strict";class r{static createDepthCasterUniformBlock(){if(!r.DepthCasterUBOData){let e=new Map;e.set(t.Shader3D.propertyNameToID("u_ShadowBias"),t.UniformBufferParamsType.Vector4),e.set(t.Shader3D.propertyNameToID("u_ShadowLightDirection"),t.UniformBufferParamsType.Vector3),r.DepthCasterUBOData=new t.UnifromBufferData(e)}return r.DepthCasterUBOData}}class n{static __init__(){n.DEPTHPASS=t.Shader3D.getDefineByName("DEPTHPASS"),n.DEFINE_SHADOW_BIAS=t.Shader3D.propertyNameToID("u_ShadowBias"),n.DEPTHTEXTURE=t.Shader3D.propertyNameToID("u_CameraDepthTexture"),n.DEPTHNORMALSTEXTURE=t.Shader3D.propertyNameToID("u_CameraDepthNormalsTexture"),n.DEPTHZBUFFERPARAMS=t.Shader3D.propertyNameToID("u_ZBufferParams"),n.SHADOWUNIFORMBLOCK=t.Shader3D.propertyNameToID(t.UniformBufferObject.UBONAME_SHADOW)}constructor(){t.Config3D._uniformBlock&&(this._castDepthData=r.createDepthCasterUniformBlock(),this._castDepthUBO=t.UniformBufferObject.getBuffer(t.UniformBufferObject.UBONAME_SHADOW,0),this._castDepthUBO||(this._castDepthUBO=t.UniformBufferObject.create(t.UniformBufferObject.UBONAME_SHADOW,t.BufferUsage.Dynamic,this._castDepthData.getbyteLength(),!0)))}getTarget(e,r,n){switch(this._viewPort=e.viewport,this._camera=e,r){case t.DepthTextureMode.Depth:e.depthTexture=this._depthTexture=t.RenderTexture.createFromPool(this._viewPort.width,this._viewPort.height,n,t.RenderTargetFormat.None,!1,1);break;case t.DepthTextureMode.DepthNormals:e.depthNormalTexture=this._depthNormalsTexture=t.RenderTexture.createFromPool(this._viewPort.width,this._viewPort.height,t.RenderTargetFormat.R8G8B8A8,n,!1,1);break;case t.DepthTextureMode.MotionVectors:break;default:throw"there is UnDefined type of DepthTextureMode"}}_setupDepthModeShaderValue(e,r){if(e!==t.DepthTextureMode.Depth)throw"there is UnDefined type of DepthTextureMode";var a=r.farPlane,i=r.nearPlane;this._zBufferParams.setValue(1-a/i,a/i,(i-a)/(i*a),1/i),r._shaderValues.setVector(n.DEFINE_SHADOW_BIAS,n.SHADOW_BIAS),r._shaderValues.setTexture(n.DEPTHTEXTURE,this._depthTexture),r._shaderValues.setVector(n.DEPTHZBUFFERPARAMS,this._zBufferParams)}cleanUp(){this._depthTexture instanceof t.RenderTexture&&this._depthTexture&&t.RenderTexture.recoverToPool(this._depthTexture),this._depthNormalsTexture&&t.RenderTexture.recoverToPool(this._depthNormalsTexture),this._depthTexture=null,this._depthNormalsTexture=null}}n.SHADOW_BIAS=new t.Vector4;class a{constructor(){this._ownerPath=[],this._propertys=[],this._keyFrames=[]}get ownerPathCount(){return this._ownerPath.length}get propertyCount(){return this._propertys.length}get keyFramesCount(){return this._keyFrames.length}_setOwnerPathCount(e){this._ownerPath.length=e}_setOwnerPathByIndex(e,t){this._ownerPath[e]=t}_joinOwnerPath(e){return this._ownerPath.join(e)}_setPropertyCount(e){this._propertys.length=e}_setPropertyByIndex(e,t){this._propertys[e]=t}_joinProperty(e){return this._propertys.join(e)}_setKeyframeCount(e){this._keyFrames.length=e}_setKeyframeByIndex(e,t){this._keyFrames[e]=t}getOwnerPathByIndex(e){return this._ownerPath[e]}getPropertyByIndex(e){return this._propertys[e]}getKeyframeByIndex(e){return this._keyFrames[e]}}class i{constructor(){}}var s,o;e.WeightedMode=void 0,(s=e.WeightedMode||(e.WeightedMode={}))[s.None=0]="None",s[s.In=1]="In",s[s.Out=2]="Out",s[s.Both=3]="Both";class l{constructor(){}cloneTo(e){e.time=this.time}clone(){var e=new l;return this.cloneTo(e),e}}l.defaultWeight=.33333;class h extends l{constructor(){super(),this.inWeight=l.defaultWeight,this.outWeight=l.defaultWeight,this.weightedMode=e.WeightedMode.None}cloneTo(e){super.cloneTo(e);var t=e;t.inTangent=this.inTangent,t.outTangent=this.outTangent,t.value=this.value,t.inTangent=this.inTangent,t.outTangent=this.outTangent,t.value=this.value,t.inWeight=this.inWeight,t.outWeight=this.outWeight,t.weightedMode=this.weightedMode}clone(){let e=new h;return this.cloneTo(e),e}}class d extends l{constructor(e=!1){super(),this.inTangent=new t.Vector4,this.outTangent=new t.Vector4,this.value=new t.Quaternion,e&&(this.inWeight=new t.Vector4,this.outWeight=new t.Vector4,this.weightedMode=new t.Vector4)}cloneTo(e){super.cloneTo(e);var t=e;this.inTangent.cloneTo(t.inTangent),this.outTangent.cloneTo(t.outTangent),this.value.cloneTo(t.value),this.weightedMode&&(this.inWeight.cloneTo(t.inWeight),this.outWeight.cloneTo(t.outWeight),this.weightedMode.cloneTo(t.weightedMode))}}class c extends l{constructor(r=!1){super(),this.inTangent=new t.Vector3,this.outTangent=new t.Vector3,this.value=new t.Vector3,r&&(this.inWeight=new t.Vector3(l.defaultWeight,l.defaultWeight,l.defaultWeight),this.outWeight=new t.Vector3(l.defaultWeight,l.defaultWeight,l.defaultWeight),this.weightedMode=new t.Vector3(e.WeightedMode.None,e.WeightedMode.None,e.WeightedMode.None))}cloneTo(e){super.cloneTo(e);var t=e;this.inTangent.cloneTo(t.inTangent),this.outTangent.cloneTo(t.outTangent),this.value.cloneTo(t.value),this.weightedMode&&(this.inWeight.cloneTo(t.inWeight),this.outWeight.cloneTo(t.outWeight),this.weightedMode.cloneTo(t.weightedMode))}}class u{static READ_DATA(){u._DATA.offset=u._reader.getUint32(),u._DATA.size=u._reader.getUint32()}static READ_BLOCK(){for(var e=u._BLOCK.count=u._reader.getUint16(),t=u._BLOCK.blockStarts=[],r=u._BLOCK.blockLengths=[],n=0;n<e;n++)t.push(u._reader.getUint32()),r.push(u._reader.getUint32())}static READ_STRINGS(){var e=u._reader.getUint32(),t=u._reader.getUint16(),r=u._reader.pos;u._reader.pos=e+u._DATA.offset;for(var n=0;n<t;n++)u._strings[n]=u._reader.readUTFString();u._reader.pos=r}static parse(e,t){u._animationClip=e,u._reader=t,u.READ_DATA(),u.READ_BLOCK(),u.READ_STRINGS();for(var r=0,n=u._BLOCK.count;r<n;r++){var a=t.getUint16(),i=u._strings[a],s=u["READ_"+i];if(null==s)throw new Error("model file err,no this function:"+a+" "+i);s.call(null)}}static READ_ANIMATIONS(){var e,t,r,n=u._reader,s=[],o=n.getUint16();for(s.length=o,e=0;e<o;e++)s[e]=n.getFloat32();var l=u._animationClip;l.name=u._strings[n.getUint16()];var _=l._duration=n.getFloat32();l.islooping=!!n.getByte(),l._frameRate=n.getInt16();var m=n.getInt16(),f=l._nodes;f.count=m;var g=l._nodesMap={},p=l._nodesDic={};for(e=0;e<m;e++){r=new a,f.setNodeByIndex(e,r),r._indexInList=e;var S=r.type=n.getUint8(),T=n.getUint16();for(r._setOwnerPathCount(T),t=0;t<T;t++)r._setOwnerPathByIndex(t,u._strings[n.getUint16()]);var E=r._joinOwnerPath("/"),x=g[E];x||(g[E]=x=[]),x.push(r),r.propertyOwner=u._strings[n.getUint16()];var A=n.getUint16();for(r._setPropertyCount(A),t=0;t<A;t++)r._setPropertyByIndex(t,u._strings[n.getUint16()]);var D=E+"."+r.propertyOwner+"."+r._joinProperty(".");p[D]=r,r.fullPath=D;var R=n.getUint16();for(r._setKeyframeCount(R),t=0;t<R;t++)switch(S){case 0:var M=new h;r._setKeyframeByIndex(t,M),M.time=s[n.getUint16()],M.inTangent=n.getFloat32(),M.outTangent=n.getFloat32(),M.value=n.getFloat32();break;case 1:case 3:case 4:var C=new c;r._setKeyframeByIndex(t,C),C.time=s[n.getUint16()];var v=C.inTangent,y=C.outTangent,I=C.value;v.x=n.getFloat32(),v.y=n.getFloat32(),v.z=n.getFloat32(),y.x=n.getFloat32(),y.y=n.getFloat32(),y.z=n.getFloat32(),I.x=n.getFloat32(),I.y=n.getFloat32(),I.z=n.getFloat32();break;case 2:var L=new d;r._setKeyframeByIndex(t,L),L.time=s[n.getUint16()];var B=L.inTangent,O=L.outTangent,w=L.value;B.x=n.getFloat32(),B.y=n.getFloat32(),B.z=n.getFloat32(),B.w=n.getFloat32(),O.x=n.getFloat32(),O.y=n.getFloat32(),O.z=n.getFloat32(),O.w=n.getFloat32(),w.x=n.getFloat32(),w.y=n.getFloat32(),w.z=n.getFloat32(),w.w=n.getFloat32();break;default:throw"AnimationClipParser03:unknown type."}}var P=n.getUint16();for(e=0;e<P;e++){var N=new i;N.time=Math.min(_,n.getFloat32()),N.eventName=u._strings[n.getUint16()];var V=[],b=n.getUint16();for(b>0&&(N.params=V=[]),t=0;t<b;t++){switch(n.getByte()){case 0:V.push(!!n.getByte());break;case 1:V.push(n.getInt32());break;case 2:V.push(n.getFloat32());break;case 3:V.push(u._strings[n.getUint16()]);break;default:throw new Error("unknown type.")}}l.addEvent(N)}}}u._strings=[],u._BLOCK={count:0},u._DATA={offset:0,size:0};class _ extends l{constructor(r=!1){super(),this.inTangent=new t.Vector2,this.outTangent=new t.Vector2,this.value=new t.Vector2,r&&(this.inWeight=new t.Vector2(l.defaultWeight,l.defaultWeight),this.outWeight=new t.Vector2(l.defaultWeight,l.defaultWeight),this.weightedMode=new t.Vector2(e.WeightedMode.None,e.WeightedMode.None))}cloneTo(e){super.cloneTo(e);var t=e;this.inTangent.cloneTo(t.inTangent),this.outTangent.cloneTo(t.outTangent),this.value.cloneTo(t.value),this.weightedMode&&(this.inWeight.cloneTo(t.inWeight),this.outWeight.cloneTo(t.outWeight),this.weightedMode.cloneTo(t.weightedMode))}}class m extends l{constructor(r=!1){super(),this.inTangent=new t.Vector4,this.outTangent=new t.Vector4,this.value=new t.Vector4,r&&(this.inWeight=new t.Vector4(l.defaultWeight,l.defaultWeight,l.defaultWeight,l.defaultWeight),this.outWeight=new t.Vector4(l.defaultWeight,l.defaultWeight,l.defaultWeight,l.defaultWeight),this.weightedMode=new t.Vector4(e.WeightedMode.None,e.WeightedMode.None,e.WeightedMode.None,e.WeightedMode.None))}cloneTo(e){super.cloneTo(e);var t=e;this.inTangent.cloneTo(t.inTangent),this.outTangent.cloneTo(t.outTangent),this.value.cloneTo(t.value),this.weightedMode&&(this.inWeight.cloneTo(t.inWeight),this.outWeight.cloneTo(t.outWeight),this.weightedMode.cloneTo(t.weightedMode))}}e.KeyFrameValueType=void 0,(o=e.KeyFrameValueType||(e.KeyFrameValueType={}))[o.None=-1]="None",o[o.Float=0]="Float",o[o.Position=1]="Position",o[o.Rotation=2]="Rotation",o[o.Scale=3]="Scale",o[o.RotationEuler=4]="RotationEuler",o[o.Vector2=5]="Vector2",o[o.Vector3=6]="Vector3",o[o.Vector4=7]="Vector4",o[o.Color=8]="Color";class f{constructor(){this.indexInList=-1,this.referenceCount=0,this.updateMark=-1,this.type=-1,this.fullPath=null,this.nodePath=null,this.propertyOwner=null,this.property=null,this.defaultValue=null,this.value=null,this.crossFixedValue=null,this.isMaterial=!1}saveCrossFixedValue(){if(this.propertyOwner)switch(this.type){case 0:this.crossFixedValue=this.value;break;case 1:case 3:case 4:case 2:this.value.cloneTo(this.crossFixedValue);break;default:throw"Animator:unknown type."}}animatorDataSetCallBack(){this.callBackOwner[this.callbackFun].apply(this.callBackOwner,this.callParams)}getCallbackNode(){if(this.propertyOwner&&this.callbackFunData){let e=this.callbackFunData.split(".");this.callBackOwner=this.propertyOwner;for(let t=0,r=e.length-1;t<r;t++)this.callBackOwner=this.callBackOwner[e[t]];this.callbackFun=e[e.length-1]}}}class g{static READ_DATA(){g._DATA.offset=g._reader.getUint32(),g._DATA.size=g._reader.getUint32()}static READ_BLOCK(){for(var e=g._BLOCK.count=g._reader.getUint16(),t=g._BLOCK.blockStarts=[],r=g._BLOCK.blockLengths=[],n=0;n<e;n++)t.push(g._reader.getUint32()),r.push(g._reader.getUint32())}static READ_STRINGS(){var e=g._reader.getUint32(),t=g._reader.getUint16(),r=g._reader.pos;g._reader.pos=e+g._DATA.offset;for(var n=0;n<t;n++)g._strings[n]=g._reader.readUTFString();g._reader.pos=r}static parse(e,t,r){g._animationClip=e,g._reader=t,g._version=r,g.READ_DATA(),g.READ_BLOCK(),g.READ_STRINGS();for(var n=0,a=g._BLOCK.count;n<a;n++){var i=t.getUint16(),s=g._strings[i],o=g["READ_"+s];if(null==o)throw new Error("model file err,no this function:"+i+" "+s);o.call(null)}g._version=null,g._reader=null,g._animationClip=null}static READ_ANIMATIONS(){var r,n,s,o=g._reader,l=[],u=o.getUint16();for(l.length=u,r=0;r<u;r++)l[r]=o.getFloat32();var f=g._animationClip;f.name=g._strings[o.getUint16()];var p=f._duration=o.getFloat32();f.islooping=!!o.getByte(),f._frameRate=o.getInt16();var S=o.getInt16(),T=f._nodes;T.count=S;var E=f._nodesMap={},x=f._nodesDic={};for(r=0;r<S;r++){if(s=new a,"LAYAANIMATION:WEIGHT_05"==g._version){1==o.getByte()&&(s.propertyChangePath=g._strings[o.getUint16()]),1==o.getByte()&&(s.callbackFunData=g._strings[o.getUint16()]);let e=o.getUint8(),t=null;for(n=0;n<e;n++)null==t&&(t=[]),t.push(g._strings[o.getUint16()]);s.callParams=t}T.setNodeByIndex(r,s),s._indexInList=r;var A=s.type=o.getUint8(),D=o.getUint16();for(s._setOwnerPathCount(D),n=0;n<D;n++)s._setOwnerPathByIndex(n,g._strings[o.getUint16()]);var R=s._joinOwnerPath("/"),M=E[R];M||(E[R]=M=[]),M.push(s),s.propertyOwner=g._strings[o.getUint16()];var C=o.getUint16();for(s._setPropertyCount(C),n=0;n<C;n++)s._setPropertyByIndex(n,g._strings[o.getUint16()]);var v=R+"."+s.propertyOwner+"."+s._joinProperty(".");x[v]=s,s.fullPath=v,s.nodePath=R;var y=o.getUint16();switch(s._setKeyframeCount(y),g._version){case"LAYAANIMATION:04":for(n=0;n<y;n++)switch(A){case e.KeyFrameValueType.Float:var I=new h;s._setKeyframeByIndex(n,I),I.time=l[o.getUint16()],I.inTangent=o.getFloat32(),I.outTangent=o.getFloat32(),I.value=o.getFloat32();break;case e.KeyFrameValueType.Position:case e.KeyFrameValueType.Scale:case e.KeyFrameValueType.RotationEuler:case e.KeyFrameValueType.Vector3:var L=new c;s._setKeyframeByIndex(n,L),L.time=l[o.getUint16()];var B=L.inTangent,O=L.outTangent,w=L.value;B.x=o.getFloat32(),B.y=o.getFloat32(),B.z=o.getFloat32(),O.x=o.getFloat32(),O.y=o.getFloat32(),O.z=o.getFloat32(),w.x=o.getFloat32(),w.y=o.getFloat32(),w.z=o.getFloat32();break;case e.KeyFrameValueType.Rotation:var P=new d;s._setKeyframeByIndex(n,P),P.time=l[o.getUint16()];var N=P.inTangent,V=P.outTangent,b=P.value;N.x=o.getFloat32(),N.y=o.getFloat32(),N.z=o.getFloat32(),N.w=o.getFloat32(),V.x=o.getFloat32(),V.y=o.getFloat32(),V.z=o.getFloat32(),V.w=o.getFloat32(),b.x=o.getFloat32(),b.y=o.getFloat32(),b.z=o.getFloat32(),b.w=o.getFloat32();break;case e.KeyFrameValueType.Vector2:var F=new _;s._setKeyframeByIndex(n,F),F.time=l[o.getUint16()];var U=F.inTangent,G=F.outTangent,H=F.value;U.x=o.getFloat32(),U.y=o.getFloat32(),G.x=o.getFloat32(),G.y=o.getFloat32(),H.x=o.getFloat32(),H.y=o.getFloat32();break;case e.KeyFrameValueType.Vector4:case e.KeyFrameValueType.Color:var z=new m;s._setKeyframeByIndex(n,z),z.time=l[o.getUint16()];var k=z.inTangent,W=z.outTangent,Y=z.value;k.x=o.getFloat32(),k.y=o.getFloat32(),k.z=o.getFloat32(),k.w=o.getFloat32(),W.x=o.getFloat32(),W.y=o.getFloat32(),W.z=o.getFloat32(),W.w=o.getFloat32(),Y.x=o.getFloat32(),Y.y=o.getFloat32(),Y.z=o.getFloat32(),Y.w=o.getFloat32();break;default:throw"AnimationClipParser04:unknown type."}break;case"LAYAANIMATION:WEIGHT_04":case"LAYAANIMATION:WEIGHT_05":for(n=0;n<y;n++){let t=1;switch(A){case e.KeyFrameValueType.Float:I=new h;s._setKeyframeByIndex(n,I),I.time=l[o.getUint16()],I.inTangent=o.getFloat32(),I.outTangent=o.getFloat32(),I.value=o.getFloat32(),I.weightedMode=o.getUint8(),"LAYAANIMATION:WEIGHT_05"==g._version?(e.WeightedMode.In!=I.weightedMode&&e.WeightedMode.Both!=I.weightedMode||(I.inWeight=o.getFloat32()),e.WeightedMode.Out!=I.weightedMode&&e.WeightedMode.Both!=I.weightedMode||(I.outWeight=o.getFloat32())):(I.inWeight=o.getFloat32(),I.outWeight=o.getFloat32());break;case e.KeyFrameValueType.Position:case e.KeyFrameValueType.Scale:case e.KeyFrameValueType.RotationEuler:case e.KeyFrameValueType.Vector3:L=new c(!0);s._setKeyframeByIndex(n,L),L.time=l[o.getUint16()];B=L.inTangent,O=L.outTangent,w=L.value;let r=L.weightedMode,a=L.inWeight,i=L.outWeight;B.x=o.getFloat32(),B.y=o.getFloat32(),B.z=o.getFloat32(),O.x=o.getFloat32(),O.y=o.getFloat32(),O.z=o.getFloat32(),w.x=o.getFloat32(),w.y=o.getFloat32(),w.z=o.getFloat32(),"LAYAANIMATION:WEIGHT_05"==g._version&&(t=o.getByte()),1==t&&(r.x=o.getUint8(),r.y=o.getUint8(),r.z=o.getUint8(),a.x=o.getFloat32(),a.y=o.getFloat32(),a.z=o.getFloat32(),i.x=o.getFloat32(),i.y=o.getFloat32(),i.z=o.getFloat32());break;case e.KeyFrameValueType.Rotation:P=new d(!0);s._setKeyframeByIndex(n,P),P.time=l[o.getUint16()];N=P.inTangent,V=P.outTangent,b=P.value;let u=P.weightedMode,f=P.inWeight,p=P.outWeight;N.x=o.getFloat32(),N.y=o.getFloat32(),N.z=o.getFloat32(),N.w=o.getFloat32(),V.x=o.getFloat32(),V.y=o.getFloat32(),V.z=o.getFloat32(),V.w=o.getFloat32(),b.x=o.getFloat32(),b.y=o.getFloat32(),b.z=o.getFloat32(),b.w=o.getFloat32(),"LAYAANIMATION:WEIGHT_05"==g._version&&(t=o.getByte()),1==t&&(u.x=o.getUint8(),u.y=o.getUint8(),u.z=o.getUint8(),u.w=o.getUint8(),f.x=o.getFloat32(),f.y=o.getFloat32(),f.z=o.getFloat32(),f.w=o.getFloat32(),p.x=o.getFloat32(),p.y=o.getFloat32(),p.z=o.getFloat32(),p.w=o.getFloat32());break;case e.KeyFrameValueType.Vector2:F=new _(!0);s._setKeyframeByIndex(n,F),F.time=l[o.getUint16()];U=F.inTangent,G=F.outTangent,H=F.value;let S=F.weightedMode,T=F.inWeight,E=F.outWeight;U.x=o.getFloat32(),U.y=o.getFloat32(),G.x=o.getFloat32(),G.y=o.getFloat32(),H.x=o.getFloat32(),H.y=o.getFloat32(),"LAYAANIMATION:WEIGHT_05"==g._version&&(t=o.getByte()),1==t&&(S.x=o.getUint8(),S.y=o.getUint8(),T.x=o.getFloat32(),T.y=o.getFloat32(),E.x=o.getFloat32(),E.y=o.getFloat32());break;case e.KeyFrameValueType.Vector4:case e.KeyFrameValueType.Color:z=new m(!0);s._setKeyframeByIndex(n,z),z.time=l[o.getUint16()];k=z.inTangent,W=z.outTangent,Y=z.value;var X=z.weightedMode,Q=z.inWeight,K=z.outWeight;k.x=o.getFloat32(),k.y=o.getFloat32(),k.z=o.getFloat32(),k.w=o.getFloat32(),W.x=o.getFloat32(),W.y=o.getFloat32(),W.z=o.getFloat32(),W.w=o.getFloat32(),Y.x=o.getFloat32(),Y.y=o.getFloat32(),Y.z=o.getFloat32(),Y.w=o.getFloat32(),"LAYAANIMATION:WEIGHT_05"==g._version&&(t=o.getByte()),1==t&&(X.x=o.getUint8(),X.y=o.getUint8(),X.z=o.getUint8(),X.w=o.getUint8(),Q.x=o.getFloat32(),Q.y=o.getFloat32(),Q.z=o.getFloat32(),Q.w=o.getFloat32(),K.x=o.getFloat32(),K.y=o.getFloat32(),K.z=o.getFloat32(),K.w=o.getFloat32());break;default:throw"AnimationClipParser04:unknown type."}}break;case"LAYAANIMATION:COMPRESSION_04":for(n=0;n<y;n++)switch(A){case e.KeyFrameValueType.Float:I=new h,s._setKeyframeByIndex(n,I),I.time=l[o.getUint16()],I.inTangent=t.HalfFloatUtils.convertToNumber(o.getUint16()),I.outTangent=t.HalfFloatUtils.convertToNumber(o.getUint16()),I.value=t.HalfFloatUtils.convertToNumber(o.getUint16());break;case e.KeyFrameValueType.Position:case e.KeyFrameValueType.Scale:case e.KeyFrameValueType.RotationEuler:case e.KeyFrameValueType.Vector3:L=new c,s._setKeyframeByIndex(n,L),L.time=l[o.getUint16()],B=L.inTangent,O=L.outTangent,w=L.value,B.x=t.HalfFloatUtils.convertToNumber(o.getUint16()),B.y=t.HalfFloatUtils.convertToNumber(o.getUint16()),B.z=t.HalfFloatUtils.convertToNumber(o.getUint16()),O.x=t.HalfFloatUtils.convertToNumber(o.getUint16()),O.y=t.HalfFloatUtils.convertToNumber(o.getUint16()),O.z=t.HalfFloatUtils.convertToNumber(o.getUint16()),w.x=t.HalfFloatUtils.convertToNumber(o.getUint16()),w.y=t.HalfFloatUtils.convertToNumber(o.getUint16()),w.z=t.HalfFloatUtils.convertToNumber(o.getUint16());break;case e.KeyFrameValueType.Rotation:P=new d,s._setKeyframeByIndex(n,P),P.time=l[o.getUint16()],N=P.inTangent,V=P.outTangent,b=P.value,N.x=t.HalfFloatUtils.convertToNumber(o.getUint16()),N.y=t.HalfFloatUtils.convertToNumber(o.getUint16()),N.z=t.HalfFloatUtils.convertToNumber(o.getUint16()),N.w=t.HalfFloatUtils.convertToNumber(o.getUint16()),V.x=t.HalfFloatUtils.convertToNumber(o.getUint16()),V.y=t.HalfFloatUtils.convertToNumber(o.getUint16()),V.z=t.HalfFloatUtils.convertToNumber(o.getUint16()),V.w=t.HalfFloatUtils.convertToNumber(o.getUint16()),b.x=t.HalfFloatUtils.convertToNumber(o.getUint16()),b.y=t.HalfFloatUtils.convertToNumber(o.getUint16()),b.z=t.HalfFloatUtils.convertToNumber(o.getUint16()),b.w=t.HalfFloatUtils.convertToNumber(o.getUint16());break;case e.KeyFrameValueType.Vector2:F=new _;s._setKeyframeByIndex(n,F),F.time=l[o.getUint16()];U=F.inTangent,G=F.outTangent,H=F.value;U.x=t.HalfFloatUtils.convertToNumber(o.getUint16()),U.y=t.HalfFloatUtils.convertToNumber(o.getUint16()),G.x=t.HalfFloatUtils.convertToNumber(o.getUint16()),G.y=t.HalfFloatUtils.convertToNumber(o.getUint16()),H.x=t.HalfFloatUtils.convertToNumber(o.getUint16()),H.y=t.HalfFloatUtils.convertToNumber(o.getUint16());break;case e.KeyFrameValueType.Vector4:case e.KeyFrameValueType.Color:z=new m;s._setKeyframeByIndex(n,z),z.time=l[o.getUint16()];k=z.inTangent,W=z.outTangent,Y=z.value;k.x=t.HalfFloatUtils.convertToNumber(o.getUint16()),k.y=t.HalfFloatUtils.convertToNumber(o.getUint16()),k.z=t.HalfFloatUtils.convertToNumber(o.getUint16()),k.w=t.HalfFloatUtils.convertToNumber(o.getUint16()),W.x=t.HalfFloatUtils.convertToNumber(o.getUint16()),W.y=t.HalfFloatUtils.convertToNumber(o.getUint16()),W.z=t.HalfFloatUtils.convertToNumber(o.getUint16()),W.w=t.HalfFloatUtils.convertToNumber(o.getUint16()),Y.x=t.HalfFloatUtils.convertToNumber(o.getUint16()),Y.y=t.HalfFloatUtils.convertToNumber(o.getUint16()),Y.z=t.HalfFloatUtils.convertToNumber(o.getUint16()),Y.w=t.HalfFloatUtils.convertToNumber(o.getUint16());break;default:throw"AnimationClipParser04:unknown type."}}}var j=o.getUint16();for(r=0;r<j;r++){var Z=new i;Z.time=Math.min(p,o.getFloat32()),Z.eventName=g._strings[o.getUint16()];var J=[],q=o.getUint16();for(q>0&&(Z.params=J=[]),n=0;n<q;n++){switch(o.getByte()){case 0:J.push(!!o.getByte());break;case 1:J.push(o.getInt32());break;case 2:J.push(o.getFloat32());break;case 3:J.push(g._strings[o.getUint16()]);break;default:throw new Error("unknown type.")}}f.addEvent(Z)}}}g._strings=[],g._BLOCK={count:0},g._DATA={offset:0,size:0};class p{get count(){return this._nodes.length}set count(e){this._nodes.length=e}constructor(){this._nodes=[]}getNodeByIndex(e){return this._nodes[e]}setNodeByIndex(e,t){this._nodes[e]=t}}class S{constructor(){}static lightAttenTexture(e,t,r,n,a,i){var s=e/r,o=1/(1+25*s);s>=.64&&(s>1?o=0:o*=1-(s-.64)/.36),i[a]=Math.floor(255*o+.5)}static haloTexture(e,t,r,n,a,i){var s=(e-(r>>=1))/r,o=(t-(n>>=1))/n,l=s*s+o*o;l>1&&(l=1),i[a]=Math.floor(255*(1-l)+.5)}static _generateTexture2D(e,r,n,a){var i=0,s=0;switch(e.format){case t.TextureFormat.R8G8B8:s=3;break;case t.TextureFormat.R8G8B8A8:s=4;break;case t.TextureFormat.Alpha8:s=1;break;default:throw"GeneratedTexture._generateTexture: unkonw texture format."}for(var o=new Uint8Array(r*n*s),l=0;l<n;l++)for(var h=0;h<r;h++)a(h,l,r,n,i,o),i+=s;e.setPixelsData(o,!1,!1)}}class T{static _createFloatTextureBuffer(e,r){var n=new t.Texture2D(e,r,t.TextureFormat.R32G32B32A32,!1,!1);return n.setPixelsData(null,!1,!1),n.filterMode=t.FilterMode.Point,n.wrapModeU=t.WrapMode.Clamp,n.wrapModeV=t.WrapMode.Clamp,n.anisoLevel=1,n}static _rotationTransformScaleSkinAnimation(e,t,r,n,a,i,s,o,l,h,d,c){var u,_,m,f,g,p=T._tempArray16_0,S=T._tempArray16_1,E=T._tempArray16_2,x=n+n,A=a+a,D=i+i,R=n*x,M=a*x,C=a*A,v=i*x,y=i*A,I=i*D,L=s*x,B=s*A,O=s*D;for(p[15]=1,p[0]=1-C-I,p[1]=M+O,p[2]=v-B,p[4]=M-O,p[5]=1-R-I,p[6]=y+L,p[8]=v+B,p[9]=y-L,p[10]=1-R-C,S[15]=1,S[0]=o,S[5]=l,S[10]=h,u=0;u<4;u++)_=p[u],m=p[u+4],f=p[u+8],g=p[u+12],E[u]=_,E[u+4]=m,E[u+8]=f,E[u+12]=_*e+m*t+f*r+g;for(u=0;u<4;u++)_=E[u],m=E[u+4],f=E[u+8],g=E[u+12],d[u+c]=_*S[0]+m*S[1]+f*S[2]+g*S[3],d[u+c+4]=_*S[4]+m*S[5]+f*S[6]+g*S[7],d[u+c+8]=_*S[8]+m*S[9]+f*S[10]+g*S[11],d[u+c+12]=_*S[12]+m*S[13]+f*S[14]+g*S[15]}static billboardTrans(e,r,n,a){t.Vector3.normalize(n,T._tempV1),t.Vector3.cross(r,n,T._tempV0),t.Vector3.normalize(T._tempV0,T._tempV0),t.Vector3.scale(T._tempV0,e.x,a),t.Vector3.scale(n,e.y,T._tempV1),t.Vector3.add(a,T._tempV1,a)}static PointinTriangle(e,t,r,n){let a=r.vsub(e,T._tempVector3_0),i=t.vsub(e,T._tempVector3_1),s=n.vsub(e,T._tempVector3_2),o=a.dot(a),l=a.dot(i),h=a.dot(s),d=i.dot(i),c=i.dot(s),u=1/(o*d-l*l),_=(d*h-l*c)*u;if(_<0||_>1)return!1;let m=(o*c-l*h)*u;return!(m<0||m>1)&&_+m<=1}static _computeBoneAndAnimationDatasByBindPoseMatrxix(e,t,r,n,a,i){var s,o,l=0,h=0,d=e.length;for(s=0;s<d;l+=e[s].keyframeWidth,h+=16,s++)T._rotationTransformScaleSkinAnimation(t[l+0],t[l+1],t[l+2],t[l+3],t[l+4],t[l+5],t[l+6],t[l+7],t[l+8],t[l+9],n,h),0!=s&&(o=16*e[s].parentIndex,T.mulMatrixByArray(n,o,n,h,n,h));var c=r.length;for(s=0;s<c;s++)T.mulMatrixByArrayAndMatrixFast(n,16*i[s],r[s],a,16*s)}static _computeAnimationDatasByArrayAndMatrixFast(e,t,r,n){for(var a=0,i=e.length;a<i;a++)T.mulMatrixByArrayAndMatrixFast(t,16*n[a],e[a],r,16*a)}static _computeBoneAndAnimationDatasByBindPoseMatrxixOld(e,t,r,n,a){var i,s,o=0,l=0,h=e.length;for(i=0;i<h;o+=e[i].keyframeWidth,l+=16,i++)T._rotationTransformScaleSkinAnimation(t[o+7],t[o+8],t[o+9],t[o+3],t[o+4],t[o+5],t[o+6],t[o+0],t[o+1],t[o+2],n,l),0!=i&&(s=16*e[i].parentIndex,T.mulMatrixByArray(n,s,n,l,n,l));var d=r.length;for(i=0;i<d;i++){var c=16*i;T.mulMatrixByArrayAndMatrixFast(n,c,r[i],a,c)}}static _computeAnimationDatasByArrayAndMatrixFastOld(e,t,r){for(var n=e.length,a=0;a<n;a++){var i=16*a;T.mulMatrixByArrayAndMatrixFast(t,i,e[a],r,i)}}static _computeRootAnimationData(e,t,r){for(var n=0,a=0,i=0,s=e.length;n<s;a+=e[n].keyframeWidth,i+=16,n++)T.createAffineTransformationArray(t[a+0],t[a+1],t[a+2],t[a+3],t[a+4],t[a+5],t[a+6],t[a+7],t[a+8],t[a+9],r,i)}static transformVector3ArrayByQuat(e,t,r,n,a){var i=e[t],s=e[t+1],o=e[t+2],l=r.x,h=r.y,d=r.z,c=r.w,u=c*i+h*o-d*s,_=c*s+d*i-l*o,m=c*o+l*s-h*i,f=-l*i-h*s-d*o;n[a]=u*c+f*-l+_*-d-m*-h,n[a+1]=_*c+f*-h+m*-l-u*-d,n[a+2]=m*c+f*-d+u*-h-_*-l}static mulMatrixByArray(e,t,r,n,a,i){var s,o,l,h,d;if(a===r){for(r=T._tempArray16_3,s=0;s<16;++s)r[s]=a[i+s];n=0}for(s=0;s<4;s++)o=e[t+s],l=e[t+s+4],h=e[t+s+8],d=e[t+s+12],a[i+s]=o*r[n+0]+l*r[n+1]+h*r[n+2]+d*r[n+3],a[i+s+4]=o*r[n+4]+l*r[n+5]+h*r[n+6]+d*r[n+7],a[i+s+8]=o*r[n+8]+l*r[n+9]+h*r[n+10]+d*r[n+11],a[i+s+12]=o*r[n+12]+l*r[n+13]+h*r[n+14]+d*r[n+15]}static mulMatrixByArrayFast(e,t,r,n,a,i){var s,o,l,h,d;for(s=0;s<4;s++)o=e[t+s],l=e[t+s+4],h=e[t+s+8],d=e[t+s+12],a[i+s]=o*r[n+0]+l*r[n+1]+h*r[n+2]+d*r[n+3],a[i+s+4]=o*r[n+4]+l*r[n+5]+h*r[n+6]+d*r[n+7],a[i+s+8]=o*r[n+8]+l*r[n+9]+h*r[n+10]+d*r[n+11],a[i+s+12]=o*r[n+12]+l*r[n+13]+h*r[n+14]+d*r[n+15]}static mulMatrixByArrayAndMatrixFast(e,t,r,n,a){var i,s,o,l,h,d=r.elements,c=d[0],u=d[1],_=d[2],m=d[3],f=d[4],g=d[5],p=d[6],S=d[7],T=d[8],E=d[9],x=d[10],A=d[11],D=d[12],R=d[13],M=d[14],C=d[15],v=t,y=t+4,I=t+8,L=t+12,B=a,O=a+4,w=a+8,P=a+12;for(i=0;i<4;i++)s=e[v+i],o=e[y+i],l=e[I+i],h=e[L+i],n[B+i]=s*c+o*u+l*_+h*m,n[O+i]=s*f+o*g+l*p+h*S,n[w+i]=s*T+o*E+l*x+h*A,n[P+i]=s*D+o*R+l*M+h*C}static createAffineTransformationArray(e,t,r,n,a,i,s,o,l,h,d,c){var u=n+n,_=a+a,m=i+i,f=n*u,g=n*_,p=n*m,S=a*_,T=a*m,E=i*m,x=s*u,A=s*_,D=s*m;d[c+0]=(1-(S+E))*o,d[c+1]=(g+D)*o,d[c+2]=(p-A)*o,d[c+3]=0,d[c+4]=(g-D)*l,d[c+5]=(1-(f+E))*l,d[c+6]=(T+x)*l,d[c+7]=0,d[c+8]=(p+A)*h,d[c+9]=(T-x)*h,d[c+10]=(1-(f+S))*h,d[c+11]=0,d[c+12]=e,d[c+13]=t,d[c+14]=r,d[c+15]=1}static transformVector3ArrayToVector3ArrayCoordinate(e,t,r,n,a){var i=e[t+0],s=e[t+1],o=e[t+2],l=r.elements,h=i*l[3]+s*l[7]+o*l[11]+l[15];n[a]=i*l[0]+s*l[4]+o*l[8]+l[12]/h,n[a+1]=i*l[1]+s*l[5]+o*l[9]+l[13]/h,n[a+2]=i*l[2]+s*l[6]+o*l[10]+l[14]/h}static transformVector3ArrayToVector3ArrayNormal(e,t,r,n,a){var i=e[t+0],s=e[t+1],o=e[t+2],l=r.elements;n[a]=i*l[0]+s*l[4]+o*l[8],n[a+1]=i*l[1]+s*l[5]+o*l[9],n[a+2]=i*l[2]+s*l[6]+o*l[10]}static transformLightingMapTexcoordArray(e,t,r,n,a){n[a+0]=e[t+0]*r.x+r.z,n[a+1]=1-((1-e[t+1])*r.y+r.w)}static getURLVerion(e){var t=e.indexOf("?");return t>=0?e.substr(t):null}static _createAffineTransformationArray(e,t,r,n){var a=t.x,i=t.y,s=t.z,o=t.w,l=a+a,h=i+i,d=s+s,c=a*l,u=a*h,_=a*d,m=i*h,f=i*d,g=s*d,p=o*l,S=o*h,T=o*d,E=r.x,x=r.y,A=r.z;n[0]=(1-(m+g))*E,n[1]=(u+T)*E,n[2]=(_-S)*E,n[3]=0,n[4]=(u-T)*x,n[5]=(1-(c+g))*x,n[6]=(f+p)*x,n[7]=0,n[8]=(_+S)*A,n[9]=(f-p)*A,n[10]=(1-(c+m))*A,n[11]=0,n[12]=e.x,n[13]=e.y,n[14]=e.z,n[15]=1}static _mulMatrixArray(e,t,r,n,a){var i=t,s=e,o=n,l=i[r],h=i[r+1],d=i[r+2],c=i[r+3],u=i[r+4],_=i[r+5],m=i[r+6],f=i[r+7],g=i[r+8],p=i[r+9],S=i[r+10],T=i[r+11],E=i[r+12],x=i[r+13],A=i[r+14],D=i[r+15],R=s[0],M=s[1],C=s[2],v=s[3],y=s[4],I=s[5],L=s[6],B=s[7],O=s[8],w=s[9],P=s[10],N=s[11],V=s[12],b=s[13],F=s[14],U=s[15];o[a]=l*R+h*y+d*O+c*V,o[a+1]=l*M+h*I+d*w+c*b,o[a+2]=l*C+h*L+d*P+c*F,o[a+3]=l*v+h*B+d*N+c*U,o[a+4]=u*R+_*y+m*O+f*V,o[a+5]=u*M+_*I+m*w+f*b,o[a+6]=u*C+_*L+m*P+f*F,o[a+7]=u*v+_*B+m*N+f*U,o[a+8]=g*R+p*y+S*O+T*V,o[a+9]=g*M+p*I+S*w+T*b,o[a+10]=g*C+p*L+S*P+T*F,o[a+11]=g*v+p*B+S*N+T*U,o[a+12]=E*R+x*y+A*O+D*V,o[a+13]=E*M+x*I+A*w+D*b,o[a+14]=E*C+x*L+A*P+D*F,o[a+15]=E*v+x*B+A*N+D*U}static arcTanAngle(e,t){return 0==e?1==t?Math.PI/2:-Math.PI/2:e>0?Math.atan(t/e):e<0?t>0?Math.atan(t/e)+Math.PI:Math.atan(t/e)-Math.PI:0}static angleTo(e,r,n){t.Vector3.subtract(r,e,E),t.Vector3.normalize(E,E),n.x=Math.asin(E.y),n.y=T.arcTanAngle(-E.z,-E.x)}static transformQuat(e,t,r){var n=t,a=e.x,i=e.y,s=e.z,o=n[0],l=n[1],h=n[2],d=n[3],c=d*a+l*s-h*i,u=d*i+h*a-o*s,_=d*s+o*i-l*a,m=-o*a-l*i-h*s;r.x=c*d+m*-o+u*-h-_*-l,r.y=u*d+m*-l+_*-o-c*-h,r.z=_*d+m*-h+c*-l-u*-o}static quaternionWeight(e,t,r){r.x=e.x*t,r.y=e.y*t,r.z=e.z*t,r.w=e.w}static quaternionConjugate(e,t){t.x=-e.x,t.y=-e.y,t.z=-e.z,t.w=e.w}static scaleWeight(e,t,r){var n=e.x,a=e.y,i=e.z;r.x=n>0?Math.pow(Math.abs(n),t):-Math.pow(Math.abs(n),t),r.y=a>0?Math.pow(Math.abs(a),t):-Math.pow(Math.abs(a),t),r.z=i>0?Math.pow(Math.abs(i),t):-Math.pow(Math.abs(i),t)}static scaleBlend(e,t,r,n){var a=T._tempVector3_0,i=T._tempVector3_1;T.scaleWeight(e,1-r,a),T.scaleWeight(t,r,i);var s=r>.5?t:e;n.x=s.x>0?Math.abs(a.x*i.x):-Math.abs(a.x*i.x),n.y=s.y>0?Math.abs(a.y*i.y):-Math.abs(a.y*i.y),n.z=s.z>0?Math.abs(a.z*i.z):-Math.abs(a.z*i.z)}static matrix4x4MultiplyFFF(e,t,r){var n,a,i,s,o;if(r===t)for(t=new Float32Array(16),n=0;n<16;++n)t[n]=r[n];var l=t[0],h=t[1],d=t[2],c=t[3],u=t[4],_=t[5],m=t[6],f=t[7],g=t[8],p=t[9],S=t[10],T=t[11],E=t[12],x=t[13],A=t[14],D=t[15];for(n=0;n<4;n++)a=e[n],i=e[n+4],s=e[n+8],o=e[n+12],r[n]=a*l+i*h+s*d+o*c,r[n+4]=a*u+i*_+s*m+o*f,r[n+8]=a*g+i*p+s*S+o*T,r[n+12]=a*E+i*x+s*A+o*D}static matrix4x4MultiplyMFM(e,t,r){T.matrix4x4MultiplyFFF(e.elements,t,r.elements)}static _buildTexture2D(e,r,n,a,i=!1){var s=new t.Texture2D(e,r,n,i,!0);return s.anisoLevel=1,s.filterMode=t.FilterMode.Point,S._generateTexture2D(s,e,r,a),s}static _drawBound(e,t,r){e.lineCount+12>e.maxLineCount&&(e.maxLineCount+=12);var n=T._tempVector3_0,a=T._tempVector3_1,i=t.min,s=t.max;n.setValue(i.x,i.y,i.z),a.setValue(s.x,i.y,i.z),e.addLine(n,a,r,r),n.setValue(i.x,i.y,i.z),a.setValue(i.x,i.y,s.z),e.addLine(n,a,r,r),n.setValue(s.x,i.y,i.z),a.setValue(s.x,i.y,s.z),e.addLine(n,a,r,r),n.setValue(i.x,i.y,s.z),a.setValue(s.x,i.y,s.z),e.addLine(n,a,r,r),n.setValue(i.x,i.y,i.z),a.setValue(i.x,s.y,i.z),e.addLine(n,a,r,r),n.setValue(i.x,i.y,s.z),a.setValue(i.x,s.y,s.z),e.addLine(n,a,r,r),n.setValue(s.x,i.y,i.z),a.setValue(s.x,s.y,i.z),e.addLine(n,a,r,r),n.setValue(s.x,i.y,s.z),a.setValue(s.x,s.y,s.z),e.addLine(n,a,r,r),n.setValue(i.x,s.y,i.z),a.setValue(s.x,s.y,i.z),e.addLine(n,a,r,r),n.setValue(i.x,s.y,i.z),a.setValue(i.x,s.y,s.z),e.addLine(n,a,r,r),n.setValue(s.x,s.y,i.z),a.setValue(s.x,s.y,s.z),e.addLine(n,a,r,r),n.setValue(i.x,s.y,s.z),a.setValue(s.x,s.y,s.z),e.addLine(n,a,r,r)}static _getHierarchyPath(e,t,r){r.length=0;for(var n=t;n!==e;){var a=n._parent;if(!a)return null;r.push(a.getChildIndex(n)),n=a}return r}static _getNodeByHierarchyPath(e,t){for(var r=e,n=t.length-1;n>=0;n--)r=r.getChildAt(t[n]);return r}static _getParentNodeByHierarchyPath(e,t){let r=t.length,n=e;for(let e=0;e<r;e++){if(!n)return null;n=n.parent}return n}static uint8ArrayToArrayBuffer(e){let r,n=e.width,a=e.height;switch(e.colorFormat){case t.RenderTargetFormat.R8G8B8:case t.RenderTargetFormat.R8G8B8A8:r=new Uint8Array(n*a*4);break;case t.RenderTargetFormat.R16G16B16A16:r=new Float32Array(n*a*4);break;default:throw"this function is not surpprt "+e.format.toString()+"format Material"}if(e.getData(0,0,e.width,e.height,r),e.colorFormat===t.RenderTargetFormat.R16G16B16A16){let e=r,t=new Uint8Array(n*a*4);for(let r=0,n=e.length;r<n;r++)t[r]=Math.min(Math.floor(255*e[r]),255);r=t}let i=r;var s;if(t.LayaEnv.isConch);else{var o=new t.HTMLCanvas(!0);o.lock=!0,o.size(n,a);var l=o.getContext("2d"),h=l.createImageData(n,a);h.data.set(new Uint8ClampedArray(i)),l.putImageData(h,0,0),s=o.source.toDataURL(),o.destroy()}return s}static uint8ArrayToArrayBufferAsync(e){let r,n=e.width,a=e.height;switch(e.colorFormat){case t.RenderTargetFormat.R8G8B8:case t.RenderTargetFormat.R8G8B8A8:r=new Uint8Array(n*a*4);break;case t.RenderTargetFormat.R16G16B16A16:r=new Float32Array(n*a*4);break;default:throw"this function is not surpprt "+e.format.toString()+"format Material"}return e.getDataAsync(0,0,e.width,e.height,r).then((()=>{if(e.colorFormat===t.RenderTargetFormat.R16G16B16A16){let e=r,t=new Uint8Array(n*a*4);for(let r=0,n=e.length;r<n;r++)t[r]=Math.min(Math.floor(255*e[r]),255);r=t}let i=r;var s;if(t.LayaEnv.isConch);else{var o=new t.HTMLCanvas(!0);o.lock=!0,o.size(n,a);var l=o.getContext("2d"),h=l.createImageData(n,a);h.data.set(new Uint8ClampedArray(i)),l.putImageData(h,0,0),s=o.source.toDataURL(),o.destroy()}return Promise.resolve(s)}))}}T._tempVector3_0=new t.Vector3,T._tempVector3_1=new t.Vector3,T._tempVector3_2=new t.Vector3,T._tempArray16_0=new Float32Array(16),T._tempArray16_1=new Float32Array(16),T._tempArray16_2=new Float32Array(16),T._tempArray16_3=new Float32Array(16),T._compIdToNode=new Object,T._tempV0=new t.Vector3,T._tempV1=new t.Vector3,window.getRTBase64=T.uint8ArrayToArrayBuffer;const E=new t.Vector3;class x extends t.Resource{static _parse(e){var r=new x,n=new t.Byte(e),a=n.readUTFString();switch(a){case"LAYAANIMATION:03":u.parse(r,n);break;case"LAYAANIMATION:04":case"LAYAANIMATION:COMPRESSION_04":case"LAYAANIMATION:WEIGHT_04":case"LAYAANIMATION:WEIGHT_05":g.parse(r,n,a);break;default:throw"unknown animationClip version."}return r}static load(e,r){t.ILaya.loader.load(e,r,null,t.Loader.ANIMATIONCLIP)}duration(){return this._duration}constructor(){super(),this._duration=0,this._frameRate=0,this._nodes=new p,this.islooping=!1,this._animationEvents=[]}_weightModeHermite(t,r){return 0==(t&e.WeightedMode.Out)&&0==(r&e.WeightedMode.In)}_hermiteInterpolate(e,t,r,n){var a=e.outTangent,i=t.inTangent;if(Number.isFinite(a)&&Number.isFinite(i)){var s=r*r,o=s*r,l=o-2*s+r,h=o-s,d=-2*o+3*s;return(2*o-3*s+1)*e.value+l*a*n+h*i*n+d*t.value}return e.value}_hermiteInterpolateVector3(e,t,r,n,a){var i=e.value,s=e.outTangent,o=t.value,l=t.inTangent,h=r*r,d=h*r,c=2*d-3*h+1,u=d-2*h+r,_=d-h,m=-2*d+3*h,f=s.x,g=l.x;!e.weightedMode||this._weightModeHermite(e.weightedMode.x,t.weightedMode.x)?Number.isFinite(f)&&Number.isFinite(g)?a.x=c*i.x+u*f*n+_*g*n+m*o.x:a.x=i.x:a.x=this._hermiteCurveSplineWeight(e.value.x,e.time,e.outWeight.x,e.outTangent.x,t.value.x,t.time,t.inWeight.x,t.inTangent.x,r),f=s.y,g=l.y,!e.weightedMode||this._weightModeHermite(e.weightedMode.y,t.weightedMode.y)?Number.isFinite(f)&&Number.isFinite(g)?a.y=c*i.y+u*f*n+_*g*n+m*o.y:a.y=i.y:a.y=this._hermiteCurveSplineWeight(e.value.y,e.time,e.outWeight.y,e.outTangent.y,t.value.y,t.time,t.inWeight.y,t.inTangent.y,r),f=s.z,g=l.z,!e.weightedMode||this._weightModeHermite(e.weightedMode.z,t.weightedMode.z)?Number.isFinite(f)&&Number.isFinite(g)?a.z=c*i.z+u*f*n+_*g*n+m*o.z:a.z=i.z:a.z=this._hermiteCurveSplineWeight(e.value.z,e.time,e.outWeight.z,e.outTangent.z,t.value.z,t.time,t.inWeight.z,t.inTangent.z,r)}_hermiteInterpolateQuaternion(e,t,r,n,a){var i=e.value,s=e.outTangent,o=t.value,l=t.inTangent,h=r*r,d=h*r,c=2*d-3*h+1,u=d-2*h+r,_=d-h,m=-2*d+3*h,f=s.x,g=l.x;!e.weightedMode||this._weightModeHermite(e.weightedMode.x,t.weightedMode.x)?Number.isFinite(f)&&Number.isFinite(g)?a.x=c*i.x+u*f*n+_*g*n+m*o.x:a.x=i.x:a.x=this._hermiteCurveSplineWeight(e.value.x,e.time,e.outWeight.x,e.outTangent.x,t.value.x,t.time,t.inWeight.x,t.inTangent.x,r),f=s.y,g=l.y,!e.weightedMode||this._weightModeHermite(e.weightedMode.y,t.weightedMode.y)?Number.isFinite(f)&&Number.isFinite(g)?a.y=c*i.y+u*f*n+_*g*n+m*o.y:a.y=i.y:a.y=this._hermiteCurveSplineWeight(e.value.y,e.time,e.outWeight.y,e.outTangent.y,t.value.y,t.time,t.inWeight.y,t.inTangent.y,r),f=s.z,g=l.z,!e.weightedMode||this._weightModeHermite(e.weightedMode.z,t.weightedMode.z)?Number.isFinite(f)&&Number.isFinite(g)?a.z=c*i.z+u*f*n+_*g*n+m*o.z:a.z=i.z:a.z=this._hermiteCurveSplineWeight(e.value.z,e.time,e.outWeight.z,e.outTangent.z,t.value.z,t.time,t.inWeight.z,t.inTangent.z,r),f=s.w,g=l.w,!e.weightedMode||this._weightModeHermite(e.weightedMode.w,t.weightedMode.w)?Number.isFinite(f)&&Number.isFinite(g)?a.w=c*i.w+u*f*n+_*g*n+m*o.w:a.w=i.w:a.w=this._hermiteCurveSplineWeight(e.value.w,e.time,e.outWeight.w,e.outTangent.w,t.value.w,t.time,t.inWeight.w,t.inTangent.w,r)}_hermiteInterpolateVector4(e,t,r,n,a){var i=e.value,s=e.outTangent,o=t.value,l=t.inTangent,h=r*r,d=h*r,c=2*d-3*h+1,u=d-2*h+r,_=d-h,m=-2*d+3*h,f=s.x,g=l.x;!e.weightedMode||this._weightModeHermite(e.weightedMode.x,t.weightedMode.x)?Number.isFinite(f)&&Number.isFinite(g)?a.x=c*i.x+u*f*n+_*g*n+m*o.x:a.x=i.x:a.x=this._hermiteCurveSplineWeight(e.value.x,e.time,e.outWeight.x,e.outTangent.x,t.value.x,t.time,t.inWeight.x,t.inTangent.x,r),f=s.y,g=l.y,!e.weightedMode||this._weightModeHermite(e.weightedMode.y,t.weightedMode.y)?Number.isFinite(f)&&Number.isFinite(g)?a.y=c*i.y+u*f*n+_*g*n+m*o.y:a.y=i.y:a.y=this._hermiteCurveSplineWeight(e.value.y,e.time,e.outWeight.y,e.outTangent.y,t.value.y,t.time,t.inWeight.y,t.inTangent.y,r),f=s.z,g=l.z,!e.weightedMode||this._weightModeHermite(e.weightedMode.z,t.weightedMode.z)?Number.isFinite(f)&&Number.isFinite(g)?a.z=c*i.z+u*f*n+_*g*n+m*o.z:a.z=i.z:a.z=this._hermiteCurveSplineWeight(e.value.z,e.time,e.outWeight.z,e.outTangent.z,t.value.z,t.time,t.inWeight.z,t.inTangent.z,r),f=s.w,g=l.w,!e.weightedMode||this._weightModeHermite(e.weightedMode.w,t.weightedMode.w)?Number.isFinite(f)&&Number.isFinite(g)?a.w=c*i.w+u*f*n+_*g*n+m*o.w:a.w=i.w:a.w=this._hermiteCurveSplineWeight(e.value.w,e.time,e.outWeight.w,e.outTangent.w,t.value.w,t.time,t.inWeight.w,t.inTangent.w,r)}_hermiteInterpolateVector2(e,t,r,n,a){var i=e.value,s=e.outTangent,o=t.value,l=t.inTangent,h=r*r,d=h*r,c=2*d-3*h+1,u=d-2*h+r,_=d-h,m=-2*d+3*h,f=s.x,g=l.x;!e.weightedMode||this._weightModeHermite(e.weightedMode.x,t.weightedMode.x)?Number.isFinite(f)&&Number.isFinite(g)?a.x=c*i.x+u*f*n+_*g*n+m*o.x:a.x=i.x:a.x=this._hermiteCurveSplineWeight(e.value.x,e.time,e.outWeight.x,e.outTangent.x,t.value.x,t.time,t.inWeight.x,t.inTangent.x,r),f=s.y,g=l.y,!e.weightedMode||this._weightModeHermite(e.weightedMode.y,t.weightedMode.y)?Number.isFinite(f)&&Number.isFinite(g)?a.y=c*i.y+u*f*n+_*g*n+m*o.y:a.y=i.y:a.y=this._hermiteCurveSplineWeight(e.value.y,e.time,e.outWeight.y,e.outTangent.y,t.value.y,t.time,t.inWeight.y,t.inTangent.y,r)}_hermiteCurveSplineWeight(e,t,r,n,a,i,s,o,l){let h=222e-18,d=l,c=e,u=r,_=s,m=i-t,f=a-c;f=Math.max(Math.abs(f),h)*(f<0?-1:1);let g=n,p=o;if(!Number.isFinite(g)||!Number.isFinite(p))return e;g=g*m/f,p=p*m/f;let S=1-_,T=.5,E=0;if(Math.abs(u-.33333334)<1e-4&&Math.abs(_-.33333334)<1e-4)T=d,E=1-T;else for(;;){E=1-T;let e=3*E*E*T*u+3*E*T*T*S+T*T*T-d;if(Math.abs(e)<=2.5*h)break;let t=3*E*E*u+6*E*T*(S-u)+3*T*T*(1-S),r=6*E*(S-2*u)+6*T*(1-2*S+u);T-=(6*e*t*t-3*e*e*r)/(6*t*t*t-6*e*t*r+e*e*(18*u-18*S+6))}return(3*E*E*T*u*g+3*E*T*T*(1-_*p)+T*T*T)*f+c}_curveInterpolate(e,t,r,n){return!e.weightedMode||this._weightModeHermite(e.weightedMode,t.weightedMode)?this._hermiteInterpolate(e,t,r,n):this._hermiteCurveSplineWeight(e.value,e.time,e.outWeight,e.outTangent,t.value,t.time,t.inWeight,t.inTangent,r)}_evaluateClipDatasRealTime(r,n,a,i,s,o,l){for(var h=0,d=r.count;h<d;h++){var c,u=r.getNodeByIndex(h),_=u.type,m=u._keyFrames,f=m.length,g=a[h];if(!l||l.getTransformActive(u.nodePath)){if(s)for(-1!==g&&n<m[g].time&&(g=-1,a[h]=g),c=g+1;c<f&&!(m[c].time>n);)g++,c++,a[h]=g;else for((c=g+1)!==f&&n>m[c].time&&(g=f-1,a[h]=g),c=g+1;g>-1&&!(m[g].time<n);)g--,c--,a[h]=g;var p=c===f;switch(_){case e.KeyFrameValueType.Float:if(-1!==g){var S=m[g];if(p)o[h]=S.value;else{var E,A=m[c],D=A.time-S.time;E=0!==D?(n-S.time)/D:0,o[h]=this._curveInterpolate(S,A,E,D)}}else o[h]=m[0].value;i&&(o[h]=o[h]-m[0].value);break;case e.KeyFrameValueType.Position:case e.KeyFrameValueType.RotationEuler:case e.KeyFrameValueType.Vector3:var R=o[h];if(this._evaluateFrameNodeVector3DatasRealTime(m,g,p,n,R),i){var M=m[0].value;R.x-=M.x,R.y-=M.y,R.z-=M.z}break;case e.KeyFrameValueType.Rotation:var C=o[h];if(this._evaluateFrameNodeQuaternionDatasRealTime(m,g,p,n,C),i){var v=x._tempQuaternion0,y=m[0].value;T.quaternionConjugate(y,v),t.Quaternion.multiply(v,C,C)}break;case e.KeyFrameValueType.Scale:R=o[h],this._evaluateFrameNodeVector3DatasRealTime(m,g,p,n,R),i&&(M=m[0].value,R.x/=M.x,R.y/=M.y,R.z/=M.z);break;case e.KeyFrameValueType.Vector2:var I=o[h];if(this._evaluateFrameNodeVector2DatasRealTime(m,g,p,n,I),i){var L=m[0].value;I.x-=L.x,I.y-=L.y}break;case e.KeyFrameValueType.Vector4:case e.KeyFrameValueType.Color:var B=o[h];if(this._evaluateFrameNodeVector4DatasRealTime(m,g,p,n,B),i){var O=m[0].value;B.x-=O.x,B.y-=O.y,B.z-=O.z,B.w-=O.w}break;default:throw"AnimationClip:unknown node type."}}}}_evaluateFrameNodeVector3DatasRealTime(e,t,r,n,a){if(-1!==t){var i=e[t];if(r){var s=i.value;a.x=s.x,a.y=s.y,a.z=s.z}else{var o,l=e[t+1],h=i.time,d=l.time-h;o=0!==d?(n-h)/d:0,this._hermiteInterpolateVector3(i,l,o,d,a)}}else{var c=e[0].value;a.x=c.x,a.y=c.y,a.z=c.z}}_evaluateFrameNodeVector2DatasRealTime(e,t,r,n,a){if(-1!==t){var i=e[t];if(r){var s=i.value;a.x=s.x,a.y=s.y}else{var o,l=e[t+1],h=i.time,d=l.time-h;o=0!==d?(n-h)/d:0,this._hermiteInterpolateVector2(i,l,o,d,a)}}else{var c=e[0].value;a.x=c.x,a.y=c.y}}_evaluateFrameNodeVector4DatasRealTime(e,t,r,n,a){if(-1!==t){var i=e[t];if(r){var s=i.value;a.x=s.x,a.y=s.y,a.z=s.z}else{var o,l=e[t+1],h=i.time,d=l.time-h;o=0!==d?(n-h)/d:0,this._hermiteInterpolateVector4(i,l,o,d,a)}}else{var c=e[0].value;a.x=c.x,a.y=c.y,a.z=c.z}}_evaluateFrameNodeQuaternionDatasRealTime(e,t,r,n,a){if(-1!==t){var i=e[t];if(r){var s=i.value;a.x=s.x,a.y=s.y,a.z=s.z,a.w=s.w}else{var o,l=e[t+1],h=i.time,d=l.time-h;o=0!==d?(n-h)/d:0,this._hermiteInterpolateQuaternion(i,l,o,d,a)}}else{var c=e[0].value;a.x=c.x,a.y=c.y,a.z=c.z,a.w=c.w}}_binarySearchEventIndex(e){for(var t,r=0,n=this._animationEvents.length-1;r<=n;){t=Math.floor((r+n)/2);var a=this._animationEvents[t].time;if(a==e)return t;a>e?n=t-1:r=t+1}return r}addEvent(e){var t=this._binarySearchEventIndex(e.time);this._animationEvents.splice(t,0,e)}_disposeResource(){this._nodes=null,this._nodesMap=null}}x._tempQuaternion0=new t.Quaternion;class A{}var D,R,M,C,v,y,I,L;e.ShaderDataType=void 0,(D=e.ShaderDataType||(e.ShaderDataType={}))[D.None=0]="None",D[D.Int=1]="Int",D[D.Bool=2]="Bool",D[D.Float=3]="Float",D[D.Vector2=4]="Vector2",D[D.Vector3=5]="Vector3",D[D.Vector4=6]="Vector4",D[D.Color=7]="Color",D[D.Matrix4x4=8]="Matrix4x4",D[D.Texture2D=9]="Texture2D",D[D.Texture3D=10]="Texture3D",D[D.TextureCube=11]="TextureCube",D[D.Buffer=12]="Buffer",D[D.Matrix3x3=13]="Matrix3x3",D[D.Texture2DArray=14]="Texture2DArray";e.StaticFlag=void 0,(R=e.StaticFlag||(e.StaticFlag={}))[R.Normal=1]="Normal",R[R.StaticBatch=2]="StaticBatch";class B extends t.Node{static __init__(){B.WORLDMATRIX=t.Shader3D.propertyNameToID("u_WorldMat"),B.WORLDINVERTFRONT=t.Shader3D.propertyNameToID("u_WroldInvertFront"),B.sprite3DCommandUniformMap=t.LayaGL.renderDeviceFactory.createGlobalUniformMap("Sprite3D"),B.sprite3DCommandUniformMap.addShaderUniform(B.WORLDMATRIX,"u_WorldMat",e.ShaderDataType.Matrix4x4),B.sprite3DCommandUniformMap.addShaderUniform(B.WORLDINVERTFRONT,"u_WroldInvertFront",e.ShaderDataType.Vector4)}static instantiate(e,t=null,r=!0,n=null,a=null){var i=e.clone();t&&t.addChild(i);var s=i.transform;if(r){var o=s.worldMatrix;e.transform.worldMatrix.cloneTo(o),s.worldMatrix=o}else n&&(s.position=n),a&&(s.rotation=a);return i}static load(e,r){t.ILaya.loader.load(e).then((e=>{r&&r.runWith([null==e?void 0:e.create()])}))}get id(){return this._id}get layer(){return this._layer}set layer(e){if(this._layer!==e){if(!(e>=0&&e<=30))throw new Error("Layer value must be 0-30.");this._layer=e,this.event(t.Event.LAYERCHANGE,e)}}get isStatic(){return!!(this._isStatic>>1|0)}set isStatic(r){this._isStatic=r?e.StaticFlag.StaticBatch:e.StaticFlag.Normal,this.event(t.Event.staticMask,this._isStatic)}get transform(){return this._transform}get scene(){return this._scene}constructor(t=null,r=!1){super(),this._isRenderNode=0,this._id=++B._uniqueIDCounter,this._is3D=!0,this._transform=A.Render3DModuleDataFactory.createTransform(this),this._isStatic=r?e.StaticFlag.StaticBatch:e.StaticFlag.Normal,this.layer=0,this.name=t||"New Sprite3D"}_onActive(){super._onActive(),t.Stat.sprite3DCount++}_onInActive(){super._onInActive(),t.Stat.sprite3DCount--}_onAdded(){if(this._parent instanceof B){var e=this._parent;this.transform._setParent(e.transform)}else this.transform._onWorldTransform();super._onAdded()}_onRemoved(){super._onRemoved(),this._parent instanceof B&&this.transform._setParent(null)}onStartListeningToType(e){super.onStartListeningToType(e),e.startsWith("collision")?this._setBit(t.NodeFlags.PROCESS_COLLISIONS,!0):e.startsWith("trigger")&&this._setBit(t.NodeFlags.PROCESS_TRIGGERS,!0)}_parse(e,t){if(void 0!==e.isStatic&&(this.isStatic=e.isStatic),void 0!==e.active&&(this.active=e.active),null!=e.name&&(this.name=e.name),null!=e.tag&&(this.tag=e.tag),void 0!==e.position){var r=this.transform.localPosition;r.fromArray(e.position),this.transform.localPosition=r}if(void 0!==e.rotationEuler){var n=this.transform.localRotationEuler;n.fromArray(e.rotationEuler),this.transform.localRotationEuler=n}if(void 0!==e.rotation){var a=this.transform.localRotation;a.fromArray(e.rotation),this.transform.localRotation=a}if(void 0!==e.scale){var i=this.transform.localScale;i.fromArray(e.scale),this.transform.localScale=i}null!=e.layer&&(this.layer=e.layer)}_cloneTo(e,t,r){if(this._destroyed)throw new Error("Sprite3D: Can't be cloned if the Sprite3D has destroyed.");var n=e,a=this._transform,i=n._transform;n.name=this.name,n.tag=this.tag,n._destroyed=this._destroyed,n.active=this.active,i.localPosition=a.localPosition,i.localRotation=a.localRotation,i.localScale=a.localScale,n._isStatic=this._isStatic,n.layer=this.layer,super._cloneTo(n,t,r)}static _createSprite3DInstance(e){for(var t=e._create(),r=e._children,n=0,a=r.length;n<a;n++){var i=B._createSprite3DInstance(r[n]);t.addChild(i)}return t}static _parseSprite3DInstance(e,t,r,n){for(var a=r._children,i=n._children,s=0,o=a.length;s<o;s++)B._parseSprite3DInstance(e,t,a[s],i[s]);r._cloneTo(n,e,t)}clone(){var e=B._createSprite3DInstance(this);return B._parseSprite3DInstance(this,e,this,e),e}destroy(e=!0){this._destroyed||(super.destroy(e),this._transform=null)}_create(){return new B}}B._uniqueIDCounter=0;class O{constructor(e=new t.Vector3,r=0){this.normal=e,this.distance=r}static createPlaneBy3P(e,t,r,n){var a=t.x-e.x,i=t.y-e.y,s=t.z-e.z,o=r.x-e.x,l=r.y-e.y,h=r.z-e.z,d=i*h-s*l,c=s*o-a*h,u=a*l-i*o,_=1/Math.sqrt(d*d+c*c+u*u),m=d*_,f=c*_,g=u*_,p=n.normal;p.x=m,p.y=f,p.z=g,n.normal=p.normalize(),n.distance=-(m*e.x+f*e.y+g*e.z)}normalize(){var e=this.normal.x,t=this.normal.y,r=this.normal.z,n=1/Math.sqrt(e*e+t*t+r*r);this.normal.x=e*n,this.normal.y=t*n,this.normal.z=r*n,this.distance*=n}cloneTo(e){var t=e;this.normal.cloneTo(t.normal),t.distance=this.distance}clone(){var e=new O;return this.cloneTo(e),e}}O.PlaneIntersectionType_Back=0,O.PlaneIntersectionType_Front=1,O.PlaneIntersectionType_Intersecting=2;class w{constructor(e,t){this.origin=e,this.direction=t}at(e,r){t.Vector3.scale(this.direction,e,r),t.Vector3.add(this.origin,r,r)}}class P{}P.Disjoint=0,P.Contains=1,P.Intersects=2;class N{constructor(){}static distancePlaneToPoint(e,r){return t.Vector3.dot(e.normal,r)+e.distance}static distanceBoxToPoint(e,t){var r=e.min,n=r.x,a=r.y,i=r.z,s=e.max,o=s.x,l=s.y,h=s.z,d=t.x,c=t.y,u=t.z,_=0;return d<n&&(_+=(n-d)*(n-d)),d>o&&(_+=(o-d)*(o-d)),c<a&&(_+=(a-c)*(a-c)),c>l&&(_+=(l-c)*(l-c)),u<i&&(_+=(i-u)*(i-u)),u>h&&(_+=(h-u)*(h-u)),Math.sqrt(_)}static distanceBoxToBox(e,t){var r,n=e.min,a=n.x,i=n.y,s=n.z,o=e.max,l=o.x,h=o.y,d=o.z,c=t.min,u=c.x,_=c.y,m=c.z,f=t.max,g=f.x,p=f.y,S=f.z,T=0;return a>g?T+=(r=a-g)*r:u>l&&(T+=(r=u-l)*r),i>p?T+=(r=i-p)*r:_>h&&(T+=(r=_-h)*r),s>S?T+=(r=s-S)*r:m>d&&(T+=(r=m-d)*r),Math.sqrt(T)}static distanceSphereToPoint(e,r){var n=Math.sqrt(t.Vector3.distanceSquared(e.center,r));return n-=e.radius,Math.max(n,0)}static distanceSphereToSphere(e,r){var n=Math.sqrt(t.Vector3.distanceSquared(e.center,r.center));return n-=e.radius+r.radius,Math.max(n,0)}static intersectsRayAndTriangleRD(e,r,n,a,i){var s=e.origin,o=s.x,l=s.y,h=s.z,d=e.direction,c=d.x,u=d.y,_=d.z,m=r.x,f=r.y,g=r.z,p=n.x,S=n.y,T=n.z,E=a.x,x=a.y,A=a.z,D=N._tempV30.x,R=N._tempV30.y,M=N._tempV30.z;D=p-m,R=S-f,M=T-g;var C=N._tempV31.x,v=N._tempV31.y,y=N._tempV31.z;C=E-m,v=x-f,y=A-g;var I=N._tempV32.x,L=N._tempV32.y,B=N._tempV32.z,O=D*(I=u*y-_*v)+R*(L=_*C-c*y)+M*(B=c*v-u*C);if(t.MathUtils3D.isZero(O))return!1;var w=1/O,P=N._tempV33.x,V=N._tempV33.y,b=N._tempV33.z,F=(P=o-m)*I+(V=l-f)*L+(b=h-g)*B;if((F*=w)<0||F>1)return!1;var U=N._tempV34.x,G=N._tempV34.y,H=N._tempV34.z,z=c*(U=V*M-b*R)+u*(G=b*D-P*M)+_*(H=P*R-V*D);if((z*=w)<0||F+z>1)return!1;var k=C*U+v*G+y*H;return!((k*=w)<0)}static intersectsRayAndTriangleRP(e,r,n,a,i){var s;return N.intersectsRayAndTriangleRD(e,r,n,a,s)?(t.Vector3.scale(e.direction,s,N._tempV30),t.Vector3.add(e.origin,N._tempV30,i),!0):(t.Vector3.ZERO.cloneTo(i),!1)}static intersectsRayAndPoint(e,r){t.Vector3.subtract(e.origin,r,N._tempV30);var n=t.Vector3.dot(N._tempV30,e.direction),a=t.Vector3.dot(N._tempV30,N._tempV30)-t.MathUtils3D.zeroTolerance;return!(a>0&&n>0)&&!(n*n-a<0)}static intersectsRayAndRay(e,r,n){var a=e.origin,i=a.x,s=a.y,o=a.z,l=e.direction,h=l.x,d=l.y,c=l.z,u=r.origin,_=u.x,m=u.y,f=u.z,g=r.direction,p=g.x,S=g.y,T=g.z;t.Vector3.cross(l,g,N._tempV30);var E=N._tempV30,x=t.Vector3.scalarLength(N._tempV30);if(t.MathUtils3D.isZero(x)&&t.MathUtils3D.nearEqual(_,i)&&t.MathUtils3D.nearEqual(m,s)&&t.MathUtils3D.nearEqual(f,o))return t.Vector3.ZERO.cloneTo(n),!0;x*=x;var A=_-i,D=m-s,R=f-o,M=p,C=S,v=T,y=E.x,I=E.y,L=E.z,B=A*C*L+D*v*y+R*M*I-A*v*I-D*M*L-R*C*y;M=h,C=d,v=c;var O=B/x;t.Vector3.scale(l,O,N._tempV30),t.Vector3.scale(g,O,N._tempV31),t.Vector3.add(a,N._tempV30,N._tempV32),t.Vector3.add(u,N._tempV31,N._tempV33);var w=N._tempV32,P=N._tempV33;return t.MathUtils3D.nearEqual(P.x,w.x)&&t.MathUtils3D.nearEqual(P.y,w.y)&&t.MathUtils3D.nearEqual(P.z,w.z)?(n=N._tempV32,!0):(t.Vector3.ZERO.cloneTo(n),!1)}static intersectsPlaneAndTriangle(e,t,r,n){var a=N.intersectsPlaneAndPoint(e,t),i=N.intersectsPlaneAndPoint(e,r),s=N.intersectsPlaneAndPoint(e,n);return a==O.PlaneIntersectionType_Front&&i==O.PlaneIntersectionType_Front&&s==O.PlaneIntersectionType_Front?O.PlaneIntersectionType_Front:a==O.PlaneIntersectionType_Back&&i==O.PlaneIntersectionType_Back&&s==O.PlaneIntersectionType_Back?O.PlaneIntersectionType_Back:O.PlaneIntersectionType_Intersecting}static intersectsRayAndPlaneRD(e,r){var n=r.normal,a=t.Vector3.dot(n,e.direction);if(Math.abs(a)<t.MathUtils3D.zeroTolerance)return-1;var i=t.Vector3.dot(n,e.origin),s=(-r.distance-i)/a;if(s<0){if(s<-t.MathUtils3D.zeroTolerance)return-1;s=0}return s}static intersectsRayAndPlaneRP(e,r,n){var a=N.intersectsRayAndPlaneRD(e,r);if(-1==a)return n.setValue(0,0,0),!1;var i=N._tempV30;return t.Vector3.scale(e.direction,a,i),t.Vector3.add(e.origin,i,n),!0}static intersectsRayAndBoxRD(e,r){var n=e.origin,a=n.x,i=n.y,s=n.z,o=e.direction,l=o.x,h=o.y,d=o.z,c=r.min,u=c.x,_=c.y,m=c.z,f=r.max,g=f.x,p=f.y,S=f.z,T=0,E=t.MathUtils3D.MaxValue;if(t.MathUtils3D.isZero(l)){if(a<u||a>g)return-1}else{var x=1/l,A=(u-a)*x,D=(g-a)*x;if(A>D){var R=A;A=D,D=R}if((T=Math.max(A,T))>(E=Math.min(D,E)))return-1}if(t.MathUtils3D.isZero(h)){if(i<_||i>p)return-1}else{var M=1/h,C=(_-i)*M,v=(p-i)*M;if(C>v){var y=C;C=v,v=y}if((T=Math.max(C,T))>(E=Math.min(v,E)))return-1}if(t.MathUtils3D.isZero(d)){if(s<m||s>S)return-1}else{var I=1/d,L=(m-s)*I,B=(S-s)*I;if(L>B){var O=L;L=B,B=O}if((T=Math.max(L,T))>(E=Math.min(B,E)))return-1}return T}static intersectsRayAndBoxRP(e,r,n){var a=N.intersectsRayAndBoxRD(e,r);return-1===a?(t.Vector3.ZERO.cloneTo(n),a):(t.Vector3.scale(e.direction,a,N._tempV30),t.Vector3.add(e.origin,N._tempV30,N._tempV31),N._tempV31.cloneTo(n),a)}static intersectsRayAndSphereRD(e,r){var n=r.radius;t.Vector3.subtract(e.origin,r.center,N._tempV30);var a=t.Vector3.dot(N._tempV30,e.direction),i=t.Vector3.dot(N._tempV30,N._tempV30)-n*n;if(i>0&&a>0)return-1;var s=a*a-i;if(s<0)return-1;var o=-a-Math.sqrt(s);return o<0&&(o=0),o}static intersectsRayAndSphereRP(e,r,n){var a=N.intersectsRayAndSphereRD(e,r);return-1===a?(t.Vector3.ZERO.cloneTo(n),a):(t.Vector3.scale(e.direction,a,N._tempV30),t.Vector3.add(e.origin,N._tempV30,N._tempV31),N._tempV31.cloneTo(n),a)}static intersectsSphereAndTriangle(e,r,n,a){var i=e.center,s=e.radius;return N.closestPointPointTriangle(i,r,n,a,N._tempV30),t.Vector3.subtract(N._tempV30,i,N._tempV31),t.Vector3.dot(N._tempV31,N._tempV31)<=s*s}static intersectsPlaneAndPoint(e,r){var n=t.Vector3.dot(e.normal,r)+e.distance;return n>0?O.PlaneIntersectionType_Front:n<0?O.PlaneIntersectionType_Back:O.PlaneIntersectionType_Intersecting}static intersectsPlaneAndPlane(e,r){t.Vector3.cross(e.normal,r.normal,N._tempV30);var n=t.Vector3.dot(N._tempV30,N._tempV30);return!t.MathUtils3D.isZero(n)}static intersectsPlaneAndPlaneRL(e,r,n){var a=e.normal,i=r.normal;t.Vector3.cross(a,i,N._tempV34);var s=t.Vector3.dot(N._tempV34,N._tempV34);return!t.MathUtils3D.isZero(s)&&(t.Vector3.scale(i,e.distance,N._tempV30),t.Vector3.scale(a,r.distance,N._tempV31),t.Vector3.subtract(N._tempV30,N._tempV31,N._tempV32),t.Vector3.cross(N._tempV32,N._tempV34,N._tempV33),t.Vector3.normalize(N._tempV34,N._tempV34),new w(N._tempV33,N._tempV34),!0)}static intersectsPlaneAndBox(e,r){var n=e.distance,a=e.normal,i=a.x,s=a.y,o=a.z,l=r.min,h=l.x,d=l.y,c=l.z,u=r.max,_=u.x,m=u.y,f=u.z;N._tempV30.x=i>0?h:_,N._tempV30.y=s>0?d:m,N._tempV30.z=o>0?c:f,N._tempV31.x=i>0?_:h,N._tempV31.y=s>0?m:d,N._tempV31.z=o>0?f:c;var g=t.Vector3.dot(a,N._tempV30);return g+n>0?O.PlaneIntersectionType_Front:(g=t.Vector3.dot(a,N._tempV31))+n<0?O.PlaneIntersectionType_Back:O.PlaneIntersectionType_Intersecting}static intersectsPlaneAndSphere(e,r){var n=r.radius,a=t.Vector3.dot(e.normal,r.center)+e.distance;return a>n?O.PlaneIntersectionType_Front:a<-n?O.PlaneIntersectionType_Back:O.PlaneIntersectionType_Intersecting}static intersectsBoxAndBox(e,t){var r=e.min,n=e.max,a=t.min,i=t.max;return!(r.x>i.x||a.x>n.x)&&(!(r.y>i.y||a.y>n.y)&&!(r.z>i.z||a.z>n.z))}static intersectsBoxAndSphere(e,r){var n=r.center,a=r.radius,i=N._tempV30;return t.Vector3.Clamp(n,e.min,e.max,i),t.Vector3.distanceSquared(n,i)<=a*a}static intersectsSphereAndSphere(e,r){var n=e.radius+r.radius;return t.Vector3.distanceSquared(e.center,r.center)<=n*n}static boxContainsPoint(e,t){var r=e.min,n=e.max;return r.x<=t.x&&n.x>=t.x&&r.y<=t.y&&n.y>=t.y&&r.z<=t.z&&n.z>=t.z?P.Contains:P.Disjoint}static boxContainsBox(e,t){var r=e.min,n=r.x,a=r.y,i=r.z,s=e.max,o=s.x,l=s.y,h=s.z,d=t.min,c=d.x,u=d.y,_=d.z,m=t.max,f=m.x,g=m.y,p=m.z;return o<c||n>f||l<u||a>g||h<_||i>p?P.Disjoint:n<=c&&f<=o&&a<=u&&g<=l&&i<=_&&p<=h?P.Contains:P.Intersects}static boxContainsSphere(e,r){var n=e.min,a=n.x,i=n.y,s=n.z,o=e.max,l=o.x,h=o.y,d=o.z,c=r.center,u=c.x,_=c.y,m=c.z,f=r.radius;return t.Vector3.Clamp(c,n,o,N._tempV30),t.Vector3.distanceSquared(c,N._tempV30)>f*f?P.Disjoint:a+f<=u&&u<=l-f&&l-a>f&&i+f<=_&&_<=h-f&&h-i>f&&s+f<=m&&m<=d-f&&d-s>f?P.Contains:P.Intersects}static sphereContainsPoint(e,r){return t.Vector3.distanceSquared(r,e.center)<=e.radius*e.radius?P.Contains:P.Disjoint}static sphereContainsTriangle(e,t,r,n){var a=N.sphereContainsPoint(e,t),i=N.sphereContainsPoint(e,r),s=N.sphereContainsPoint(e,n);return a==P.Contains&&i==P.Contains&&s==P.Contains?P.Contains:N.intersectsSphereAndTriangle(e,t,r,n)?P.Intersects:P.Disjoint}static sphereContainsBox(e,r){var n=e.center;n.x,n.y,n.z;var a=e.radius,i=r.min;i.x,i.y,i.z;var s=r.max;s.x,s.y,s.z;var o=N._tempV30;if(o.x,o.y,o.z,!N.intersectsBoxAndSphere(r,e))return P.Disjoint;var l=a*a;return t.Vector3.scalarLengthSquared(N._tempV30)>l||t.Vector3.scalarLengthSquared(N._tempV30)>l||t.Vector3.scalarLengthSquared(N._tempV30)>l||t.Vector3.scalarLengthSquared(N._tempV30)>l||t.Vector3.scalarLengthSquared(N._tempV30)>l||t.Vector3.scalarLengthSquared(N._tempV30)>l||t.Vector3.scalarLengthSquared(N._tempV30)>l||t.Vector3.scalarLengthSquared(N._tempV30)>l?P.Intersects:P.Contains}static sphereContainsSphere(e,r){var n=e.radius,a=r.radius,i=t.Vector3.distance(e.center,r.center);return n+a<i?P.Disjoint:n-a<i?P.Intersects:P.Contains}static closestPointPointTriangle(e,r,n,a,i){t.Vector3.subtract(n,r,N._tempV30),t.Vector3.subtract(a,r,N._tempV31),t.Vector3.subtract(e,r,N._tempV32),t.Vector3.subtract(e,n,N._tempV33),t.Vector3.subtract(e,a,N._tempV34);var s=t.Vector3.dot(N._tempV30,N._tempV32),o=t.Vector3.dot(N._tempV31,N._tempV32),l=t.Vector3.dot(N._tempV30,N._tempV33),h=t.Vector3.dot(N._tempV31,N._tempV33),d=t.Vector3.dot(N._tempV30,N._tempV34),c=t.Vector3.dot(N._tempV31,N._tempV34);if(s<=0&&o<=0)r.cloneTo(i);else if(l>=0&&h<=l)n.cloneTo(i);else{var u=s*h-l*o;if(u<=0&&s>=0&&l<=0){var _=s/(s-l);return t.Vector3.scale(N._tempV30,_,i),void t.Vector3.add(r,i,i)}if(c>=0&&d<=c)a.cloneTo(i);else{var m=d*o-s*c;if(m<=0&&o>=0&&c<=0){var f=o/(o-c);return t.Vector3.scale(N._tempV31,f,i),void t.Vector3.add(r,i,i)}var g=l*c-d*h;if(g<=0&&h-l>=0&&d-c>=0){var p=(h-l)/(h-l+(d-c));return t.Vector3.subtract(a,n,i),t.Vector3.scale(i,p,i),void t.Vector3.add(n,i,i)}var S=1/(g+m+u),T=m*S,E=u*S;t.Vector3.scale(N._tempV30,T,N._tempV35),t.Vector3.scale(N._tempV31,E,N._tempV36),t.Vector3.add(N._tempV35,N._tempV36,i),t.Vector3.add(r,i,i)}}}static closestPointPlanePoint(e,r,n){var a=e.normal,i=t.Vector3.dot(a,r)-e.distance;t.Vector3.scale(a,i,N._tempV30),t.Vector3.subtract(r,N._tempV30,n)}static closestPointBoxPoint(e,r,n){t.Vector3.max(r,e.min,N._tempV30),t.Vector3.min(N._tempV30,e.max,n)}static closestPointSpherePoint(e,r,n){var a=e.center;t.Vector3.subtract(r,a,n),t.Vector3.normalize(n,n),t.Vector3.scale(n,e.radius,n),t.Vector3.add(n,a,n)}static closestPointSphereSphere(e,r,n){var a=e.center;t.Vector3.subtract(r.center,a,n),t.Vector3.normalize(n,n),t.Vector3.scale(n,e.radius,n),t.Vector3.add(n,a,n)}}N._tempV30=new t.Vector3,N._tempV31=new t.Vector3,N._tempV32=new t.Vector3,N._tempV33=new t.Vector3,N._tempV34=new t.Vector3,N._tempV35=new t.Vector3,N._tempV36=new t.Vector3,e.FrustumCorner=void 0,(M=e.FrustumCorner||(e.FrustumCorner={}))[M.FarBottomLeft=0]="FarBottomLeft",M[M.FarTopLeft=1]="FarTopLeft",M[M.FarTopRight=2]="FarTopRight",M[M.FarBottomRight=3]="FarBottomRight",M[M.nearBottomLeft=4]="nearBottomLeft",M[M.nearTopLeft=5]="nearTopLeft",M[M.nearTopRight=6]="nearTopRight",M[M.nearBottomRight=7]="nearBottomRight",M[M.unknown=8]="unknown";class V{static getPlanesFromMatrix(e,t,r,n,a,i,s){var o=e.elements,l=o[0],h=o[1],d=o[2],c=o[3],u=o[4],_=o[5],m=o[6],f=o[7],g=o[8],p=o[9],S=o[10],T=o[11],E=o[12],x=o[13],A=o[14],D=o[15],R=t.normal;R.x=d,R.y=m,R.z=S,t.distance=A,t.normal=R,t.normalize();var M=r.normal;M.x=c-d,M.y=f-m,M.z=T-S,r.distance=D-A,r.normal=M,r.normalize();var C=n.normal;C.x=c+l,C.y=f+u,C.z=T+g,n.distance=D+E,n.normal=C,n.normalize();var v=a.normal;v.x=c-l,v.y=f-u,v.z=T-g,a.distance=D-E,a.normal=v,a.normalize();var y=i.normal;y.x=c-h,y.y=f-_,y.z=T-p,i.distance=D-x,i.normal=y,i.normalize();var I=s.normal;I.x=c+h,I.y=f+_,I.z=T+p,s.distance=D+x,s.normal=I,s.normalize()}constructor(e){this._matrix=e,this.initBoundingPlane()}initBoundingPlane(){this._near=new O,this._far=new O,this._left=new O,this._right=new O,this._top=new O,this._bottom=new O,V.getPlanesFromMatrix(this._matrix,this._near,this._far,this._left,this._right,this._top,this._bottom)}get matrix(){return this._matrix}set matrix(e){e.cloneTo(this._matrix),V.getPlanesFromMatrix(this._matrix,this._near,this._far,this._left,this._right,this._top,this._bottom)}get near(){return this._near}get far(){return this._far}get left(){return this._left}get right(){return this._right}get top(){return this._top}get bottom(){return this._bottom}equalsBoundFrustum(e){return this._matrix.equalsOtherMatrix(e.matrix)}equalsObj(e){if(e instanceof V){var t=e;return this.equalsBoundFrustum(t)}return!1}getPlane(e){switch(e){case 0:return this._near;case 1:return this._far;case 2:return this._left;case 3:return this._right;case 4:return this._top;case 5:return this._bottom;default:return null}}static get3PlaneInterPoint(e,r,n,a){var i=e.normal,s=r.normal,o=n.normal;t.Vector3.cross(s,o,V._tempV30),t.Vector3.cross(o,i,V._tempV31),t.Vector3.cross(i,s,V._tempV32);var l=t.Vector3.dot(i,V._tempV30),h=t.Vector3.dot(s,V._tempV31),d=t.Vector3.dot(o,V._tempV32);t.Vector3.scale(V._tempV30,-e.distance/l,V._tempV33),t.Vector3.scale(V._tempV31,-r.distance/h,V._tempV34),t.Vector3.scale(V._tempV32,-n.distance/d,V._tempV35),t.Vector3.add(V._tempV33,V._tempV34,V._tempV36),t.Vector3.add(V._tempV35,V._tempV36,a)}getCorners(t){V.get3PlaneInterPoint(this._near,this._bottom,this._right,t[e.FrustumCorner.nearBottomRight]),V.get3PlaneInterPoint(this._near,this._top,this._right,t[e.FrustumCorner.nearTopRight]),V.get3PlaneInterPoint(this._near,this._top,this._left,t[e.FrustumCorner.nearTopLeft]),V.get3PlaneInterPoint(this._near,this._bottom,this._left,t[e.FrustumCorner.nearBottomLeft]),V.get3PlaneInterPoint(this._far,this._bottom,this._right,t[e.FrustumCorner.FarBottomRight]),V.get3PlaneInterPoint(this._far,this._top,this._right,t[e.FrustumCorner.FarTopRight]),V.get3PlaneInterPoint(this._far,this._top,this._left,t[e.FrustumCorner.FarTopLeft]),V.get3PlaneInterPoint(this._far,this._bottom,this._left,t[e.FrustumCorner.FarBottomLeft])}containsPoint(e){for(var t=O.PlaneIntersectionType_Front,r=O.PlaneIntersectionType_Front,n=0;n<6;n++){switch(n){case 0:r=N.intersectsPlaneAndPoint(this._near,e);break;case 1:r=N.intersectsPlaneAndPoint(this._far,e);break;case 2:r=N.intersectsPlaneAndPoint(this._left,e);break;case 3:r=N.intersectsPlaneAndPoint(this._right,e);break;case 4:r=N.intersectsPlaneAndPoint(this._top,e);break;case 5:r=N.intersectsPlaneAndPoint(this._bottom,e)}switch(r){case O.PlaneIntersectionType_Back:return P.Disjoint;case O.PlaneIntersectionType_Intersecting:t=O.PlaneIntersectionType_Intersecting}}return t===O.PlaneIntersectionType_Intersecting?P.Intersects:P.Contains}intersects(e){var t=e.min,r=e.max,n=t.x,a=t.y,i=t.z,s=r.x,o=r.y,l=r.z,h=this._near.normal;if(this._near.distance+h.x*(h.x<0?n:s)+h.y*(h.y<0?a:o)+h.z*(h.z<0?i:l)<0)return!1;var d=this._left.normal;if(this._left.distance+d.x*(d.x<0?n:s)+d.y*(d.y<0?a:o)+d.z*(d.z<0?i:l)<0)return!1;var c=this._right.normal;if(this._right.distance+c.x*(c.x<0?n:s)+c.y*(c.y<0?a:o)+c.z*(c.z<0?i:l)<0)return!1;var u=this._bottom.normal;if(this._bottom.distance+u.x*(u.x<0?n:s)+u.y*(u.y<0?a:o)+u.z*(u.z<0?i:l)<0)return!1;var _=this._top.normal;if(this._top.distance+_.x*(_.x<0?n:s)+_.y*(_.y<0?a:o)+_.z*(_.z<0?i:l)<0)return!1;var m=this._far.normal;return!(this._far.distance+m.x*(m.x<0?n:s)+m.y*(m.y<0?a:o)+m.z*(m.z<0?i:l)<0)}containsBoundBox(e){for(var t=V._tempV30,r=V._tempV31,n=e.min,a=e.max,i=P.Contains,s=0;s<6;s++){var o=this.getPlane(s),l=o.normal;if(l.x>=0?(t.x=a.x,r.x=n.x):(t.x=n.x,r.x=a.x),l.y>=0?(t.y=a.y,r.y=n.y):(t.y=n.y,r.y=a.y),l.z>=0?(t.z=a.z,r.z=n.z):(t.z=n.z,r.z=a.z),N.intersectsPlaneAndPoint(o,t)===O.PlaneIntersectionType_Back)return P.Disjoint;N.intersectsPlaneAndPoint(o,r)===O.PlaneIntersectionType_Back&&(i=P.Intersects)}return i}containsBoundSphere(e){for(var t=O.PlaneIntersectionType_Front,r=O.PlaneIntersectionType_Front,n=0;n<6;n++){switch(n){case 0:r=N.intersectsPlaneAndSphere(this._near,e);break;case 1:r=N.intersectsPlaneAndSphere(this._far,e);break;case 2:r=N.intersectsPlaneAndSphere(this._left,e);break;case 3:r=N.intersectsPlaneAndSphere(this._right,e);break;case 4:r=N.intersectsPlaneAndSphere(this._top,e);break;case 5:r=N.intersectsPlaneAndSphere(this._bottom,e)}switch(r){case O.PlaneIntersectionType_Back:return P.Disjoint;case O.PlaneIntersectionType_Intersecting:t=O.PlaneIntersectionType_Intersecting}}return t===O.PlaneIntersectionType_Intersecting?P.Intersects:P.Contains}cloneTo(e){e.matrix=this.matrix}clone(){let e=new V(new t.Matrix4x4);return this.cloneTo(e),e}}V._tempV30=new t.Vector3,V._tempV31=new t.Vector3,V._tempV32=new t.Vector3,V._tempV33=new t.Vector3,V._tempV34=new t.Vector3,V._tempV35=new t.Vector3,V._tempV36=new t.Vector3;class b{constructor(){}static calculateCursorRay(e,r,n,a,i,s){var o=e.x,l=e.y,h=b._tempVector30,d=h;d.x=o,d.y=l,d.z=r.minDepth;var c=b._tempVector31,u=c;u.x=o,u.y=l,u.z=r.maxDepth;var _=s.origin,m=b._tempVector32;r.unprojectFromWVP(h,n,a,i,_),r.unprojectFromWVP(c,n,a,i,m);var f=s.direction;f.x=m.x-_.x,f.y=m.y-_.y,f.z=m.z-_.z,t.Vector3.normalize(s.direction,s.direction)}static rayIntersectsTriangle(e,r,n,a){var i=b._tempVector30,s=b._tempVector31;t.Vector3.subtract(n,r,i),t.Vector3.subtract(a,r,s);var o,l=b._tempVector32;if(t.Vector3.cross(e.direction,s,l),(o=t.Vector3.dot(i,l))>-Number.MIN_VALUE&&o<Number.MIN_VALUE)return Number.NaN;var h,d=1/o,c=b._tempVector33;if(t.Vector3.subtract(e.origin,r,c),h=t.Vector3.dot(c,l),(h*=d)<0||h>1)return Number.NaN;var u,_,m=b._tempVector34;return t.Vector3.cross(c,i,m),u=t.Vector3.dot(e.direction,m),(u*=d)<0||h+u>1?Number.NaN:(_=t.Vector3.dot(s,m),(_*=d)<0?Number.NaN:_)}static rayPlaneIntersection(e,r){let n=new t.Vector3,a=t.Vector3.dot(e.direction.normalize(),r.normal.normalize());if(0==a)return null;let i=(-r.distance-t.Vector3.dot(e.origin,r.normal))/a;return i<0?null:(e.at(i,n),n)}}b._tempVector30=new t.Vector3,b._tempVector31=new t.Vector3,b._tempVector32=new t.Vector3,b._tempVector33=new t.Vector3,b._tempVector34=new t.Vector3;class F extends t.EventDispatcher{get isDefaultMatrix(){return this._getTransformFlag(F.TRANSFORM_LOCALMATRIX)&&this.localMatrix,this._isDefaultMatrix}get _isFrontFaceInvert(){if(this._getTransformFlag(F.TRANSFORM_WORLDSCALE)){var e=this.getWorldLossyScale(),t=e.x<0;e.y<0&&(t=!t),e.z<0&&(t=!t),this._faceInvert=t,this._frontFaceValue=this._faceInvert?-1:1}return this._faceInvert}getFrontFaceValue(){return this._getTransformFlag(F.TRANSFORM_WORLDSCALE)&&this._isFrontFaceInvert,this._frontFaceValue}get owner(){return this._owner}get worldNeedUpdate(){return this._getTransformFlag(F.TRANSFORM_WORLDMATRIX)}get localPositionX(){return this._localPosition.x}set localPositionX(e){this._localPosition.x=e,this.localPosition=this._localPosition}get localPositionY(){return this._localPosition.y}set localPositionY(e){this._localPosition.y=e,this.localPosition=this._localPosition}get localPositionZ(){return this._localPosition.z}set localPositionZ(e){this._localPosition.z=e,this.localPosition=this._localPosition}get localPosition(){return this._localPosition}set localPosition(e){this._localPosition!==e&&e.cloneTo(this._localPosition),this._setTransformFlag(F.TRANSFORM_LOCALMATRIX,!0),this._onWorldPositionTransform()}get localRotationX(){return this.localRotation.x}set localRotationX(e){let t=this.localRotation;t.x=e,this.localRotation=t}get localRotationY(){return this.localRotation.y}set localRotationY(e){let t=this.localRotation;t.y=e,this.localRotation=t}get localRotationZ(){return this.localRotation.z}set localRotationZ(e){let t=this.localRotation;t.z=e,this.localRotation=t}get localRotationW(){return this.localRotation.w}set localRotationW(e){let t=this.localRotation;t.w=e,this.localRotation=t}get localRotation(){if(this._getTransformFlag(F.TRANSFORM_LOCALQUATERNION)){var e=this._localRotationEuler;t.Quaternion.createFromYawPitchRoll(e.y/F._angleToRandin,e.x/F._angleToRandin,e.z/F._angleToRandin,this._localRotation),this._setTransformFlag(F.TRANSFORM_LOCALQUATERNION,!1)}return this._localRotation}set localRotation(e){this._localRotation!==e&&e.cloneTo(this._localRotation),this._localRotation.normalize(this._localRotation),this._setTransformFlag(F.TRANSFORM_LOCALEULER|F.TRANSFORM_LOCALMATRIX,!0),this._setTransformFlag(F.TRANSFORM_LOCALQUATERNION,!1),this._onWorldRotationTransform()}get localScaleX(){return this._localScale.x}set localScaleX(e){this._localScale.x=e,this.localScale=this._localScale}get localScaleY(){return this._localScale.y}set localScaleY(e){this._localScale.y=e,this.localScale=this._localScale}get localScaleZ(){return this._localScale.z}set localScaleZ(e){this._localScale.z=e,this.localScale=this._localScale}get localScale(){return this._localScale}set localScale(e){this._localScale!==e&&e.cloneTo(this._localScale),this._setTransformFlag(F.TRANSFORM_LOCALMATRIX,!0),this._onWorldScaleTransform()}get localRotationEulerX(){return this.localRotationEuler.x}set localRotationEulerX(e){let t=this.localRotationEuler;t.x=e,this.localRotationEuler=t}get localRotationEulerY(){return this.localRotationEuler.y}set localRotationEulerY(e){let t=this.localRotationEuler;t.y=e,this.localRotationEuler=t}get localRotationEulerZ(){return this.localRotationEuler.z}set localRotationEulerZ(e){let t=this.localRotationEuler;t.z=e,this.localRotationEuler=t}get localRotationEuler(){if(this._getTransformFlag(F.TRANSFORM_LOCALEULER)){this._localRotation.getYawPitchRoll(F._tempVector30);var e=F._tempVector30,t=this._localRotationEuler;t.x=e.y*F._angleToRandin,t.y=e.x*F._angleToRandin,t.z=e.z*F._angleToRandin,this._setTransformFlag(F.TRANSFORM_LOCALEULER,!1)}return this._localRotationEuler}set localRotationEuler(e){this._localRotationEuler!==e&&e.cloneTo(this._localRotationEuler),this._setTransformFlag(F.TRANSFORM_LOCALEULER,!1),this._setTransformFlag(F.TRANSFORM_LOCALQUATERNION|F.TRANSFORM_LOCALMATRIX,!0),this._onWorldRotationTransform()}get localMatrix(){return this._getTransformFlag(F.TRANSFORM_LOCALMATRIX)&&(t.Matrix4x4.createAffineTransformation(this._localPosition,this.localRotation,this._localScale,this._localMatrix),this._isDefaultMatrix=this._localMatrix.isIdentity(),this._setTransformFlag(F.TRANSFORM_LOCALMATRIX,!1)),this._localMatrix}set localMatrix(e){this._localMatrix!==e&&e.cloneTo(this._localMatrix),this._isDefaultMatrix=this._localMatrix.isIdentity(),this._localMatrix.decomposeTransRotScale(this._localPosition,this._localRotation,this._localScale),this._setTransformFlag(F.TRANSFORM_LOCALEULER,!0),this._setTransformFlag(F.TRANSFORM_LOCALMATRIX,!1),this._onWorldTransform()}get position(){if(this._getTransformFlag(F.TRANSFORM_WORLDPOSITION)){if(null!=this._parent){var e=this.worldMatrix.elements;this._position.x=e[12],this._position.y=e[13],this._position.z=e[14]}else this._localPosition.cloneTo(this._position);this._setTransformFlag(F.TRANSFORM_WORLDPOSITION,!1)}return this._position}set position(e){if(null!=this._parent){var r=F._tempMatrix0;this._parent.worldMatrix.invert(r),t.Vector3.transformCoordinate(e,r,this._localPosition)}else e.cloneTo(this._localPosition);this.localPosition=this._localPosition,this._position!==e&&e.cloneTo(this._position),this._setTransformFlag(F.TRANSFORM_WORLDPOSITION,!1)}get rotation(){return this._getTransformFlag(F.TRANSFORM_WORLDQUATERNION)&&(null!=this._parent?t.Quaternion.multiply(this._parent.rotation,this.localRotation,this._rotation):this.localRotation.cloneTo(this._rotation),this._setTransformFlag(F.TRANSFORM_WORLDQUATERNION,!1)),this._rotation}set rotation(e){null!=this._parent?(this._parent.rotation.invert(F._tempQuaternion0),t.Quaternion.multiply(F._tempQuaternion0,e,this._localRotation)):e.cloneTo(this._localRotation),this.localRotation=this._localRotation,e!==this._rotation&&e.cloneTo(this._rotation),this._setTransformFlag(F.TRANSFORM_WORLDQUATERNION,!1)}get rotationEuler(){if(this._getTransformFlag(F.TRANSFORM_WORLDEULER)){this.rotation.getYawPitchRoll(F._tempVector30);var e=F._tempVector30,t=this._rotationEuler;t.x=e.y*F._angleToRandin,t.y=e.x*F._angleToRandin,t.z=e.z*F._angleToRandin,this._setTransformFlag(F.TRANSFORM_WORLDEULER,!1)}return this._rotationEuler}set rotationEuler(e){t.Quaternion.createFromYawPitchRoll(e.y/F._angleToRandin,e.x/F._angleToRandin,e.z/F._angleToRandin,this._rotation),this.rotation=this._rotation,this._rotationEuler!==e&&e.cloneTo(this._rotationEuler),this._setTransformFlag(F.TRANSFORM_WORLDEULER,!1)}get worldMatrix(){if(this._getTransformFlag(F.TRANSFORM_WORLDMATRIX)){if(null!=this._parent){let e=this._parent;for(;e._parent&&e.isDefaultMatrix;)e=e._parent;t.Matrix4x4.multiply(e.worldMatrix,this.localMatrix,this._worldMatrix)}else this.localMatrix.cloneTo(this._worldMatrix);this._setTransformFlag(F.TRANSFORM_WORLDMATRIX,!1)}return this._worldMatrix}set worldMatrix(e){null===this._parent?e.cloneTo(this._localMatrix):(this._parent.worldMatrix.invert(this._localMatrix),t.Matrix4x4.multiply(this._localMatrix,e,this._localMatrix)),this.localMatrix=this._localMatrix,this._worldMatrix!==e&&e.cloneTo(this._worldMatrix),this._setTransformFlag(F.TRANSFORM_WORLDMATRIX,!1)}constructor(e){super(),this._localPosition=new t.Vector3(0,0,0),this._localRotation=new t.Quaternion(0,0,0,1),this._localScale=new t.Vector3(1,1,1),this._localRotationEuler=new t.Vector3(0,0,0),this._localMatrix=new t.Matrix4x4,this._position=new t.Vector3(0,0,0),this._rotation=new t.Quaternion(0,0,0,1),this._scale=new t.Vector3(1,1,1),this._rotationEuler=new t.Vector3(0,0,0),this._worldMatrix=new t.Matrix4x4,this._children=null,this._isDefaultMatrix=!1,this._faceInvert=!1,this._frontFaceValue=1,this._parent=null,this._transformFlag=0,this._owner=e,this._children=[],this._initProperty()}_initProperty(){this._setTransformFlag(F.TRANSFORM_LOCALQUATERNION|F.TRANSFORM_LOCALEULER|F.TRANSFORM_LOCALMATRIX,!1),this._setTransformFlag(F.TRANSFORM_WORLDPOSITION|F.TRANSFORM_WORLDQUATERNION|F.TRANSFORM_WORLDEULER|F.TRANSFORM_WORLDSCALE|F.TRANSFORM_WORLDMATRIX,!0)}_getScaleMatrix(){var e=F._tempQuaternion0,r=F._tempMatrix3x30,n=F._tempMatrix3x31,a=F._tempMatrix3x32;return t.Matrix3x3.createFromMatrix4x4(this.worldMatrix,n),this.rotation.invert(e),t.Matrix3x3.createRotationQuaternion(e,r),t.Matrix3x3.multiply(r,n,a),a}_setTransformFlag(e,t){t?this._transformFlag|=e:this._transformFlag&=~e}_getTransformFlag(e){return 0!=(this._transformFlag&e)}_setParent(e){if(this._parent!==e){if(this._parent){var t=this._parent._children,r=t.indexOf(this);t.splice(r,1)}e&&(e._children.push(this),e&&this._onWorldTransform()),this._parent=e}}_onWorldPositionRotationTransform(){this._getTransformFlag(F.TRANSFORM_WORLDMATRIX)&&this._getTransformFlag(F.TRANSFORM_WORLDPOSITION)&&this._getTransformFlag(F.TRANSFORM_WORLDQUATERNION)&&this._getTransformFlag(F.TRANSFORM_WORLDEULER)||(this._setTransformFlag(F.TRANSFORM_WORLDMATRIX|F.TRANSFORM_WORLDPOSITION|F.TRANSFORM_WORLDQUATERNION|F.TRANSFORM_WORLDEULER,!0),this.event(t.Event.TRANSFORM_CHANGED,this._transformFlag));for(var e=0,r=this._children.length;e<r;e++)this._children[e]._onWorldPositionRotationTransform()}_onWorldPositionScaleTransform(){this._getTransformFlag(F.TRANSFORM_WORLDMATRIX)&&this._getTransformFlag(F.TRANSFORM_WORLDPOSITION)&&this._getTransformFlag(F.TRANSFORM_WORLDSCALE)||(this._setTransformFlag(F.TRANSFORM_WORLDMATRIX|F.TRANSFORM_WORLDPOSITION|F.TRANSFORM_WORLDSCALE,!0),this.event(t.Event.TRANSFORM_CHANGED,this._transformFlag));for(var e=0,r=this._children.length;e<r;e++)this._children[e]._onWorldPositionScaleTransform()}_onWorldPositionTransform(){this._getTransformFlag(F.TRANSFORM_WORLDMATRIX)&&this._getTransformFlag(F.TRANSFORM_WORLDPOSITION)||(this._setTransformFlag(F.TRANSFORM_WORLDMATRIX|F.TRANSFORM_WORLDPOSITION,!0),this.event(t.Event.TRANSFORM_CHANGED,this._transformFlag));for(var e=0,r=this._children.length;e<r;e++)this._children[e]._onWorldPositionTransform()}_onWorldRotationTransform(){this._getTransformFlag(F.TRANSFORM_WORLDMATRIX)&&this._getTransformFlag(F.TRANSFORM_WORLDQUATERNION)&&this._getTransformFlag(F.TRANSFORM_WORLDEULER)||(this._setTransformFlag(F.TRANSFORM_WORLDMATRIX|F.TRANSFORM_WORLDQUATERNION|F.TRANSFORM_WORLDEULER,!0),this.event(t.Event.TRANSFORM_CHANGED,this._transformFlag));for(var e=0,r=this._children.length;e<r;e++)this._children[e]._onWorldPositionRotationTransform()}_onWorldScaleTransform(){this._getTransformFlag(F.TRANSFORM_WORLDMATRIX)&&this._getTransformFlag(F.TRANSFORM_WORLDSCALE)||(this._setTransformFlag(F.TRANSFORM_WORLDMATRIX|F.TRANSFORM_WORLDSCALE,!0),this.event(t.Event.TRANSFORM_CHANGED,this._transformFlag));for(var e=0,r=this._children.length;e<r;e++)this._children[e]._onWorldPositionScaleTransform()}_onWorldTransform(){this._getTransformFlag(F.TRANSFORM_WORLDMATRIX)&&this._getTransformFlag(F.TRANSFORM_WORLDPOSITION)&&this._getTransformFlag(F.TRANSFORM_WORLDQUATERNION)&&this._getTransformFlag(F.TRANSFORM_WORLDEULER)&&this._getTransformFlag(F.TRANSFORM_WORLDSCALE)||(this._setTransformFlag(F.TRANSFORM_WORLDMATRIX|F.TRANSFORM_WORLDPOSITION|F.TRANSFORM_WORLDQUATERNION|F.TRANSFORM_WORLDEULER|F.TRANSFORM_WORLDSCALE,!0),this.event(t.Event.TRANSFORM_CHANGED,this._transformFlag));for(var e=0,r=this._children.length;e<r;e++)this._children[e]._onWorldTransform()}translate(e,r=!0){r?(t.Matrix4x4.createFromQuaternion(this.localRotation,F._tempMatrix0),t.Vector3.transformCoordinate(e,F._tempMatrix0,F._tempVector30),t.Vector3.add(this.localPosition,F._tempVector30,this._localPosition),this.localPosition=this._localPosition):(t.Vector3.add(this.position,e,this._position),this.position=this._position)}rotate(e,r=!0,n=!0){var a;n?a=e:(t.Vector3.scale(e,Math.PI/180,F._tempVector30),a=F._tempVector30),t.Quaternion.createFromYawPitchRoll(a.y,a.x,a.z,F._tempQuaternion0),r?(t.Quaternion.multiply(this.localRotation,F._tempQuaternion0,this._localRotation),this.localRotation=this._localRotation):(t.Quaternion.multiply(F._tempQuaternion0,this.rotation,this._rotation),this.rotation=this._rotation)}getForward(e){var t=this.worldMatrix.elements;e.x=-t[8],e.y=-t[9],e.z=-t[10]}getUp(e){var t=this.worldMatrix.elements;e.x=t[4],e.y=t[5],e.z=t[6]}getRight(e){var t=this.worldMatrix.elements;e.x=t[0],e.y=t[1],e.z=t[2]}lookAt(e,r,n=!1,a=!0){var i;if(n){if(i=this.localPosition,Math.abs(i.x-e.x)<t.MathUtils3D.zeroTolerance&&Math.abs(i.y-e.y)<t.MathUtils3D.zeroTolerance&&Math.abs(i.z-e.z)<t.MathUtils3D.zeroTolerance)return;a?(t.Quaternion.lookAt(this.localPosition,e,r,this._localRotation),this._localRotation.invert(this._localRotation)):(t.Vector3.subtract(this.localPosition,e,F._tempVector30),t.Quaternion.rotationLookAt(F._tempVector30,r,this._localRotation),this._localRotation.invert(this._localRotation)),this.localRotation=this._localRotation}else{var s=this.position;if(i=s,Math.abs(i.x-e.x)<t.MathUtils3D.zeroTolerance&&Math.abs(i.y-e.y)<t.MathUtils3D.zeroTolerance&&Math.abs(i.z-e.z)<t.MathUtils3D.zeroTolerance)return;a?(t.Quaternion.lookAt(s,e,r,this._rotation),this._rotation.invert(this._rotation)):(t.Vector3.subtract(this.position,e,F._tempVector30),t.Quaternion.rotationLookAt(F._tempVector30,r,this._rotation),this._rotation.invert(this._rotation)),this.rotation=this._rotation}}objLookat(e,t,r=!1){this.lookAt(e,t,r,!1)}getWorldLossyScale(){if(this._getTransformFlag(F.TRANSFORM_WORLDSCALE)){if(null!==this._parent){var e=this._getScaleMatrix().elements;this._scale.x=e[0],this._scale.y=e[4],this._scale.z=e[8]}else this._localScale.cloneTo(this._scale);this._setTransformFlag(F.TRANSFORM_WORLDSCALE,!1)}return this._scale}setWorldLossyScale(e){if(null!==this._parent){var r=F._tempMatrix3x33,n=F._tempMatrix3x33,a=n.elements,i=this._parent._getScaleMatrix();i.invert(i),t.Matrix3x3.createFromScaling(e,r),t.Matrix3x3.multiply(i,r,n),this._localScale.x=a[0],this._localScale.y=a[4],this._localScale.z=a[8]}else e.cloneTo(this._localScale);this.localScale=this._localScale,this._scale!==e&&e.cloneTo(this._scale),this._setTransformFlag(F.TRANSFORM_WORLDSCALE,!1)}localToGlobal(e,r){t.Vector3.transformV3ToV3(e,this.worldMatrix,r)}globalToLocal(e,r){this.worldMatrix.invert(F._tempMatrix0),t.Vector3.transformV3ToV3(e,F._tempMatrix0,r)}toLocalNormal(e,r){this.worldMatrix.invert(F._tempMatrix0),t.Vector3.TransformNormal(e,F._tempMatrix0,r)}toDir(e,t){this.rotationTo(this.rotation,e,t),this.rotation=this.rotation}rotationTo(e,r,n){var a=t.Vector3.dot(r,n);return a<-.999999?(t.Vector3.cross(t.Vector3.UnitX,r,F.tmpVec3),t.Vector3.scalarLength(F.tmpVec3)<1e-6&&t.Vector3.cross(t.Vector3.UnitY,r,F.tmpVec3),t.Vector3.normalize(F.tmpVec3,F.tmpVec3),t.Quaternion.createFromAxisAngle(F.tmpVec3,Math.PI,e),!0):a>.999999?(e.x=0,e.y=0,e.z=0,e.w=1,!1):(t.Vector3.cross(r,n,F.tmpVec3),e.x=F.tmpVec3.x,e.y=F.tmpVec3.y,e.z=F.tmpVec3.z,e.w=1+a,e.normalize(e),!0)}get scale(){return console.warn("Transfrm3D: discard function,please use getWorldLossyScale instead."),this.getWorldLossyScale()}set scale(e){console.warn("Transfrm3D: discard function,please use setWorldLossyScale instead."),this.setWorldLossyScale(e)}}F._tempVector30=new t.Vector3,F._tempQuaternion0=new t.Quaternion,F._tempMatrix0=new t.Matrix4x4,F._tempMatrix3x30=new t.Matrix3x3,F._tempMatrix3x31=new t.Matrix3x3,F._tempMatrix3x32=new t.Matrix3x3,F._tempMatrix3x33=new t.Matrix3x3,F.TRANSFORM_LOCALQUATERNION=1,F.TRANSFORM_LOCALEULER=2,F.TRANSFORM_LOCALMATRIX=4,F.TRANSFORM_WORLDPOSITION=8,F.TRANSFORM_WORLDQUATERNION=16,F.TRANSFORM_WORLDSCALE=32,F.TRANSFORM_WORLDMATRIX=64,F.TRANSFORM_WORLDEULER=128,F.TRANSFORM_LOCALPOS=256,F.TRANSFORM_LOCALSCALE=512,F._angleToRandin=180/Math.PI,F.tmpVec3=new t.Vector3;class U extends B{static __init__(){U.SHADERDEFINE_RECEIVE_SHADOW=t.Shader3D.getDefineByName("RECEIVESHADOW"),U.SAHDERDEFINE_LIGHTMAP=t.Shader3D.getDefineByName("LIGHTMAP"),U.SHADERDEFINE_LIGHTMAP_DIRECTIONAL=t.Shader3D.getDefineByName("LIGHTMAP_DIRECTIONAL"),U.LIGHTMAPSCALEOFFSET=t.Shader3D.propertyNameToID("u_LightmapScaleOffset"),U.LIGHTMAP=t.Shader3D.propertyNameToID("u_LightMap"),U.LIGHTMAP_DIRECTION=t.Shader3D.propertyNameToID("u_LightMapDirection"),U.PICKCOLOR=t.Shader3D.propertyNameToID("u_PickColor"),U.REFLECTIONCUBE_PROBEPOSITION=t.Shader3D.propertyNameToID("u_SpecCubeProbePosition"),U.REFLECTIONCUBE_PROBEBOXMAX=t.Shader3D.propertyNameToID("u_SpecCubeBoxMax"),U.REFLECTIONCUBE_PROBEBOXMIN=t.Shader3D.propertyNameToID("u_SpecCubeBoxMin"),U.VOLUMETRICGI_PROBECOUNTS=t.Shader3D.propertyNameToID("u_VolGIProbeCounts"),U.VOLUMETRICGI_PROBESTEPS=t.Shader3D.propertyNameToID("u_VolGIProbeStep"),U.VOLUMETRICGI_PROBESTARTPOS=t.Shader3D.propertyNameToID("u_VolGIProbeStartPosition"),U.VOLUMETRICGI_PROBEPARAMS=t.Shader3D.propertyNameToID("u_VolGIProbeParams"),U.VOLUMETRICGI_IRRADIANCE=t.Shader3D.propertyNameToID("u_ProbeIrradiance"),U.VOLUMETRICGI_DISTANCE=t.Shader3D.propertyNameToID("u_ProbeDistance"),U.AMBIENTCOLOR=t.Shader3D.propertyNameToID("u_AmbientColor"),U.AMBIENTSH=t.Shader3D.propertyNameToID("u_IblSH"),U.AMBIENTINTENSITY=t.Shader3D.propertyNameToID("u_AmbientIntensity"),U.REFLECTIONINTENSITY=t.Shader3D.propertyNameToID("u_ReflectionIntensity"),U.IBLTEX=t.Shader3D.propertyNameToID("u_IBLTex"),U.IBLROUGHNESSLEVEL=t.Shader3D.propertyNameToID("u_IBLRoughnessLevel");const r=t.LayaGL.renderDeviceFactory.createGlobalUniformMap("Sprite3D");U.SHADERDEFINE_MORPHTARGET=t.Shader3D.getDefineByName("MORPHTARGETS"),U.SHADERDEFINE_MORPHTARGET_POSITION=t.Shader3D.getDefineByName("MORPHTARGETS_POSITION"),U.SHADERDEFINE_MORPHTARGET_NORMAL=t.Shader3D.getDefineByName("MORPHTARGETS_NORMAL"),U.SHADERDEFINE_MORPHTARGET_TANGENT=t.Shader3D.getDefineByName("MORPHTARGETS_TANGENT"),U.MorphTex=t.Shader3D.propertyNameToID("u_MorphTargetsTex"),U.MorphParams=t.Shader3D.propertyNameToID("u_MorphParams"),U.MorphAttriOffset=t.Shader3D.propertyNameToID("u_MorphAttrOffset"),U.MorphActiceTargets=t.Shader3D.propertyNameToID("u_MorphActiveTargets"),U.MorphActiveCount=t.Shader3D.propertyNameToID("u_MorphTargetActiveCount"),r.addShaderUniform(U.MorphTex,"u_MorphTargetsTex",e.ShaderDataType.Texture2D),r.addShaderUniform(U.MorphParams,"u_MorphParams",e.ShaderDataType.Vector4),r.addShaderUniform(U.MorphAttriOffset,"u_MorphAttrOffset",e.ShaderDataType.Vector4),r.addShaderUniform(U.MorphActiceTargets,"u_MorphActiveTargets",e.ShaderDataType.Buffer),r.addShaderUniform(U.MorphActiveCount,"u_MorphTargetActiveCount",e.ShaderDataType.Int),r.addShaderUniform(U.LIGHTMAPSCALEOFFSET,"u_LightmapScaleOffset",e.ShaderDataType.Vector4),r.addShaderUniform(U.LIGHTMAP,"u_LightMap",e.ShaderDataType.Texture2D),r.addShaderUniform(U.LIGHTMAP_DIRECTION,"u_LightMapDirection",e.ShaderDataType.Texture2D),r.addShaderUniform(U.PICKCOLOR,"u_PickColor",e.ShaderDataType.Vector3),r.addShaderUniform(U.REFLECTIONCUBE_PROBEPOSITION,"u_SpecCubeProbePosition",e.ShaderDataType.Vector3),r.addShaderUniform(U.REFLECTIONCUBE_PROBEBOXMAX,"u_SpecCubeBoxMax",e.ShaderDataType.Vector3),r.addShaderUniform(U.REFLECTIONCUBE_PROBEBOXMIN,"u_SpecCubeBoxMin",e.ShaderDataType.Vector3),r.addShaderUniform(U.IBLTEX,"u_IBLTex",e.ShaderDataType.Texture2D),r.addShaderUniform(U.IBLROUGHNESSLEVEL,"u_IBLRoughnessLevel",e.ShaderDataType.Float),r.addShaderUniform(U.VOLUMETRICGI_PROBECOUNTS,"u_VolGIProbeCounts",e.ShaderDataType.Vector3),r.addShaderUniform(U.VOLUMETRICGI_PROBESTEPS,"u_VolGIProbeStep",e.ShaderDataType.Vector3),r.addShaderUniform(U.VOLUMETRICGI_PROBESTARTPOS,"u_VolGIProbeStartPosition",e.ShaderDataType.Vector3),r.addShaderUniform(U.VOLUMETRICGI_PROBEPARAMS,"u_VolGIProbeParams",e.ShaderDataType.Vector4),r.addShaderUniform(U.VOLUMETRICGI_IRRADIANCE,"u_ProbeIrradiance",e.ShaderDataType.Texture2D),r.addShaderUniform(U.VOLUMETRICGI_DISTANCE,"u_ProbeDistance",e.ShaderDataType.Texture2D),r.addShaderUniform(U.AMBIENTSH,"u_IblSH",e.ShaderDataType.Buffer),r.addShaderUniform(U.AMBIENTCOLOR,"u_AmbientColor",e.ShaderDataType.Vector4),r.addShaderUniform(U.AMBIENTINTENSITY,"u_AmbientIntensity",e.ShaderDataType.Float),r.addShaderUniform(U.REFLECTIONINTENSITY,"u_ReflectionIntensity",e.ShaderDataType.Float),U.REFLECTIONTEXTURE=t.Shader3D.propertyNameToID("u_ReflectTexture"),U.REFLECTIONCUBE_HDR_PARAMS=t.Shader3D.propertyNameToID("u_ReflectCubeHDRParams"),r.addShaderUniform(U.REFLECTIONTEXTURE,"u_ReflectTexture",e.ShaderDataType.TextureCube),r.addShaderUniform(U.REFLECTIONCUBE_HDR_PARAMS,"u_ReflectCubeHDRParams",e.ShaderDataType.Vector4),U.AMBIENTSHAR=t.Shader3D.propertyNameToID("u_AmbientSHAr"),r.addShaderUniform(U.AMBIENTSHAR,"u_AmbientSHAr",e.ShaderDataType.Vector4),U.AMBIENTSHAG=t.Shader3D.propertyNameToID("u_AmbientSHAg"),r.addShaderUniform(U.AMBIENTSHAG,"u_AmbientSHAg",e.ShaderDataType.Vector4),U.AMBIENTSHAB=t.Shader3D.propertyNameToID("u_AmbientSHAb"),r.addShaderUniform(U.AMBIENTSHAB,"u_AmbientSHAb",e.ShaderDataType.Vector4),U.AMBIENTSHBR=t.Shader3D.propertyNameToID("u_AmbientSHBr"),r.addShaderUniform(U.AMBIENTSHBR,"u_AmbientSHBr",e.ShaderDataType.Vector4),U.AMBIENTSHBG=t.Shader3D.propertyNameToID("u_AmbientSHBg"),r.addShaderUniform(U.AMBIENTSHBG,"u_AmbientSHBg",e.ShaderDataType.Vector4),U.AMBIENTSHBB=t.Shader3D.propertyNameToID("u_AmbientSHBb"),r.addShaderUniform(U.AMBIENTSHBB,"u_AmbientSHBb",e.ShaderDataType.Vector4),U.AMBIENTSHC=t.Shader3D.propertyNameToID("u_AmbientSHC"),r.addShaderUniform(U.AMBIENTSHC,"u_AmbientSHC",e.ShaderDataType.Vector4)}constructor(e){super(e)}_onInActive(){super._onInActive()}_onActive(){super._onActive()}_onActiveInScene(){super._onActiveInScene()}_create(){return new B(this.name)}_addToInitStaticBatchManager(){}_setBelongScene(e){super._setBelongScene(e)}_setUnBelongScene(){super._setUnBelongScene()}}class G{}class H{static merge(e,r,n){t.Vector3.min(e.min,r.min,n.min),t.Vector3.max(e.max,r.max,n.max),n.min=n.min,n.max=n.max}static containPoint(e,t){let r=e._imp.getMax(),n=e._imp.getMin();return!(t.x>r.x||t.x<n.x)&&(!(t.y>r.y||t.y<n.y)&&!(t.z>r.z||t.z<n.z))}get min(){return this.getMin()}set min(e){this.setMin(e)}get max(){return this.getMax()}set max(e){this.setMax(e)}setMin(e){this._imp.setMin(e)}getMin(){return this._imp.getMin()}setMax(e){this._imp.setMax(e)}getMax(){return this._imp.getMax()}setCenter(e){this._imp.setCenter(e)}getCenter(){return this._imp.getCenter()}setExtent(e){this._imp.setExtent(e)}getExtent(){return this._imp.getExtent()}constructor(e,t){this._imp=A.Render3DModuleDataFactory.createBounds(e,t)}_getUpdateFlag(e){return this._imp._getUpdateFlag(e)}_setUpdateFlag(e,t){this._imp._setUpdateFlag(e,t)}_getCenter(e,r,n){t.Vector3.add(e,r,n),t.Vector3.scale(n,.5,n)}_getExtent(e,r,n){t.Vector3.subtract(r,e,n),t.Vector3.scale(n,.5,n)}_getMin(e,r,n){t.Vector3.subtract(e,r,n)}_getMax(e,r,n){t.Vector3.add(e,r,n)}_rotateExtents(e,t,r){var n=e.x,a=e.y,i=e.z,s=t.elements;r.x=Math.abs(s[0]*n)+Math.abs(s[4]*a)+Math.abs(s[8]*i),r.y=Math.abs(s[1]*n)+Math.abs(s[5]*a)+Math.abs(s[9]*i),r.z=Math.abs(s[2]*n)+Math.abs(s[6]*a)+Math.abs(s[10]*i)}_tranform(e,t){this._imp._tranform(e,t._imp)}getCorners(e){this._imp.getCorners(e)}getBoundBox(e){this._imp._getBoundBox().cloneTo(e)}calculateBoundsintersection(e){return this._imp.calculateBoundsintersection(e._imp)}cloneTo(e){this._imp.cloneTo(e._imp)}clone(){var e=new H(new t.Vector3,new t.Vector3);return this.cloneTo(e),e}}H._UPDATE_MIN=1,H._UPDATE_MAX=2,H._UPDATE_CENTER=4,H._UPDATE_EXTENT=8,e.volumeIntersectType=void 0,(C=e.volumeIntersectType||(e.volumeIntersectType={}))[C.contain=0]="contain",C[C.intersect=1]="intersect",C[C.Disjoint=2]="Disjoint";class z extends t.Component{constructor(){super(),this._aroundVolumeCacheNum=0,this._bounds=new H,this._primitiveBounds=new H,this._importance=0,this.runInEditor=!0}get type(){return this._type}get bounds(){return this._bounds}get boundsMax(){return this._primitiveBounds.getMax()}set boundsMax(e){this._primitiveBounds.setMax(e),this._reCaculateBoundBox()}get boundsMin(){return this._primitiveBounds.getMin()}set boundsMin(e){this._primitiveBounds.setMin(e),this._reCaculateBoundBox()}get probePosition(){return this.owner.transform.position}get importance(){return this._importance}set importance(e){this._importance=e}_onEnable(){this.owner.transform.on(t.Event.TRANSFORM_CHANGED,this,this._VolumeChange),this._volumeManager=this.owner.scene._volumeManager,this._volumeManager.add(this),this._reCaculateBoundBox()}_onDisable(){this.owner.transform.off(t.Event.TRANSFORM_CHANGED,this,this._VolumeChange),this._volumeManager.remove(this)}_VolumeChange(){this._volumeManager._needUpdateAllRender=!0;let e=this._volumeManager._regVolumeManager[this.type];e&&(e._needUpdateAllRender=!0),this._reCaculateBoundBox()}_reCaculateBoundBox(){this.owner&&this._primitiveBounds._tranform(this.owner.transform.worldMatrix,this._bounds)}_cloneTo(e){}}class k{constructor(){this._reflectionProbes=new t.SingletonList,this._needUpdateAllRender=!1,this._sceneReflectionProbe=new K,this._sceneReflectionProbe.boxProjection=!1,this._sceneReflectionProbe._isScene=!0}get sceneReflectionProbe(){return this._sceneReflectionProbe}set sceneReflectionProbe(e){this._sceneReflectionProbe=e,this._needUpdateAllRender=!0}_updateRenderObject(e){if(0!=this._reflectionProbes.length){for(var t,r,n=this._reflectionProbes.elements,a=0,i=e.bounds,s=0,o=this._reflectionProbes.length;s<o;s++){var l=n[s];if(t){if(t.importance>l.importance)continue;if((r=i.calculateBoundsintersection(l.bounds))<a&&t.importance==l.importance)continue}else if((r=i.calculateBoundsintersection(l.bounds))<a)continue;t=l,a=r}!t&&this._sceneReflectionProbe&&(t=this._sceneReflectionProbe),e.probReflection=t}else e.probReflection=this._sceneReflectionProbe}add(e){this._reflectionProbes.add(e),this._needUpdateAllRender=!0}remove(e){this._reflectionProbes.remove(e),this._needUpdateAllRender=!0}handleMotionlist(e){var t=e.elements;let r;for(var n=0,a=e.length;n<a;n++)r=t[n],r._surportReflectionProbe&&1==r.reflectionMode&&this._updateRenderObject(t[n])}reCaculateAllRenderObjects(e){var t=e.elements;let r;for(var n=0,a=e.length;n<a;n++)r=t[n],r._surportReflectionProbe&&1==r.reflectionMode&&this._updateRenderObject(r),this._needUpdateAllRender=!1}destroy(){for(let e=0;e<this._reflectionProbes.length;e++){this._reflectionProbes.elements[e].destroy()}this._reflectionProbes.length=0,this._sceneReflectionProbe.destroy(),this._sceneReflectionProbe=null}}class W{}class Y{constructor(){this._GIVolumes=new t.SingletonList,this._needUpdateAllRender=!0}removeVolumetricGI(e){e._baseRenderNode.shaderData.removeDefine(W.SHADERDEFINE_VOLUMETRICGI),e.lightProbe=null}add(e){this._GIVolumes.add(e),this._needUpdateAllRender=!0}remove(e){this._GIVolumes.remove(e),this._needUpdateAllRender=!0}_updateRenderObject(e){if(0==this._GIVolumes.length)return void this.removeVolumetricGI(e);let t,r=e.bounds,n=0,a=0,i=this._GIVolumes.elements;for(let e=0;e<this._GIVolumes.length;e++){let s=i[e];if(t){if(t.importance>s.importance)continue;if(a=r.calculateBoundsintersection(s.bounds),a<n&&t.importance==s.importance)continue}else if(a=r.calculateBoundsintersection(s.bounds),a<n)continue;t=s,n=a}t?e.lightProbe=t:this.removeVolumetricGI(e)}handleMotionlist(e){for(let t=0;t<e.length;t++){let r=e.elements[t];r._surportVolumetricGI&&this._updateRenderObject(r)}this._needUpdateAllRender=!1}reCaculateAllRenderObjects(e){for(let t=0;t<e.length;t++){let r=e.elements[t];r._surportVolumetricGI&&this._updateRenderObject(r)}this._needUpdateAllRender=!1}destroy(){}}class X{constructor(){this._motionObjects=new t.SingletonList,this._volumeList=new t.SingletonList,this._needUpdateAllRender=!1,this._regVolumeManager={},this._reflectionProbeManager=new k,this._regVolumeManager[X.ReflectionProbeVolumeType]=this._reflectionProbeManager,this._volumetricGIManager=new Y,this._regVolumeManager[X.VolumetricGIType]=this._volumetricGIManager}get reflectionProbeManager(){return this._reflectionProbeManager}get volumetricGIManager(){return this._volumetricGIManager}add(e){let t=this._regVolumeManager[e.type];t?t.add(e):(this._volumeList.add(e),this._needUpdateAllRender=!0)}remove(e){let t=this._regVolumeManager[e.type];t?t.remove(e):(this._volumeList.remove(e),this._needUpdateAllRender=!0)}addMotionObject(e){this._motionObjects.add(e)}removeMotionObject(e){this._motionObjects.remove(e)}_updateRenderObject(e){let t,r=this._volumeList.elements,n=e.bounds.getCenter();for(var a=0,i=this._volumeList.length;a<i;a++){let e=r[a],i=e.bounds;H.containPoint(i,n)&&(t=e)}e.volume=t}handleMotionlist(){for(var e=this._motionObjects.elements,t=0,r=this._motionObjects.length;t<r;t++)this._updateRenderObject(e[t]);this.reflectionProbeManager._needUpdateAllRender||this.reflectionProbeManager.handleMotionlist(this._motionObjects),this.volumetricGIManager._needUpdateAllRender||this.volumetricGIManager.handleMotionlist(this._motionObjects),this.clearMotionObjects()}reCaculateAllRenderObjects(e){if(this._needUpdateAllRender){for(var t=e.elements,r=0,n=e.length;r<n;r++)this._updateRenderObject(t[r]);this._needUpdateAllRender=!1}else this.handleMotionlist();this.reflectionProbeManager._needUpdateAllRender?this.reflectionProbeManager.reCaculateAllRenderObjects(e):this.reflectionProbeManager.handleMotionlist(this._motionObjects),this.volumetricGIManager._needUpdateAllRender?this.volumetricGIManager.reCaculateAllRenderObjects(e):this.volumetricGIManager.handleMotionlist(this._motionObjects)}needreCaculateAllRenderObjects(){return this._needUpdateAllRender||this.reflectionProbeManager._needUpdateAllRender||this.volumetricGIManager._needUpdateAllRender}clearMotionObjects(){this._motionObjects.length=0,this._motionObjects.elements.length>100&&(this._motionObjects.elements.length=100),this._motionObjects.elements.fill(null)}destroy(){}}X.ReflectionProbeVolumeType=1,X.VolumetricGIType=2;class Q{}Q.Scene3D=null,Q.Laya3D=null,e.AmbientMode=void 0,(v=e.AmbientMode||(e.AmbientMode={}))[v.SolidColor=0]="SolidColor",v[v.SphericalHarmonics=1]="SphericalHarmonics",e.ReflectionProbeMode=void 0,(y=e.ReflectionProbeMode||(e.ReflectionProbeMode={}))[y.off=0]="off",y[y.simple=1]="simple";class K extends z{static getID(){return K.reflectionCount++}constructor(){super(),this._ambientColor=new t.Color,this._isScene=!1,this._importance=0,this._type=X.ReflectionProbeVolumeType,this._dataModule=A.Render3DModuleDataFactory.createReflectionProbe(),this._dataModule.bound=this._bounds,this.ambientIntensity=1,this.reflectionIntensity=1,this.boundsMax=new t.Vector3(5,5,5),this.boundsMin=new t.Vector3(-5,-5,-5),this._reflectionProbeID=K.getID(),this.ambientMode=e.AmbientMode.SolidColor,this._dataModule.updateMark=-1}get boxProjection(){return this._dataModule.boxProjection}set boxProjection(e){e!=this._dataModule.boxProjection&&(this._dataModule.updateMark=Q.Scene3D._updateMark),this._dataModule.boxProjection=e}get importance(){return this._importance}set importance(e){this._importance=e}get ambientIntensity(){return this._dataModule.ambientIntensity}set ambientIntensity(e){e!=this._dataModule.ambientIntensity&&(this._dataModule.ambientIntensity=e,this._dataModule.updateMark=Q.Scene3D._updateMark)}get reflectionIntensity(){return this._dataModule.reflectionIntensity}set reflectionIntensity(e){e!=this._dataModule.reflectionIntensity&&(e=Math.max(e,0),this._dataModule.reflectionIntensity=e,this._dataModule.updateMark=Q.Scene3D._updateMark)}_reCaculateBoundBox(){super._reCaculateBoundBox(),this.owner&&this._dataModule.setProbePosition(this.owner.transform.position),this.bounds.cloneTo(this._dataModule.bound)}get bounds(){return this._bounds}get boundsMax(){return this._primitiveBounds.getMax()}set boundsMax(e){super.boundsMax=e,this.boxProjection&&(this._dataModule.updateMark=Q.Scene3D._updateMark)}get boundsMin(){return this._primitiveBounds.getMin()}set boundsMin(e){super.boundsMin=e,this.boxProjection&&(this._dataModule.updateMark=Q.Scene3D._updateMark)}get probePosition(){return this.owner.transform.position}get ambientColor(){return this._ambientColor}set ambientColor(t){t.cloneTo(this._ambientColor),this._dataModule.setAmbientColor(this._ambientColor),this.ambientMode==e.AmbientMode.SolidColor&&(this._dataModule.updateMark=Q.Scene3D._updateMark)}get ambientSH(){return this._ambientSH}set ambientSH(t){this.ambientMode==e.AmbientMode.SphericalHarmonics&&(this._dataModule.updateMark=Q.Scene3D._updateMark),this._ambientSH=t,this._dataModule.setAmbientSH(this._ambientSH)}get ambientMode(){return this._dataModule.ambientMode}set ambientMode(e){e!=this.ambientMode&&(this._dataModule.ambientMode=e,this._dataModule.updateMark=Q.Scene3D._updateMark)}get iblTex(){return this._iblTex}set iblTex(e){this._iblTex!=e&&(this._iblTex&&this._iblTex._removeReference(),this._iblTex=e,this._dataModule.iblTex=null,e&&(e._addReference(),this._dataModule.iblTex=e._texture),this._dataModule.updateMark=Q.Scene3D._updateMark)}get iblTexRGBD(){return this._dataModule.iblTexRGBD}set iblTexRGBD(e){e!=this._dataModule.iblTexRGBD&&(this._dataModule.iblTexRGBD=e,this._dataModule.updateMark=Q.Scene3D._updateMark)}_onEnable(){super._onEnable(),this._dataModule.updateMark=Q.Scene3D._updateMark}_onDisable(){super._onDisable()}_onDestroy(){this.iblTex=null,this._dataModule.destroy()}_cloneTo(e){}}K.reflectionCount=0,K.TEMPVECTOR3=new t.Vector3,K.defaultTextureHDRDecodeValues=new t.Vector4(1,1,0,0),e.RenderBitFlag=void 0,(I=e.RenderBitFlag||(e.RenderBitFlag={}))[I.RenderBitFlag_CullFlag=0]="RenderBitFlag_CullFlag",I[I.RenderBitFlag_Batch=1]="RenderBitFlag_Batch",I[I.RenderBitFlag_Editor=2]="RenderBitFlag_Editor",I[I.RenderBitFlag_InstanceBatch=3]="RenderBitFlag_InstanceBatch",I[I.RenderBitFlag_VertexMergeBatch=4]="RenderBitFlag_VertexMergeBatch",e.IrradianceMode=void 0,(L=e.IrradianceMode||(e.IrradianceMode={}))[L.LightMap=0]="LightMap",L[L.VolumetricGI=1]="VolumetricGI",L[L.Common=2]="Common";class j extends t.Component{static __init__(){j.shaderValueInit()}static getMeshDefine(e,r){r.length=0;for(var n=0,a=e._subMeshes.length;n<a;n++)for(var i=e.getSubMesh(n)._vertexBuffer.vertexDeclaration._vertexElements,s=0,o=i.length;s<o;s++){switch(i[s]._elementUsage){case t.VertexMesh.MESH_COLOR0:r.push(G.SHADERDEFINE_COLOR);break;case t.VertexMesh.MESH_TEXTURECOORDINATE0:r.push(G.SHADERDEFINE_UV0);break;case t.VertexMesh.MESH_TEXTURECOORDINATE1:r.push(G.SHADERDEFINE_UV1);break;case t.VertexMesh.MESH_TANGENT0:r.push(G.SHADERDEFINE_TANGENT)}}}static changeVertexDefine(e,t,r){var n=e;if(n){j.getMeshDefine(n,j._meshVerticeDefine);for(var a=0,i=j._meshVerticeDefine.length;a<i;a++)r.removeDefine(j._meshVerticeDefine[a])}if(t){j.getMeshDefine(t,j._meshVerticeDefine);for(a=0,i=j._meshVerticeDefine.length;a<i;a++)r.addDefine(j._meshVerticeDefine[a])}}static shaderValueInit(){W.SHADERDEFINE_GI_LEGACYIBL=t.Shader3D.getDefineByName("GI_LEGACYIBL"),W.SHADERDEFINE_GI_IBL=t.Shader3D.getDefineByName("GI_IBL"),W.SHADERDEFINE_IBL_RGBD=t.Shader3D.getDefineByName("IBL_RGBD"),W.SHADERDEFINE_SPECCUBE_BOX_PROJECTION=t.Shader3D.getDefineByName("SPECCUBE_BOX_PROJECTION"),W.SHADERDEFINE_VOLUMETRICGI=t.Shader3D.getDefineByName("VOLUMETRICGI")}get enabled(){return super.enabled}set enabled(e){super.enabled=e,this._baseRenderNode.enable=e}get sortingFudge(){return this._baseRenderNode.sortingFudge}set sortingFudge(e){this._baseRenderNode.sortingFudge=e}get renderbitFlag(){return this._baseRenderNode.renderbitFlag}get boundsChange(){return this._baseRenderNode.boundsChange}set boundsChange(e){this._baseRenderNode.boundsChange=e}get renderNode(){return this._baseRenderNode}get distanceForSort(){return this._baseRenderNode.distanceForSort}set distanceForSort(e){this._baseRenderNode.distanceForSort=e}get geometryBounds(){return this._baseRenderNode.baseGeometryBounds}set geometryBounds(e){this._baseRenderNode.baseGeometryBounds=e}get lightmapIndex(){return this._baseRenderNode.lightmapIndex}set lightmapIndex(e){this._baseRenderNode.lightmapIndex=e}setLightmapIndex(e){let t=this._scene;-1!=e&&t.lightmaps[e]?this._baseRenderNode.lightmap=t.lightmaps[e]._dataModule:this._baseRenderNode.lightmap=null,this._getIrradientMode()}get irradientMode(){return this._baseRenderNode.irradientMode}get lightmapScaleOffset(){return this._lightmapScaleOffset}set lightmapScaleOffset(e){e.cloneTo(this._lightmapScaleOffset),this._baseRenderNode.setLightmapScaleOffset(this._lightmapScaleOffset)}get sharedMaterial(){return this._sharedMaterials[0]}set sharedMaterial(e){var t=this._sharedMaterials[0];this._changeMaterialReference(t,e),this._sharedMaterials[0]=e;let r=this._renderElements[0];r&&r.material!=e&&(this._materialsInstance[0]=!1,r.material=e),this._isSupportRenderFeature()}get sharedMaterials(){return this._sharedMaterials.slice()}set sharedMaterials(e){var t=this._materialsInstance,r=this._sharedMaterials;if(e){let n=e.length;for(let a=0;a<n;a++){let n=e[a],i=r[a];this._changeMaterialReference(i,n),r[a]=n;let s=this._renderElements[a];s&&s.material!=n&&(t[a]=!1,s.material=n)}for(let e=n,t=r.length;e<t;e++){let t=r[e];t&&t._removeReference();let n=this._renderElements[e];n&&(n.material=null)}t.length=n,r.length=n}else{for(let e=0,t=r.length;e<t;e++){let t=r[e];t&&t._removeReference()}this._sharedMaterials=[]}this._isSupportRenderFeature()}get bounds(){return this._baseRenderNode.bounds}get receiveShadow(){return this._receiveShadow}set receiveShadow(e){this._receiveShadow!==e&&(this._receiveShadow=e,e?this._baseRenderNode.shaderData.addDefine(U.SHADERDEFINE_RECEIVE_SHADOW):this._baseRenderNode.shaderData.removeDefine(U.SHADERDEFINE_RECEIVE_SHADOW)),this._baseRenderNode.receiveShadow=e}get castShadow(){return this._baseRenderNode.castShadow}set castShadow(e){this._baseRenderNode.castShadow=e}get reflectionMode(){return this._baseRenderNode.reflectionMode}set reflectionMode(e){this._baseRenderNode.reflectionMode=e}get volume(){return this._volume}set volume(e){if(e)return this._volume!=e?(e._addRenderNode&&e._addRenderNode(this),void(this._volume=e)):void(e._motionInVolume&&e._motionInVolume(this));this._volume&&(this._volume._removeRenderNode&&this._volume._removeRenderNode(this),this._volume=null)}get probReflection(){return this._probReflection}set probReflection(r){this._probReflection!=r&&(this._baseRenderNode.probeReflectionUpdateMark=-1,this._probReflection=r,this._baseRenderNode.probeReflection=r._dataModule,this._baseRenderNode.reflectionMode==e.ReflectionProbeMode.off&&(this._baseRenderNode.shaderData.removeDefine(W.SHADERDEFINE_SPECCUBE_BOX_PROJECTION),this._baseRenderNode.shaderData.addDefine(W.SHADERDEFINE_GI_IBL),this._baseRenderNode.shaderData.setTexture(U.IBLTEX,t.TextureCube.blackTexture),this._baseRenderNode.shaderData.setNumber(U.IBLROUGHNESSLEVEL,0)),this._getIrradientMode())}get lightProbe(){return this._lightProb}set lightProbe(e){this._lightProb!=e&&(this._baseRenderNode.lightProbUpdateMark=-1,this._lightProb=e,this._baseRenderNode.volumetricGI=e?e._dataModule:null,this._getIrradientMode())}constructor(){super(),this._sharedMaterials=[],this._sceneUpdateMark=-1,this._updateMark=-1,this._surportReflectionProbe=!1,this._surportVolumetricGI=!1,this._motionIndexList=-1,this._LOD=-1,this._lightmapScaleOffset=new t.Vector4,this._renderElements=[],this._baseRenderNode=this._createBaseRenderNode(),this._baseRenderNode.setCommonUniformMap(this._getcommonUniformMap()),this._baseRenderNode.shaderData=t.LayaGL.renderDeviceFactory.createShaderData(null),this._renderid=++j._uniqueIDCounter,this._baseRenderNode.bounds=this._bounds=new H(t.Vector3.ZERO,t.Vector3.ZERO),this._enabled=!0,this._baseRenderNode.enable=!0,this._materialsInstance=[],this.lightmapIndex=-1,this.receiveShadow=!1,this._baseRenderNode.sortingFudge=0,this.reflectionMode=e.ReflectionProbeMode.simple,this._calculateBoundingBox&&this._baseRenderNode.set_caculateBoundingBox(this,this._calculateBoundingBox),this._renderUpdate&&this._baseRenderNode.set_renderUpdatePreCall(this,this._renderUpdate),this.runInEditor=!0,this._asynNative=!0,this.boundsChange=!0,this._baseRenderNode.renderbitFlag=0,this._baseRenderNode.staticMask=1,this.castShadow=!1,this._baseRenderNode.renderNodeType=0}_setRenderElements(){let e=[];this._renderElements.forEach((t=>{e.push(t._renderElementOBJ)})),this._baseRenderNode.setRenderelements(e)}_onWorldMatNeedChange(e){this.boundsChange=!0,this._addReflectionProbeUpdate(),this._batchRender&&this._batchRender._updateOneRender(this)}_getcommonUniformMap(){return["Sprite3D"]}_createBaseRenderNode(){return A.Render3DModuleDataFactory.createBaseRenderNode()}renderUpdate(e){}_onAdded(){this._transform=this.owner.transform,this.owner._isRenderNode++,this.setRenderbitFlag(e.RenderBitFlag.RenderBitFlag_Editor,this.owner._getBit(t.NodeFlags.HIDE_BY_EDITOR)),this._baseRenderNode.transform=this._transform,this._changeLayer(this.owner.layer),this._changeStaticMask(this.owner._isStatic)}_onEnable(){super._onEnable(),this.owner&&(this.owner.transform.on(t.Event.TRANSFORM_CHANGED,this,this._onWorldMatNeedChange),this.owner.on(t.Event.LAYERCHANGE,this,this._changeLayer),this.owner.on(t.Event.staticMask,this,this._changeStaticMask),this._changeLayer(this.owner.layer),this._changeStaticMask(this.owner._isStatic)),this.owner.scene._addRenderObject(this),this._setBelongScene(this.owner.scene)}_onDisable(){this.owner&&(this.owner.transform.off(t.Event.TRANSFORM_CHANGED,this,this._onWorldMatNeedChange),this.owner.off(t.Event.LAYERCHANGE,this,this._changeLayer),this.owner.off(t.Event.staticMask,this,this._changeStaticMask)),this.owner.scene._removeRenderObject(this),this._setUnBelongScene(),this.volume=null}_onDestroy(){this.owner&&this.owner._isRenderNode--,-1!==this._motionIndexList&&this._scene._sceneRenderManager.removeMotionObject(this),this._scene&&this._scene.sceneRenderableManager.removeRenderObject(this),this._baseRenderNode.destroy();var e,t=0;for(t=0,e=this._sharedMaterials.length;t<e;t++){let e=this._sharedMaterials[t];e&&!e.destroyed&&e._removeReference()}this._sharedMaterials=null,this._bounds=null,this._lightmapScaleOffset=null,this._scene=null,this._transform=null,this._batchRender=null}_getIrradientMode(){this.lightmapIndex>=0?this._baseRenderNode.irradientMode=e.IrradianceMode.LightMap:this.lightProbe?this._baseRenderNode.irradientMode=e.IrradianceMode.VolumetricGI:this._baseRenderNode.irradientMode=e.IrradianceMode.Common}_changeLayer(e){this._baseRenderNode.layer=e}_changeStaticMask(e){this._baseRenderNode.staticMask=e}_changeMaterialReference(e,t){e&&e._removeReference(),t&&t._addReference()}_getInstanceMaterial(e,t){var r=e.clone();return r.name=r.name+"(Instance)",this._materialsInstance[t]=!0,this._changeMaterialReference(this._sharedMaterials[t],r),this._sharedMaterials[t]=r,r}_isSupportRenderFeature(){let e=this._surportReflectionProbe,t=this._surportVolumetricGI;this._surportReflectionProbe=!1,this._surportVolumetricGI=!1;for(var r=this._sharedMaterials,n=0,a=r.length;n<a;n++){var i=r[n];this._surportReflectionProbe||(this._surportReflectionProbe=this._surportReflectionProbe||i&&i._shader._supportReflectionProbe),this._surportVolumetricGI||(this._surportVolumetricGI=this._surportVolumetricGI||i&&i._shader._surportVolumetricGI)}(!e&&this._surportReflectionProbe||!t&&this._surportVolumetricGI)&&this._addReflectionProbeUpdate()}_addReflectionProbeUpdate(){this._scene&&this._scene._volumeManager.addMotionObject(this)}_setBelongScene(e){this._scene=e,this._onWorldMatNeedChange(1),this._isSupportRenderFeature(),this._batchRender&&this._batchRender._batchOneRender(this),this.setLightmapIndex(this.lightmapIndex),this._statAdd()}_statAdd(){t.Stat.renderNode++}_statRemove(){t.Stat.renderNode--}_setUnBelongScene(){this._statRemove(),this._scene._volumeManager.removeMotionObject(this);let e=this._batchRender;this._batchRender&&this._batchRender._removeOneRender(this),this._batchRender=e,this._scene=null}_needRender(e,t){return!e||e.intersects(this.bounds)}_cloneTo(e){super._cloneTo(e);let t=e;t.receiveShadow=this.receiveShadow,t.sharedMaterials=this.sharedMaterials,t.reflectionMode=this.reflectionMode,t.castShadow=this.castShadow,t.sortingFudge=this.sortingFudge}setRenderbitFlag(e,t){t?this._baseRenderNode.renderbitFlag|=1<<e:this._baseRenderNode.renderbitFlag&=~(1<<e)}get material(){var e=this._sharedMaterials[0];if(e&&!this._materialsInstance[0]){var t=this._getInstanceMaterial(e,0),r=this._renderElements[0];r&&(r.material=t)}return this._sharedMaterials[0]}set material(e){this.sharedMaterial=e,this._isSupportRenderFeature()}get materials(){for(var e=0,t=this._sharedMaterials.length;e<t;e++)if(!this._materialsInstance[e]){var r=this._getInstanceMaterial(this._sharedMaterials[e],e),n=this._renderElements[e];n&&(n.material=r)}return this._sharedMaterials.slice()}set materials(e){this.sharedMaterials=e,this._isSupportRenderFeature()}}j._meshVerticeDefine=[],j._uniqueIDCounter=0,j._tempBoundBoxCorners=[new t.Vector3,new t.Vector3,new t.Vector3,new t.Vector3,new t.Vector3,new t.Vector3,new t.Vector3,new t.Vector3],j._defaultLightmapScaleOffset=new t.Vector4(1,1,0,0);class Z{set bufferState(e){this._geometryElementOBj.bufferState=e._deviceBufferState,this._bufferState=e}get bufferState(){return this._bufferState}set mode(e){this._geometryElementOBj.mode=e}get mode(){return this._geometryElementOBj.mode}set drawType(e){this._geometryElementOBj.drawType=e}get drawType(){return this._geometryElementOBj.drawType}setDrawArrayParams(e,t){this._geometryElementOBj.setDrawArrayParams(e,t)}setDrawElemenParams(e,t){this._geometryElementOBj.setDrawElemenParams(e,t)}set instanceCount(e){this._geometryElementOBj.instanceCount=e}get instanceCount(){return this._geometryElementOBj.instanceCount}set indexFormat(e){this._geometryElementOBj.indexFormat=e}get indexFormat(){return this._geometryElementOBj.indexFormat}get destroyed(){return this._destroyed}constructor(e,r){this._destroyed=!1,this._geometryElementOBj=t.LayaGL.renderDeviceFactory.createRenderGeometryElement(e,r),this._id=++Z._uniqueIDCounter}_getType(){throw"GeometryElement:must override it."}_prepareRender(e){return!0}_updateRenderParams(e){throw"GeometryElement:must override it."}destroy(){this._destroyed||(this._destroyed=!0,this._geometryElementOBj.destroy())}clearRenderParams(){this._geometryElementOBj.clearRenderParams()}}Z._uniqueIDCounter=0,Z._typeCounter=0;class J extends Z{static __init__(){J.instance=new J}constructor(){super(t.MeshTopology.Triangles,t.DrawType.DrawElement);var e=new Float32Array([-1,1,-1,1,1,-1,1,1,1,-1,1,1,-1,-1,-1,1,-1,-1,1,-1,1,-1,-1,1]),r=new Uint16Array([0,2,1,2,0,3,4,6,7,6,4,5,0,7,3,7,0,4,1,6,5,6,1,2,3,6,2,6,3,7,0,5,4,5,0,1]),n=t.VertexMesh.getVertexDeclaration("POSITION");let a=A.renderOBJCreate.createVertexBuffer3D(8*n.vertexStride,t.BufferUsage.Static,!1);a.vertexDeclaration=n;let i=A.renderOBJCreate.createIndexBuffer3D(t.IndexFormat.UInt16,36,t.BufferUsage.Static,!1);a.setData(e),i.setData(r),this.bufferState=new t.BufferState,this.bufferState.applyState([a],i),this._geometryElementOBj.setDrawElemenParams(36,0),this.indexFormat=t.IndexFormat.UInt16}_updateRenderParams(e){}}class q{static get vertexDeclaration(){return q._vertexDeclaration}static __init__(){q._vertexDeclaration=new t.VertexDeclaration(20,[new t.VertexElement(0,t.VertexElementFormat.Vector3,t.VertexMesh.MESH_POSITION0),new t.VertexElement(12,t.VertexElementFormat.Vector2,t.VertexMesh.MESH_TEXTURECOORDINATE0)])}get position(){return this._position}get textureCoordinate0(){return this._textureCoordinate0}get vertexDeclaration(){return q._vertexDeclaration}constructor(e,t){this._position=e,this._textureCoordinate0=t}}class $ extends Z{static __init__(){$.instance=new $}get stacks(){return this._stacks}get slices(){return this._slices}constructor(e=48,r=48){super(t.MeshTopology.Triangles,t.DrawType.DrawElement),this._stacks=e,this._slices=r;for(var n=q.vertexDeclaration,a=n.vertexStride/4,i=(this._stacks+1)*(this._slices+1),s=3*this._stacks*(this._slices+1)*2,o=new Float32Array(i*a),l=new Uint16Array(s),h=Math.PI/this._stacks,d=2*Math.PI/this._slices,c=0,u=0,_=0,m=0;m<this._stacks+1;m++)for(var f=Math.sin(m*h),g=Math.cos(m*h),p=0;p<this._slices+1;p++){var S=f*Math.sin(p*d),T=f*Math.cos(p*d);o[u+0]=S*$._radius,o[u+1]=g*$._radius,o[u+2]=T*$._radius,o[u+3]=-p/this._slices+.75,o[u+4]=m/this._stacks,u+=a,m!=this._stacks-1&&(l[_++]=c+1,l[_++]=c,l[_++]=c+(this._slices+1),l[_++]=c+(this._slices+1),l[_++]=c,l[_++]=c+this._slices,c++)}let E=A.renderOBJCreate.createVertexBuffer3D(4*o.length,t.BufferUsage.Static,!1);E.vertexDeclaration=n;let x=A.renderOBJCreate.createIndexBuffer3D(t.IndexFormat.UInt16,l.length,t.BufferUsage.Static,!1);E.setData(o.buffer),x.setData(l);var D=new t.BufferState;D.applyState([E],x),this.bufferState=D,this.indexFormat=t.IndexFormat.UInt16,this._geometryElementOBj.setDrawElemenParams(x.indexCount,0)}_updateRenderParams(e){}}$._radius=1;class ee{static __init__(){ee.SUNLIGHTDIRECTION=t.Shader3D.propertyNameToID("u_SunLight_direction"),ee.SUNLIGHTDIRCOLOR=t.Shader3D.propertyNameToID("u_SunLight_color"),ee.SKYVIEWMATRIX=t.Shader3D.propertyNameToID("u_SkyViewMat"),ee.SKYPROJECTIONMATRIX=t.Shader3D.propertyNameToID("u_SkyProjectionMat"),ee.SKYPROJECTIONVIEWMATRIX=t.Shader3D.propertyNameToID("u_SkyProjectionViewMat");const r=t.LayaGL.renderDeviceFactory.createGlobalUniformMap("SkyRenderer");r.addShaderUniform(ee.SUNLIGHTDIRECTION,"u_SunLight_direction",e.ShaderDataType.Vector3),r.addShaderUniform(ee.SUNLIGHTDIRCOLOR,"u_SunLight_color",e.ShaderDataType.Color),r.addShaderUniform(ee.SKYVIEWMATRIX,"u_SkyViewMat",e.ShaderDataType.Matrix4x4),r.addShaderUniform(ee.SKYPROJECTIONMATRIX,"u_SkyProjectionMat",e.ShaderDataType.Matrix4x4),r.addShaderUniform(ee.SKYPROJECTIONVIEWMATRIX,"u_SkyProjectionViewMat",e.ShaderDataType.Matrix4x4)}get material(){return this._material}set material(e){this._material!==e&&(this._material&&this._material._removeReference(),this._material=e,this._cacheRenderElement&&(this._cacheRenderElement.material=e),e&&e._addReference())}get mesh(){return this._mesh}set mesh(e){this._mesh!==e&&(this._mesh=e,this._cacheRenderElement&&this._cacheRenderElement.setGeometry(this.mesh))}get meshType(){return this.mesh==J.instance?"box":this.mesh==$.instance?"dome":""}set meshType(e){this.mesh="dome"==e?$.instance:J.instance}constructor(){this.mesh=$.instance,this._renderData=new j,this._baseRenderNode=A.Render3DModuleDataFactory.createBaseRenderNode(),this._baseRenderNode.transform=new F(null)}_isAvailable(){return!(!this._material||!this._mesh)}renderUpdate(e){let t=this.mesh;this._renderGeometry=t._prepareRender(e),t._updateRenderParams(e)}setRenderElement(e){this._cacheRenderElement!=e&&(e.setGeometry(this.mesh),e.material=this._material,e.render=this._renderData,e._renderElementOBJ.isRender=this._renderGeometry,this._baseRenderNode.setRenderelements([e._renderElementOBJ]),this._baseRenderNode.setCommonUniformMap(["Sprite3D","SkyRenderer"]),this._cacheRenderElement=e)}destroy(){this._material&&(this._material._removeReference(),this._material=null),this._renderData.destroy(),this._cacheRenderElement=null,this._baseRenderNode.setRenderelements([]),this._baseRenderNode.destroy()}}class te{get transform(){return this._renderElementOBJ.transform}set transform(e){this._transform=e,this._renderElementOBJ.transform=e}get material(){return this._material}set material(e){this._material&&this._material._removeOwnerElement(this._renderElementOBJ),e?(this._material=e,this.material._setOwnerElement(this._renderElementOBJ)):(this._material=null,this._renderElementOBJ.materialShaderData=null,this._renderElementOBJ.materialRenderQueue=0,this._renderElementOBJ.subShader=this._subShader=null,this._renderElementOBJ.materialId=-1)}get renderSubShader(){return this._subShader}set renderSubShader(e){this._subShader=e,this._renderElementOBJ.subShader=e}get subShaderIndex(){return this._subShaderIndex}set subShaderIndex(e){this._subShaderIndex=e}get render(){return this._baseRender}set render(e){this._baseRender=e,this._renderElementOBJ.renderShaderData=e._baseRenderNode.shaderData}constructor(){this._subShaderIndex=0,this._createRenderElementOBJ()}_createRenderElementOBJ(){this._renderElementOBJ=A.Render3DPassFactory.createRenderElement3D()}setTransform(e){this.transform=e,this._renderElementOBJ.transform=e}setGeometry(e){this._geometry=e,this._renderElementOBJ.geometry=e._geometryElementOBj}destroy(){this.material=null,this._renderElementOBJ=null,this._geometry=null,this._baseRender=null,this._baseRender=null,this._subShader=null}}const re=new t.Matrix4x4(1,0,0,0,0,-1,0,0,0,0,1,0,0,0,0,1);class ne extends te{constructor(){super(),this._viewMatrix=new t.Matrix4x4,this._projectionMatrix=new t.Matrix4x4,this._projectViewMatrix=new t.Matrix4x4}calculateViewMatrix(e){e.cloneTo(this._viewMatrix),this._viewMatrix.setTranslationVector(t.Vector3.ZERO)}caluclateProjectionMatrix(e,r,n,a,i,s){if(s){let e=.2,r=e;t.Matrix4x4.createOrthoOffCenter(-e,e,-r,r,n,a,this._projectionMatrix)}else{e.cloneTo(this._projectionMatrix);let t=1e-6,n=1/Math.tan(Math.PI*i/180*.5);this._projectionMatrix.elements[0]=n/r,this._projectionMatrix.elements[5]=n,this._projectionMatrix.elements[10]=t-1,this._projectionMatrix.elements[11]=-1,this._projectionMatrix.elements[14]=-0}}renderpre(e){if(e.invertY){let e=t.Matrix4x4.TEMPMatrix0,r=t.Matrix4x4.TEMPMatrix1;t.Matrix4x4.multiply(re,this._projectionMatrix,e),t.Matrix4x4.multiply(e,this._viewMatrix,r),this._renderElementOBJ.renderShaderData.setMatrix4x4(ee.SKYPROJECTIONMATRIX,e),this._renderElementOBJ.renderShaderData.setMatrix4x4(ee.SKYPROJECTIONVIEWMATRIX,r)}else t.Matrix4x4.multiply(this._projectionMatrix,this._viewMatrix,this._projectViewMatrix),this._renderElementOBJ.renderShaderData.setMatrix4x4(ee.SKYPROJECTIONMATRIX,this._projectionMatrix),this._renderElementOBJ.renderShaderData.setMatrix4x4(ee.SKYPROJECTIONVIEWMATRIX,this._projectViewMatrix);this._renderElementOBJ.renderShaderData.setMatrix4x4(ee.SKYVIEWMATRIX,this._viewMatrix),this._renderElementOBJ.renderShaderData.setColor(ee.SUNLIGHTDIRCOLOR,e.scene._sunColor),this._renderElementOBJ.renderShaderData.setVector3(ee.SUNLIGHTDIRECTION,e.scene._sundir)}}class ae extends B{static shaderValueInit(){ae.SHADERDEFINE_DEPTH=t.Shader3D.getDefineByName("DEPTHMAP"),ae.SHADERDEFINE_DEPTHNORMALS=t.Shader3D.getDefineByName("DEPTHNORMALSMAP"),ae.SHADERDEFINE_ORTHOGRAPHIC=t.Shader3D.getDefineByName("CAMERAORTHOGRAPHIC"),ae.SHADERDEFINE_FXAA=t.Shader3D.getDefineByName("FXAA");let r=ae.cameraUniformMap=t.LayaGL.renderDeviceFactory.createGlobalUniformMap("BaseCamera");ae.CAMERAPOS=t.Shader3D.propertyNameToID("u_CameraPos"),ae.VIEWMATRIX=t.Shader3D.propertyNameToID("u_View"),ae.VIEWPROJECTMATRIX=t.Shader3D.propertyNameToID("u_ViewProjection"),ae.PROJECTMATRIX=t.Shader3D.propertyNameToID("u_Projection"),ae.CAMERADIRECTION=t.Shader3D.propertyNameToID("u_CameraDirection"),ae.CAMERAUP=t.Shader3D.propertyNameToID("u_CameraUp"),ae.VIEWPORT=t.Shader3D.propertyNameToID("u_Viewport"),ae.PROJECTION_PARAMS=t.Shader3D.propertyNameToID("u_ProjectionParams"),ae.DEPTHTEXTURE=t.Shader3D.propertyNameToID("u_CameraDepthTexture"),ae.DEPTHNORMALSTEXTURE=t.Shader3D.propertyNameToID("u_CameraDepthNormalsTexture"),ae.OPAQUETEXTURE=t.Shader3D.propertyNameToID("u_CameraOpaqueTexture"),ae.OPAQUETEXTUREPARAMS=t.Shader3D.propertyNameToID("u_OpaqueTextureParams"),ae.DEPTHZBUFFERPARAMS=t.Shader3D.propertyNameToID("u_ZBufferParams"),ae.CAMERAUNIFORMBLOCK=t.Shader3D.propertyNameToID(t.UniformBufferObject.UBONAME_CAMERA),t.Config3D._uniformBlock?r.addShaderBlockUniform(ae.CAMERAUNIFORMBLOCK,t.UniformBufferObject.UBONAME_CAMERA,[{id:ae.VIEWMATRIX,propertyName:"u_View",uniformtype:e.ShaderDataType.Matrix4x4},{id:ae.PROJECTMATRIX,propertyName:"u_Projection",uniformtype:e.ShaderDataType.Matrix4x4},{id:ae.VIEWPROJECTMATRIX,propertyName:"u_ViewProjection",uniformtype:e.ShaderDataType.Matrix4x4},{id:ae.PROJECTION_PARAMS,propertyName:"u_ProjectionParams",uniformtype:e.ShaderDataType.Vector4},{id:ae.VIEWPORT,propertyName:"u_Viewport",uniformtype:e.ShaderDataType.Vector4},{id:ae.CAMERADIRECTION,propertyName:"u_CameraDirection",uniformtype:e.ShaderDataType.Vector3},{id:ae.CAMERAUP,propertyName:"u_CameraUp",uniformtype:e.ShaderDataType.Vector3},{id:ae.CAMERAPOS,propertyName:"u_CameraPos",uniformtype:e.ShaderDataType.Vector3}]):(r.addShaderUniform(ae.CAMERAPOS,"u_CameraPos",e.ShaderDataType.Vector3),r.addShaderUniform(ae.VIEWMATRIX,"u_View",e.ShaderDataType.Matrix4x4),r.addShaderUniform(ae.PROJECTMATRIX,"u_Projection",e.ShaderDataType.Matrix4x4),r.addShaderUniform(ae.VIEWPROJECTMATRIX,"u_ViewProjection",e.ShaderDataType.Matrix4x4),r.addShaderUniform(ae.CAMERADIRECTION,"u_CameraDirection",e.ShaderDataType.Vector3),r.addShaderUniform(ae.CAMERAUP,"u_CameraUp",e.ShaderDataType.Vector3),r.addShaderUniform(ae.VIEWPORT,"u_Viewport",e.ShaderDataType.Vector4),r.addShaderUniform(ae.PROJECTION_PARAMS,"u_ProjectionParams",e.ShaderDataType.Vector4)),r.addShaderUniform(ae.DEPTHTEXTURE,"u_CameraDepthTexture",e.ShaderDataType.Texture2D),r.addShaderUniform(ae.DEPTHNORMALSTEXTURE,"u_CameraDepthNormalsTexture",e.ShaderDataType.Texture2D),r.addShaderUniform(ae.OPAQUETEXTURE,"u_CameraOpaqueTexture",e.ShaderDataType.Texture2D),r.addShaderUniform(ae.OPAQUETEXTUREPARAMS,"u_OpaqueTextureParams",e.ShaderDataType.Vector4),r.addShaderUniform(ae.DEPTHZBUFFERPARAMS,"u_ZBufferParams",e.ShaderDataType.Vector4)}static createCameraUniformBlock(){if(!ae.CameraUBOData){let e=new Map;e.set("u_View",t.UniformBufferParamsType.Matrix4x4),e.set("u_Projection",t.UniformBufferParamsType.Matrix4x4),e.set("u_ViewProjection",t.UniformBufferParamsType.Matrix4x4),e.set("u_ProjectionParams",t.UniformBufferParamsType.Vector4),e.set("u_Viewport",t.UniformBufferParamsType.Vector4),e.set("u_CameraDirection",t.UniformBufferParamsType.Vector3),e.set("u_CameraUp",t.UniformBufferParamsType.Vector3),e.set("u_CameraPos",t.UniformBufferParamsType.Vector3);let r=new Map;e.forEach(((e,n)=>{r.set(t.Shader3D.propertyNameToID(n),e)})),ae.CameraUBOData=new t.UnifromBufferData(r)}return ae.CameraUBOData}static __init__(){ae.shaderValueInit()}get clearColor(){return this._clearColor}set clearColor(e){this._clearColor=e,e.toLinear(this._linearClearColor)}get skyRenderElement(){return this._skyRenderElement}get fieldOfView(){return this._fieldOfView}set fieldOfView(e){this._fieldOfView=e,this._calculateProjectionMatrix(),this._caculateMaxLocalYRange()}get maxlocalYDistance(){return this._yrange}get nearPlane(){return this._nearPlane}set nearPlane(e){this._nearPlane=e,this._calculateProjectionMatrix()}get farPlane(){return this._farPlane}set farPlane(e){this._farPlane=e,this._calculateProjectionMatrix(),this._caculateMaxLocalYRange()}get orthographic(){return this._orthographic}set orthographic(e){this._orthographic=e,this._calculateProjectionMatrix(),e?this._shaderValues.addDefine(ae.SHADERDEFINE_ORTHOGRAPHIC):this._shaderValues.removeDefine(ae.SHADERDEFINE_ORTHOGRAPHIC)}get orthographicVerticalSize(){return this._orthographicVerticalSize}set orthographicVerticalSize(e){this._orthographicVerticalSize=e,this._calculateProjectionMatrix()}get cullingMask(){return this._cullingMask}set cullingMask(e){this._cullingMask=e}get renderingOrder(){return this._renderingOrder}set renderingOrder(e){this._renderingOrder=e,this._sortCamerasByRenderingOrder()}constructor(e=.3,r=1e3){super(),this._forward=new t.Vector3,this._up=new t.Vector3,this._shaderValues=t.LayaGL.renderDeviceFactory.createShaderData(null),this._linearClearColor=new t.Color,this.clearColor=new t.Color(100/255,149/255,237/255,1),this._fieldOfView=60,this._useUserProjectionMatrix=!1,this._orthographicVerticalSize=10,this.renderingOrder=0,this._nearPlane=e,this._farPlane=r,this.cullingMask=2147483647,this.staticMask=4294967295,this.useOcclusionCulling=!0,this._renderEngine=t.LayaGL.renderEngine,this._orthographic=!1,t.Config3D._uniformBlock&&(this._cameraUniformUBO=t.UniformBufferObject.getBuffer(t.UniformBufferObject.UBONAME_CAMERA,0),this._cameraUniformData=ae.createCameraUniformBlock(),this._cameraUniformUBO||(this._cameraUniformUBO=t.UniformBufferObject.create(t.UniformBufferObject.UBONAME_CAMERA,t.BufferUsage.Dynamic,this._cameraUniformData.getbyteLength(),!1)),this._shaderValues._addCheckUBO(t.UniformBufferObject.UBONAME_CAMERA,this._cameraUniformUBO,this._cameraUniformData),this._shaderValues.setUniformBuffer(ae.CAMERAUNIFORMBLOCK,this._cameraUniformUBO)),this._skyRenderElement=new ne}_caculateMaxLocalYRange(){let e=3.1416*this.fieldOfView/180/2,t=this.farPlane;this._yrange=Math.tan(e)*t*2}_calculateProjectionMatrix(){}_onScreenSizeChanged(){this._calculateProjectionMatrix()}_create(){return new ae}_sortCamerasByRenderingOrder(){if(this.displayedInStage)for(var e=this.scene._cameraPool,t=e.length-1,r=0;r<t;r++)if(e[r].renderingOrder>e[t].renderingOrder){var n=e[r];e[r]=e[t],e[t]=n}}_prepareCameraToRender(){this.transform.getForward(this._forward),this.transform.getUp(this._up),this._shaderValues.setVector3(ae.CAMERAPOS,this.transform.position),this._shaderValues.setVector3(ae.CAMERADIRECTION,this._forward),this._shaderValues.setVector3(ae.CAMERAUP,this._up)}render(e){}addLayer(e){this.cullingMask|=Math.pow(2,e)}removeLayer(e){this.cullingMask&=~Math.pow(2,e)}addAllLayers(){this.cullingMask=2147483647}removeAllLayers(){this.cullingMask=0}resetProjectionMatrix(){this._useUserProjectionMatrix=!1,this._calculateProjectionMatrix()}_onActive(){this._scene._addCamera(this),super._onActive()}_onInActive(){this._scene._removeCamera(this),super._onInActive()}_parse(e,r){super._parse(e,r),this.orthographic=e.orthographic,void 0!==e.orthographicVerticalSize&&(this.orthographicVerticalSize=e.orthographicVerticalSize),void 0!==e.fieldOfView&&(this.fieldOfView=e.fieldOfView),this.nearPlane=e.nearPlane,this.farPlane=e.farPlane;var n=e.clearColor;this.clearColor=new t.Color(n[0],n[1],n[2],n[3])}destroy(e=!0){this._skyRenderElement.destroy(),this._skyRenderElement=null,t.ILaya.stage.off(t.Event.RESIZE,this,this._onScreenSizeChanged),super.destroy(e)}}ae.RENDERINGTYPE_SHADERDEFINE_FXAA="FXAA",ae.RENDERINGTYPE_DEFERREDLIGHTING="DEFERREDLIGHTING",ae.RENDERINGTYPE_FORWARDRENDERING="FORWARDRENDERING",ae._invertYScaleMatrix=new t.Matrix4x4(1,0,0,0,0,-1,0,0,0,0,1,0,0,0,0,1),ae._invertYProjectionMatrix=new t.Matrix4x4,ae._invertYProjectionViewMatrix=new t.Matrix4x4,ae._tempMatrix4x40=new t.Matrix4x4;class ie{static __init__(){ie._instance=new ie,this.GammaCorrect=t.Shader3D.getDefineByName("GAMMACORRECT")}set destTarget(e){this._contextOBJ.setRenderTarget(e?e._renderTarget:null,t.RenderClearFlag.Nothing)}set viewport(e){this._contextOBJ.setViewPort(e)}set scissor(e){this._contextOBJ.setScissor(e)}get invertY(){return this._contextOBJ.invertY}set invertY(e){this._contextOBJ.invertY=e}get pipelineMode(){return this._contextOBJ.pipelineMode}set pipelineMode(e){this._contextOBJ.pipelineMode=e}get cameraShaderValue(){return this._contextOBJ.cameraData}set cameraShaderValue(e){this._contextOBJ.cameraData=e}get scene(){return this._scene}set scene(e){e?(this._contextOBJ.sceneData=e._shaderValues,this._scene=e,this._contextOBJ.sceneModuleData=e._sceneModuleData):(this._contextOBJ.sceneModuleData=null,this._contextOBJ.sceneData=null,this._scene=null)}changeViewport(e,r,n,a){t.Viewport._tempViewport.set(e,r,n,a),this.viewport=t.Viewport._tempViewport}changeScissor(e,r,n,a){t.Vector4.tempVec4.setValue(e,r,n,a),this.scissor=t.Vector4.tempVec4}applyContext(e){this._contextOBJ.cameraUpdateMask=e}drawRenderElement(e){this._contextOBJ.drawRenderElementOne(e)}constructor(){this.configPipeLineMode="Forward",this._contextOBJ=A.Render3DPassFactory.createRenderContext3D()}}class se extends Z{static __init__(){se._vertexDeclaration=new t.VertexDeclaration(16,[new t.VertexElement(0,t.VertexElementFormat.Vector4,se.SCREENQUAD_POSITION_UV)]),se.instance=new se,se.instance.invertY=!0,se.InvertInstance=new se,se.InvertInstance.invertY=!1}constructor(){super(t.MeshTopology.TriangleStrip,t.DrawType.DrawArray),this._bufferState=new t.BufferState,this._bufferStateInvertUV=new t.BufferState,this.setDrawArrayParams(0,4),this._vertexBuffer=A.renderOBJCreate.createVertexBuffer3D(64,t.BufferUsage.Static,!1),this._vertexBuffer.vertexDeclaration=se._vertexDeclaration,this._vertexBuffer.setData(se._vertices.buffer),this._bufferState.applyState([this._vertexBuffer],null),this._vertexBufferInvertUV=A.renderOBJCreate.createVertexBuffer3D(64,t.BufferUsage.Static,!1),this._vertexBufferInvertUV.vertexDeclaration=se._vertexDeclaration,this._vertexBufferInvertUV.setData(se._verticesInvertUV.buffer),this._bufferStateInvertUV.applyState([this._vertexBufferInvertUV],null),this.invertY=!1}set invertY(e){e=t.LayaGL.renderEngine._screenInvertY?!e:e,this.bufferState=e?this._bufferStateInvertUV:this._bufferState}_updateRenderParams(e){}destroy(){super.destroy(),this._bufferState.destroy(),this._vertexBuffer.destroy(),this._bufferStateInvertUV.destroy(),this._vertexBufferInvertUV.destroy()}}se.SCREENQUAD_POSITION_UV=0,se._vertices=new Float32Array([1,1,1,1,1,-1,1,0,-1,1,0,1,-1,-1,0,0]),se._verticesInvertUV=new Float32Array([1,1,1,0,1,-1,1,1,-1,1,0,0,-1,-1,0,1]);class oe{static __init__(){oe._screenShaderData=t.LayaGL.renderDeviceFactory.createShaderData(null),oe._screenShader=t.Shader3D.find("BlitScreen"),oe.SCREENTEXTURE_ID=t.Shader3D.propertyNameToID(oe.SCREENTEXTURE_NAME),oe.SCREENTEXTUREOFFSETSCALE_ID=t.Shader3D.propertyNameToID(oe.SCREENTEXTUREOFFSETSCALE_NAME),oe.MAINTEXTURE_TEXELSIZE_ID=t.Shader3D.propertyNameToID(oe.MAINTEXTURE_TEXELSIZE_NAME)}constructor(){this._commandBuffer=null}recover(){this._commandBuffer=null}destroy(){this._commandBuffer=null,this._context=null}}oe.SCREENTEXTURE_NAME="u_MainTex",oe.SCREENTEXTUREOFFSETSCALE_NAME="u_OffsetScale",oe.MAINTEXTURE_TEXELSIZE_NAME="u_MainTex_TexelSize";class le extends oe{static create(e,t,r=null,n=null,a=null,i=0,s=le._SCREENTYPE_QUAD,o=null){var l;return(l=le._pool.length>0?le._pool.pop():new le)._source=e,l.dest=t,l.offsetScale=r||le._defaultOffsetScale,l.setshader(n,i,a),l._commandBuffer=o,l}constructor(){super(),this._source=null,this._dest=null,this._offsetScale=new t.Vector4,this._shader=null,this._shaderData=null,this._subShader=0,this._sourceTexelSize=new t.Vector4,this._blitQuadCMDData=A.Render3DPassFactory.createBlitQuadCMDData(),this._transform3D=A.Render3DModuleDataFactory.createTransform(null),this._renderElement=new te,this._renderElement.setTransform(this._transform3D),this._renderElement.setGeometry(se.instance),this._blitQuadCMDData.element=this._renderElement._renderElementOBJ,this._blitQuadCMDData.element.isRender=!0}get offsetScale(){return this._offsetScale}set offsetScale(e){e.cloneTo(this._offsetScale),this._blitQuadCMDData.offsetScale=e}get dest(){return this._dest}set dest(e){this._dest=e,this._blitQuadCMDData.dest=e?e._renderTarget:null}set shaderData(e){this._shaderData=e||oe._screenShaderData,this._renderElement._renderElementOBJ.materialShaderData=this._shaderData}getRenderCMD(){return this._blitQuadCMDData}setshader(e,t,r){this._shader=e||oe._screenShader,this._subShader=t||0,this.shaderData=r,this._renderElement.renderSubShader=this._shader.getSubShaderAt(this._subShader),this._renderElement._subShaderIndex=t}run(){var e;if(this._source)e=this._source;else{if(!this._commandBuffer._camera._internalRenderTexture)throw"camera internalRenderTexture is null,please set camera enableBuiltInRenderTexture";e=this._commandBuffer._camera._internalRenderTexture}this._blitQuadCMDData.source=e._texture;var r=this._dest?this._dest:this._commandBuffer._camera._internalRenderTexture;if(r!=this._dest&&(this._blitQuadCMDData.dest=r._renderTarget),r)t.Viewport._tempViewport.set(0,0,r.width,r.height),t.Vector4.tempVec4.setValue(0,0,r.width,r.height),this._blitQuadCMDData.viewport=t.Viewport._tempViewport,this._blitQuadCMDData.scissor=t.Vector4.tempVec4;else{let e=this._commandBuffer._camera.viewport,r=e.height,n=ie.clientHeight-e.y-r;t.Viewport._tempViewport.set(e.x,n,e.width,r),t.Vector4.tempVec4.setValue(e.x,n,e.width,r),this._blitQuadCMDData.viewport=t.Viewport._tempViewport,this._blitQuadCMDData.scissor=t.Vector4.tempVec4}let n=!!r;this._renderElement.setGeometry(n?se.InvertInstance:se.instance),t.Stat.blitDrawCall++}recover(){le._pool.push(this),this._source=null,this._dest=null,le._defaultOffsetScale.cloneTo(this._offsetScale),this._shader=null,this._shaderData=null,super.recover()}destroy(){this._source=null,this.dest=null,this._offsetScale=null,this._shader=null,this._shaderData=null,this._renderElement.destroy()}}le._SCREENTYPE_QUAD=0,le._SCREENTYPE_TRIANGLE=1,le._pool=[],le._defaultOffsetScale=new t.Vector4(0,0,1,1);class he extends oe{static create(e,t,r,n,a){var i;return(i=he._pool.length>0?he._pool.pop():new he)._setRenderDataCMD.dest=e,i._setRenderDataCMD.propertyID=t,i._setRenderDataCMD.dataType=n,i._setRenderDataCMD.value=r,i._commandBuffer=a,i}constructor(){super(),this._setRenderDataCMD=A.Render3DPassFactory.createSetRenderDataCMD()}getRenderCMD(){return this._setRenderDataCMD}recover(){he._pool.push(this)}}he.ShaderDataType_define=-2,he._pool=[];class de extends oe{static create(e,t,r,n){var a;return(a=de._pool.length>0?de._pool.pop():new de)._setRenderDefineCMD.dest=e,a._setRenderDefineCMD.add=r,a._setRenderDefineCMD.define=t,a._commandBuffer=n,a}constructor(){super(),this._setRenderDefineCMD=A.Render3DPassFactory.createSetShaderDefineCMD()}getRenderCMD(){return this._setRenderDefineCMD}recover(){de._pool.push(this)}}var ce,ue,_e,me,fe,ge,pe;de._pool=[],e.BaseRenderType=void 0,(ce=e.BaseRenderType||(e.BaseRenderType={}))[ce.BaseRender=0]="BaseRender",ce[ce.MeshRender=1]="MeshRender",ce[ce.ParticleRender=2]="ParticleRender",ce[ce.TrailRender=3]="TrailRender",ce[ce.LineRender=4]="LineRender",ce[ce.TerrainRender=5]="TerrainRender",ce[ce.SkyRender=7]="SkyRender",ce[ce.SimpleSkinRender=8]="SimpleSkinRender",ce[ce.SkinnedMeshRender=9]="SkinnedMeshRender";class Se{static getMeshDefine(e,r){r.length=0;let n=e._vertexBuffer.vertexDeclaration._vertexElements;for(const e of n)switch(e.elementUsage){case t.VertexMesh.MESH_COLOR0:r.push(G.SHADERDEFINE_COLOR);break;case t.VertexMesh.MESH_TEXTURECOORDINATE0:r.push(G.SHADERDEFINE_UV0);break;case t.VertexMesh.MESH_TEXTURECOORDINATE1:r.push(G.SHADERDEFINE_UV1);break;case t.VertexMesh.MESH_TANGENT0:r.push(G.SHADERDEFINE_TANGENT)}}}class Te extends t.Component{constructor(){super(),this.runInEditor=!0}_onEnable(){const e=this.owner.getComponent(De);e&&e._enabled&&e._onMeshChange(this._sharedMesh)}_onDisable(){this.owner.getComponent(De)}get sharedMesh(){return this._sharedMesh}set sharedMesh(e){if(this._sharedMesh!==e){var t=this._sharedMesh;t&&t._removeReference(),e&&e._addReference(),this._sharedMesh=e;const r=this.owner.getComponent(De);if(!r)return;r._onMeshChange(e),this._sharedMesh=e}}_onDestroy(){this._sharedMesh&&(this._sharedMesh._removeReference(),this._sharedMesh=null)}_cloneTo(e){e.sharedMesh=this.sharedMesh,super._cloneTo(e)}}Te._meshVerticeDefine=[];class Ee{get cull(){return this._cull}set cull(e){this._cull=e}get blend(){return this._blend}set blend(e){this._blend=e}get srcBlend(){return this._srcBlend}set srcBlend(e){this._srcBlend=e}get dstBlend(){return this._dstBlend}set dstBlend(e){this._dstBlend=e}get srcBlendRGB(){return this._srcBlendRGB}set srcBlendRGB(e){this._srcBlendRGB=e}get dstBlendRGB(){return this._dstBlendRGB}set dstBlendRGB(e){this._dstBlendRGB=e}get srcBlendAlpha(){return this._srcBlendAlpha}set srcBlendAlpha(e){this._srcBlendAlpha=e}get dstBlendAlpha(){return this._dstBlendAlpha}set dstBlendAlpha(e){this._dstBlendAlpha=e}get blendEquation(){return this._blendEquation}set blendEquation(e){this._blendEquation=e}get blendEquationRGB(){return this._blendEquationRGB}set blendEquationRGB(e){this._blendEquationRGB=e}get blendEquationAlpha(){return this._blendEquationAlpha}set blendEquationAlpha(e){this._blendEquationAlpha=e}get depthTest(){return this._depthTest}set depthTest(e){this._depthTest=e}get depthWrite(){return this._depthWrite}set depthWrite(e){this._depthWrite=e}get stencilWrite(){return this._stencilWrite}set stencilWrite(e){this._stencilWrite=e}get stencilTest(){return this._stencilTest}set stencilTest(e){this._stencilTest=e}get stencilRef(){return this._stencilRef}set stencilRef(e){this._stencilRef=e}get stencilOp(){return this._stencilOp}set stencilOp(e){this._stencilOp=e}createObj(){}constructor(){this._stencilOp=new t.Vector3,this.createObj(),this.cull=Ee.CULL_BACK,this.blend=Ee.BLEND_DISABLE,this.srcBlend=Ee.BLENDPARAM_ONE,this.dstBlend=Ee.BLENDPARAM_ZERO,this.srcBlendRGB=Ee.BLENDPARAM_ONE,this.dstBlendRGB=Ee.BLENDPARAM_ZERO,this.srcBlendAlpha=Ee.BLENDPARAM_ONE,this.dstBlendAlpha=Ee.BLENDPARAM_ZERO,this.blendEquation=Ee.BLENDEQUATION_ADD,this.blendEquationRGB=Ee.BLENDEQUATION_ADD,this.blendEquationAlpha=Ee.BLENDEQUATION_ADD,this.depthTest=Ee.DEPTHTEST_LEQUAL,this.depthWrite=!0,this.stencilRef=1,this.stencilTest=Ee.STENCILTEST_OFF,this.stencilWrite=!1,this.stencilOp=new t.Vector3(Ee.STENCILOP_KEEP,Ee.STENCILOP_KEEP,Ee.STENCILOP_REPLACE)}setNull(){this.cull=null,this.blend=null,this.srcBlend=null,this.dstBlend=null,this.srcBlendRGB=null,this.dstBlendRGB=null,this.srcBlendAlpha=null,this.dstBlendAlpha=null,this.blendEquation=null,this.blendEquationRGB=null,this.blendEquationAlpha=null,this.depthTest=null,this.depthWrite=null,this.stencilRef=null,this.stencilTest=null,this.stencilWrite=null,this.stencilOp.set(null,null,null)}cloneTo(e){e.cull=this.cull,e.blend=this.blend,e.srcBlend=this.srcBlend,e.dstBlend=this.dstBlend,e.srcBlendRGB=this.srcBlendRGB,e.dstBlendRGB=this.dstBlendRGB,e.srcBlendAlpha=this.srcBlendAlpha,e.dstBlendAlpha=this.dstBlendAlpha,e.blendEquation=this.blendEquation,e.blendEquationRGB=this.blendEquationRGB,e.blendEquationAlpha=this.blendEquationAlpha,e.depthTest=this.depthTest,e.depthWrite=this.depthWrite,e.stencilRef=this.stencilRef,e.stencilTest=this.stencilTest,e.stencilWrite=this.stencilWrite,this.stencilOp.cloneTo(e.stencilOp)}clone(){var e=new Ee;return this.cloneTo(e),e}}Ee.CULL_NONE=t.CullMode.Off,Ee.CULL_FRONT=t.CullMode.Front,Ee.CULL_BACK=t.CullMode.Back,Ee.BLEND_DISABLE=t.BlendType.BLEND_DISABLE,Ee.BLEND_ENABLE_ALL=t.BlendType.BLEND_ENABLE_ALL,Ee.BLEND_ENABLE_SEPERATE=t.BlendType.BLEND_ENABLE_SEPERATE,Ee.BLENDPARAM_ZERO=t.BlendFactor.Zero,Ee.BLENDPARAM_ONE=t.BlendFactor.One,Ee.BLENDPARAM_SRC_COLOR=t.BlendFactor.SourceColor,Ee.BLENDPARAM_ONE_MINUS_SRC_COLOR=t.BlendFactor.OneMinusSourceColor,Ee.BLENDPARAM_DST_COLOR=t.BlendFactor.DestinationColor,Ee.BLENDPARAM_ONE_MINUS_DST_COLOR=t.BlendFactor.OneMinusDestinationColor,Ee.BLENDPARAM_SRC_ALPHA=t.BlendFactor.SourceAlpha,Ee.BLENDPARAM_ONE_MINUS_SRC_ALPHA=t.BlendFactor.OneMinusSourceAlpha,Ee.BLENDPARAM_DST_ALPHA=t.BlendFactor.DestinationAlpha,Ee.BLENDPARAM_ONE_MINUS_DST_ALPHA=t.BlendFactor.OneMinusDestinationAlpha,Ee.BLENDPARAM_SRC_ALPHA_SATURATE=t.BlendFactor.SourceAlphaSaturate,Ee.BLENDPARAM_BLENDCOLOR=t.BlendFactor.BlendColor,Ee.BLENDPARAM_BLEND_ONEMINUS_COLOR=t.BlendFactor.OneMinusBlendColor,Ee.BLENDEQUATION_ADD=t.BlendEquationSeparate.ADD,Ee.BLENDEQUATION_SUBTRACT=t.BlendEquationSeparate.SUBTRACT,Ee.BLENDEQUATION_REVERSE_SUBTRACT=t.BlendEquationSeparate.REVERSE_SUBTRACT,Ee.BLENDEQUATION_MIN=t.BlendEquationSeparate.MIN,Ee.BLENDEQUATION_MAX=t.BlendEquationSeparate.MAX,Ee.DEPTHTEST_OFF=t.CompareFunction.Off,Ee.DEPTHTEST_NEVER=t.CompareFunction.Never,Ee.DEPTHTEST_LESS=t.CompareFunction.Less,Ee.DEPTHTEST_EQUAL=t.CompareFunction.Equal,Ee.DEPTHTEST_LEQUAL=t.CompareFunction.LessEqual,Ee.DEPTHTEST_GREATER=t.CompareFunction.Greater,Ee.DEPTHTEST_NOTEQUAL=t.CompareFunction.NotEqual,Ee.DEPTHTEST_GEQUAL=t.CompareFunction.GreaterEqual,Ee.DEPTHTEST_ALWAYS=t.CompareFunction.Always,Ee.STENCILTEST_OFF=t.CompareFunction.Off,Ee.STENCILTEST_NEVER=t.CompareFunction.Never,Ee.STENCILTEST_LESS=t.CompareFunction.Less,Ee.STENCILTEST_EQUAL=t.CompareFunction.Equal,Ee.STENCILTEST_LEQUAL=t.CompareFunction.LessEqual,Ee.STENCILTEST_GREATER=t.CompareFunction.Greater,Ee.STENCILTEST_NOTEQUAL=t.CompareFunction.NotEqual,Ee.STENCILTEST_GEQUAL=t.CompareFunction.GreaterEqual,Ee.STENCILTEST_ALWAYS=t.CompareFunction.Always,Ee.STENCILOP_KEEP=t.StencilOperation.Keep,Ee.STENCILOP_ZERO=t.StencilOperation.Zero,Ee.STENCILOP_REPLACE=t.StencilOperation.Replace,Ee.STENCILOP_INCR=t.StencilOperation.IncrementSaturate,Ee.STENCILOP_INCR_WRAP=t.StencilOperation.IncrementWrap,Ee.STENCILOP_DECR=t.StencilOperation.DecrementSaturate,Ee.STENCILOP_DECR_WRAP=t.StencilOperation.DecrementWrap,Ee.STENCILOP_INVERT=t.StencilOperation.Invert,Ee.Default=new Ee;class xe extends t.Material{static __initDefine__(){xe.SHADERDEFINE_DIFFUSEMAP=t.Shader3D.getDefineByName("DIFFUSEMAP"),xe.SHADERDEFINE_NORMALMAP=t.Shader3D.getDefineByName("NORMALMAP"),xe.SHADERDEFINE_SPECULARMAP=t.Shader3D.getDefineByName("SPECULARMAP"),xe.SHADERDEFINE_ENABLEVERTEXCOLOR=t.Shader3D.getDefineByName("ENABLEVERTEXCOLOR"),xe.SHADERDEFINE_ENABLETRANSMISSION=t.Shader3D.getDefineByName("ENABLETRANSMISSION"),xe.SHADERDEFINE_THICKNESSMAP=t.Shader3D.getDefineByName("THICKNESSMAP"),xe.ALBEDOTEXTURE=t.Shader3D.propertyNameToID("u_DiffuseTexture"),xe.NORMALTEXTURE=t.Shader3D.propertyNameToID("u_NormalTexture"),xe.SPECULARTEXTURE=t.Shader3D.propertyNameToID("u_SpecularTexture"),xe.ALBEDOCOLOR=t.Shader3D.propertyNameToID("u_DiffuseColor"),xe.MATERIALSPECULAR=t.Shader3D.propertyNameToID("u_MaterialSpecular"),xe.SHININESS=t.Shader3D.propertyNameToID("u_Shininess"),xe.TILINGOFFSET=t.Shader3D.propertyNameToID("u_TilingOffset"),xe.TRANSMISSIONRATE=t.Shader3D.propertyNameToID("u_TransmissionRate"),xe.IBACKDIFFUSE=t.Shader3D.propertyNameToID("u_BackDiffuse"),xe.IBACKSCALE=t.Shader3D.propertyNameToID("u_BackScale"),xe.THINKNESSTEXTURE=t.Shader3D.propertyNameToID("u_ThinknessTexture"),xe.TRANSMISSIONCOLOR=t.Shader3D.propertyNameToID("u_TransmissionColor"),xe.AlbedoIntensity=t.Shader3D.propertyNameToID("u_AlbedoIntensity")}set renderMode(e){switch(e){case xe.RENDERMODE_OPAQUE:this.alphaTest=!1,this.renderQueue=t.Material.RENDERQUEUE_OPAQUE,this.depthWrite=!0,this.cull=Ee.CULL_BACK,this.blend=Ee.BLEND_DISABLE,this.depthTest=Ee.DEPTHTEST_LESS;break;case xe.RENDERMODE_CUTOUT:this.renderQueue=t.Material.RENDERQUEUE_ALPHATEST,this.alphaTest=!0,this.depthWrite=!0,this.cull=Ee.CULL_BACK,this.blend=Ee.BLEND_DISABLE,this.depthTest=Ee.DEPTHTEST_LESS;break;case xe.RENDERMODE_TRANSPARENT:this.renderQueue=t.Material.RENDERQUEUE_TRANSPARENT,this.alphaTest=!1,this.depthWrite=!1,this.cull=Ee.CULL_BACK,this.blend=Ee.BLEND_ENABLE_ALL,this.blendSrc=Ee.BLENDPARAM_SRC_ALPHA,this.blendDst=Ee.BLENDPARAM_ONE_MINUS_SRC_ALPHA,this.depthTest=Ee.DEPTHTEST_LESS;break;default:throw new Error("Material:renderMode value error.")}}get enableVertexColor(){return this.hasDefine(xe.SHADERDEFINE_ENABLEVERTEXCOLOR)}set enableVertexColor(e){e?this.addDefine(xe.SHADERDEFINE_ENABLEVERTEXCOLOR):this.removeDefine(xe.SHADERDEFINE_ENABLEVERTEXCOLOR)}get tilingOffset(){return this.getVector4ByIndex(xe.TILINGOFFSET)}set tilingOffset(e){e?this.setVector4ByIndex(xe.TILINGOFFSET,e):this.getVector4ByIndex(xe.TILINGOFFSET).setValue(1,1,0,0)}get albedoColor(){return this.getColorByIndex(xe.ALBEDOCOLOR)}set albedoColor(e){this.setColorByIndex(xe.ALBEDOCOLOR,e)}get albedoIntensity(){return this.getFloatByIndex(xe.AlbedoIntensity)}set albedoIntensity(e){this.setFloatByIndex(xe.AlbedoIntensity,e)}get specularColor(){return this.getColorByIndex(xe.MATERIALSPECULAR)}set specularColor(e){this.setColorByIndex(xe.MATERIALSPECULAR,e)}get shininess(){return this.getFloatByIndex(xe.SHININESS)}set shininess(e){e=Math.max(0,Math.min(1,e)),this.setFloatByIndex(xe.SHININESS,e)}get albedoTexture(){return this.getTextureByIndex(xe.ALBEDOTEXTURE)}set albedoTexture(e){e?this.addDefine(xe.SHADERDEFINE_DIFFUSEMAP):this.removeDefine(xe.SHADERDEFINE_DIFFUSEMAP),this.setTextureByIndex(xe.ALBEDOTEXTURE,e)}get normalTexture(){return this.getTextureByIndex(xe.NORMALTEXTURE)}set normalTexture(e){e?this.addDefine(xe.SHADERDEFINE_NORMALMAP):this.removeDefine(xe.SHADERDEFINE_NORMALMAP),this.setTextureByIndex(xe.NORMALTEXTURE,e)}get specularTexture(){return this.getTextureByIndex(xe.SPECULARTEXTURE)}set specularTexture(e){e?this.addDefine(xe.SHADERDEFINE_SPECULARMAP):this.removeDefine(xe.SHADERDEFINE_SPECULARMAP),this.setTextureByIndex(xe.SPECULARTEXTURE,e)}get enableTransmission(){return this.hasDefine(xe.SHADERDEFINE_ENABLETRANSMISSION)}set enableTransmission(e){e?this.addDefine(xe.SHADERDEFINE_ENABLETRANSMISSION):this.removeDefine(xe.SHADERDEFINE_ENABLETRANSMISSION)}get transmissionRata(){return this.getFloatByIndex(xe.TRANSMISSIONRATE)}set transmissionRata(e){this.setFloatByIndex(xe.TRANSMISSIONRATE,e)}get backDiffuse(){return this.getFloatByIndex(xe.IBACKDIFFUSE)}set backDiffuse(e){this.setFloatByIndex(xe.IBACKDIFFUSE,Math.max(e,1))}get backScale(){return this.getFloatByIndex(xe.IBACKSCALE)}set backScale(e){this.setFloatByIndex(xe.IBACKSCALE,e)}get thinknessTexture(){return this.getTextureByIndex(xe.THINKNESSTEXTURE)}set thinknessTexture(e){e?this.addDefine(xe.SHADERDEFINE_THICKNESSMAP):this.removeDefine(xe.SHADERDEFINE_THICKNESSMAP),this.setTextureByIndex(xe.THINKNESSTEXTURE,e)}get transmissionColor(){return this.getColorByIndex(xe.TRANSMISSIONCOLOR)}set transmissionColor(e){this.setColorByIndex(xe.TRANSMISSIONCOLOR,e)}get transmissionRate(){return this.getFloatByIndex(xe.TRANSMISSIONRATE)}constructor(){super(),this.setShaderName("BLINNPHONG"),this.renderMode=xe.RENDERMODE_OPAQUE}clone(){var e=new xe;return this.cloneTo(e),e}cloneTo(e){super.cloneTo(e);var t=e;t.albedoIntensity=this.albedoIntensity,t.enableVertexColor=this.enableVertexColor,this.albedoColor.cloneTo(t.albedoColor)}}xe.RENDERMODE_OPAQUE=0,xe.RENDERMODE_CUTOUT=1,xe.RENDERMODE_TRANSPARENT=2;class Ae extends te{constructor(){super(),this._dynamicWorldPositionNormalNeedUpdate=!0,this._renderElementOBJ.canDynamicBatch=!0}_onWorldMatrixChanged(){this._dynamicWorldPositionNormalNeedUpdate=!0}setTransform(e){this.transform!==e&&(this.transform&&this.transform.off(t.Event.TRANSFORM_CHANGED,this,this._onWorldMatrixChanged),e&&e.on(t.Event.TRANSFORM_CHANGED,this,this._onWorldMatrixChanged),this._dynamicWorldPositionNormalNeedUpdate=!0,this.transform=e)}setGeometry(e){this._geometry!==e&&(this._geometry=e,this._renderElementOBJ.geometry=e._geometryElementOBj)}destroy(){this._renderElementOBJ&&(this.transform&&this.transform.off(t.Event.TRANSFORM_CHANGED,this,this._onWorldMatrixChanged),super.destroy(),this.instanceSubMesh=null,this.staticBatchElementList&&this.staticBatchElementList.destroy(),this.instanceBatchElementList&&this.instanceBatchElementList.destroy(),this.vertexBatchElementList&&this.vertexBatchElementList.destroy(),this.vertexBatchVertexDeclaration=null)}}class De extends j{static __init__(){G.SHADERDEFINE_UV0=t.Shader3D.getDefineByName("UV"),G.SHADERDEFINE_COLOR=t.Shader3D.getDefineByName("COLOR"),G.SHADERDEFINE_UV1=t.Shader3D.getDefineByName("UV1"),G.SHADERDEFINE_TANGENT=t.Shader3D.getDefineByName("TANGENT"),G.SHADERDEFINE_GPU_INSTANCE=t.Shader3D.getDefineByName("GPU_INSTANCE")}constructor(){super(),this._revertStaticBatchDefineUV1=!1,this.morphTargetActiveCount=0,this._morphWeightChange=!0,this._morphTargetValues={},this._meshChange=!1,this._projectionViewWorldMatrix=new t.Matrix4x4,this._baseRenderNode.renderNodeType=e.BaseRenderType.MeshRender}_createBaseRenderNode(){return A.Render3DModuleDataFactory.createMeshRenderNode()}_createRenderElement(){return new Ae}getMesh(){return this._mesh}_onEnable(){super._onEnable();const e=this.owner.getComponent(Te);e&&e._enabled&&this._onMeshChange(e.sharedMesh)}_getMeshDefine(e,t){t.length=0,Se.getMeshDefine(e,t)}_changeVertexDefine(e){var t=this._baseRenderNode.shaderData,r=this._mesh;if(r){this._getMeshDefine(r,Te._meshVerticeDefine);for(var n=0,a=Te._meshVerticeDefine.length;n<a;n++)t.removeDefine(Te._meshVerticeDefine[n])}if(e){this._getMeshDefine(e,Te._meshVerticeDefine);for(n=0,a=Te._meshVerticeDefine.length;n<a;n++)t.addDefine(Te._meshVerticeDefine[n])}}get morphTargetValues(){return this._morphTargetValues}set morphTargetValues(e){this._morphTargetValues=e}_changeMorphTargetValue(e){this._morphWeightChange=!0}setMorphChannelWeight(e,t){let r=this._mesh;if(r&&r.morphTargetData){let n=r.morphTargetData.getMorphChannel(e);this.morphTargetValues[n.name]=t,this._morphWeightChange=!0}}_applyMorphdata(){let e=this._mesh,r=this._baseRenderNode.shaderData;if(this._morphWeightChange&&e){let n=e.morphTargetData,a=n.channelCount;for(let e=0;e<a;e++){let t=n.getMorphChannelbyIndex(e),r=this.morphTargetValues[t.name],a=0;t.targets.forEach((e=>{r<=e.fullWeight?this.morphTargetWeight[e._index]=(r-a)/(e.fullWeight-a):this.morphTargetWeight[e._index]=1,a=e.fullWeight}))}let i=0;this.morphTargetWeight.forEach(((e,t)=>{if(e>0){let r=4*i;this.morphTargetActiveData[r]=t,this.morphTargetActiveData[r+1]=e,i++}})),this.morphTargetActiveCount=Math.min(i,t.Config3D.maxMorphTargetCount),t.LayaGL.renderEngine.getCapable(t.RenderCapable.Texture3D)&&(r.setInt(U.MorphActiveCount,this.morphTargetActiveCount),r.setBuffer(U.MorphActiceTargets,this.morphTargetActiveData)),this._morphWeightChange=!1}}_setBelongScene(e){super._setBelongScene(e)}_setUnBelongScene(){super._setUnBelongScene()}_statAdd(){t.Stat.renderNode++,t.Stat.meshRenderNode++}_statRemove(){t.Stat.renderNode--,t.Stat.meshRenderNode--}_changeMorphData(e){let r=this._baseRenderNode.shaderData,n=this._mesh;let a=t.Config3D.maxMorphTargetCount;if(this.morphTargetActiveData=new Float32Array(4*a),t.LayaGL.renderEngine.getCapable(t.RenderCapable.Texture3D)){if(n&&n.morphTargetData){let e=n.morphTargetData;r.removeDefine(U.SHADERDEFINE_MORPHTARGET),e.vertexDec._vertexElements.forEach((e=>{switch(e.elementUsage){case t.VertexMesh.MESH_POSITION0:r.removeDefine(U.SHADERDEFINE_MORPHTARGET_POSITION);break;case t.VertexMesh.MESH_NORMAL0:r.removeDefine(U.SHADERDEFINE_MORPHTARGET_NORMAL);break;case t.VertexMesh.MESH_TANGENT0:r.removeDefine(U.SHADERDEFINE_MORPHTARGET_TANGENT)}}))}if(e&&e.morphTargetData){let n=e.morphTargetData;r.addDefine(U.SHADERDEFINE_MORPHTARGET),n.vertexDec._vertexElements.forEach((e=>{switch(e.elementUsage){case t.VertexMesh.MESH_POSITION0:r.addDefine(U.SHADERDEFINE_MORPHTARGET_POSITION);break;case t.VertexMesh.MESH_NORMAL0:r.addDefine(U.SHADERDEFINE_MORPHTARGET_NORMAL);break;case t.VertexMesh.MESH_TANGENT0:r.addDefine(U.SHADERDEFINE_MORPHTARGET_TANGENT)}})),r.setVector(U.MorphAttriOffset,e.morphTargetData.attributeOffset),r.setTexture(U.MorphTex,e.morphTargetData.targetTexture),r.setVector(U.MorphParams,n.params),r.setBuffer(U.MorphActiceTargets,this.morphTargetActiveData)}}if(n&&n.morphTargetData&&(this.morphTargetWeight=null,this.morphtargetChannels=null,this._morphTargetValues={}),e&&e.morphTargetData){let t=e.morphTargetData,r=t.channelCount;this.morphTargetWeight=new Float32Array(t.targetCount),this.morphtargetChannels=new Array(r);for(let e=0;e<r;e++){let r=t.getMorphChannelbyIndex(e);this.morphtargetChannels[e]=r,this._morphTargetValues[r.name]=0}}}_onMeshChange(e){if(e&&this._mesh!=e){this._changeVertexDefine(e),this._changeMorphData(e),this._mesh=e,e.morphTargetData?this.geometryBounds=e.morphTargetData.bounds:this.geometryBounds=e.bounds;var t=e.subMeshCount;this._renderElements.length=t;let a=this.sharedMaterials;a.length=t;for(var r=0;r<t;r++){var n=this._renderElements[r];n||(n=this._renderElements[r]=this._renderElements[r]?this._renderElements[r]:this._createRenderElement(),this.owner&&n.setTransform(this.owner._transform),n.render=this),a[r]=a[r]||xe.defaultMaterial,n.setGeometry(e.getSubMesh(r))}this.sharedMaterials=a,this.boundsChange=!0}else e||(this._renderElements.forEach,this._renderElements.forEach((e=>{e._renderElementOBJ.destroy(),e.destroy()})),this._renderElements.length=0,this._mesh=null,this._changeVertexDefine(null),this._changeMorphData(null),this.boundsChange=!1);this._setRenderElements(),this._meshChange=!0}_onWorldMatNeedChange(e){super._onWorldMatNeedChange(e),this._mesh||(this.boundsChange=!1)}renderUpdate(e){if(this._mesh&&(this._mesh.morphTargetData&&this._applyMorphdata(),this._meshChange)){if(1==this._renderElements.length){this._renderElements[0]._renderElementOBJ.isRender=this._renderElements[0]._geometry._prepareRender(e),this._renderElements[0]._geometry._updateRenderParams(e);let t=this.sharedMaterial;this._renderElements[0].material=t}else for(var t=0,r=this._renderElements.length;t<r;t++){this._renderElements[t]._renderElementOBJ.isRender=this._renderElements[t]._geometry._prepareRender(e),this._renderElements[t]._geometry._updateRenderParams(e);let r=this.sharedMaterials[t];this._renderElements[t].material=r}this._meshChange=!1}}_onDestroy(){super._onDestroy(),this._morphTargetValues=null}_cloneTo(e){super._cloneTo(e),e._onMeshChange(this._mesh),this.morphTargetWeight&&(e.morphTargetWeight=new Float32Array(this.morphTargetWeight));for(const t in this._morphTargetValues)e._morphTargetValues[t]=this._morphTargetValues[t]}}class Re extends oe{static create(e,t,r,n,a,i){var s;return(s=Re._pool.length>0?Re._pool.pop():new Re)._matrix=t,s._transform.worldMatrix=s._matrix,s.material=r,s.subMeshIndex=n,s._subShaderIndex=a,s.mesh=e,s._commandBuffer=i,s}get subMeshIndex(){return this._subMeshIndex}set subMeshIndex(e){this._subMeshIndex=e,this._drawRenderCMDDData.subMeshIndex=e}constructor(){super(),this._drawRenderCMDDData=A.Render3DPassFactory.createDrawNodeCMDData(),this._transform=A.Render3DModuleDataFactory.createTransform(null),this._meshRender=new De}set material(e){this._material&&this._material._removeReference(1),this._material=e,this._material&&this._material._addReference(1)}get material(){return this._material}set mesh(e){this._mesh!=e&&(this._mesh=e,this._meshRender._onMeshChange(this._mesh),this._renderElemnts=this._meshRender._renderElements,this._renderElemnts.forEach((e=>{e.material=this._material,e.setTransform(this._transform),e.renderSubShader=this._material._shader.getSubShaderAt(this._subShaderIndex),e._subShaderIndex=this._subShaderIndex})))}getRenderCMD(){return this._drawRenderCMDDData}run(){this._meshRender.sharedMaterial=this.material,this._meshRender._baseRenderNode.transform=this._transform,this._meshRender.renderUpdate(ie._instance),this._meshRender.probReflection=ie._instance.scene.sceneReflectionProb,this._drawRenderCMDDData.destSubShader=this.material.shader.getSubShaderAt(this._subShaderIndex),this._drawRenderCMDDData.destShaderData=this.material.shaderData,this._drawRenderCMDDData.node=this._meshRender._baseRenderNode}recover(){Re._pool.push(this),super.recover(),this._material&&(this.material=null),this._mesh&&(this.mesh=null)}destroy(){super.destroy(),this._renderElemnts.forEach((e=>{e.destroy()})),this._material&&this._material._removeReference(1),this._material=null,this._renderElemnts=null,this._transform=null,this._material=null,this._matrix=null}}Re._pool=[];class Me extends oe{static create(e,t,r,n){var a;return(a=Me._pool.length>0?Me._pool.pop():new Me).render=e,a.material=t,a.subMeshIndex=r,a._commandBuffer=n,a}get render(){return this._render}set render(e){this._drawNodeCMDData.node=e._baseRenderNode,this._render=e}get material(){return this._material}set material(e){this._material&&this._material._removeReference(1),e?(e._addReference(1),this._drawNodeCMDData.destShaderData=e.shaderData,this._drawNodeCMDData.destSubShader=e.shader.getSubShaderAt(0)):(this._drawNodeCMDData.destShaderData=null,this._drawNodeCMDData.destSubShader=null),this._material=e}get subMeshIndex(){return this._subMeshIndex}set subMeshIndex(e){this._subMeshIndex=e,this._drawNodeCMDData.subMeshIndex=e}constructor(){super(),this._drawNodeCMDData=A.Render3DPassFactory.createDrawNodeCMDData()}getRenderCMD(){return this._drawNodeCMDData}run(){this.render&&(this.render.renderUpdate(this._context),this._prematerial=this.render.sharedMaterials[this.subMeshIndex])}recover(){Me._pool.push(this),super.recover(),this.material=null,this.render.sharedMaterials[this.subMeshIndex]=this._prematerial,this._render=null,this.subMeshIndex=0}destroy(){super.destroy(),this.material=null}}Me._pool=[];class Ce extends oe{static create(e,r,n,a){let i=ie._instance,s=i._contextOBJ.globalShaderData;return s||(s=i._contextOBJ.globalShaderData=t.LayaGL.renderDeviceFactory.createShaderData(null)),he.create(s,e,r,n,a)}}class ve extends Z{constructor(e){super(e?e._geometryElementOBj.mode:t.MeshTopology.Triangles,t.DrawType.DrawElementInstance),this._subMesh=e,e&&(this.indexFormat=e._mesh.indexFormat)}set subMesh(e){this._subMesh=e,e&&(this.indexFormat=e._mesh.indexFormat),this.mode=e._geometryElementOBj.mode}get subMesh(){return this._subMesh}_updateRenderParams(e){let r;switch(this.clearRenderParams(),this.indexFormat){case t.IndexFormat.UInt32:r=4;break;case t.IndexFormat.UInt16:r=2;break;case t.IndexFormat.UInt8:r=1}this.setDrawElemenParams(this._subMesh.indexCount,this._subMesh._indexStart*r)}}class ye extends oe{static create(e,t,r,n,a,i,s,o){var l;if(r&&r.length>ye.maxInstanceCount||s>ye.maxInstanceCount)throw"the number of renderings exceeds the maximum number of merges";return(l=ye._pool.length>0?ye._pool.pop():new ye)._matrixs=r,l.material=n,l._subMeshIndex=t,l._subShaderIndex=a,l._commandBuffer=o,l._instanceProperty=i,l._drawnums=s,l.mesh=e,r&&l._updateWorldMatrixBuffer(),l._setInstanceBuffer(),l}constructor(){super(),this._subShaderIndex=0,this._transform=A.Render3DModuleDataFactory.createTransform(null),this._instanceRenderElementArray=[],this._instanceGeometryArray=[],this._instanceWorldMatrixData=new Float32Array(16*ye.maxInstanceCount),this._instanceWorldMatrixBuffer=A.renderOBJCreate.createVertexBuffer3D(4*this._instanceWorldMatrixData.length,t.BufferUsage.Dynamic,!1),this._instanceWorldMatrixBuffer.vertexDeclaration=t.VertexMesh.instanceWorldMatrixDeclaration,this._instanceWorldMatrixBuffer.instanceBuffer=!0,this._render=new j,this._render._baseRenderNode.shaderData.addDefine(G.SHADERDEFINE_GPU_INSTANCE),this._instanceBufferState=new t.BufferState,this._drawElementCMDData=A.Render3DPassFactory.createDrawElementCMDData()}set material(e){this._material&&this._material._removeReference(1),this._material=e,this._material&&this._material._addReference(1)}get bufferState(){return this._instanceWorldMatrixBuffer}get mesh(){return this._mesh}set mesh(e){if(this._mesh==e)return;if(j.changeVertexDefine(this._mesh,e,this._render._baseRenderNode.shaderData),this._mesh=e,!this._mesh)return;let t=this._mesh._subMeshes;if(-1==this._subMeshIndex)for(let e=0,r=t.length;e<r;e++){let r=this._instanceRenderElementArray[e]=this._instanceRenderElementArray[e]?this._instanceRenderElementArray[e]:new te,n=this._instanceGeometryArray[e]=this._instanceGeometryArray[e]?this._instanceGeometryArray[e]:new ve(t[e]);r.setGeometry(n),r.transform=this._transform,r.material=this._material,r._subShaderIndex=this._subShaderIndex,r.render=this._render,r._renderElementOBJ.owner=this._render._baseRenderNode,n.bufferState=this._instanceBufferState,n.instanceCount=this._drawnums}else{let e=this._instanceRenderElementArray[0]=this._instanceRenderElementArray[0]?this._instanceRenderElementArray[0]:new te,r=this._instanceGeometryArray[0]=this._instanceGeometryArray[0]?this._instanceGeometryArray[0]:new ve(t[this._subMeshIndex]);e.setGeometry(r),e.transform=this._transform,e.material=this._material,e.render=this._render,r.bufferState=this._instanceBufferState,r.instanceCount=this._drawnums,e._renderElementOBJ.owner=this._render._baseRenderNode}}_setInstanceBuffer(){let e=this._instanceBufferState,t=[];this._mesh._bufferState._vertexBuffers.forEach((e=>{t.push(e)})),t.push(this._instanceWorldMatrixBuffer);let r=this._instanceProperty._propertyMap;for(let e in r)t.push(r[e]._vertexBuffer);e.applyState(t,this._mesh._indexBuffer),this._instanceGeometryArray.forEach((t=>{t.bufferState=e}))}_updateWorldMatrixBuffer(){let e=this._instanceWorldMatrixData,t=this._drawnums;for(let r=0;r<t;r++)e.set(this._matrixs[r].elements,16*r);this._instanceWorldMatrixBuffer.setData(e.buffer,0,0,64*t)}setWorldMatrix(e){if(e.length<this._drawnums)throw"worldMatrixArray length is less then drawnums";this._matrixs=e,this._matrixs&&this._updateWorldMatrixBuffer()}setDrawNums(e){if(this._matrixs&&this._matrixs.length<e)throw"worldMatrixArray length is less then drawnums";this._drawnums=e;let t=this._mesh._subMeshes;if(-1==this._subMeshIndex)for(let e=0,r=t.length;e<r;e++){(this._instanceGeometryArray[e]?this._instanceGeometryArray[e]:new ve(t[e])).instanceCount=this._drawnums}else{(this._instanceGeometryArray[0]?this._instanceGeometryArray[0]:new ve(t[0])).instanceCount=this._drawnums}this._matrixs&&this._updateWorldMatrixBuffer()}getRenderCMD(){return this._drawElementCMDData}renderUpdateElement(e,t){let r=e._renderElementOBJ;return r.isRender=e._geometry._prepareRender(t),e._geometry._updateRenderParams(t),r}run(){let e=ie._instance;e._contextOBJ.cameraUpdateMask=Kr._updateMark;let t=this._instanceProperty._propertyMap;for(let e in t)t[e].updateVertexBufferData(this._drawnums);let r=this.mesh._subMeshes;if(-1==this._subMeshIndex){let t=[];for(let n=0,a=r.length;n<a;n++){let r=this._instanceRenderElementArray[n],a=this.renderUpdateElement(r,e);t.push(a)}this._drawElementCMDData.setRenderelements(t)}else{let t=this._instanceRenderElementArray[this._subMeshIndex],r=this.renderUpdateElement(t,e);this._drawElementCMDData.setRenderelements([r])}}recover(){ye._pool.push(this),super.recover(),this._material&&this._material._removeReference(1),this._material=null,this._instanceBufferState.destroy(),this._instanceBufferState=null,delete this._instanceRenderElementArray,this._instanceRenderElementArray=[],delete this._instanceGeometryArray,this._instanceGeometryArray=[],this.mesh=null}destroy(){super.destroy(),this._material&&this._material._removeReference(1),this._material=null,this._instanceBufferState.destroy(),this._instanceBufferState=null,delete this._instanceRenderElementArray,this._instanceRenderElementArray=[],delete this._instanceGeometryArray,this._instanceGeometryArray=[],this.mesh=null}}ye._pool=[],ye.maxInstanceCount=1024;class Ie extends oe{static create(e,r,n,a,i,s=1,o=0,l){var h;(h=Ie._pool.length>0?Ie._pool.pop():new Ie).renderTexture=e;let d=0;return r&&(d|=t.RenderClearFlag.Color,h._setRenderTargetCMD.clearColorValue=i),n&&(d|=t.RenderClearFlag.Depth,h._setRenderTargetCMD.clearDepthValue=s),a&&(d|=t.RenderClearFlag.Stencil,h._setRenderTargetCMD.clearStencilValue=o),h._setRenderTargetCMD.clearFlag=d,h}get renderTexture(){return this._renderTexture}set renderTexture(e){this._renderTexture=e,this._setRenderTargetCMD.rt=e._renderTarget}constructor(){super(),this._renderTexture=null,this._setRenderTargetCMD=A.Render3DPassFactory.createSetRenderTargetCMD()}getRenderCMD(){return this._setRenderTargetCMD}recover(){Ie._pool.push(this),this._renderTexture=null}}Ie._pool=[];class Le extends oe{static create(e){var t;return(t=Le._pool.length>0?Le._pool.pop():new Le).renderElement=e,t}get renderElement(){return this._renderElement}set renderElement(e){this._renderElement=e,this._drawElementCMDData.setRenderelements([this._renderElement._renderElementOBJ])}constructor(){super(),this._drawElementCMDData=A.Render3DPassFactory.createDrawElementCMDData()}recover(){super.recover(),Le._pool.push(this)}getRenderCMD(){return this._drawElementCMDData}destroy(){this._renderElement=null,this._drawElementCMDData=null}}Le._pool=[];class Be{constructor(e=null,t=!1){this._shadow=!1,this._camera=null,this._commands=[],this._renderCMDs=[],this._name=e,this._shadow=t}get name(){return this._name}get casterShadow(){return this._shadow}get context(){return this._context}set context(e){this._context=e}_apply(e=!1){for(var r=0,n=this._commands.length;r<n;r++){let e=this._commands[r];e.run&&e.run()}e&&this.context._contextOBJ.runCMDList(this._renderCMDs),t.Stat.cmdDrawCall+=this._renderCMDs.length}_applyOne(){if(this._commands.length){var e=this._commands.shift();e.run&&e.run(),e.getRenderCMD&&this.context._contextOBJ.runOneCMD(this._renderCMDs.shift()),e.recover()}return this._commands.length>0}getCommandsSize(){return this._commands.length}setShaderDataTexture(t,r,n){let a=he.create(t,r,n,e.ShaderDataType.Texture2D,this);this._commands.push(a),a.getRenderCMD&&this._renderCMDs.push(a.getRenderCMD())}setGlobalTexture(t,r){let n=Ce.create(t,r,e.ShaderDataType.Texture2D,this);this._commands.push(n),n.getRenderCMD&&this._renderCMDs.push(n.getRenderCMD())}setShaderDataColor(t,r,n){let a=he.create(t,r,n,e.ShaderDataType.Color,this);this._commands.push(a),a.getRenderCMD&&this._renderCMDs.push(a.getRenderCMD())}setGlobalColor(t,r){let n=Ce.create(t,r,e.ShaderDataType.Color,this);this._commands.push(n),n.getRenderCMD&&this._renderCMDs.push(n.getRenderCMD())}setShaderDataVector(t,r,n){let a=he.create(t,r,n,e.ShaderDataType.Vector4,this);this._commands.push(a),a.getRenderCMD&&this._renderCMDs.push(a.getRenderCMD())}setGlobalVector(t,r){let n=Ce.create(t,r,e.ShaderDataType.Vector4,this);this._commands.push(n),n.getRenderCMD&&this._renderCMDs.push(n.getRenderCMD())}setShaderDataVector3(t,r,n){let a=he.create(t,r,n,e.ShaderDataType.Vector3,this);this._commands.push(a),a.getRenderCMD&&this._renderCMDs.push(a.getRenderCMD())}setGlobalVector3(t,r){let n=Ce.create(t,r,e.ShaderDataType.Vector3,this);this._commands.push(n),n.getRenderCMD&&this._renderCMDs.push(n.getRenderCMD())}setShaderDataVector2(t,r,n){let a=he.create(t,r,n,e.ShaderDataType.Vector2,this);this._commands.push(a),a.getRenderCMD&&this._renderCMDs.push(a.getRenderCMD())}setGlobalVector2(t,r){let n=Ce.create(t,r,e.ShaderDataType.Vector2,this);this._commands.push(n),n.getRenderCMD&&this._renderCMDs.push(n.getRenderCMD())}setShaderDataNumber(t,r,n){let a=he.create(t,r,n,e.ShaderDataType.Float,this);this._commands.push(a),a.getRenderCMD&&this._renderCMDs.push(a.getRenderCMD())}setGlobalNumber(t,r){let n=Ce.create(t,r,e.ShaderDataType.Float,this);this._commands.push(n),n.getRenderCMD&&this._renderCMDs.push(n.getRenderCMD())}setShaderDataInt(t,r,n){let a=he.create(t,r,n,e.ShaderDataType.Int,this);this._commands.push(a),a.getRenderCMD&&this._renderCMDs.push(a.getRenderCMD())}setGlobalInt(t,r){let n=Ce.create(t,r,e.ShaderDataType.Int,this);this._commands.push(n),n.getRenderCMD&&this._renderCMDs.push(n.getRenderCMD())}setShaderDataMatrix(t,r,n){let a=he.create(t,r,n,e.ShaderDataType.Matrix4x4,this);this._commands.push(a),a.getRenderCMD&&this._renderCMDs.push(a.getRenderCMD())}setShaderDefine(e,t,r){let n=de.create(e,t,r,this);this._commands.push(n),n.getRenderCMD&&this._renderCMDs.push(n.getRenderCMD())}setGlobalMatrix(t,r){let n=Ce.create(t,r,e.ShaderDataType.Matrix4x4,this);this._commands.push(n),n.getRenderCMD&&this._renderCMDs.push(n.getRenderCMD())}blitScreenQuad(e,t,r=null,n=null,a=null,i=0){let s=le.create(e,t,r,n,a,i,le._SCREENTYPE_QUAD,this);this._commands.push(s),s.getRenderCMD&&this._renderCMDs.push(s.getRenderCMD())}blitScreenQuadByMaterial(e,t,r=null,n=null,a=0){var i,s;n&&(i=n._shader,s=n.shaderData);let o=le.create(e,t,r,i,s,a,le._SCREENTYPE_QUAD,this);this._commands.push(o),o.getRenderCMD&&this._renderCMDs.push(o.getRenderCMD())}blitScreenTriangle(e,t,r=null,n=null,a=null,i=0){let s=le.create(e,t,r,n,a,i,le._SCREENTYPE_TRIANGLE,this);this._commands.push(s),s.getRenderCMD&&this._renderCMDs.push(s.getRenderCMD())}setRenderTarget(e,r,n,a=t.Color.BLACK,i=1){let s=Ie.create(e,r,n,!1,a,i,0,this);this._commands.push(s),s.getRenderCMD&&this._renderCMDs.push(s.getRenderCMD())}drawMesh(e,t,r,n,a){let i=Re.create(e,t,r,n,a,this);this._commands.push(i),i.getRenderCMD&&this._renderCMDs.push(i.getRenderCMD())}drawRender(e,t,r=0){let n=Me.create(e,t,r,this);this._commands.push(n),n.getRenderCMD&&this._renderCMDs.push(n.getRenderCMD())}drawRenderElement(e){let t=Le.create(e);this._commands.push(t),t.getRenderCMD&&this._renderCMDs.push(t.getRenderCMD())}drawMeshInstance(e,r=0,n,a,i=0,s,o){if(!t.LayaGL.renderEngine.getCapable(t.RenderCapable.DrawElement_Instance))return null;var l=ye.create(e,r,n,a,i,s,o,this);return this._commands.push(l),l.getRenderCMD&&this._renderCMDs.push(l.getRenderCMD()),l}addCustomCMD(e){e._commandBuffer=this,this._commands.push(e),e.getRenderCMD&&this._renderCMDs.push(e.getRenderCMD())}clear(){for(var e=0,t=this._commands.length;e<t;e++)this._commands[e].recover();this._commands.length=0,this._renderCMDs.length=0}}class Oe{constructor(){this.updateMark=-1,this.pointLightCount=0,this.spotLightCount=0,this.indices=[]}}class we{constructor(e,r,n,a){this._updateMark=0,this._depthSliceParam=new t.Vector2,this._xSlices=e,this._ySlices=r,this._zSlices=n;var i=e*r,s=n*(1+Math.ceil(a/4));this._clusterTexture=T._createFloatTextureBuffer(i,s),this._clusterTexture.lock=!0,this._clusterPixels=new Float32Array(i*s*4);for(var o=new Array(this._zSlices),l=0;l<this._zSlices;l++){o[l]=new Array(this._ySlices);for(var h=0;h<this._ySlices;h++){o[l][h]=new Array(this._xSlices);for(var d=0;d<this._xSlices;d++)o[l][h][d]=new Oe}}this._clusterDatas=o}_placePointLightToClusters(e,t){for(var r=this._clusterDatas,n=this._updateMark,a=t.zMin,i=t.zMax;a<i;a++)for(var s=t.yMin,o=t.yMax;s<o;s++)for(var l=t.xMin,h=t.xMax;l<h;l++){var d=r[a][s][l];d.updateMark!=n&&(d.pointLightCount=0,d.spotLightCount=0,d.updateMark=n);var c=d.indices,u=d.pointLightCount++;u<c.length?c[u]=e:c.push(e)}}_placeSpotLightToClusters(e,t){for(var r=this._clusterDatas,n=this._updateMark,a=t.zMin,i=t.zMax;a<i;a++)for(var s=t.yMin,o=t.yMax;s<o;s++)for(var l=t.xMin,h=t.xMax;l<h;l++){var d=r[a][s][l];d.updateMark!=n&&(d.pointLightCount=0,d.spotLightCount=0,d.updateMark=n);var c=d.indices,u=d.pointLightCount+d.spotLightCount++;u<c.length?c[u]=e:c.push(e)}}_insertConePlane(e,r,n,a,i){var s=we._tempVector36,o=we._tempVector37;t.Vector3.cross(i,r,s),t.Vector3.cross(s,r,o),t.Vector3.normalize(o,o);var l=n*Math.tan(a),h=e.x+n*r.x+l*o.x,d=e.y+n*r.y+l*o.y,c=e.z+n*r.z+l*o.z;return h*i.x+d*i.y+c*i.z<=0||e.x*i.x+e.y*i.y+e.z*i.z<=0}_shrinkSphereLightZPerspective(e,t,r,n,a){var i=r.z,s=i-n,o=i+n;if(s>t||o<=e)return!1;var l=this._depthSliceParam;return a.zMin=Math.floor(Math.log2(Math.max(s,e))*l.x-l.y),a.zMax=Math.min(Math.ceil(Math.log2(o)*l.x-l.y),this._zSlices),!0}_shrinkSpotLightZPerspective(e,t,r,n,a,i,s){var o=n.x,l=n.y,h=n.z,d=Math.tan(i)*a,c=r.x,u=r.y,_=r.z,m=o-c,f=l-u,g=h-_,p=m*m+f*f+g*g,S=Math.sqrt(1-g*g/p),T=Math.max(Math.min(_,h-S*d),r.z-a),E=Math.min(Math.max(_,h+S*d),r.z+a);if(T>t||E<=e)return!1;var x=this._depthSliceParam;return s.zMin=Math.floor(Math.log2(Math.max(T,e))*x.x-x.y),s.zMax=Math.min(Math.ceil(Math.log2(E)*x.x-x.y),this._zSlices),!0}_shrinkSphereLightByBoundOrth(e,t,r,n,a,i,s){var o=a.z,l=o-i,h=o+i;if(l>n||h<=r)return!1;var d=a.x,c=d-i,u=d+i;if(c>e||u<=-e)return!1;var _=a.y,m=_-i,f=_+i;if(m>t||f<=-t)return!1;var g=this._xSlices,p=this._ySlices,S=this._depthSliceParam,T=2*e/g,E=2*t/p;return s.xMin=Math.max(Math.floor((c+e)/T),0),s.xMax=Math.min(Math.ceil((u+e)/T),g),s.yMin=Math.max(Math.floor((t-f)/E),0),s.yMax=Math.min(Math.ceil((t-m)/E),p),s.zMin=Math.floor(Math.log2(Math.max(l,r))*S.x-S.y),s.zMax=Math.min(Math.ceil(Math.log2(h)*S.x-S.y),this._zSlices),!0}_shrinkSpotLightByBoundOrth(e,t,r,n,a,i,s,o,l){var h=i.x,d=i.y,c=i.z,u=Math.tan(o)*s,_=a.x,m=a.y,f=a.z,g=h-_,p=d-m,S=c-f,T=g*g+p*p+S*S,E=Math.sqrt(1-S*S/T),x=Math.max(Math.min(f,c-E*u),a.z-s),A=Math.min(Math.max(f,c+E*u),a.z+s);if(x>n||A<=r)return!1;var D=Math.sqrt(1-g*g/T),R=Math.max(Math.min(_,h-D*u),a.x-s),M=Math.min(Math.max(_,h+D*u),a.x+s);if(R>e||M<=-e)return!1;var C=Math.sqrt(1-p*p/T),v=Math.max(Math.min(m,d-C*u),a.y-s),y=Math.min(Math.max(m,d+C*u),a.y+s);if(v>t||y<=-t)return!1;var I=this._xSlices,L=this._ySlices,B=this._depthSliceParam,O=2*e/I,w=2*t/L;return l.xMin=Math.max(Math.floor((R+e)/O),0),l.xMax=Math.min(Math.ceil((M+e)/O),I),l.yMin=Math.max(Math.floor((t-y)/w),0),l.yMax=Math.min(Math.ceil((t-v)/w),L),l.zMin=Math.floor(Math.log2(Math.max(x,r))*B.x-B.y),l.zMax=Math.min(Math.ceil(Math.log2(A)*B.x-B.y),this._zSlices),!0}_shrinkXYByRadiusPerspective(e,t,r,n,a){var i,s,o,l,h,d=e.x,c=e.y,u=e.z,_=this._ySlices+1;for(h=0;h<_;h++){if(c*(m=a[h]).y+u*m.z<t){s=Math.max(0,h-1);break}}if(h==_)return!1;for(l=this._ySlices,h=s+1;h<_;h++){if(c*(m=a[h]).y+u*m.z<=-t){l=Math.max(0,h);break}}for(_=this._xSlices+1,h=0;h<_;h++){if(d*(m=n[h]).x+u*m.z<t){i=Math.max(0,h-1);break}}for(o=this._xSlices,h=i+1;h<_;h++){var m;if(d*(m=n[h]).x+u*m.z<=-t){o=Math.max(0,h);break}}return r.xMin=i,r.xMax=o,r.yMin=s,r.yMax=l,!0}_shrinkSpotXYByConePerspective(e,t,r,n,a,i,s){for(var o,l,h,d,c=we._tempVector32,u=a.yMax+1,_=a.yMin+1;_<u;_++)if(this._insertConePlane(e,t,r,n,s[_])){l=Math.max(0,_-1);break}d=a.yMax;for(_=l+1;_<u;_++){var m=s[_];if(c.setValue(0,-m.y,-m.z),!this._insertConePlane(e,t,r,n,c)){d=Math.max(0,_);break}}u=a.xMax+1;for(_=a.xMin+1;_<u;_++)if(this._insertConePlane(e,t,r,n,i[_])){o=Math.max(0,_-1);break}h=a.xMax;for(_=o+1;_<u;_++){m=i[_];if(c.setValue(-m.x,0,-m.z),!this._insertConePlane(e,t,r,n,c)){h=Math.max(0,_);break}}a.xMin=o,a.xMax=h,a.yMin=l,a.yMax=d}_updatePointLightPerspective(e,r,n,a,i,s,o){var l=we._tempLightBound,h=we._tempVector30;t.Vector3.transformV3ToV3(a.owner._transform.position,n,h),h.z*=-1,this._shrinkSphereLightZPerspective(e,r,h,a.range,l)&&this._shrinkXYByRadiusPerspective(h,a.range,l,s,o)&&this._placePointLightToClusters(i,l)}_updateSpotLightPerspective(e,r,n,a,i,s,o){var l=we._tempLightBound,h=we._tempVector30,d=we._tempVector31,c=we._tempVector34,u=a.owner._transform.position,_=a.range;a.owner._transform.worldMatrix.getForward(d),t.Vector3.normalize(d,d),t.Vector3.scale(d,_,c),t.Vector3.add(u,c,c),t.Vector3.transformV3ToV3(u,n,h),t.Vector3.transformV3ToV3(c,n,c),h.z*=-1,c.z*=-1;var m=a.spotAngle/2*Math.PI/180;if(this._shrinkSpotLightZPerspective(e,r,h,c,_,m,l)&&this._shrinkXYByRadiusPerspective(h,_,l,s,o)){var f=we._tempVector33;f.x=c.x-h.x,f.y=c.y-h.y,f.z=c.z-h.z,t.Vector3.normalize(f,f),this._shrinkSpotXYByConePerspective(h,f,_,m,l,s,o),this._placeSpotLightToClusters(i,l)}}_updatePointLightOrth(e,r,n,a,i,s,o){var l=we._tempLightBound,h=we._tempVector30;t.Vector3.transformV3ToV3(s.owner._transform.position,i,h),h.z*=-1,this._shrinkSphereLightByBoundOrth(e,r,n,a,h,s.range,l)&&this._placePointLightToClusters(o,l)}_updateSpotLightOrth(e,r,n,a,i,s,o){var l=we._tempLightBound,h=we._tempVector30,d=we._tempVector31,c=we._tempVector34,u=s.owner._transform.position,_=s.range;s.owner._transform.worldMatrix.getForward(d),t.Vector3.normalize(d,d),t.Vector3.scale(d,_,c),t.Vector3.add(u,c,c),t.Vector3.transformV3ToV3(u,i,h),t.Vector3.transformV3ToV3(c,i,c),h.z*=-1,c.z*=-1;var m=s.spotAngle/2*Math.PI/180;this._shrinkSpotLightByBoundOrth(e,r,n,a,h,c,_,m,l)&&this._placeSpotLightToClusters(o,l)}update(e,r){this._updateMark++;var n=e.nearPlane;this._depthSliceParam.x=t.Config3D.lightClusterCount.z/Math.log2(e.farPlane/n),this._depthSliceParam.y=Math.log2(n)*this._depthSliceParam.x;var a=e.nearPlane,i=e.farPlane,s=e.viewMatrix,o=r._directionLights._length,l=r._pointLights,h=l._length,d=l._elements,c=r._spotLights,u=c._length,_=c._elements;if(e.orthographic){for(var m=e.orthographicVerticalSize/2,f=m*e.aspectRatio,g=0;g<h;g++,o++)this._updatePointLightOrth(f,m,a,i,s,d[g],o);for(g=0;g<u;g++,o++)this._updateSpotLightOrth(f,m,a,i,s,_[g],o)}else{e._updateClusterPlaneXY();var p=e._clusterXPlanes,S=e._clusterYPlanes;for(g=0;g<h;g++,o++)this._updatePointLightPerspective(a,i,s,d[g],o,p,S);for(g=0;g<u;g++,o++)this._updateSpotLightPerspective(a,i,s,_[g],o,p,S)}if(h+u>0){for(var T=this._xSlices,E=this._ySlices,x=this._zSlices,A=T*E*4,D=A*x,R=this._clusterPixels,M=R.length,C=this._clusterDatas,v=this._updateMark,y=!0,I=0;I<x;I++)for(var L=0;L<E;L++)for(var B=0;B<T;B++){var O=C[I][L][B],w=4*(B+L*T+I*T*E);if(O.updateMark!==v)R[w]=0,R[w+1]=0;else if(y){var P=O.indices,N=O.pointLightCount,V=O.spotLightCount,b=N+V;if(D+b<M){R[w]=N,R[w+1]=V,R[w+2]=Math.floor(D/A),R[w+3]=D%A;for(g=0;g<b;g++)R[D++]=P[g]}else{b=M-(D+b),N=Math.min(N,b),R[w]=N,R[w+1]=Math.min(V,b-N),R[w+2]=Math.floor(D/A),R[w+3]=D%A;for(g=0;g<b;g++)R[D++]=P[g];y=!1}}}var F=this._clusterTexture.width;this._clusterTexture.setSubPixelsData(0,0,F,Math.ceil(D/(4*F)),R,0,!1,!1,!1)}}}we._tempVector30=new t.Vector3,we._tempVector31=new t.Vector3,we._tempVector32=new t.Vector3,we._tempVector33=new t.Vector3,we._tempVector34=new t.Vector3,we._tempVector35=new t.Vector3,we._tempVector36=new t.Vector3,we._tempVector37=new t.Vector3,we._tempLightBound=new class{};class Pe{constructor(){this.flags=0,this.maxSubSteps=1,this.fixedTimeStep=1/60,this.enableCCD=!1,this.ccdThreshold=1e-4,this.ccdSphereRadius=1e-4}}class Ne{constructor(){this._length=0,this._elements=[]}add(e){let t=this._elements.indexOf(e);-1!=t&&t<this._length||(this._length===this._elements.length?this._elements.push(e):this._elements[this._length]=e,this._length++)}remove(e){var t=this._elements.indexOf(e);if(-1!=t&&(this._length--,t!==this._length)){var r=this._elements[this._length];this._elements[t]=r}}shift(){return this._length--,this._elements.shift()}getBrightestLight(){for(var e,t=-1,r=this._elements,n=0;n<this._length;n++){var a=r[n]._intensity;t<a&&(t=a,e=n)}return e}normalLightOrdering(e){var t=this._elements[0];this._elements[0]=this._elements[e],this._elements[e]=t}}class Ve extends Ne{remove(e){var t=this._elements.indexOf(e);this._elements.splice(t,1),this._length--}}class be{get lightmapColor(){return this._lightmapColor}set lightmapColor(e){this._lightmapColor!=e&&(this._lightmapColor&&this._lightmapColor._removeReference(),this._lightmapColor=e,e?(e._addReference(),this._dataModule.lightmapColor=e._texture):this._dataModule.lightmapColor=null)}get lightmapDirection(){return this._lightmapDirection}set lightmapDirection(e){this._lightmapDirection!=e&&(this._lightmapDirection&&this._lightmapDirection._removeReference(),this._lightmapDirection=e,e?(e._addReference(),this._dataModule.lightmapDirection=e._texture):this._dataModule.lightmapDirection=null)}constructor(){this._dataModule=A.Render3DModuleDataFactory.createLightmapData()}}be.ApplyLightmapEvent="ApplyLightmap";class Fe{}e.ShadowCascadesMode=void 0,(ue=e.ShadowCascadesMode||(e.ShadowCascadesMode={}))[ue.NoCascades=0]="NoCascades",ue[ue.TwoCascades=1]="TwoCascades",ue[ue.FourCascades=2]="FourCascades",e.ShadowMode=void 0,(_e=e.ShadowMode||(e.ShadowMode={}))[_e.None=0]="None",_e[_e.Hard=1]="Hard",_e[_e.SoftLow=2]="SoftLow",_e[_e.SoftHigh=3]="SoftHigh",e.LightType=void 0,(me=e.LightType||(e.LightType={}))[me.Directional=0]="Directional",me[me.Spot=1]="Spot",me[me.Point=2]="Point",me[me.Area=3]="Area",e.LightMode=void 0,(fe=e.LightMode||(e.LightMode={}))[fe.mix=0]="mix",fe[fe.realTime=1]="realTime",fe[fe.bakeOnly=2]="bakeOnly";class Ue extends t.Component{get intensity(){return this._intensity}set intensity(e){this._intensity=e}get shadowMode(){return this._dataModule.shadowMode}set shadowMode(e){this._dataModule.shadowMode=e}get shadowDistance(){return this._dataModule.shadowDistance}set shadowDistance(e){this._dataModule.shadowDistance=e}get shadowResolution(){return this._dataModule.shadowResolution}set shadowResolution(e){this._dataModule.shadowResolution=e}get shadowDepthBias(){return this._dataModule.shadowDepthBias}set shadowDepthBias(e){this._dataModule.shadowDepthBias=e}get shadowNormalBias(){return this._dataModule.shadowNormalBias}set shadowNormalBias(e){this._dataModule.shadowNormalBias=e}get shadowStrength(){return this._dataModule.shadowStrength}set shadowStrength(e){this._dataModule.shadowStrength=e}get shadowNearPlane(){return this._dataModule.shadowNearPlane}set shadowNearPlane(e){this._dataModule.shadowNearPlane=e}get lightmapBakedType(){return this._lightmapBakedType}set lightmapBakedType(t){let r=this._lightmapBakedType;this._lightmapBakedType!==t&&(this._lightmapBakedType=t,this._enabled&&(t==e.LightMode.bakeOnly?this._removeFromScene():r==e.LightMode.bakeOnly&&this._addToScene()))}get lightWorldMatrix(){var e=this.owner.transform.position,r=this.owner.transform.rotation;return t.Matrix4x4.createAffineTransformation(e,r,t.Vector3.ONE,this._lightWoldMatrix),this._lightWoldMatrix}get lightType(){return this._lightType}constructor(){super(),this._shadowMode=e.ShadowMode.None,this._isAlternate=!1,this._lightWoldMatrix=new t.Matrix4x4,this._creatModuleData(),this.runInEditor=!0,this._intensity=1,this._intensityColor=new t.Vector3,this.color=new t.Color(1,1,1,1),this._lightmapBakedType=e.LightMode.realTime,this.shadowResolution=2048,this.shadowDistance=50,this.shadowDepthBias=1,this.shadowNormalBias=1,this.shadowNearPlane=.1,this.shadowStrength=1,this.shadowMode=e.ShadowMode.None}_creatModuleData(){}_setOwner(e){super._setOwner(e),this._dataModule.transform=this.owner.transform}_getRenderDataModule(){return this._dataModule}_parse(e,t){super._parse(e,t);var r=e.color;this.color.r=r[0],this.color.g=r[1],this.color.b=r[2],this.intensity=e.intensity,this.lightmapBakedType=e.lightmapBakedType}_cloneTo(e){super._cloneTo(e);var t=e;t.color=this.color.clone(),t.intensity=this.intensity,t.lightmapBakedType=this.lightmapBakedType}_addToScene(){var e=this.owner.scene,r=t.Config3D.maxLightCount;e._lightCount<r?(e._lightCount++,this._addToLightQueue(),this._isAlternate=!1):(e._alternateLights.add(this),this._isAlternate=!0,console.warn("LightSprite:light count has large than maxLightCount,the latest added light will be ignore."))}_removeFromScene(){var e=this.owner._scene;if(e)if(this._isAlternate)e._alternateLights.remove(this);else if(e._lightCount--,this._removeFromLightQueue(),e._alternateLights._length>0){var t=e._alternateLights.shift();t._addToLightQueue(),t._isAlternate=!1,e._lightCount++}}_addToLightQueue(){}_removeFromLightQueue(){}_onEnable(){this.lightmapBakedType!==e.LightMode.bakeOnly&&this._addToScene()}_onDisable(){this.lightmapBakedType!==e.LightMode.bakeOnly&&this._removeFromScene()}_onDestroy(){}_create(){return new Ue}}!function(e){e[e.Near=0]="Near",e[e.Far=1]="Far",e[e.Left=2]="Left",e[e.Right=3]="Right",e[e.Bottom=4]="Bottom",e[e.Top=5]="Top"}(ge||(ge={})),e.ShadowMapFormat=void 0,(pe=e.ShadowMapFormat||(e.ShadowMapFormat={}))[pe.bit16=0]="bit16",pe[pe.bit24_8=1]="bit24_8",pe[pe.bit32=2]="bit32";class Ge{static init(){Ge._adjustNearPlane=new O(new t.Vector3,0),Ge._adjustFarPlane=new O(new t.Vector3,0)}static supportShadow(){return t.LayaGL.renderEngine.getCapable(t.RenderCapable.RenderTextureFormat_Depth)}static getTemporaryShadowTexture(r,n,a){let i=t.RenderTargetFormat.DEPTH_16;switch(a){case e.ShadowMapFormat.bit16:i=t.RenderTargetFormat.DEPTH_16;break;case e.ShadowMapFormat.bit24_8:i=t.RenderTargetFormat.DEPTHSTENCIL_24_8;break;case e.ShadowMapFormat.bit32:i=t.RenderTargetFormat.DEPTH_32}var s=t.RenderTexture.createFromPool(r,n,i,t.RenderTargetFormat.None,!1,1);return s.compareMode=t.TextureCompareMode.LESS,s.filterMode=t.FilterMode.Bilinear,s.wrapModeU=t.WrapMode.Clamp,s.wrapModeV=t.WrapMode.Clamp,s}static getShadowBias(r,n,a,i){var s;r._lightType==e.LightType.Directional?s=2/n.elements[0]:r._lightType==e.LightType.Spot?s=Math.tan(.5*r.spotAngle*t.MathUtils3D.Deg2Rad)*r.range:(console.warn("ShadowUtils:Only spot and directional shadow casters are supported now."),s=0);var o=s/a,l=-r.shadowDepthBias*o,h=-r.shadowNormalBias*o;if(r.shadowMode==e.ShadowMode.SoftHigh){const e=2.5;l*=e,h*=e}i.setValue(l,h,0,0)}static getCameraFrustumPlanes(e,t){V.getPlanesFromMatrix(e,t[ge.Near],t[ge.Far],t[ge.Left],t[ge.Right],t[ge.Top],t[ge.Bottom])}static getFarWithRadius(e,t){return Math.sqrt(e*e/t)}static getCascadesSplitDistance(t,r,n,a,i,s,o,l){l[0]=n;var h=a-n,d=Math.tan(.5*i),c=1+d*d*(s*s+1);switch(o){case e.ShadowCascadesMode.NoCascades:l[1]=Ge.getFarWithRadius(a,c);break;case e.ShadowCascadesMode.TwoCascades:l[1]=Ge.getFarWithRadius(n+h*t,c),l[2]=Ge.getFarWithRadius(a,c);break;case e.ShadowCascadesMode.FourCascades:l[1]=Ge.getFarWithRadius(n+h*r.x,c),l[2]=Ge.getFarWithRadius(n+h*r.y,c),l[3]=Ge.getFarWithRadius(n+h*r.z,c),l[4]=Ge.getFarWithRadius(a,c)}}static applySliceTransform(e,t,r,n,a){var i=Ge._tempMatrix0.elements,s=1/t,o=1/r;i[0]=e.resolution*s,i[5]=e.resolution*o,i[12]=e.offsetX*s,i[13]=e.offsetY*o,i[1]=i[2]=i[2]=i[4]=i[6]=i[7]=i[8]=i[9]=i[11]=i[14]=0,i[10]=i[15]=1;var l=16*n;T._mulMatrixArray(i,a,l,a,l)}static getDirectionLightShadowCullPlanes(r,n,a,i,s,o){var l=Ge._frustumCorners,h=Ge._backPlaneFaces,d=Ge._frustumPlaneNeighbors,c=Ge._frustumTwoPlaneCorners,u=Ge._edgePlanePoint2,_=o.cullPlanes,m=r[ge.Near],f=r[ge.Far],g=r[ge.Left],p=r[ge.Right],S=r[ge.Bottom],T=r[ge.Top],E=a[n]-i,x=Ge._adjustNearPlane,A=Ge._adjustFarPlane;x.normal=m.normal,A.normal=f.normal,x.distance=m.distance-E,A.distance=Math.min(-m.distance+o.sphereCenterZ+o.splitBoundSphere.radius,f.distance),V.get3PlaneInterPoint(x,S,p,l[e.FrustumCorner.nearBottomRight]),V.get3PlaneInterPoint(x,T,p,l[e.FrustumCorner.nearTopRight]),V.get3PlaneInterPoint(x,T,g,l[e.FrustumCorner.nearTopLeft]),V.get3PlaneInterPoint(x,S,g,l[e.FrustumCorner.nearBottomLeft]),V.get3PlaneInterPoint(A,S,p,l[e.FrustumCorner.FarBottomRight]),V.get3PlaneInterPoint(A,T,p,l[e.FrustumCorner.FarTopRight]),V.get3PlaneInterPoint(A,T,g,l[e.FrustumCorner.FarTopLeft]),V.get3PlaneInterPoint(A,S,g,l[e.FrustumCorner.FarBottomLeft]);for(var D=0,R=0;R<6;R++){var M;switch(R){case ge.Near:M=x;break;case ge.Far:M=A;break;default:M=r[R]}t.Vector3.dot(M.normal,s)<0&&(M.cloneTo(_[D]),h[D]=R,D++)}var C=D;for(R=0;R<D;R++)for(var v=h[R],y=d[v],I=0;I<4;I++){for(var L=y[I],B=!0,w=0;w<D;w++)if(L==h[w]){B=!1;break}if(B){var P=c[v][L],N=l[P[0]],b=l[P[1]];t.Vector3.add(N,s,u),O.createPlaneBy3P(N,b,u,_[C++])}}o.cullPlaneCount=C}static getBoundSphereByFrustum(e,r,n,a,i,s,o){var l,h,d=Math.sqrt(1+a*a)*Math.tan(n/2),c=d*d,u=r-e,_=r+e;c>u/_?(l=r,h=r*d):(l=.5*_*(1+c),h=.5*Math.sqrt(u*u+2*(r*r+e*e)*c+_*_*c*c));var m=o.center;return o.radius=h,t.Vector3.scale(s,l,m),t.Vector3.add(i,m,m),o.center=m,l}static getMaxTileResolutionInAtlas(e,t,r){for(var n=Math.min(e,t),a=Math.floor(e/n)*Math.floor(t/n);a<r;)n=Math.floor(n>>1),a=Math.floor(e/n)*Math.floor(t/n);return n}static getDirectionalLightMatrices(e,r,n,a,i,s,o,l){var h=o.splitBoundSphere,d=h.center,c=h.radius,u=s/2,_=c*u/(u-Ge.atlasBorderSize),m=2*_,f=s/m,g=m/s,p=Math.ceil(t.Vector3.dot(d,e)*f)*g,S=Math.ceil(t.Vector3.dot(d,r)*f)*g,E=t.Vector3.dot(d,n);d.x=e.x*p+r.x*S+n.x*E,d.y=e.y*p+r.y*S+n.y*E,d.z=e.z*p+r.z*S+n.z*E,h.center=d;var x=o.position,A=o.viewMatrix,D=o.projectionMatrix,R=o.viewProjectMatrix;o.resolution=s,o.offsetX=a%2*s,o.offsetY=Math.floor(a/2)*s,t.Vector3.scale(n,c+i,x),t.Vector3.subtract(d,x,x),t.Matrix4x4.createLookAt(x,d,e,A),t.Matrix4x4.createOrthoOffCenter(-_,_,-_,_,0,2*c+i,D),t.Matrix4x4.multiply(D,A,R);let M=Ge._shadowMapScaleOffsetMatrix.elements;t.LayaGL.renderEngine._screenInvertY&&(M=Ge._shadowMapInvertScaleOffsetMatrix.elements),T._mulMatrixArray(M,R.elements,0,l,16*a)}static prepareShadowReceiverShaderValues(e,t,r,n,a,i,s){if(a.setValue(1/e,1/t,e,t),n>1){const e=16;for(var o=n*e,l=4*e;o<l;o++)i[o]=0;for(o=0;o<n;o++){var h=r[o].splitBoundSphere,d=h.center,c=h.radius,u=4*o;s[u]=d.x,s[u+1]=d.y,s[u+2]=d.z,s[u+3]=c*c}const t=4;for(o=n*t,l=4*t;o<l;o++)s[o]=0}}}Ge._tempMatrix0=new t.Matrix4x4,Ge._shadowMapScaleOffsetMatrix=new t.Matrix4x4(.5,0,0,0,0,.5,0,0,0,0,1,0,.5,.5,0,1),Ge._shadowMapInvertScaleOffsetMatrix=new t.Matrix4x4(.5,0,0,0,0,-.5,0,0,0,0,1,0,.5,.5,0,1),Ge._frustumCorners=[new t.Vector3,new t.Vector3,new t.Vector3,new t.Vector3,new t.Vector3,new t.Vector3,new t.Vector3,new t.Vector3],Ge._backPlaneFaces=new Array(5),Ge._edgePlanePoint2=new t.Vector3,Ge._frustumPlaneNeighbors=[[ge.Left,ge.Right,ge.Top,ge.Bottom],[ge.Left,ge.Right,ge.Top,ge.Bottom],[ge.Near,ge.Far,ge.Top,ge.Bottom],[ge.Near,ge.Far,ge.Top,ge.Bottom],[ge.Near,ge.Far,ge.Left,ge.Right],[ge.Near,ge.Far,ge.Left,ge.Right]],Ge._frustumTwoPlaneCorners=[[[e.FrustumCorner.unknown,e.FrustumCorner.unknown],[e.FrustumCorner.unknown,e.FrustumCorner.unknown],[e.FrustumCorner.nearBottomLeft,e.FrustumCorner.nearTopLeft],[e.FrustumCorner.nearTopRight,e.FrustumCorner.nearBottomRight],[e.FrustumCorner.nearBottomRight,e.FrustumCorner.nearBottomLeft],[e.FrustumCorner.nearTopLeft,e.FrustumCorner.nearTopRight]],[[e.FrustumCorner.unknown,e.FrustumCorner.unknown],[e.FrustumCorner.unknown,e.FrustumCorner.unknown],[e.FrustumCorner.FarTopLeft,e.FrustumCorner.FarBottomLeft],[e.FrustumCorner.FarBottomRight,e.FrustumCorner.FarTopRight],[e.FrustumCorner.FarBottomLeft,e.FrustumCorner.FarBottomRight],[e.FrustumCorner.FarTopRight,e.FrustumCorner.FarTopLeft]],[[e.FrustumCorner.nearTopLeft,e.FrustumCorner.nearBottomLeft],[e.FrustumCorner.FarBottomLeft,e.FrustumCorner.FarTopLeft],[e.FrustumCorner.unknown,e.FrustumCorner.unknown],[e.FrustumCorner.unknown,e.FrustumCorner.unknown],[e.FrustumCorner.nearBottomLeft,e.FrustumCorner.FarBottomLeft],[e.FrustumCorner.FarTopLeft,e.FrustumCorner.nearTopLeft]],[[e.FrustumCorner.nearBottomRight,e.FrustumCorner.nearTopRight],[e.FrustumCorner.FarTopRight,e.FrustumCorner.FarBottomRight],[e.FrustumCorner.unknown,e.FrustumCorner.unknown],[e.FrustumCorner.unknown,e.FrustumCorner.unknown],[e.FrustumCorner.FarBottomRight,e.FrustumCorner.nearBottomRight],[e.FrustumCorner.nearTopRight,e.FrustumCorner.FarTopRight]],[[e.FrustumCorner.nearBottomLeft,e.FrustumCorner.nearBottomRight],[e.FrustumCorner.FarBottomRight,e.FrustumCorner.FarBottomLeft],[e.FrustumCorner.FarBottomLeft,e.FrustumCorner.nearBottomLeft],[e.FrustumCorner.nearBottomRight,e.FrustumCorner.FarBottomRight],[e.FrustumCorner.unknown,e.FrustumCorner.unknown],[e.FrustumCorner.unknown,e.FrustumCorner.unknown]],[[e.FrustumCorner.nearTopRight,e.FrustumCorner.nearTopLeft],[e.FrustumCorner.FarTopLeft,e.FrustumCorner.FarTopRight],[e.FrustumCorner.nearTopLeft,e.FrustumCorner.FarTopLeft],[e.FrustumCorner.FarTopRight,e.FrustumCorner.nearTopRight],[e.FrustumCorner.unknown,e.FrustumCorner.unknown],[e.FrustumCorner.unknown,e.FrustumCorner.unknown]]],Ge.atlasBorderSize=4;class He{static __init__(){He.SHADOW_BIAS=t.Shader3D.propertyNameToID("u_ShadowBias"),He.SHADOW_LIGHT_DIRECTION=t.Shader3D.propertyNameToID("u_ShadowLightDirection"),He.SHADOW_SPLIT_SPHERES=t.Shader3D.propertyNameToID("u_ShadowSplitSpheres"),He.SHADOW_MATRICES=t.Shader3D.propertyNameToID("u_ShadowMatrices"),He.SHADOW_MAP_SIZE=t.Shader3D.propertyNameToID("u_ShadowMapSize"),He.SHADOW_MAP=t.Shader3D.propertyNameToID("u_ShadowMap"),He.SHADOW_PARAMS=t.Shader3D.propertyNameToID("u_ShadowParams"),He.SHADOW_SPOTMAP_SIZE=t.Shader3D.propertyNameToID("u_SpotShadowMapSize"),He.SHADOW_SPOTMAP=t.Shader3D.propertyNameToID("u_SpotShadowMap"),He.SHADOW_SPOTMATRICES=t.Shader3D.propertyNameToID("u_SpotViewProjectMatrix");const r=t.LayaGL.renderDeviceFactory.createGlobalUniformMap("Scene3D");t.Config3D._uniformBlock?r.addShaderBlockUniform(t.Shader3D.propertyNameToID(t.UniformBufferObject.UBONAME_SHADOW),t.UniformBufferObject.UBONAME_SHADOW,[{id:He.SHADOW_BIAS,propertyName:"u_ShadowBias",uniformtype:e.ShaderDataType.Vector4},{id:He.SHADOW_LIGHT_DIRECTION,propertyName:"u_ShadowLightDirection",uniformtype:e.ShaderDataType.Vector3}]):(r.addShaderUniform(He.SHADOW_BIAS,"u_ShadowBias",e.ShaderDataType.Vector4),r.addShaderUniform(He.SHADOW_LIGHT_DIRECTION,"u_ShadowLightDirection",e.ShaderDataType.Vector3)),r.addShaderUniformArray(He.SHADOW_SPLIT_SPHERES,"u_ShadowSplitSpheres",e.ShaderDataType.Vector4,4),r.addShaderUniformArray(He.SHADOW_MATRICES,"u_ShadowMatrices",e.ShaderDataType.Matrix4x4,4),r.addShaderUniform(He.SHADOW_MAP_SIZE,"u_ShadowMapSize",e.ShaderDataType.Vector4),r.addShaderUniform(He.SHADOW_MAP,"u_ShadowMap",e.ShaderDataType.Texture2D),r.addShaderUniform(He.SHADOW_PARAMS,"u_ShadowParams",e.ShaderDataType.Vector4),r.addShaderUniform(He.SHADOW_SPOTMAP_SIZE,"u_SpotShadowMapSize",e.ShaderDataType.Vector4),r.addShaderUniform(He.SHADOW_SPOTMAP,"u_SpotShadowMap",e.ShaderDataType.Texture2D),r.addShaderUniform(He.SHADOW_SPOTMATRICES,"u_SpotViewProjectMatrix",e.ShaderDataType.Matrix4x4)}constructor(){t.Config3D._uniformBlock&&(this._castDepthBufferData=r.createDepthCasterUniformBlock(),this._castDepthBufferOBJ=t.UniformBufferObject.getBuffer(t.UniformBufferObject.UBONAME_SHADOW,0),this._castDepthBufferOBJ||(this._castDepthBufferOBJ=t.UniformBufferObject.create(t.UniformBufferObject.UBONAME_SHADOW,t.BufferUsage.Dynamic,this._castDepthBufferData.getbyteLength(),!0)),ae.createCameraUniformBlock(),this._castDepthCameraBufferData=ae.CameraUBOData.clone(),this._castDepthCameraBufferOBJ=t.UniformBufferObject.getBuffer(t.UniformBufferObject.UBONAME_CAMERA,1),this._castDepthCameraBufferOBJ||(this._castDepthCameraBufferOBJ=t.UniformBufferObject.create(t.UniformBufferObject.UBONAME_CAMERA,t.BufferUsage.Dynamic,this._castDepthCameraBufferData.getbyteLength(),!1)))}getDirectLightShadowMap(r){var n,a,i,s,o=r.shadowResolution,l=r.shadowCascadesMode;return l==e.ShadowCascadesMode.NoCascades?(s=o,n=o,a=o):(i=l==e.ShadowCascadesMode.TwoCascades?2:4,n=2*(s=Ge.getMaxTileResolutionInAtlas(o,o,i)),a=l==e.ShadowCascadesMode.TwoCascades?s:2*s),this._shadowDirectLightMap&&t.RenderTexture.recoverToPool(this._shadowDirectLightMap),this._shadowDirectLightMap=Ge.getTemporaryShadowTexture(n,a,e.ShadowMapFormat.bit16),this._shadowDirectLightMap}getSpotLightShadowPassData(r){this._shadowSpotLightMap&&t.RenderTexture.recoverToPool(this._shadowSpotLightMap);var n=r.shadowResolution,a=n,i=n;return this._shadowSpotLightMap=Ge.getTemporaryShadowTexture(a,i,e.ShadowMapFormat.bit16),this._shadowSpotLightMap}getPointLightShadowPassData(){}cleanUp(){this._shadowDirectLightMap&&t.RenderTexture.recoverToPool(this._shadowDirectLightMap),this._shadowSpotLightMap&&t.RenderTexture.recoverToPool(this._shadowSpotLightMap),this._shadowDirectLightMap=null,this._shadowSpotLightMap=null}}class ze{static __init__(){ze.shaderdata=t.LayaGL.renderDeviceFactory.createShaderData(null)}static create(e,t,r,n=null,a=null,i=null,s=0){var o;return(o=ze._pool.length>0?ze._pool.pop():new ze)._source=e,o._dest=t,o._offsetScale=n,o.setshader(a,s,i),o._source&&o._texture_size.setValue(e.width,e.height,1/e.width,1/e.height),o._viewPort=r,o}constructor(){this._source=null,this._dest=null,this._offsetScale=null,this._texture_size=null,this._shader=null,this._shaderData=null,this._subShader=0,this._viewPort=null,this._transform3D=A.Render3DModuleDataFactory.createTransform(null),this._renderElement=new te,this._renderElement.setTransform(this._transform3D),this._renderElement.setGeometry(se.instance),this._renderElement._renderElementOBJ.isRender=!0,this._texture_size=new t.Vector4}set shaderData(e){this._shaderData=e||ze.shaderdata,this._renderElement._renderElementOBJ.materialShaderData=this._shaderData}setshader(e,t,r){this._shader=e||oe._screenShader,this._subShader=t||0,this.shaderData=r,this._renderElement.renderSubShader=this._shader.getSubShaderAt(this._subShader)}run(){if(!this._source||!this._viewPort)return;var e=this._source,r=this._dest,n=this._shaderData;let a=ie._instance;var i=this._viewPort;let s=ie.clientHeight-i.y-i.height;t.LayaGL.renderEngine._screenInvertY?(a.changeViewport(i.x,i.y,i.width,i.height),a.changeScissor(i.x,i.y,i.width,i.height)):(a.changeViewport(i.x,s,i.width,i.height),a.changeScissor(i.x,s,i.width,i.height)),n.setTexture(oe.SCREENTEXTURE_ID,e),n.setVector(oe.SCREENTEXTUREOFFSETSCALE_ID,this._offsetScale||ze._defaultOffsetScale),e&&n.setVector(oe.MAINTEXTURE_TEXELSIZE_ID,this._texture_size),r?n.removeDefine(ie.GammaCorrect):n.addDefine(ie.GammaCorrect),this._renderElement.setGeometry(se.InvertInstance),a.destTarget=r,a._contextOBJ.cameraUpdateMask=Kr._updateMark,a.drawRenderElement(this._renderElement._renderElementOBJ),t.Stat.blitDrawCall++}recover(){ze._pool.push(this),this._source=null,this._dest=null,this._offsetScale=null,this._shader=null,this._shaderData=null,this._viewPort=null}}ze._pool=[],ze._defaultOffsetScale=new t.Vector4(0,0,1,1);class ke{constructor(){this._sceneManagerOBJ=A.Render3DPassFactory.createSceneRenderManager()}get list(){return this._sceneManagerOBJ.list}set list(e){this._sceneManagerOBJ.list=e}get renderBaselist(){return this._sceneManagerOBJ.baseRenderList}addRenderObject(e){this._sceneManagerOBJ.addRenderObject(e)}removeRenderObject(e){this._sceneManagerOBJ.removeRenderObject(e)}removeMotionObject(e){this._sceneManagerOBJ.removeMotionObject(e)}updateMotionObjects(){this._sceneManagerOBJ.updateMotionObjects()}renderUpdate(){var e=ie._instance;let t=this._sceneManagerOBJ.list.elements;for(let r=0,n=this.list.length;r<n;r++)t[r].renderUpdate(e)}addMotionObject(e){this._sceneManagerOBJ.addMotionObject(e)}destroy(){this._sceneManagerOBJ.destroy()}}class We{constructor(){this._UI3Dlist=new t.FastSinglelist}add(e){this._UI3Dlist.add(e)}remove(e){this._UI3Dlist.remove(e)}update(){let e=this._UI3Dlist.elements;for(var t=0,r=this._UI3Dlist.length;t<r;t++)e[t]._submitRT()}rayCast(e){let t=e.origin;this._UI3Dlist.clean(),this._UI3Dlist.elements.sort(((e,r)=>e._getCameraDistance(t)-r._getCameraDistance(t)));let r=this._UI3Dlist.elements;for(var n=0,a=this._UI3Dlist.length;n<a;n++){let t=r[n]._checkUIPos(e);if(t)return t}return null}destory(){this._UI3Dlist.destroy()}}class Ye{constructor(){this.source=null,this.indirectTarget=null,this.destination=null,this.camera=null,this.compositeShaderData=null,this.command=null,this.deferredReleaseTextures=[]}createRTByContextReleaseTexture(e,t,r,n,a=!1,i=1,s=!1,o=!1){let l=this.deferredReleaseTextures.length;for(let h=0;h<l;h++){let d=this.deferredReleaseTextures[h];if(d.width==e&&d.height==t&&d.colorFormat==r&&d.depthStencilFormat==n&&d._generateMipmap==a&&d.multiSamples==i&&d.generateDepthTexture==s&&d._gammaSpace==o){d._inPool=!1;let e=this.deferredReleaseTextures[l-1];return this.deferredReleaseTextures[h]=e,this.deferredReleaseTextures.length-=1,d}}return null}}class Xe{constructor(){this._active=!0,this._singleton=!0}get singleton(){return this._singleton}set singleton(e){this._singleton=e}get active(){return this._active}set active(e){this._active=e}getCameraDepthTextureModeFlag(){return 0}effectInit(e){}release(e){}render(e){}}var Qe,Ke,je="#define SHADER_NAME BlitVS\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\nvoid main()\r\n{\r\n    gl_Position = vec4(u_OffsetScale.x * 2.0 - 1.0 + (a_PositionTexcoord.x + 1.0) * u_OffsetScale.z, (1.0 - ((u_OffsetScale.y * 2.0 - 1.0 + (-a_PositionTexcoord.y + 1.0) * u_OffsetScale.w) + 1.0) / 2.0) * 2.0 - 1.0, 0.0, 1.0);\r\n\r\n    v_Texcoord0 = a_PositionTexcoord.zw;\r\n}";e.ToneMappingType=void 0,(Qe=e.ToneMappingType||(e.ToneMappingType={}))[Qe.None=0]="None",Qe[Qe.ACES=1]="ACES";class Ze extends Xe{static init(){Ze.__initDefine__();let r={a_PositionTexcoord:[t.VertexMesh.MESH_POSITION0,e.ShaderDataType.Vector4]},n={u_OffsetScale:e.ShaderDataType.Vector4,u_MainTex:e.ShaderDataType.Texture2D,u_MainTex_TexelSize:e.ShaderDataType.Vector4},a=t.Shader3D.add("blitLUTShader");a.shaderType=t.ShaderFeatureType.PostProcess;let i=new t.SubShader(r,n);a.addSubShader(i);let s=i.addShaderPass(je,'#define SHADER_NAME BlitLUTFS\r\n\r\n#include "Color.glsl";\r\n\r\n#include "ColorGrading.glsl";\r\n#include "LUT.glsl";\r\n\r\nuniform sampler2D u_Lut;\r\nuniform vec4 u_LutParams; // w postExposure\r\n\r\n#ifdef CUSTOMLUT\r\nuniform sampler2D u_CustomLut;\r\nuniform vec4 u_CustomLutParams;\r\n#endif // CUSTOMLUT\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\nvoid main()\r\n{\r\n    gl_FragColor = texture2D(u_MainTex, v_Texcoord0);\r\n#ifdef Gamma_u_MainTex\r\n    gl_FragColor = gammaToLinear(gl_FragColor);\r\n#endif // Gamma_u_MainTex\r\n\r\n    vec3 color = gl_FragColor.rgb;\r\n    // gl_FragColor.rgb = applyLut(color, 1.0, u_Lut, u_LutParams);\r\n    color *= u_LutParams.w;\r\n    color = applyLut(u_Lut, linearToLogC(color), u_LutParams.xyz);\r\n\r\n#ifdef CUSTOMLUT\r\n\r\n    float contrib = u_CustomLutParams.w;\r\n    vec3 gamma = linearToGamma(color);\r\n    vec3 userLut = applyLut(u_CustomLut, gamma, u_CustomLutParams);\r\n    gamma = mix(gamma, userLut, contrib);\r\n    color = gammaToLinear(gamma);\r\n\r\n#endif // CUSTOMLUT\r\n\r\n    gl_FragColor.rgb = color;\r\n\r\n    gl_FragColor = outputTransform(gl_FragColor);\r\n}\r\n');s.renderState.depthTest=Ee.DEPTHTEST_ALWAYS,s.renderState.depthWrite=!1,s.renderState.cull=Ee.CULL_NONE,s.renderState.blend=Ee.BLEND_DISABLE}static __initDefine__(){Ze.SHADERDEFINE_ACES=t.Shader3D.getDefineByName("ACES"),Ze.SHADERDEFINE_CUSTOMLUT=t.Shader3D.getDefineByName("CUSTOMLUT"),Ze.SHADERVALUE_LUT=t.Shader3D.propertyNameToID("u_Lut"),Ze.SHADERVALUE_LUTPARAMS=t.Shader3D.propertyNameToID("u_LutParams"),Ze.SHADERVALUE_CUSTOMLUT=t.Shader3D.propertyNameToID("u_CustomLut"),Ze.SHADERVALUE_CUSTOMLUTPARAMS=t.Shader3D.propertyNameToID("u_CustomLutParams")}get toneMapping(){return this._toneMapping}set toneMapping(e){e!=this._toneMapping&&(this._needBuildLUT=!0,this._toneMapping=e)}get enableSplitTone(){return this._enableSplitTone}set enableSplitTone(e){this._enableSplitTone=e,this._needBuildLUT=!0}get splitShadow(){return this._splitShadow}set splitShadow(e){this._needBuildLUT=!0,e.cloneTo(this._splitShadow)}get splithighlights(){return this._splithighlights}set splithighlights(e){this._splithighlights.equal(e)||(this._needBuildLUT=!0,e.cloneTo(this._splithighlights))}get splitBalance(){return this._splitBalance}set splitBalance(e){this._needBuildLUT=!0,this._splitBalance=e}get enableSMH(){return this._enableSMH}set enableSMH(e){this._needBuildLUT=!0,this._enableSMH=e}get shadows(){return this._shadows}set shadows(e){this._shadows.equal(e)||(this._needBuildLUT=!0,e.cloneTo(this._shadows))}get midtones(){return this._midtones}set midtones(e){this._midtones.equal(e)||(this._needBuildLUT=!0,e.cloneTo(this._midtones))}get highlights(){return this._highlights}set highlights(e){this._highlights.equal(e)||(this._needBuildLUT=!0,e.cloneTo(this._highlights))}get shadowLimitStart(){return this._limits.x}set shadowLimitStart(e){this._needBuildLUT=!0,this._limits.x=Math.min(e,this.shadowLimitEnd)}get shadowLimitEnd(){return this._limits.y}set shadowLimitEnd(e){this._needBuildLUT=!0,this._limits.y=Math.max(e,this.shadowLimitStart)}get highLightLimitStart(){return this._limits.z}set highLightLimitStart(e){this._needBuildLUT=!0,this._limits.z=Math.min(e,this.highLightLimitEnd)}get highLightLimitEnd(){return this._limits.w}set highLightLimitEnd(e){this._needBuildLUT=!0,this._limits.w=Math.max(this.highLightLimitStart,e)}get enableLiftGammaGain(){return this._enableLiftGammaGain}set enableLiftGammaGain(e){this._needBuildLUT=!0,this._enableLiftGammaGain=e}get lift(){return this._lift}set lift(e){this.lift.equal(e)||(this._needBuildLUT=!0,e.cloneTo(this._lift))}get gamma(){return this._gamma}set gamma(e){this._gamma.equal(e)||(this._needBuildLUT=!0,e.cloneTo(this._gamma))}get gain(){return this._gain}set gain(e){this._gain.equal(e)||(this._needBuildLUT=!0,e.cloneTo(this._gain))}_StandardIlluminantY(e){return 2.87*e-3*e*e-.27509507}_CIExyToLMS(e,r){let n=1*e/r,a=1*(1-e-r)/r,i=.7328*n+.4296-.1624*a,s=-.7036*n+1.6975+.0061*a,o=.003*n+.0136+.9834*a;return new t.Vector3(i,s,o)}_ColorBalanceToLMSCoeffs(e,r){let n=e/65,a=r/65,i=.31271-n*(n<0?.1:.05),s=this._StandardIlluminantY(i)+.05*a,o=new t.Vector3(.949237,1.03542,1.08728),l=this._CIExyToLMS(i,s);this._balance.set(o.x/l.x,o.y/l.y,o.z/l.z)}get enableBalance(){return this._enableBalance}set enableBalance(e){this._needBuildLUT=!0,this._enableBalance=e}get tint(){return this._tint}set tint(e){this._needBuildLUT=!0,this._tint=e,this._ColorBalanceToLMSCoeffs(this._temperature,this._tint)}get temperature(){return this._temperature}set temperature(e){this._needBuildLUT=!0,this._temperature=e,this._ColorBalanceToLMSCoeffs(this._temperature,this._tint)}get enableColorAdjust(){return this._enableColorAdjust}set enableColorAdjust(e){this._needBuildLUT=!0,this._enableColorAdjust=e}get postExposure(){return this._postExposure}set postExposure(e){this._postExposure=e}get contrast(){return this._contrast}set contrast(e){this._needBuildLUT=!0,this._contrast=e}get colorFilter(){return this._colorFilter}set colorFilter(e){this._needBuildLUT=!0,e.cloneTo(this._colorFilter)}get HueShift(){return this._HueShift}set HueShift(e){this._needBuildLUT=!0,this._HueShift=e}get saturation(){return this._saturation}set saturation(e){this._needBuildLUT=!0,this._saturation=e}constructor(){super(),this._needBuildLUT=!1,this._lutBuilderMat=new t.Material,this._lutSize=32,this._enableSplitTone=!1,this._splitShadow=new t.Vector3(.5,.5,.5),this._splitBalance=0,this._splithighlights=new t.Vector3(.5,.5,.5),this._u_SplitShadow=new t.Vector4(0,0,0),this._enableSMH=!1,this._shadows=new t.Vector3(1,1,1),this._midtones=new t.Vector3(1,1,1),this._highlights=new t.Vector3(1,1,1),this._limits=new t.Vector4(0,.33,.55,1),this._enableLiftGammaGain=!1,this._lift=new t.Vector3(0,0,0),this._gamma=new t.Vector3(1,1,1),this._gain=new t.Vector3(1,1,1),this._enableBalance=!1,this._balance=new t.Vector3,this._tint=0,this._temperature=0,this._enableColorAdjust=!1,this._postExposure=1,this._contrast=1,this._colorFilter=new t.Color(1,1,1),this._HueShift=0,this._saturation=1,this._HueSatCon=new t.Vector4(0,1,1,0),this.default_balance=new t.Vector3(1,1,1),this.default_splitShadow=new t.Vector4(.5,.5,.5,0),this.default_splithighlights=new t.Vector3(.5,.5,.5),this.default_shadow=new t.Vector3(1,1,1),this.default_midtones=new t.Vector3(1,1,1),this.default_highlight=new t.Vector3(1,1,1),this.default_limint=new t.Vector4(0,.3,.55,1),this.default_lift=new t.Vector3(0,0,0),this.default_gamma=new t.Vector3(1,1,1),this.default_gain=new t.Vector3(1,1,1),this.default_ColorFilter=new t.Color(1,1,1,1),this.default_HueSatCon=new t.Vector4(0,1,1,0),this.singleton=!0,this.active=!0,this._needBuildLUT=!0,this._toneMapping=e.ToneMappingType.None,this._blitlutParams=new t.Vector4,this._lutShaderData=t.LayaGL.renderDeviceFactory.createShaderData(null),this.lutSize=32,this._lutBuilderMat=new t.Material}get lutSize(){return this._lutSize}set lutSize(e){e>32||(this._lutSize=e,this._lutTex&&this._lutTex.destroy(),this._lutTex=new t.RenderTexture(this._lutSize*this._lutSize,this._lutSize,t.RenderTargetFormat.R16G16B16A16,null,!1,1,!1,!1),this._lutTex.anisoLevel=1,this._lutTex.wrapModeU=t.WrapMode.Clamp,this._lutTex.wrapModeV=t.WrapMode.Clamp,this._lutTex.filterMode=t.FilterMode.Bilinear)}_buildLUT(){if(!this._needBuildLUT)return;let r=this.lutSize,n=this.lutSize*this.lutSize,a=new t.Vector4(r,.5/n,.5/r,r/(r-1));this._lutBuilderMat.setVector4("u_LutParams",a),this.enableBalance?(this._ColorBalanceToLMSCoeffs(this.temperature,this.tint),this._lutBuilderMat.setVector3("u_ColorBalance",this._balance)):this._lutBuilderMat.setVector3("u_ColorBalance",this.default_balance),this.enableSplitTone?(this._u_SplitShadow.setValue(this._splitShadow.x,this._splitShadow.y,this._splitShadow.z,this.splitBalance),this._lutBuilderMat.setVector4("u_SplitShadows",this._u_SplitShadow),this._lutBuilderMat.setVector3("u_Splithighlights",this._splithighlights)):(this._lutBuilderMat.setVector4("u_SplitShadows",this.default_splitShadow),this._lutBuilderMat.setVector3("u_Splithighlights",this.default_splithighlights)),this.enableSMH?(this._lutBuilderMat.setVector3("u_Shadows",this._shadows),this._lutBuilderMat.setVector3("u_Midtones",this._midtones),this._lutBuilderMat.setVector3("u_Highlights",this._highlights),this._lutBuilderMat.setVector4("u_Limits",this._limits)):(this._lutBuilderMat.setVector3("u_Shadows",this.default_shadow),this._lutBuilderMat.setVector3("u_Midtones",this.default_midtones),this._lutBuilderMat.setVector3("u_Highlights",this.default_highlight),this._lutBuilderMat.setVector4("u_Limits",this.default_limint)),this._enableLiftGammaGain?(this._lutBuilderMat.setVector3("u_Lift",this._lift),this._lutBuilderMat.setVector3("u_Gamma",this._gamma),this._lutBuilderMat.setVector3("u_Gain",this._gain)):(this._lutBuilderMat.setVector3("u_Lift",this.default_lift),this._lutBuilderMat.setVector3("u_Gamma",this.default_gamma),this._lutBuilderMat.setVector3("u_Gain",this.default_gain)),this.enableColorAdjust?(this._HueSatCon.setValue(this._HueShift,this.saturation,this._contrast,0),this._lutBuilderMat.setColor("u_ColorFilter",this._colorFilter),this._lutBuilderMat.setVector4("u_HueSatCon",this._HueSatCon)):(this._lutBuilderMat.setColor("u_ColorFilter",this.default_ColorFilter),this._lutBuilderMat.setVector4("u_HueSatCon",this.default_HueSatCon)),this._toneMapping==e.ToneMappingType.ACES?this._lutBuilderMat.addDefine(Ze.SHADERDEFINE_ACES):this._lutBuilderMat.removeDefine(Ze.SHADERDEFINE_ACES),this._postProcess._context.command.blitScreenQuadByMaterial(t.Texture2D.whiteTexture,this._lutTex,null,this._lutBuilderMat)}effectInit(e){super.effectInit(e),this._lutBuilderMat.setShaderName("LUTBuilder"),this._LUTShader=t.Shader3D.find("blitLUTShader"),e._enableColorGrad=!0,e._ColorGradEffect=this,this._postProcess=e}release(e){super.release(e),e._enableColorGrad=!1,e._ColorGradEffect=null}render(e){let t=e.command,r=e.indirectTarget;this._blitlutParams.setValue(1/this._lutTex.width,1/this._lutTex.height,this._lutTex.height-1,this.enableColorAdjust?this._postExposure:1),this._lutBuilderMat.removeDefine(Ze.SHADERDEFINE_CUSTOMLUT),this._lutShaderData.setTexture(Ze.SHADERVALUE_LUT,this._lutTex),this._lutShaderData.setVector(Ze.SHADERVALUE_LUTPARAMS,this._blitlutParams),t.blitScreenTriangle(r,e.destination,null,this._LUTShader,this._lutShaderData)}}class Je{static __init__(){Je.SHADERDEFINE_BLOOM_LOW=t.Shader3D.getDefineByName("BLOOM_LOW"),Je.SHADERDEFINE_BLOOM=t.Shader3D.getDefineByName("BLOOM"),Je.SHADERDEFINE_FINALPASS=t.Shader3D.getDefineByName("FINALPASS"),Je.SHADERVALUE_MAINTEX=t.Shader3D.propertyNameToID("u_MainTex"),Je.SHADERVALUE_BLOOMTEX=t.Shader3D.propertyNameToID("u_BloomTex"),Je.SHADERVALUE_AUTOEXPOSURETEX=t.Shader3D.propertyNameToID("u_AutoExposureTex"),Je.SHADERVALUE_BLOOM_DIRTTEX=t.Shader3D.propertyNameToID("u_Bloom_DirtTex"),Je.SHADERVALUE_BLOOMTEX_TEXELSIZE=t.Shader3D.propertyNameToID("u_BloomTex_TexelSize"),Je.SHADERVALUE_BLOOM_DIRTTILEOFFSET=t.Shader3D.propertyNameToID("u_Bloom_DirtTileOffset"),Je.SHADERVALUE_BLOOM_SETTINGS=t.Shader3D.propertyNameToID("u_Bloom_Settings"),Je.SHADERVALUE_BLOOM_COLOR=t.Shader3D.propertyNameToID("u_Bloom_Color")}recaculateCameraFlag(){this._depthtextureFlag=t.DepthTextureMode.None;let e=this.effects.length;for(let t=0;t<e;t++)this._depthtextureFlag|=this.effects[t].getCameraDepthTextureModeFlag()}constructor(){this._compositeShader=t.Shader3D.find("PostProcessComposite"),this._compositeShaderData=t.LayaGL.renderDeviceFactory.createShaderData(null),this._effects=[],this._enable=!0,this._enableColorGrad=!1,this._context=new Ye,this._context.compositeShaderData=this._compositeShaderData,this._context.command=new Be,this._depthtextureFlag=0}get enable(){return this._enable}set enable(e){this._enable=e}set commandContext(e){this._context.command._context=e}get effects(){return this._effects}set effects(e){this.clearEffect();for(var t=0,r=e.length;t<r;t++)e[t]&&this.addEffect(e[t])}get cameraDepthTextureMode(){return this._depthtextureFlag}_init(e){this._context.camera=e,this._context.command._camera=e}_render(e){this._init(e);let r=this._context;var n=(e=r.camera).viewport,a=e._needInternalRenderTexture(),i=a?e._internalRenderTexture:t.RenderTexture.createFromPool(e._offScreenRenderTexture.width,e._offScreenRenderTexture.height,e._getRenderTextureFormat(),t.RenderTargetFormat.None,!1,1,!1,!0),s=t.RenderTexture.createFromPool(i.width,i.height,e._getRenderTextureFormat(),t.RenderTargetFormat.None,!1,1,!1,!0),o=[t.RenderTexture.createFromPool(i.width,i.height,e._getRenderTextureFormat(),t.RenderTargetFormat.None,!1,1,!1,!0),t.RenderTexture.createFromPool(i.width,i.height,e._getRenderTextureFormat(),t.RenderTargetFormat.None,!1,1,!1,!0)];r.command.clear(),r.source=s,r.indirectTarget=s,r.destination=2==this._effects.length?o[0]:i,r.compositeShaderData.clearDefine(),a?r.command.blitScreenTriangle(e._internalRenderTexture,s):r.command.blitScreenTriangle(e._offScreenRenderTexture,s),r.compositeShaderData.setTexture(Je.SHADERVALUE_AUTOEXPOSURETEX,t.Texture2D.whiteTexture),this._enableColorGrad&&this._ColorGradEffect._buildLUT();for(var l=0,h=this._effects.length;l<h;l++)this._effects[l].active?(this._effects[l].render(r),l==h-2?(r.indirectTarget=r.destination,r.destination=i):(r.indirectTarget=r.destination,r.destination=o[(l+1)%2])):l==h-1&&r.command.blitScreenTriangle(r.indirectTarget,i);if(this._compositeShaderData.addDefine(Je.SHADERDEFINE_FINALPASS),e._offScreenRenderTexture&&a){r.destination=e._offScreenRenderTexture;var d=e._getCanvasWidth(),c=e._getCanvasHeight();t.LayaGL.renderEngine._screenInvertY?e._screenOffsetScale.setValue(n.x/d,n.y/c,n.width/d,n.height/c):e._screenOffsetScale.setValue(n.x/d,1-n.y/c,n.width/d,-n.height/c),r.command.blitScreenTriangle(i,e._offScreenRenderTexture,e._screenOffsetScale,null,this._compositeShaderData,0)}a&&t.RenderTexture.recoverToPool(i),t.RenderTexture.recoverToPool(s),t.RenderTexture.recoverToPool(o[0]),t.RenderTexture.recoverToPool(o[1]);var u=r.deferredReleaseTextures;for(l=0,h=u.length;l<h;l++)t.RenderTexture.recoverToPool(u[l]);u.length=0}addEffect(e){e.singleton&&this.getEffect(e.constructor)?console.error("无法增加已经存在的Effect"):(!this._enableColorGrad||e instanceof Ze?this._effects.push(e):this._effects.splice(this._effects.length-1,0,e),this.recaculateCameraFlag(),e.effectInit(this))}getEffect(e){let t=this._effects.length;for(let r=0;r<t;r++){let t=this._effects[r];if(t instanceof e)return t}return null}removeEffect(e){var t=this._effects.indexOf(e);-1!==t&&(this._effects.splice(t,1),e.release(this),this.recaculateCameraFlag())}clearEffect(){let e=this.effects.length-1;for(;e>=0;e--)this.removeEffect(this.effects[e]);this._effects.length=0}_applyPostProcessCommandBuffers(){this._context.command._apply()}}e.PBRRenderQuality=void 0,(Ke=e.PBRRenderQuality||(e.PBRRenderQuality={}))[Ke.High=0]="High",Ke[Ke.Low=1]="Low";class qe{static get defaultDFG(){return qe._defaultDFG}static set defaultDFG(e){qe._defaultDFG=e}static DefaultDfgTexture(){let e,r=t.Base64Tool.decode(""),n=t.HDRTextureInfo.getHDRInfo(r),a=t.LayaGL.renderEngine.getCapable(t.RenderCapable.TextureFormat_R32G32B32A32),i=t.LayaGL.renderEngine.getCapable(t.RenderCapable.Texture_FloatLinearFiltering);if(a&&i)e=new t.Texture2D(n.width,n.height,n.format,!1,!1,!1),e.setHDRData(n);else{e=new t.Texture2D(n.width,n.height,t.TextureFormat.R8G8B8A8,!1,!1,!1);let r=n.width*n.height,a=n.readScanLine(),i=new Uint8Array(4*r);for(let e=0;e<r;e++){let t=a[4*e],r=a[4*e+1],n=a[4*e+2],s=Math.max(t,r,n,1e-5),o=Math.max(1,255/s);o=Math.min(1,Math.max(0,o/255)),i[4*e]=255*Math.min(1,Math.max(0,t*o)),i[4*e+1]=255*Math.min(1,Math.max(0,r*o)),i[4*e+2]=255*Math.min(1,Math.max(0,n*o)),i[4*e+3]=255*o}e.setPixelsData(i,!1,!1)}e.lock=!0,e.wrapModeU=t.WrapMode.Clamp,e.wrapModeV=t.WrapMode.Clamp,e.anisoLevel=1,this._defaultDFG=e}}class $e{static init(){$e.DEFINE_EMISSION=t.Shader3D.getDefineByName("EMISSION"),$e.DEFINE_CLEARCOAT=t.Shader3D.getDefineByName("CLEARCOAT"),$e.DEFINE_CLEARCOAT_NORMAL=t.Shader3D.getDefineByName("CLEARCOAT_NORMAL"),$e.DEFINE_ANISOTROPY=t.Shader3D.getDefineByName("ANISOTROPIC"),$e.DEFINE_IOR=t.Shader3D.getDefineByName("IOR"),$e.DEFINE_IRIDESCENCE=t.Shader3D.getDefineByName("IRIDESCENCE"),$e.DEFINE_SHEEN=t.Shader3D.getDefineByName("SHEEN"),$e.DEFINE_TRANSMISSION=t.Shader3D.getDefineByName("TRANSMISSION"),$e.DEFINE_THICKNESS=t.Shader3D.getDefineByName("THICKNESS"),t.Shader3D.addInclude("BRDF.glsl",'#if !defined(BRDF)\r\n    #define BRDF\r\n\r\n// Specular implementations\r\nfloat D_GGX(float roughness, float NoH, vec3 h, vec3 n)\r\n{\r\n    // todo 精度\r\n    #if !defined(GL_FRAGMENT_PRECISION_HIGH)\r\n    vec3 NxH = cross(n, h);\r\n    float oneMinusNoHSquared = dot(NxH, NxH);\r\n    #else\r\n    float oneMinusNoHSquared = 1.0 - NoH * NoH;\r\n    #endif\r\n\r\n    float a = NoH * roughness;\r\n    float k = roughness / (oneMinusNoHSquared + a * a);\r\n    float d = k * k * INVERT_PI;\r\n\r\n    return saturateMediump(d);\r\n}\r\n\r\nfloat D_GGX_Anisotropic(float NoH, const vec3 h, const vec3 t, const vec3 b, float at, float ab)\r\n{\r\n    float ToH = dot(t, h);\r\n    float BoH = dot(b, h);\r\n    float a2 = at * ab;\r\n    highp vec3 v = vec3(ab * ToH, at * BoH, a2 * NoH);\r\n    highp float v2 = dot(v, v);\r\n    float w2 = a2 / v2;\r\n    return a2 * w2 * w2 * INVERT_PI;\r\n}\r\n\r\nfloat D_Charlie(float roughness, float NoH)\r\n{\r\n    float invR = 1.0 / roughness;\r\n    float cos2h = NoH * NoH;\r\n    float sin2h = max(1.0 - cos2h, 0.0078125);\r\n    return (2.0 + invR) * pow(sin2h, invR * 0.5) * 0.5 * INVERT_PI;\r\n}\r\n\r\nfloat V_SmithGGXCorrelated(float roughness, float NoV, float NoL)\r\n{\r\n    float a2 = roughness * roughness;\r\n    float lambdaV = NoL * sqrt((NoV - a2 * NoV) * NoV + a2);\r\n    float lambdaL = NoV * sqrt((NoL - a2 * NoL) * NoL + a2);\r\n    float v = 0.5 / (lambdaV + lambdaL);\r\n\r\n    return saturateMediump(v);\r\n}\r\n\r\nfloat V_SmithGGXCorrelated_Fast(float roughness, float NoV, float NoL)\r\n{\r\n    float v = 0.5 / mix(2.0 * NoL * NoV, NoL + NoV, roughness);\r\n    return saturateMediump(v);\r\n}\r\n\r\n// Kelemen 2001, "A Microfacet Based Coupled Specular-Matte BRDF Model with Importance Sampling"\r\nfloat V_kelemen(float LoH)\r\n{\r\n    return saturateMediump(0.25 / (LoH * LoH));\r\n}\r\n\r\nfloat lCharlieNumericHelper(float x, float alphaG)\r\n{\r\n    float oneMinusAlphaSq = (1.0 - alphaG) * (1.0 - alphaG);\r\n    float a = mix(21.5473, 25.3245, oneMinusAlphaSq);\r\n    float b = mix(3.82987, 3.32435, oneMinusAlphaSq);\r\n    float c = mix(0.19823, 0.16801, oneMinusAlphaSq);\r\n    float d = mix(-1.97760, -1.27393, oneMinusAlphaSq);\r\n    float e = mix(-4.32054, -4.85967, oneMinusAlphaSq);\r\n    return a / (1.0 + b * pow(x, c)) + d * x + e;\r\n}\r\n\r\nfloat lCharlie(float cosTheta, float alphaG)\r\n{\r\n    if (abs(cosTheta) < 0.5)\r\n\t{\r\n\t    return exp(lCharlieNumericHelper(cosTheta, alphaG));\r\n\t}\r\n    else\r\n\t{\r\n\t    return exp(2.0 * lCharlieNumericHelper(0.5, alphaG) - lCharlieNumericHelper(1.0 - cosTheta, alphaG));\r\n\t}\r\n}\r\n\r\nfloat V_Charlie(float NoL, float NoV, float roughness)\r\n{\r\n    float alphaG = roughness * roughness;\r\n    return clamp(1.0 / ((1.0 + lCharlie(NoV, alphaG) + lCharlie(NoL, alphaG)) * (4.0 * NoV * NoL)), 0.0, 1.0);\r\n}\r\n\r\n// Neubelt and Pettineo 2013, "Crafting a Next-gen Material Pipeline for The Order: 1886"\r\nfloat V_Neubelt(float NoV, float NoL)\r\n{\r\n    return saturateMediump(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\r\n}\r\n\r\nfloat V_SmithGGXCorrelated_Anisotropic(float at, float ab, float ToV, float BoV, float ToL, float BoL, float NoV, float NoL)\r\n{\r\n    float lambdaV = NoL * length(vec3(at * ToV, ab * BoV, NoV));\r\n    float lambdaL = NoV * length(vec3(at * ToL, ab * BoL, NoL));\r\n    float v = 0.5 / (lambdaV + lambdaL);\r\n    return saturateMediump(v);\r\n}\r\n\r\nvec3 F_Schlick(vec3 f0, float f90, float VoH)\r\n{\r\n    return f0 + (f90 - f0) * pow5(1.0 - VoH);\r\n}\r\n\r\nvec3 F_Schlick(vec3 f0, float VoH)\r\n{\r\n    return f0 + (1.0 - f0) * pow5(1.0 - VoH);\r\n}\r\n\r\nfloat F_Schlick(float f0, float f90, float VoH)\r\n{\r\n    return f0 + (f90 - f0) * pow5(1.0 - VoH);\r\n}\r\n\r\nfloat F_Schlick(float f0, float VoH)\r\n{\r\n    return f0 + (1.0 - f0) * pow5(1.0 - VoH);\r\n}\r\n\r\nvec3 F_Schlick(vec3 f0, vec3 f90, float VoH)\r\n{\r\n    return f0 + (f90 - f0) * pow5(1.0 - VoH);\r\n}\r\n\r\n    #ifdef IRIDESCENCE\r\n\r\n// CIE XYZ to REC.709\r\nconst mat3 XYZ_to_REC709_MAT = mat3(\r\n    vec3(3.2409699419, -0.9692436363, 0.0556300797),\r\n    vec3(-1.5373831776, 1.8759675015, -0.2039769589),\r\n    vec3(-0.498610760, 0.0415550574, 1.0569715142));\r\n\r\nfloat IorToFresnel0(float iorT, float iorI)\r\n{\r\n    return pow2((iorT - iorI) / (iorT + iorI));\r\n}\r\n\r\nvec3 IorToFresnel0(vec3 iorT, float iorI)\r\n{\r\n    return pow2((iorT - vec3(iorI)) / (iorT + vec3(iorI)));\r\n}\r\n\r\n// air to surfaceR0 ior\r\nvec3 Fresnel0ToIor(vec3 f0)\r\n{\r\n    vec3 sqrtF0 = sqrt(f0);\r\n    return (1.0 + sqrtF0) / (1.0 - sqrtF0);\r\n}\r\n\r\nvec3 evalSensitivity(float OPD, vec3 shift)\r\n{\r\n    float phase = 2.0 * PI * OPD * 1.0e-9;\r\n    vec3 val = vec3(5.4856e-13, 4.4201e-13, 5.2481e-13);\r\n    vec3 pos = vec3(1.6810e+06, 1.7953e+06, 2.2084e+06);\r\n    vec3 var = vec3(4.3278e+09, 9.3046e+09, 6.6121e+09);\r\n    vec3 xyz = val * sqrt(2.0 * PI * var) * cos(pos * phase + shift) * exp(-pow2(phase) * var);\r\n    xyz.x += 9.7470e-14 * sqrt(2.0 * PI * 4.5282e+09) * cos(2.2399e+06 * phase + shift[0]) * exp(-4.5282e+09 * pow2(phase));\r\n    xyz /= 1.0685e-7;\r\n    vec3 srgb = XYZ_to_REC709_MAT * xyz;\r\n    return srgb;\r\n}\r\n\r\n// https://belcour.github.io/blog/research/publication/2017/05/01/brdf-thin-film.html\r\nvec3 evalIridescence(float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0)\r\n{\r\n    vec3 I;\r\n    float iridescenceIor = mix(outsideIOR, eta2, smoothstep(0.0, 0.03, thinFilmThickness));\r\n\r\n    float sinTheta2Sq = pow2(outsideIOR / iridescenceIor) * (1.0 - pow2(cosTheta1));\r\n\r\n    float cosTheta2Sq = 1.0 - sinTheta2Sq;\r\n    if (cosTheta2Sq < 0.0)\r\n\t{\r\n\t    return vec3(1.0);\r\n\t}\r\n    float cosTheta2 = sqrt(cosTheta2Sq);\r\n\r\n    float R0 = IorToFresnel0(iridescenceIor, outsideIOR);\r\n    float R12 = F_Schlick(R0, cosTheta1);\r\n    float R21 = R12;\r\n    float T121 = 1.0 - R12;\r\n    float phi12 = 0.0;\r\n    if (iridescenceIor < outsideIOR)\r\n\tphi12 = PI;\r\n    float phi21 = PI - phi12;\r\n\r\n    vec3 baseIOR = Fresnel0ToIor(clamp(baseF0, 0.0, 0.9999));\r\n\r\n    vec3 R1 = IorToFresnel0(baseIOR, iridescenceIor);\r\n    vec3 R23 = F_Schlick(R1, cosTheta2);\r\n    vec3 phi23 = vec3(0.0);\r\n\r\n    if (baseIOR[0] < iridescenceIor)\r\n\tphi23[0] = PI;\r\n    if (baseIOR[1] < iridescenceIor)\r\n\tphi23[1] = PI;\r\n    if (baseIOR[2] < iridescenceIor)\r\n\tphi23[2] = PI;\r\n\r\n    float OPD = 2.0 * iridescenceIor * thinFilmThickness * cosTheta2;\r\n    vec3 phi = vec3(phi21) + phi23;\r\n\r\n    vec3 R123 = clamp(R12 * R23, 1e-5, 0.9999);\r\n    vec3 r123 = sqrt(R123);\r\n    vec3 Rs = pow2(T121) * R23 / (vec3(1.0) - R123);\r\n\r\n    vec3 C0 = R12 + Rs;\r\n    I = C0;\r\n\r\n    vec3 Cm = Rs - T121;\r\n    for (int m = 1; m <= 2; ++m)\r\n\t{\r\n\t    Cm *= r123;\r\n\t    vec3 Sm = 2.0 * evalSensitivity(float(m) * OPD, float(m) * phi);\r\n\t    I += Cm * Sm;\r\n\t}\r\n\r\n    return max(I, vec3(0.0));\r\n}\r\n    #endif // IRIDESCENCE\r\n\r\n// Specular dispatch\r\n\r\n// D\r\nfloat distribution(float roughness, float NoH, vec3 h, vec3 n)\r\n{\r\n    return D_GGX(roughness, NoH, h, n);\r\n}\r\n\r\n// V\r\nfloat visibility(float roughness, float NoV, float NoL)\r\n{\r\n    return V_SmithGGXCorrelated(roughness, NoV, NoL);\r\n}\r\n\r\n// F\r\nvec3 fresnel(vec3 f0, float LoH)\r\n{\r\n    float f90 = saturate(dot(f0, vec3(50.0 * 0.33)));\r\n    return F_Schlick(f0, f90, LoH);\r\n\r\n    // return F_Schlick(f0, LoH);\r\n}\r\n\r\nvec3 fresnel(vec3 f0, vec3 f90, float LoH)\r\n{\r\n    return F_Schlick(f0, f90, LoH);\r\n}\r\n\r\n// diffuse BRDF implementations\r\n\r\nfloat Fd_Lambert()\r\n{\r\n    // https://seblagarde.wordpress.com/2012/01/08/pi-or-not-to-pi-in-game-lighting-equation/\r\n    // return INVERT_PI;\r\n    return 1.0;\r\n}\r\n\r\nfloat Fd_Burley(float roughness, float NoV, float NoL, float LoH)\r\n{\r\n    float f90 = 0.5 + 2.0 * roughness * LoH * LoH;\r\n    float lightScatter = F_Schlick(1.0, f90, NoL);\r\n    float veiwScatter = F_Schlick(1.0, f90, NoV);\r\n    return lightScatter * veiwScatter * INVERT_PI;\r\n}\r\n\r\n    #ifdef IRIDESCENCE\r\nvec3 Fd_IridescenceLambert(vec3 f0, vec3 f90, vec3 iridescenceFresnel, float iridescenceFactor, float VoH)\r\n{\r\n    vec3 iridescenceFresnelMax = vec3(vecmax(iridescenceFresnel));\r\n    vec3 schlickFresnel = F_Schlick(f0, f90, VoH);\r\n\r\n    vec3 F = mix(schlickFresnel, iridescenceFresnelMax, iridescenceFactor);\r\n\r\n    return (1.0 - F) * Fd_Lambert();\r\n}\r\n    #endif // IRIDESCENCE\r\n\r\n#endif // BRDF'),t.Shader3D.addInclude("PBRGI.glsl",'#if !defined(pbrGI_lib)\r\n    #define pbrGI_lib\r\n\r\n    #include "globalIllumination.glsl";\r\n\r\n    #ifdef ANISOTROPIC\r\nvec3 anisotropyBentNormal(const in Surface surface, const in PixelInfo info)\r\n{\r\n    float anisotropy = surface.anisotropy;\r\n    vec3 anisotropyDirection = info.anisotropicB;\r\n\r\n    vec3 n = info.normalWS;\r\n    vec3 v = info.viewDir;\r\n\r\n    // float tangentRoughness = mix(roughness, 1.0, anisotropy * anisotropy);\r\n    float roughness = surface.perceptualRoughness;\r\n    vec3 anisotropicTangent = cross(anisotropyDirection, v);\r\n    vec3 anisotropicNormal = cross(anisotropicTangent, anisotropyDirection);\r\n    float bendFactor = 1.0 - anisotropy * (1.0 - roughness);\r\n    float bendFactorPow4 = pow2(bendFactor) * pow2(bendFactor);\r\n    vec3 bentNormal = normalize(mix(anisotropicNormal, n, bendFactorPow4));\r\n\r\n    return bentNormal;\r\n}\r\n    #endif // ANISOTROPIC\r\n\r\n// 获取反射向量\r\nvec3 getReflectedVector(const in vec3 n, const in vec3 v, const in vec3 positionWS)\r\n{\r\n    vec3 r;\r\n    r = reflect(-v, n);\r\n\r\n    #ifdef SPECCUBE_BOX_PROJECTION\r\n    r = getBoxProjectionReflectedVector(r, positionWS);\r\n    #endif // SPECCUBE_BOX_PROJECTION\r\n\r\n    return r;\r\n}\r\n\r\n    #ifdef IRIDESCENCE\r\nvoid iridescenceIBL(const in Surface surface, const in PixelInfo info, in vec3 E, inout vec3 Fd, inout vec3 Fr)\r\n{\r\n    vec3 dfg = info.dfg;\r\n    float NoV = info.NoV;\r\n    vec3 n = info.normalWS;\r\n    vec3 v = info.viewDir;\r\n    vec3 positionWS = info.positionWS;\r\n    vec3 iridescenceFresnel = info.iridescenceFresnel;\r\n\r\n    vec3 diffuseColor = surface.diffuseColor;\r\n    float roughness = surface.perceptualRoughness;\r\n    float occlusion = surface.occlusion;\r\n    float iridescenceFactor = surface.iridescence;\r\n\r\n    // diffuse\r\n    vec3 irradiance = diffuseIrradiance(n, positionWS, info.viewDir);\r\n    Fd += diffuseColor * irradiance * (1.0 - E) * occlusion;\r\n\r\n    // specular\r\n    vec3 iridescenceF0 = mix(surface.f0, iridescenceFresnel, vec3(iridescenceFactor));\r\n    vec3 Er = mix(dfg.xxx, dfg.yyy, iridescenceF0);\r\n\r\n\t#ifdef ANISOTROPIC\r\n    vec3 bentNormal = anisotropyBentNormal(surface, info);\r\n    vec3 r = getReflectedVector(bentNormal, v, positionWS);\r\n\t#else // ANISOTROPIC\r\n    vec3 r = getReflectedVector(n, v, positionWS);\r\n\t#endif // ANISOTROPIC\r\n\r\n    vec3 indirectSpecular = specularRadiance(r, roughness);\r\n    Fr += Er * indirectSpecular * occlusion * (1.0 + Er * (1.0 / dfg.y - 1.0));\r\n}\r\n    #endif // IRIDESCENCE\r\n\r\n    #ifdef SHEEN\r\nvoid sheenIBL(const in Surface surface, const in PixelInfo info, inout vec3 Fd, inout vec3 Fr)\r\n{\r\n    vec3 v = info.viewDir;\r\n    vec3 n = info.normalWS;\r\n    vec3 positionWS = info.positionWS;\r\n\r\n    float occlusion = surface.occlusion;\r\n    float roughness = surface.sheenPerceptualRoughness;\r\n\r\n    Fd *= info.sheenScaling;\r\n    Fr *= info.sheenScaling;\r\n\r\n    vec3 r = getReflectedVector(n, v, positionWS);\r\n    vec3 indirectSpecular = specularRadiance(r, roughness);\r\n\r\n    Fr += indirectSpecular * info.sheenDfg * surface.sheenColor * occlusion;\r\n}\r\n    #endif // SHEEN\r\n\r\n    #ifdef CLEARCOAT\r\nvoid clearCoatIBL(const in Surface surface, const in PixelInfo info, inout vec3 Fd, inout vec3 Fr)\r\n{\r\n    vec3 v = info.viewDir;\r\n    vec3 n = info.clearCoatNormal;\r\n    float NoV = info.clearCoatNoV;\r\n    vec3 positionWS = info.positionWS;\r\n\r\n    float clearCoat = surface.clearCoat;\r\n    float roughness = surface.clearCoatPerceptualRoughness;\r\n    float occlusion = surface.occlusion;\r\n\r\n    float Fc = F_Schlick(0.04, 1.0, NoV) * clearCoat;\r\n    float attenuation = 1.0 - Fc;\r\n    Fd *= attenuation;\r\n    Fr *= attenuation;\r\n\r\n    vec3 r = getReflectedVector(n, v, positionWS);\r\n    vec3 indirectSpecular = specularRadiance(r, roughness);\r\n\r\n    Fr += indirectSpecular * Fc * occlusion;\r\n}\r\n    #endif // CLEARCOAT\r\n\r\n    #ifdef TRANSMISSION\r\nvec3 getRefraction(const in Surface surface, const in PixelInfo info)\r\n{\r\n    vec3 position = info.positionWS;\r\n\r\n\t#ifdef THICKNESS\r\n\r\n    vec3 n = info.normalWS;\r\n    vec3 r = -info.viewDir;\r\n    float airIOR = 1.0;\r\n    float etaIR = airIOR / surface.ior;\r\n\r\n    vec3 refractionV = normalize(refract(r, n, etaIR)) * surface.thickness * info.worldScale.xyz;\r\n\r\n    position += refractionV;\r\n\r\n\t#endif // THICKNESS\r\n\r\n    vec4 p = u_ViewProjection * vec4(position, 1.0);\r\n    vec2 refractionUV = (p.xy / p.w) * 0.5 + 0.5;\r\n\r\n    float refractionLOD = u_OpaqueTextureParams.z * surface.perceptualRoughness * saturate(surface.ior * 2.0 - 2.0);\r\n    vec3 refraction = texture2DLodEXT(u_CameraOpaqueTexture, refractionUV, refractionLOD).xyz;\r\n\r\n    return refraction;\r\n}\r\n\r\nvec3 transmissionIBL(const in Surface surface, const in PixelInfo info, in vec3 E)\r\n{\r\n    // refraction\r\n    vec3 refraction = getRefraction(surface, info);\r\n\r\n\t#ifndef THICKNESS\r\n    E *= 1.0 + surface.transmission * (1.0 - E.g) / (1.0 + E.g);\r\n\t#endif // THICKNESS\r\n\r\n\t#ifdef THICKNESS\r\n\r\n    // ABSORPTION\r\n    vec3 attenuationColor = surface.attenuationColor;\r\n    float attenuationDistance = surface.attenuationDistance;\r\n    vec3 absorption = -log(attenuationColor) / (attenuationDistance);\r\n    vec3 T = exp(-absorption * info.worldScale.xyz * surface.thickness);\r\n\r\n\t#endif // THICKNESS\r\n\r\n    vec3 Ft = refraction;\r\n\r\n    Ft *= surface.diffuseColor;\r\n\r\n    Ft *= 1.0 - E;\r\n\r\n\t#ifdef THICKNESS\r\n    Ft *= T;\r\n\t#endif // THICKNESS\r\n\r\n    return Ft * surface.transmission;\r\n}\r\n\r\n    #endif // TRANSMISSION\r\n\r\nvoid baseIBL(const in Surface surface, const in PixelInfo info, in vec3 E, inout vec3 Fd, inout vec3 Fr)\r\n{\r\n    vec3 dfg = info.dfg;\r\n    float NoV = info.NoV;\r\n    vec3 n = info.normalWS;\r\n    vec3 v = info.viewDir;\r\n    vec3 positionWS = info.positionWS;\r\n\r\n    vec3 diffuseColor = surface.diffuseColor;\r\n    float roughness = surface.perceptualRoughness;\r\n    float occlusion = surface.occlusion;\r\n\r\n    #ifdef ANISOTROPIC\r\n    vec3 bentNormal = anisotropyBentNormal(surface, info);\r\n    vec3 r = getReflectedVector(bentNormal, v, positionWS);\r\n    #else // ANISOTROPIC\r\n    vec3 r = getReflectedVector(n, v, positionWS);\r\n    #endif // ANISOTROPIC\r\n\r\n    vec3 indirectSpecular = specularRadiance(r, roughness);\r\n\r\n    // todo\r\n    float specularAO = occlusion;\r\n    Fr += E * indirectSpecular * specularAO * info.energyCompensation;\r\n\r\n    #if defined(USELIGHTMAP)\r\n\r\n    vec2 lightmapUV = info.lightmapUV;\r\n    vec3 bakedlight = getBakedLightmapColor(lightmapUV, n);\r\n    Fd += bakedlight * diffuseColor;\r\n\r\n    #else // USELIGHTMAP\r\n\r\n    vec3 irradiance = diffuseIrradiance(n, positionWS, info.viewDir);\r\n    Fd += diffuseColor * irradiance * (1.0 - E) * occlusion;\r\n\r\n    #endif // USELIGHTMAP\r\n}\r\n\r\nvec3 getE(const in Surface surface, const in PixelInfo info)\r\n{\r\n    #ifdef IRIDESCENCE\r\n\r\n    vec3 dfg = info.dfg;\r\n    float NoV = info.NoV;\r\n    vec3 iridescenceFresnel = info.iridescenceFresnel;\r\n    vec3 f0 = surface.f0;\r\n    float iridescenceFactor = surface.iridescence;\r\n    vec3 iridescenceFresnelMax = vec3(vecmax(iridescenceFresnel));\r\n    vec3 schlickFresnel = F_Schlick(f0, vec3(1.0), NoV);\r\n    vec3 F = mix(schlickFresnel, iridescenceFresnelMax, iridescenceFactor);\r\n    vec3 E = mix(dfg.xxx, dfg.yyy, F);\r\n\r\n    #else // IRIDESCENCE\r\n\r\n    vec3 dfg = info.dfg;\r\n    vec3 f0 = surface.f0;\r\n    vec3 f90 = surface.f90;\r\n    // vec3 E = mix(dfg.xxx, dfg.yyy, f0);\r\n    vec3 E = (f90 - f0) * dfg.x + f0 * dfg.y;\r\n\r\n    #endif // IRIDESCENCE\r\n    return E;\r\n}\r\n\r\nvec3 PBRGI(const in Surface surface, const in PixelInfo info)\r\n{\r\n    vec3 Fd = vec3(0.0);\r\n    vec3 Fr = vec3(0.0);\r\n\r\n    vec3 E = getE(surface, info);\r\n\r\n    #ifdef IRIDESCENCE\r\n    iridescenceIBL(surface, info, E, Fd, Fr);\r\n    #else // IRIDESCENCE\r\n    baseIBL(surface, info, E, Fd, Fr);\r\n    #endif // IRIDESCENCE\r\n\r\n    // sheen\r\n    #ifdef SHEEN\r\n    sheenIBL(surface, info, Fd, Fr);\r\n    #endif // SHEEN\r\n\r\n    // clear coat\r\n    #ifdef CLEARCOAT\r\n    clearCoatIBL(surface, info, Fd, Fr);\r\n    #endif // CLEARCOAT\r\n\r\n    #ifdef TRANSMISSION\r\n    Fd *= (1.0 - surface.transmission);\r\n    vec3 Ft = transmissionIBL(surface, info, E);\r\n    #endif // TRANSMISSION\r\n\r\n    vec3 gi = Fd + Fr;\r\n\r\n    #ifdef TRANSMISSION\r\n    gi += Ft;\r\n    #endif // TRANSMISSION\r\n\r\n    return gi;\r\n}\r\n\r\n#endif // pbrGI_lib'),t.Shader3D.addInclude("PBRCommon.glsl","#if !defined(pbrCommon_lib)\r\n    #define pbrCommon_lib\r\n\r\n// varying\r\nvarying vec3 v_PositionWS;\r\n\r\n// todo\r\nvarying vec3 v_NormalWS;\r\nvarying vec3 v_TangentWS;\r\nvarying vec3 v_BiNormalWS;\r\n\r\n    #ifdef UV\r\nvarying vec2 v_Texcoord0;\r\n    #endif // UV\r\n\r\n    #ifdef UV1\r\n\t#ifdef LIGHTMAP\r\nvarying vec2 v_Texcoord1;\r\n\t#endif // LIGHTMAP\r\n    #endif // UV1\r\n\r\n    #ifdef COLOR\r\nvarying vec4 v_VertexColor;\r\n    #endif // COLOR\r\n\r\n// 记录顶点信息, 用于由vs向fs传递数据\r\nstruct PixelParams {\r\n\r\n    vec3 positionWS;\r\n\r\n    vec3 normalWS;\r\n    vec3 tangentWS;\r\n    vec3 biNormalWS;\r\n    mat3 TBN;\r\n\r\n    #ifdef UV\r\n    vec2 uv0;\r\n    #endif // UV\r\n\r\n    #ifdef UV1\r\n\t#ifdef LIGHTMAP\r\n    vec2 uv1;\r\n\t#endif // LIGHTMAP\r\n    #endif // UV1\r\n\r\n    #ifdef COLOR\r\n    vec4 vertexColor;\r\n    #endif // COLOR\r\n};\r\n\r\n#endif // pbrCommon_lib"),t.Shader3D.addInclude("PBRVertex.glsl",'#if !defined(pbrVertex_lib)\r\n    #define pbrVertex_lib\r\n\r\n    #include "ShadingVertex.glsl";\r\n\r\n    #ifdef THICKNESS\r\n// xyz: world scale, w: length(xyz)\r\nvarying vec4 v_WorldScale;\r\n    #endif // THICKNESS\r\n\r\nvoid initPixelParams(inout PixelParams params, in Vertex vertex)\r\n{\r\n    shadingPixelParams(params, vertex);\r\n    sharePixelParams(params);\r\n\r\n    #ifdef THICKNESS\r\n    mat4 worldMat = getWorldMatrix();\r\n    v_WorldScale.x = length(vec3(worldMat[0].xyz));\r\n    v_WorldScale.y = length(vec3(worldMat[1].xyz));\r\n    v_WorldScale.z = length(vec3(worldMat[2].xyz));\r\n    v_WorldScale.w = length(v_WorldScale.xyz);\r\n    #endif // THICKNESS\r\n}\r\n\r\n#endif // pbrVertex_lib'),t.Shader3D.addInclude("PBRFrag.glsl",'//兼容WGSL\r\n#if !defined(pbrFrag_lib)\r\n    #define pbrFrag_lib\r\n\r\n    #include "PBRLighting.glsl";\r\n\r\n    #ifdef THICKNESS\r\n// xyz: world scale, w: length(xyz)\r\nvarying vec4 v_WorldScale;\r\n    #endif // THICKNESS\r\n\r\nvoid getPixelInfo(inout PixelInfo info, const in PixelParams pixel, const in Surface surface)\r\n{\r\n    info.positionWS = pixel.positionWS;\r\n    info.vertexNormalWS = pixel.normalWS;\r\n\r\n    #ifdef TANGENT\r\n    info.normalWS = normalize(pixel.TBN * surface.normalTS);\r\n    #else // TANGENT\r\n    info.normalWS = pixel.normalWS;\r\n    #endif // TANGENT\r\n\r\n    info.tangentWS = pixel.tangentWS;\r\n    info.biNormalWS = pixel.biNormalWS;\r\n\r\n    info.viewDir = normalize(u_CameraPos - info.positionWS);\r\n    info.NoV = min(max(dot(info.normalWS, info.viewDir), MIN_N_DOT_V), 1.0);\r\n\r\n    info.dfg = prefilteredDFG_LUT(surface.perceptualRoughness, info.NoV);\r\n\r\n    #ifdef SHEEN\r\n    info.energyCompensation = vec3(1.0);\r\n    #else // SHEEN\r\n    info.energyCompensation = (1.0 + surface.f0 * (1.0 / info.dfg.y - 1.0));\r\n    #endif // SHEEN\r\n\r\n    #ifdef IRIDESCENCE\r\n    info.iridescenceFresnel = evalIridescence(1.0, surface.iridescenceIor, info.NoV, surface.iridescenceThickness, surface.f0);\r\n    #endif // IRIDESCENCE\r\n\r\n    #ifdef SHEEN\r\n    info.sheenDfg = prefilteredDFG_LUT(surface.sheenPerceptualRoughness, info.NoV).z;\r\n    info.sheenScaling = 1.0 - vecmax(surface.sheenColor) * info.sheenDfg;\r\n    #endif // SHEEN\r\n\r\n    #ifdef CLEARCOAT\r\n\t#ifdef CLEARCOAT_NORMAL\r\n    info.clearCoatNormal = normalize(pixel.TBN * surface.clearCoatNormalTS);\r\n\t#else // CLEARCOAT_NORMAL\r\n    info.clearCoatNormal = info.vertexNormalWS;\r\n\t#endif // CLEARCOAT_NORMAL\r\n    info.clearCoatNoV = min(max(dot(info.clearCoatNormal, info.viewDir), MIN_N_DOT_V), 1.0);\r\n    #endif // CLEARCOAT\r\n\r\n    #ifdef ANISOTROPIC\r\n    mat3 anisotropyTBN = mat3(info.tangentWS, info.biNormalWS * -1.0, info.normalWS);\r\n    info.anisotropicT = anisotropyTBN * normalize(vec3(surface.anisotropyDirection, 0.0));\r\n    info.anisotropicB = cross(info.vertexNormalWS, info.anisotropicT);\r\n    info.ToV = dot(info.anisotropicT, info.viewDir);\r\n    info.BoV = dot(info.anisotropicB, info.viewDir);\r\n    info.at = mix(surface.roughness, 1.0, pow2(surface.anisotropy));\r\n    info.ab = surface.roughness;\r\n    #endif // ANISOTROPIC\r\n\r\n    #ifdef THICKNESS\r\n    info.worldScale = v_WorldScale;\r\n    #endif // THICKNESS\r\n\r\n    #ifdef LIGHTMAP\r\n\t#ifdef UV1\r\n    info.lightmapUV = pixel.uv1;\r\n\t#endif // UV1\r\n    #endif // LIGHTMAP\r\n}\r\n\r\nvec3 PBRLighting(const in Surface surface, const in PixelInfo info)\r\n{\r\n    vec3 lightColor = vec3(0.0);\r\n    #ifdef DIRECTIONLIGHT\r\n    for (int i = 0; i < CalculateLightCount; i++)\r\n\t{\r\n\t    if (i >= DirectionCount) break;\r\n\t    DirectionLight directionLight = getDirectionLight(i, info.positionWS);\r\n\t    // if (directionLight.lightMode == LightMode_Mix)\r\n\t\t// {\r\n\t\t//     continue;\r\n\t\t// }\r\n        if (directionLight.lightMode != LightMode_Mix) {\r\n\t        Light light = getLight(directionLight);\r\n\t        lightColor += PBRLighting(surface, info, light) * light.attenuation;\r\n        }\r\n\t}\r\n    #endif // DIRECTIONLIGHT\r\n\r\n    #if defined(POINTLIGHT) || defined(SPOTLIGHT)\r\n    ivec4 clusterInfo = getClusterInfo(u_View, u_Viewport, info.positionWS, gl_FragCoord, u_ProjectionParams);\r\n    #endif // POINTLIGHT || SPOTLIGHT\r\n\r\n    #ifdef POINTLIGHT\r\n    for (int i = 0; i < CalculateLightCount; i++)\r\n\t{\r\n        #ifdef BREAK_TEXTURE_SAMPLE\r\n\t    if (i >= clusterInfo.x) break; //兼容WGSL\r\n        #endif\r\n\t    PointLight pointLight = getPointLight(i, clusterInfo, info.positionWS);\r\n\t    // if (pointLight.lightMode == LightMode_Mix)\r\n\t\t// {\r\n\t\t//     continue;\r\n\t\t// }\r\n        if (pointLight.lightMode != LightMode_Mix) {\r\n\t        Light light = getLight(pointLight, info.normalWS, info.positionWS);\r\n            #ifndef BREAK_TEXTURE_SAMPLE\r\n            if (i < clusterInfo.x)\r\n            #endif\r\n\t            lightColor += PBRLighting(surface, info, light) * light.attenuation;\r\n        }\r\n\t}\r\n    #endif // POINTLIGHT\r\n\r\n    #ifdef SPOTLIGHT\r\n    for (int i = 0; i < CalculateLightCount; i++)\r\n\t{\r\n        #ifdef BREAK_TEXTURE_SAMPLE\r\n\t    if (i >= clusterInfo.y) break; //兼容WGSL\r\n        #endif\r\n\t    SpotLight spotLight = getSpotLight(i, clusterInfo, info.positionWS);\r\n\t    // if (spotLight.lightMode == LightMode_Mix)\r\n\t\t// {\r\n\t\t//     continue;\r\n\t\t// }\r\n        if (spotLight.lightMode != LightMode_Mix) {\r\n\t        Light light = getLight(spotLight, info.normalWS, info.positionWS);\r\n            #ifndef BREAK_TEXTURE_SAMPLE\r\n            if (i < clusterInfo.y)\r\n            #endif\r\n\t            lightColor += PBRLighting(surface, info, light) * light.attenuation;\r\n        }\r\n\t}\r\n    #endif // SPOTLIGHT\r\n\r\n    vec3 giColor = PBRGI(surface, info);\r\n\r\n    vec3 color = lightColor + giColor;\r\n\r\n    #ifdef EMISSION\r\n    color += surface.emissionColor;\r\n    #endif //  EMISSION\r\n    return color;\r\n}\r\n\r\n#endif // pbrFrag_lib'),qe.DefaultDfgTexture(),t.SubShader.regIncludeBindUnifrom("PBRGI.glsl",{u_IBLDFG:e.ShaderDataType.Texture2D},{u_IBLDFG:qe.defaultDFG}),t.Shader3D.addInclude("PBRMetallicFrag.glsl",'#if !defined(PBRMetallic_lib)\r\n    #define PBRMetallic_lib\r\n\r\n    #include "ShadingFrag.glsl";\r\n\r\n    #include "PBRFrag.glsl";\r\n\r\nstruct SurfaceInputs {\r\n    vec3 diffuseColor;\r\n    float alpha;\r\n    float alphaTest;\r\n    float metallic;\r\n    float smoothness;\r\n    float occlusion;\r\n    vec3 emissionColor;\r\n    vec3 normalTS;\r\n\r\n    #ifdef CLEARCOAT\r\n    float clearCoat;\r\n    float clearCoatRoughness;\r\n\t#ifdef CLEARCOAT_NORMAL\r\n    vec3 clearCoatNormalTS;\r\n\t#endif // CLEARCOAT_NORMAL\r\n    #endif // CLEARCOAT\r\n\r\n    #ifdef ANISOTROPIC\r\n    float anisotropy;\r\n    vec2 anisotropyDirection;\r\n    #endif // ANISOTROPIC\r\n};\r\n\r\nvoid initSurface(inout Surface surface, const in SurfaceInputs inputs, const in PixelParams pixel)\r\n{\r\n    surface.alpha = inputs.alpha;\r\n\r\n    surface.normalTS = inputs.normalTS;\r\n\r\n    vec3 baseColor = inputs.diffuseColor;\r\n    float metallic = inputs.metallic;\r\n    float perceptualRoughness = 1.0 - inputs.smoothness;\r\n\r\n    // default ior 1.5\r\n    float ior = 1.5;\r\n    surface.ior = 1.5;\r\n    vec3 f0 = vec3(0.04, 0.04, 0.04);\r\n\r\n    surface.perceptualRoughness = clamp(perceptualRoughness, MIN_PERCEPTUAL_ROUGHNESS, 1.0);\r\n    surface.roughness = surface.perceptualRoughness * surface.perceptualRoughness;\r\n    surface.diffuseColor = computeDiffuse(baseColor, metallic);\r\n    surface.f0 = computeF0(f0, baseColor, metallic);\r\n    surface.f90 = computeF90(surface.f0);\r\n\r\n    surface.occlusion = inputs.occlusion;\r\n\r\n    #ifdef EMISSION\r\n    surface.emissionColor = inputs.emissionColor;\r\n    #endif // EMISSION\r\n\r\n    #ifdef CLEARCOAT\r\n    surface.clearCoat = inputs.clearCoat;\r\n    surface.clearCoatPerceptualRoughness = clamp(inputs.clearCoatRoughness, MIN_PERCEPTUAL_ROUGHNESS, 1.0);\r\n    surface.clearCoatRoughness = surface.clearCoatPerceptualRoughness * surface.clearCoatPerceptualRoughness;\r\n\t#ifdef CLEARCOAT_NORMAL\r\n    surface.clearCoatNormalTS = inputs.clearCoatNormalTS;\r\n\t#endif // CLEARCOAT_NORMAL\r\n    #endif // CLEARCOAT\r\n\r\n    #ifdef ANISOTROPIC\r\n    surface.anisotropy = inputs.anisotropy;\r\n    surface.anisotropyDirection = inputs.anisotropyDirection;\r\n    #endif // ANISOTROPIC\r\n}\r\n\r\nvec4 PBR_Metallic_Flow(const in SurfaceInputs inputs, in PixelParams pixel)\r\n{\r\n    #ifdef ALPHATEST\r\n    if (inputs.alpha < inputs.alphaTest)\r\n\t{\r\n\t    discard;\r\n\t}\r\n    #endif // ALPHATEST\r\n\r\n    Surface surface;\r\n    initSurface(surface, inputs, pixel);\r\n\r\n    PixelInfo info;\r\n    getPixelInfo(info, pixel, surface);\r\n\r\n    vec3 surfaceColor = vec3(0.0);\r\n    surfaceColor += PBRLighting(surface, info);\r\n\r\n    return vec4(surfaceColor, surface.alpha);\r\n}\r\n\r\n#endif // PBRMetallic_lib\r\n')}}var et,tt,rt,nt;e.PBRRenderMode=void 0,(et=e.PBRRenderMode||(e.PBRRenderMode={}))[et.Opaque=0]="Opaque",et[et.Cutout=1]="Cutout",et[et.Fade=2]="Fade",et[et.Transparent=3]="Transparent";class at extends t.Material{static __init__(){at.SHADERDEFINE_ALBEDOTEXTURE=t.Shader3D.getDefineByName("ALBEDOTEXTURE"),at.SHADERDEFINE_NORMALTEXTURE=t.Shader3D.getDefineByName("NORMALTEXTURE"),at.SHADERDEFINE_PARALLAXTEXTURE=t.Shader3D.getDefineByName("PARALLAXTEXTURE"),at.SHADERDEFINE_OCCLUSIONTEXTURE=t.Shader3D.getDefineByName("OCCLUSIONTEXTURE"),at.SHADERDEFINE_EMISSIONTEXTURE=t.Shader3D.getDefineByName("EMISSIONTEXTURE"),at.SHADERDEFINE_TRANSPARENTBLEND=t.Shader3D.getDefineByName("TRANSPARENTBLEND"),at.SHADERDEFINE_LAYA_PBR_BRDF_HIGH=t.Shader3D.getDefineByName("LAYA_PBR_BRDF_HIGH"),at.SHADERDEFINE_LAYA_PBR_BRDF_LOW=t.Shader3D.getDefineByName("LAYA_PBR_BRDF_LOW"),at.SHADERDEFINE_DETAILALBEDO=t.Shader3D.getDefineByName("DETAILTEXTURE"),at.SHADERDEFINE_DETAILNORMAL=t.Shader3D.getDefineByName("DETAILNORMAL"),at.SHADERDEFINE_ENABLEVERTEXCOLOR=t.Shader3D.getDefineByName("ENABLEVERTEXCOLOR"),at.ALBEDOTEXTURE=t.Shader3D.propertyNameToID("u_AlbedoTexture"),at.ALBEDOCOLOR=t.Shader3D.propertyNameToID("u_AlbedoColor"),at.TILINGOFFSET=t.Shader3D.propertyNameToID("u_TilingOffset"),at.NORMALTEXTURE=t.Shader3D.propertyNameToID("u_NormalTexture"),at.NORMALSCALE=t.Shader3D.propertyNameToID("u_NormalScale"),at.SMOOTHNESS=t.Shader3D.propertyNameToID("u_Smoothness"),at.OCCLUSIONTEXTURE=t.Shader3D.propertyNameToID("u_OcclusionTexture"),at.OCCLUSIONSTRENGTH=t.Shader3D.propertyNameToID("u_OcclusionStrength"),at.PARALLAXTEXTURE=t.Shader3D.propertyNameToID("u_ParallaxTexture"),at.PARALLAXSCALE=t.Shader3D.propertyNameToID("u_ParallaxScale"),at.EMISSIONTEXTURE=t.Shader3D.propertyNameToID("u_EmissionTexture"),at.EMISSIONCOLOR=t.Shader3D.propertyNameToID("u_EmissionColor"),at.EMISSIONIntensity=t.Shader3D.propertyNameToID("u_EmissionIntensity"),at.DETAILALBEDOTEXTURE=t.Shader3D.propertyNameToID("u_DetailAlbedoTexture"),at.DETAILNORMALTEXTURE=t.Shader3D.propertyNameToID("u_DetailNormalTexture"),at.DETAILTILLINGOFFSET=t.Shader3D.propertyNameToID("u_DetailTillingOffset"),at.DETAILNORMALSCALE=t.Shader3D.propertyNameToID("u_DetailNormalScale"),at.CLEARCOAT=t.Shader3D.propertyNameToID("u_ClearCoatFactor"),at.SHADERDEFINE_CLEARCOATTEXTURE=t.Shader3D.getDefineByName("CLEARCOATMAP"),at.CLEARCOATTEXTURE=t.Shader3D.propertyNameToID("u_ClearCoatTexture"),at.CLEARCOATROUGHNESS=t.Shader3D.propertyNameToID("u_ClearCoatRoughness"),at.SHADERDEFINE_CLEARCOATROUGHNESSTEXTURE=t.Shader3D.getDefineByName("CLEARCOAT_ROUGHNESSMAP"),at.CLEARCOATROUGHNESSTEXTURE=t.Shader3D.propertyNameToID("u_ClearCoatRoughnessTexture"),at.CLEARCOATNORMALTEXTURE=t.Shader3D.propertyNameToID("u_ClearCoatNormalTexture"),at.ANISOTROPY=t.Shader3D.propertyNameToID("u_AnisotropyStrength"),at.SHADERDEFINE_ANISOTROPYTEXTURE=t.Shader3D.getDefineByName("ANISOTROPYMAP"),at.ANISOTROPYTEXTURE=t.Shader3D.propertyNameToID("u_AnisotropyTexture"),at.ANISOTROPYROTATION=t.Shader3D.propertyNameToID("u_AnisotropyRotation")}get albedoColor(){return this._shaderValues.getColor(at.ALBEDOCOLOR)}set albedoColor(e){this._shaderValues.setColor(at.ALBEDOCOLOR,e)}get albedoTexture(){return this.hasDefine(at.SHADERDEFINE_ALBEDOTEXTURE)?this._shaderValues.getTexture(at.ALBEDOTEXTURE):null}set albedoTexture(e){e?this._shaderValues.addDefine(at.SHADERDEFINE_ALBEDOTEXTURE):this._shaderValues.removeDefine(at.SHADERDEFINE_ALBEDOTEXTURE),this.setTextureByIndex(at.ALBEDOTEXTURE,e)}get normalTexture(){return this.hasDefine(at.SHADERDEFINE_NORMALTEXTURE)?this._shaderValues.getTexture(at.NORMALTEXTURE):null}set normalTexture(e){e?this._shaderValues.addDefine(at.SHADERDEFINE_NORMALTEXTURE):this._shaderValues.removeDefine(at.SHADERDEFINE_NORMALTEXTURE),this.setTextureByIndex(at.NORMALTEXTURE,e)}get normalTextureScale(){return this._shaderValues.getNumber(at.NORMALSCALE)}set normalTextureScale(e){this._shaderValues.setNumber(at.NORMALSCALE,e)}get parallaxTexture(){return this._shaderValues.getTexture(at.PARALLAXTEXTURE)}set parallaxTexture(e){e?this._shaderValues.addDefine(at.SHADERDEFINE_PARALLAXTEXTURE):this._shaderValues.removeDefine(at.SHADERDEFINE_PARALLAXTEXTURE),this.setTextureByIndex(at.PARALLAXTEXTURE,e)}get parallaxTextureScale(){return this._shaderValues.getNumber(at.PARALLAXSCALE)}set parallaxTextureScale(e){this._shaderValues.setNumber(at.PARALLAXSCALE,Math.max(.005,Math.min(.08,e)))}get occlusionTexture(){return this._shaderValues.getTexture(at.OCCLUSIONTEXTURE)}set occlusionTexture(e){e?this._shaderValues.addDefine(at.SHADERDEFINE_OCCLUSIONTEXTURE):this._shaderValues.removeDefine(at.SHADERDEFINE_OCCLUSIONTEXTURE),this.setTextureByIndex(at.OCCLUSIONTEXTURE,e)}get occlusionTextureStrength(){return this._shaderValues.getNumber(at.OCCLUSIONSTRENGTH)}set occlusionTextureStrength(e){this._shaderValues.setNumber(at.OCCLUSIONSTRENGTH,Math.max(0,Math.min(1,e)))}get smoothness(){return this._shaderValues.getNumber(at.SMOOTHNESS)}set smoothness(e){this._shaderValues.setNumber(at.SMOOTHNESS,Math.max(0,Math.min(1,e)))}get enableVertexColor(){return this.hasDefine(at.SHADERDEFINE_ENABLEVERTEXCOLOR)}set enableVertexColor(e){e?this.addDefine(at.SHADERDEFINE_ENABLEVERTEXCOLOR):this.removeDefine(at.SHADERDEFINE_ENABLEVERTEXCOLOR)}get enableEmission(){return this._shaderValues.hasDefine($e.DEFINE_EMISSION)}set enableEmission(e){e?this._shaderValues.addDefine($e.DEFINE_EMISSION):this._shaderValues.removeDefine($e.DEFINE_EMISSION)}get emissionColor(){return this._shaderValues.getColor(at.EMISSIONCOLOR)}set emissionColor(e){this._shaderValues.setColor(at.EMISSIONCOLOR,e)}get emissionIntensity(){return this._shaderValues.getNumber(at.EMISSIONIntensity)}set emissionIntensity(e){this._shaderValues.setNumber(at.EMISSIONIntensity,e)}get emissionTexture(){return this._shaderValues.getTexture(at.EMISSIONTEXTURE)}set emissionTexture(e){e?this._shaderValues.addDefine(at.SHADERDEFINE_EMISSIONTEXTURE):this._shaderValues.removeDefine(at.SHADERDEFINE_EMISSIONTEXTURE),this.setTextureByIndex(at.EMISSIONTEXTURE,e)}get tilingOffset(){return this._shaderValues.getVector(at.TILINGOFFSET)}set tilingOffset(e){e?this._shaderValues.setVector(at.TILINGOFFSET,e):this._shaderValues.getVector(at.TILINGOFFSET).setValue(1,1,0,0)}get detailAlbedoTexture(){return this._shaderValues.getTexture(at.DETAILALBEDOTEXTURE)}set detailAlbedoTexture(e){e?this._shaderValues.addDefine(at.SHADERDEFINE_DETAILALBEDO):this._shaderValues.removeDefine(at.SHADERDEFINE_DETAILALBEDO),this.setTextureByIndex(at.DETAILALBEDOTEXTURE,e)}get detailNormalTexture(){return this._shaderValues.getTexture(at.DETAILNORMALTEXTURE)}set detailNormalTexture(e){e?this._shaderValues.addDefine(at.SHADERDEFINE_DETAILNORMAL):this._shaderValues.removeDefine(at.SHADERDEFINE_DETAILNORMAL),this.setTextureByIndex(at.DETAILNORMALTEXTURE,e)}get detailTilingOffset(){return this._shaderValues.getVector(at.DETAILTILLINGOFFSET)}set detailTilingOffset(e){e?this._shaderValues.setVector(at.DETAILTILLINGOFFSET,e):this._shaderValues.getVector(at.DETAILTILLINGOFFSET).setValue(1,1,0,0)}get detailNormalScale(){return this._shaderValues.getNumber(at.DETAILNORMALSCALE)}set detailNormalScale(e){this._shaderValues.setNumber(at.DETAILNORMALSCALE,e)}set renderMode(r){switch(r){case e.PBRRenderMode.Opaque:this.alphaTest=!1,this.renderQueue=t.Material.RENDERQUEUE_OPAQUE,this.depthWrite=!0,this.cull=Ee.CULL_BACK,this.blend=Ee.BLEND_DISABLE,this.depthTest=Ee.DEPTHTEST_LESS,this._shaderValues.removeDefine(at.SHADERDEFINE_TRANSPARENTBLEND);break;case e.PBRRenderMode.Cutout:this.renderQueue=t.Material.RENDERQUEUE_ALPHATEST,this.alphaTest=!0,this.depthWrite=!0,this.cull=Ee.CULL_BACK,this.blend=Ee.BLEND_DISABLE,this.depthTest=Ee.DEPTHTEST_LESS,this._shaderValues.removeDefine(at.SHADERDEFINE_TRANSPARENTBLEND);break;case e.PBRRenderMode.Fade:this.renderQueue=t.Material.RENDERQUEUE_TRANSPARENT,this.alphaTest=!1,this.depthWrite=!1,this.cull=Ee.CULL_BACK,this.blend=Ee.BLEND_ENABLE_ALL,this.blendSrc=Ee.BLENDPARAM_SRC_ALPHA,this.blendDst=Ee.BLENDPARAM_ONE_MINUS_SRC_ALPHA,this.depthTest=Ee.DEPTHTEST_LESS,this._shaderValues.removeDefine(at.SHADERDEFINE_TRANSPARENTBLEND);break;case e.PBRRenderMode.Transparent:this.renderQueue=t.Material.RENDERQUEUE_TRANSPARENT,this.alphaTest=!1,this.depthWrite=!1,this.cull=Ee.CULL_BACK,this.blend=Ee.BLEND_ENABLE_ALL,this.blendSrc=Ee.BLENDPARAM_ONE,this.blendDst=Ee.BLENDPARAM_ONE_MINUS_SRC_ALPHA,this.depthTest=Ee.DEPTHTEST_LESS,this._shaderValues.addDefine(at.SHADERDEFINE_TRANSPARENTBLEND);break;default:throw new Error("PBRMaterial:unknown renderMode value.")}}get anisotropyEnable(){return this.shaderData.hasDefine($e.DEFINE_ANISOTROPY)}set anisotropyEnable(e){e?this.shaderData.addDefine($e.DEFINE_ANISOTROPY):this.shaderData.removeDefine($e.DEFINE_ANISOTROPY)}get anisotropy(){return this.getFloatByIndex(at.ANISOTROPY)}set anisotropy(e){this.setFloatByIndex(at.ANISOTROPY,Math.min(1,Math.max(-1,e)))}get anisotropyTexture(){return this.getTextureByIndex(at.ANISOTROPYTEXTURE)}set anisotropyTexture(e){this.setTextureByIndex(at.ANISOTROPYTEXTURE,e),e?this.addDefine(at.SHADERDEFINE_ANISOTROPYTEXTURE):this.removeDefine(at.SHADERDEFINE_ANISOTROPYTEXTURE)}get anisotropyRotation(){return this.getFloatByIndex(at.ANISOTROPYROTATION)}set anisotropyRotation(e){e=Math.max(Math.min(e,1),0),this.setFloatByIndex(at.ANISOTROPYROTATION,e)}get clearCoatEnable(){return this.shaderData.hasDefine($e.DEFINE_CLEARCOAT)}set clearCoatEnable(e){e?this.shaderData.addDefine($e.DEFINE_CLEARCOAT):this.shaderData.removeDefine($e.DEFINE_CLEARCOAT)}get clearCoat(){return this.shaderData.getNumber(at.CLEARCOAT)}set clearCoat(e){this.shaderData.setNumber(at.CLEARCOAT,e)}get clearCoatTexture(){return this.shaderData.getTexture(at.CLEARCOATTEXTURE)}set clearCoatTexture(e){e?this.shaderData.addDefine(at.SHADERDEFINE_CLEARCOATTEXTURE):this.shaderData.removeDefine(at.SHADERDEFINE_CLEARCOATTEXTURE),this.setTextureByIndex(at.CLEARCOATTEXTURE,e)}get clearCoatRoughness(){return this.shaderData.getNumber(at.CLEARCOATROUGHNESS)}set clearCoatRoughness(e){this.shaderData.setNumber(at.CLEARCOATROUGHNESS,e)}get clearCoatRoughnessTexture(){return this.shaderData.getTexture(at.CLEARCOATROUGHNESSTEXTURE)}set clearCoatRoughnessTexture(e){e?this.shaderData.addDefine(at.SHADERDEFINE_CLEARCOATROUGHNESSTEXTURE):this.shaderData.removeDefine(at.SHADERDEFINE_CLEARCOATROUGHNESSTEXTURE),this.setTextureByIndex(at.CLEARCOATROUGHNESSTEXTURE,e)}get clearCoatNormalTexture(){return this.shaderData.getTexture(at.CLEARCOATNORMALTEXTURE)}set clearCoatNormalTexture(e){e?this.shaderData.addDefine($e.DEFINE_CLEARCOAT_NORMAL):this.shaderData.removeDefine($e.DEFINE_CLEARCOAT_NORMAL),this.setTextureByIndex(at.CLEARCOATNORMALTEXTURE,e)}constructor(){super(),this._shaderValues.setColor(at.ALBEDOCOLOR,new t.Color(1,1,1,1)),this._shaderValues.setColor(at.EMISSIONCOLOR,new t.Color(1,1,1,1)),this._shaderValues.setVector(at.TILINGOFFSET,new t.Vector4(1,1,0,0)),this._shaderValues.setNumber(at.SMOOTHNESS,.5),this._shaderValues.setNumber(at.OCCLUSIONSTRENGTH,1),this._shaderValues.setNumber(at.NORMALSCALE,1),this._shaderValues.setNumber(at.PARALLAXSCALE,.001),this._shaderValues.setNumber(t.Material.ALPHATESTVALUE,.5),this.renderMode=e.PBRRenderMode.Opaque}get smoothnessTextureScale(){return this._shaderValues.getNumber(at.SMOOTHNESS)}set smoothnessTextureScale(e){this._shaderValues.setNumber(at.SMOOTHNESS,Math.max(0,Math.min(1,e)))}}at.renderQuality=e.PBRRenderQuality.High,e.PBRMetallicSmoothnessSource=void 0,(tt=e.PBRMetallicSmoothnessSource||(e.PBRMetallicSmoothnessSource={}))[tt.MetallicGlossTextureAlpha=0]="MetallicGlossTextureAlpha",tt[tt.AlbedoTextureAlpha=1]="AlbedoTextureAlpha";class it extends at{static __init__(){it.SHADERDEFINE_METALLICGLOSSTEXTURE=t.Shader3D.getDefineByName("METALLICGLOSSTEXTURE"),it.SHADERDEFINE_SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA=t.Shader3D.getDefineByName("SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA"),it.METALLICGLOSSTEXTURE=t.Shader3D.propertyNameToID("u_MetallicGlossTexture"),it.METALLIC=t.Shader3D.propertyNameToID("u_Metallic")}get metallicGlossTexture(){return this._shaderValues.getTexture(it.METALLICGLOSSTEXTURE)}set metallicGlossTexture(e){e?this._shaderValues.addDefine(it.SHADERDEFINE_METALLICGLOSSTEXTURE):this._shaderValues.removeDefine(it.SHADERDEFINE_METALLICGLOSSTEXTURE),this._shaderValues.setTexture(it.METALLICGLOSSTEXTURE,e)}get metallic(){return this._shaderValues.getNumber(it.METALLIC)}set metallic(e){this._shaderValues.setNumber(it.METALLIC,Math.max(0,Math.min(1,e)))}get smoothnessSource(){return this._smoothnessSource}set smoothnessSource(e){e?this._shaderValues.addDefine(it.SHADERDEFINE_SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA):this._shaderValues.removeDefine(it.SHADERDEFINE_SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA),this._smoothnessSource=e}constructor(){super(),this._smoothnessSource=0,this.setShaderName("PBR")}clone(){var e=new it;return this.cloneTo(e),e}}class st extends t.Material{static __initDefine__(){st.TINTCOLOR=t.Shader3D.propertyNameToID("u_TintColor"),st.EXPOSURE=t.Shader3D.propertyNameToID("u_Exposure"),st.ROTATION=t.Shader3D.propertyNameToID("u_Rotation"),st.TEXTURECUBE=t.Shader3D.propertyNameToID("u_CubeTexture")}get tintColor(){return this._shaderValues.getColor(st.TINTCOLOR)}set tintColor(e){this._shaderValues.setColor(st.TINTCOLOR,e)}get exposure(){return this._shaderValues.getNumber(st.EXPOSURE)}set exposure(e){this._shaderValues.setNumber(st.EXPOSURE,e)}get rotation(){return this._shaderValues.getNumber(st.ROTATION)}set rotation(e){this._shaderValues.setNumber(st.ROTATION,e)}get textureCube(){return this._shaderValues.getTexture(st.TEXTURECUBE)}set textureCube(e){this._shaderValues.setTexture(st.TEXTURECUBE,e)}clone(){var e=new st;return this.cloneTo(e),e}constructor(){super(),this.setShaderName("SkyBox")}}class ot extends t.Material{static __initDefine__(){ot.SHADERDEFINE_SUN_HIGH_QUALITY=t.Shader3D.getDefineByName("SUN_HIGH_QUALITY"),ot.SHADERDEFINE_SUN_SIMPLE=t.Shader3D.getDefineByName("SUN_SIMPLE"),ot.SUNSIZE=t.Shader3D.propertyNameToID("u_SunSize"),ot.SUNSIZECONVERGENCE=t.Shader3D.propertyNameToID("u_SunSizeConvergence"),ot.ATMOSPHERETHICKNESS=t.Shader3D.propertyNameToID("u_AtmosphereThickness"),ot.SKYTINT=t.Shader3D.propertyNameToID("u_SkyTint"),ot.GROUNDTINT=t.Shader3D.propertyNameToID("u_GroundTint"),ot.EXPOSURE=t.Shader3D.propertyNameToID("u_Exposure")}get sunDisk(){return this._sunDisk}set sunDisk(e){switch(e){case ot.SUN_HIGH_QUALITY:this._shaderValues.removeDefine(ot.SHADERDEFINE_SUN_SIMPLE),this._shaderValues.addDefine(ot.SHADERDEFINE_SUN_HIGH_QUALITY);break;case ot.SUN_SIMPLE:this._shaderValues.removeDefine(ot.SHADERDEFINE_SUN_HIGH_QUALITY),this._shaderValues.addDefine(ot.SHADERDEFINE_SUN_SIMPLE);break;case ot.SUN_NODE:this._shaderValues.removeDefine(ot.SHADERDEFINE_SUN_HIGH_QUALITY),this._shaderValues.removeDefine(ot.SHADERDEFINE_SUN_SIMPLE);break;default:throw"SkyBoxProceduralMaterial: unknown sun value."}this._sunDisk=e}get sunSize(){return this._shaderValues.getNumber(ot.SUNSIZE)}set sunSize(e){e=Math.min(Math.max(0,e),1),this._shaderValues.setNumber(ot.SUNSIZE,e)}get sunSizeConvergence(){return this._shaderValues.getNumber(ot.SUNSIZECONVERGENCE)}set sunSizeConvergence(e){e=Math.min(Math.max(0,e),20),this._shaderValues.setNumber(ot.SUNSIZECONVERGENCE,e)}get atmosphereThickness(){return this._shaderValues.getNumber(ot.ATMOSPHERETHICKNESS)}set atmosphereThickness(e){e=Math.min(Math.max(0,e),5),this._shaderValues.setNumber(ot.ATMOSPHERETHICKNESS,e)}get skyTint(){return this._shaderValues.getColor(ot.SKYTINT)}set skyTint(e){this._shaderValues.setColor(ot.SKYTINT,e)}get groundTint(){return this._shaderValues.getColor(ot.GROUNDTINT)}set groundTint(e){this._shaderValues.setColor(ot.GROUNDTINT,e)}get exposure(){return this._shaderValues.getNumber(ot.EXPOSURE)}set exposure(e){e=Math.min(Math.max(0,e),8),this._shaderValues.setNumber(ot.EXPOSURE,e)}constructor(){super(),this.setShaderName("SkyProcedural"),this.sunDisk=ot.SUN_HIGH_QUALITY,this.sunSize=.04,this.sunSizeConvergence=5,this.atmosphereThickness=1,this.skyTint=new t.Color(.5,.5,.5,1),this.groundTint=new t.Color(.369,.349,.341,1),this.exposure=1.3}clone(){var e=new ot;return this.cloneTo(e),e}}ot.SUN_NODE=0,ot.SUN_SIMPLE=1,ot.SUN_HIGH_QUALITY=2;class lt extends t.Material{static __initDefine__(){lt.SHADERDEFINE_ALBEDOTEXTURE=t.Shader3D.getDefineByName("ALBEDOTEXTURE"),lt.SHADERDEFINE_ENABLEVERTEXCOLOR=t.Shader3D.getDefineByName("ENABLEVERTEXCOLOR"),lt.ALBEDOTEXTURE=t.Shader3D.propertyNameToID("u_AlbedoTexture"),lt.ALBEDOCOLOR=t.Shader3D.propertyNameToID("u_AlbedoColor"),lt.TILINGOFFSET=t.Shader3D.propertyNameToID("u_TilingOffset")}get albedoColor(){return this.getColorByIndex(lt.ALBEDOCOLOR)}set albedoColor(e){this.setColorByIndex(lt.ALBEDOCOLOR,e.scale(this._albedoIntensity))}get albedoIntensity(){return this._albedoIntensity}set albedoIntensity(e){this._albedoIntensity=e}get albedoTexture(){return this.getTextureByIndex(lt.ALBEDOTEXTURE)}set albedoTexture(e){e?this.addDefine(lt.SHADERDEFINE_ALBEDOTEXTURE):this.removeDefine(lt.SHADERDEFINE_ALBEDOTEXTURE),this.setTextureByIndex(lt.ALBEDOTEXTURE,e)}get tilingOffset(){return this.getVector4ByIndex(lt.TILINGOFFSET)}set tilingOffset(e){e?this.setVector4ByIndex(lt.TILINGOFFSET,e):this.setVector4ByIndex(lt.TILINGOFFSET,new t.Vector4(1,1,0,0))}get enableVertexColor(){return this.hasDefine(lt.SHADERDEFINE_ENABLEVERTEXCOLOR)}set enableVertexColor(e){e?this.addDefine(lt.SHADERDEFINE_ENABLEVERTEXCOLOR):this.removeDefine(lt.SHADERDEFINE_ENABLEVERTEXCOLOR)}constructor(){super(),this.setShaderName("Unlit"),this.renderMode=lt.RENDERMODE_OPAQUE,this.albedoIntensity=1}clone(){var e=new lt;return this.cloneTo(e),e}set renderMode(e){switch(e){case lt.RENDERMODE_OPAQUE:this.alphaTest=!1,this.renderQueue=t.Material.RENDERQUEUE_OPAQUE,this.depthWrite=!0,this.cull=Ee.CULL_BACK,this.blend=Ee.BLEND_DISABLE,this.depthTest=Ee.DEPTHTEST_LESS;break;case lt.RENDERMODE_CUTOUT:this.renderQueue=t.Material.RENDERQUEUE_ALPHATEST,this.alphaTest=!0,this.depthWrite=!0,this.cull=Ee.CULL_BACK,this.blend=Ee.BLEND_DISABLE,this.depthTest=Ee.DEPTHTEST_LESS;break;case lt.RENDERMODE_TRANSPARENT:this.renderQueue=t.Material.RENDERQUEUE_TRANSPARENT,this.alphaTest=!1,this.depthWrite=!1,this.cull=Ee.CULL_BACK,this.blend=Ee.BLEND_ENABLE_ALL,this.blendSrc=Ee.BLENDPARAM_SRC_ALPHA,this.blendDst=Ee.BLENDPARAM_ONE_MINUS_SRC_ALPHA,this.depthTest=Ee.DEPTHTEST_LESS;break;default:throw new Error("UnlitMaterial : renderMode value error.")}}}lt.RENDERMODE_OPAQUE=0,lt.RENDERMODE_CUTOUT=1,lt.RENDERMODE_TRANSPARENT=2,lt.RENDERMODE_ADDTIVE=3;class ht extends U{get meshFilter(){return this._meshFilter}get meshRenderer(){return this._render}constructor(e=null,t=null){super(t),this._meshFilter=this.addComponent(Te),this._render=this.addComponent(De),e&&(this._meshFilter.sharedMesh=e)}_parse(e,r){super._parse(e,r);var n=this.meshRenderer,a=e.lightmapIndex;null!=a&&(n.lightmapIndex=a);var i=e.lightmapScaleOffset;i&&(n.lightmapScaleOffset=new t.Vector4(i[0],i[1],i[2],i[3])),null!=e.meshPath&&(this.meshFilter.sharedMesh=t.Loader.getRes(e.meshPath)),null!=e.enableRender&&(n._enabled=e.enableRender),null!=e.receiveShadows&&(n.receiveShadow=e.receiveShadows),null!=e.castShadow&&(n.castShadow=e.castShadow);var s=e.materials;if(s){var o=n.sharedMaterials,l=s.length;o.length=l;for(var h=0;h<l;h++)o[h]=t.Loader.getRes(s[h].path);n.sharedMaterials=o}}_cloneTo(e,t,r){super._cloneTo(e,t,r)}_create(){return new B}}class dt{}dt.Blend=0,dt.Fixed=1;class ct{get _alphaElements(){return this._alphaElementDatas}set _alphaElements(e){this._alphaElementDatas=e;let t=e.length/2;if(this.colorAlphaKeysCount<t){let e=t>4?8:4;this._colorAlphaKeysCount=Math.ceil(Math.min(t,8)),this._maxAlphaKeysCount=e}if(this.colorAlphaKeysCount<2){let t=e[1];this._alphaDataBuffer[0]=0,this._alphaDataBuffer[1]=t,this._alphaDataBuffer[2]=1,this._alphaDataBuffer[3]=t}else this._alphaDataBuffer.set(e)}get _rgbElements(){return this._rgbElementDatas}set _rgbElements(e){this._rgbElementDatas=e;let t=e.length/4;if(this.colorRGBKeysCount<t){let e=t>4?8:4;this._colorRGBKeysCount=Math.ceil(Math.min(t,8)),this._maxRGBKeysCount=e}if(this.colorRGBKeysCount<2){let t=e[1],r=e[2],n=e[3];this._rgbDataBuffer[0]=0,this._rgbDataBuffer[1]=t,this._rgbDataBuffer[2]=r,this._rgbDataBuffer[3]=n,this._rgbDataBuffer[4]=1,this._rgbDataBuffer[5]=t,this._rgbDataBuffer[6]=r,this._rgbDataBuffer[7]=n}else this._rgbDataBuffer.set(e)}get rgbElements(){return this._rgbDataBuffer}get alphaElements(){return this._alphaDataBuffer}get mode(){return this._mode}set mode(e){this._mode=e}get colorRGBKeysCount(){return this._colorRGBKeysCount}set _maxAlphaKeysCount(e){this._maxColorAlphaKeysCount=e,e=Math.max(e,2),this._alphaDataBuffer=new Float32Array(4*Math.ceil(e/2))}set _maxRGBKeysCount(e){this._maxColorRGBKeysCount=e,e=Math.max(e,2),this._rgbDataBuffer=new Float32Array(4*e)}get colorAlphaKeysCount(){return this._colorAlphaKeysCount}get maxColorRGBKeysCount(){return this._maxColorRGBKeysCount}get maxColorAlphaKeysCount(){return this._maxColorAlphaKeysCount}constructor(){this._mode=0,this._maxColorRGBKeysCount=0,this._maxColorAlphaKeysCount=0,this._colorRGBKeysCount=0,this._colorAlphaKeysCount=0,this._keyRanges=new t.Vector4(1,0,1,0),this._alphaDataBuffer=null,this._rgbDataBuffer=null}setMaxKeyCount(e,t){this._maxAlphaKeysCount=t,this._maxRGBKeysCount=e,this._rgbElements=new Float32Array(4*e),this._alphaElements=new Float32Array(2*t)}addColorRGB(e,t){if(this._colorRGBKeysCount<this._maxColorRGBKeysCount){var r=4*this._colorRGBKeysCount;this._rgbElements[r]=e,this._rgbElements[r+1]=t.r,this._rgbElements[r+2]=t.g,this._rgbElements[r+3]=t.b,this._colorRGBKeysCount++,this._rgbElements=this._rgbElements}else console.warn("Gradient:warning:data count must lessEqual than "+this._maxColorRGBKeysCount)}addColorAlpha(e,t){if(this._colorAlphaKeysCount<this._maxColorAlphaKeysCount){var r=2*this._colorAlphaKeysCount;this._alphaElements[r]=e,this._alphaElements[r+1]=t,this._colorAlphaKeysCount++,this._alphaElements=this._alphaElements}else console.warn("Gradient:warning:data count must lessEqual than "+this._maxColorAlphaKeysCount)}updateColorRGB(e,t,r){if(e<this._colorRGBKeysCount){var n=4*e;this._rgbElements[n]=t,this._rgbElements[n+1]=r.r,this._rgbElements[n+2]=r.g,this._rgbElements[n+3]=r.b,this._rgbElements=this._rgbElements}else console.warn("Gradient:warning:index must lessEqual than colorRGBKeysCount:"+this._colorRGBKeysCount)}updateColorAlpha(e,t,r){if(e<this._colorAlphaKeysCount){var n=2*e;this._alphaElements[n]=t,this._alphaElements[n+1]=r,this._alphaElements=this._alphaElements}else console.warn("Gradient:warning:index must lessEqual than colorAlphaKeysCount:"+this._colorAlphaKeysCount)}evaluateColorRGB(e,t,r=0,n=!1){e=Math.min(Math.max(e,0),1);var a=this._rgbElements,i=r;if(n)for(var s=i;s>=0;s--){var o=4*s;if(e===(_=a[o]))return t.r=a[o+1],t.g=a[o+2],t.b=a[o+3],i;var l=a[o+4];switch(this._mode){case dt.Blend:if(e>_&&l){if(e>l)continue;var h=l-_,d=l-e,c=e-_;return t.r=(d*a[o+1]+c*a[o+5])/h,t.g=(d*a[o+2]+c*a[o+6])/h,t.b=(d*a[o+3]+c*a[o+7])/h,i}i--;continue;case dt.Fixed:if(e>_){if(e>a[o+4])throw"Gradient:wrong startSearchIndex.";return t.r=a[o+5],t.g=a[o+6],t.b=a[o+7],i}i--;continue;default:throw"Gradient:unknown mode."}}else{s=0;for(var u=this._rgbElements.length;s<u;s++){if(e===(l=a[o=4*s]))return t.r=a[o+1],t.g=a[o+2],t.b=a[o+3],i;switch(this._mode){case dt.Blend:if(e<l){var _;if(e<(_=a[o-4]))throw"Gradient:wrong startSearchIndex.";h=l-_,d=l-e,c=e-_;return t.r=(d*a[o-3]+c*a[o+1])/h,t.g=(d*a[o-2]+c*a[o+2])/h,t.b=(d*a[o-1]+c*a[o+3])/h,i}i++;continue;case dt.Fixed:if(e<l){if(e<a[o-4])throw"Gradient:wrong startSearchIndex.";return t.r=a[o+1],t.g=a[o+2],t.b=a[o+3],i}i++;continue;default:throw"Gradient:unknown mode."}}}return i}evaluateColorAlpha(e,t,r=0,n=!1){e=Math.min(Math.max(e,0),1);var a=this._alphaElements,i=r;if(n)for(var s=i;s>=0;s--){if(e===(_=a[u=2*s]))return t.a=a[u+1],i;var o=a[u+2];switch(this._mode){case dt.Blend:if(e>_&&o){if(e>o)continue;var l=o-_,h=o-e,d=e-_;return t.a=(h*a[u+1]+d*a[u+3])/l,i}i--;continue;case dt.Fixed:if(e>_){if(e>a[u+2])throw"Gradient:wrong startSearchIndex.";return t.a=a[u+3],i}i--;continue;default:throw"Gradient:unknown mode."}}else{s=i;for(var c=this._alphaElements.length;s<c;s++){var u;if(e===(o=a[u=2*s]))return t.a=a[u+1],i;switch(this._mode){case dt.Blend:if(e<o){var _;if(e<(_=a[u-2]))throw"Gradient:wrong startSearchIndex.";l=o-_,h=o-e,d=e-_;return t.a=(h*a[u-1]+d*a[u+1])/l,i}i++;continue;case dt.Fixed:if(e<o){if(e<a[u-2])throw"Gradient:wrong startSearchIndex.";return t.a=a[u+1],i}i++;continue;default:throw"Gradient:unknown mode."}}}return i}cloneTo(e){var t,r,n=e;n._colorAlphaKeysCount=this._colorAlphaKeysCount;let a=n._alphaElements=new Float32Array(this._alphaElements.length);for(t=0,r=this._alphaElements.length;t<r;t++)a[t]=this._alphaElements[t];n._colorRGBKeysCount=this._colorRGBKeysCount;var i=n._rgbElements=new Float32Array(this._rgbElements.length);for(t=0,r=this._rgbElements.length;t<r;t++)i[t]=this._rgbElements[t]}clone(){var e=new ct;return e.setMaxKeyCount(this.maxColorRGBKeysCount,this.maxColorAlphaKeysCount),this.cloneTo(e),e}}class ut{get time(){return this._time}get minCount(){return this._minCount}get maxCount(){return this._maxCount}constructor(e=0,t=0,r=0){this._time=e,this._minCount=t,this._maxCount=r}cloneTo(e){var t=e;t._time=this._time,t._minCount=this._minCount,t._maxCount=this._maxCount}clone(){var e=new ut(this._time,this._minCount,this._maxCount);return this.cloneTo(e),e}}class _t{static createByConstant(e){var t=new _t;return t._type=0,t._constant=e,t}static createByGradient(e){var t=new _t;return t._type=1,t._gradient=e,t}static createByRandomTwoConstant(e,t){var r=new _t;return r._type=2,r._constantMin=e,r._constantMax=t,r}static createByRandomTwoGradient(e,t){var r=new _t;return r._type=3,r._gradientMin=e,r._gradientMax=t,r}get type(){return this._type}get constant(){return this._constant}get constantMin(){return this._constantMin}get constantMax(){return this._constantMax}get gradient(){return this._gradient}get gradientMin(){return this._gradientMin}get gradientMax(){return this._gradientMax}constructor(){this._type=0,this._constant=null,this._constantMin=null,this._constantMax=null,this._gradient=null,this._gradientMin=null,this._gradientMax=null}cloneTo(e){var t=e;t._type=this._type,this._constant.cloneTo(t._constant),this._constantMin.cloneTo(t._constantMin),this._constantMax.cloneTo(t._constantMax),this._gradient.cloneTo(t._gradient),this._gradientMin.cloneTo(t._gradientMin),this._gradientMax.cloneTo(t._gradientMax)}clone(){var e=new _t;return this.cloneTo(e),e}}class mt{get color(){return this._color}constructor(e){this._color=e}cloneTo(e){var t=e;this._color.cloneTo(t._color),t.enable=this.enable}clone(){var e;switch(this._color.type){case 0:e=_t.createByConstant(this._color.constant.clone());break;case 1:e=_t.createByGradient(this._color.gradient.clone());break;case 2:e=_t.createByRandomTwoConstant(this._color.constantMin.clone(),this._color.constantMax.clone());break;case 3:e=_t.createByRandomTwoGradient(this._color.gradientMin.clone(),this._color.gradientMax.clone())}var t=new mt(e);return t.enable=this.enable,t}}class ft{static createByConstant(e=0){var t=new ft;return t._type=0,t._constant=e,t}static createByOverTime(e){var t=new ft;return t._type=1,t._overTime=e,t}static createByRandomTwoConstant(e=0,t=0){var r=new ft;return r._type=2,r._constantMin=e,r._constantMax=t,r}static createByRandomTwoOverTime(e,t){var r=new ft;return r._type=3,r._overTimeMin=e,r._overTimeMax=t,r}get type(){return this._type}get constant(){return this._constant}get frameOverTimeData(){return this._overTime}get constantMin(){return this._constantMin}get constantMax(){return this._constantMax}get frameOverTimeDataMin(){return this._overTimeMin}get frameOverTimeDataMax(){return this._overTimeMax}constructor(){this._type=0,this._constant=0,this._overTime=null,this._constantMin=0,this._constantMax=0,this._overTimeMin=null,this._overTimeMax=null}cloneTo(e){var t=e;t._type=this._type,t._constant=this._constant,this._overTime&&this._overTime.cloneTo(t._overTime),t._constantMin=this._constantMin,t._constantMax=this._constantMax,this._overTimeMin&&this._overTimeMin.cloneTo(t._overTimeMin),this._overTimeMax&&this._overTimeMax.cloneTo(t._overTimeMax)}clone(){var e=new ft;return this.cloneTo(e),e}}class gt{static createConstantData(e){let t=new gt;return t.add(0,e),t.add(1,e),t}get _elements(){return this._dataBuffer}set _elements(e){let t=e.length;t=t>8?8:t,this._currentLength=t,this._dataBuffer.set(e),this._formatData()}get gradientCount(){return this._currentLength/2}constructor(){this._currentLength=0,this._dataBuffer=new Float32Array(8)}_formatData(){8!=this._currentLength&&1!==this._elements[this._currentLength-2]&&(this._elements[this._currentLength]=1,this._elements[this._currentLength+1]=this._elements[this._currentLength-1])}add(e,t){this._currentLength<8?(6===this._currentLength&&1!==e&&(e=1,console.log("GradientDataNumber warning:the forth key is  be force set to 1.")),this._elements[this._currentLength++]=e,this._elements[this._currentLength++]=t):console.log("GradientDataNumber warning:data count must lessEqual than 4")}getKeyByIndex(e){return this._elements[2*e]}getValueByIndex(e){return this._elements[2*e+1]}getAverageValue(){for(var e=0,t=0,r=0,n=this._currentLength-2;r<n;r+=2){var a=this._elements[r+1];a+=this._elements[r+3],e+=a*=this._elements[r+2]-this._elements[r],t++}return e/t}cloneTo(e){var t=e;t._currentLength=this._currentLength;for(var r=t._elements,n=0,a=this._elements.length;n<a;n++)r[n]=this._elements[n]}clone(){var e=new gt;return this.cloneTo(e),e}}class pt{static createByConstant(e){var t=new pt;return t._type=0,t._separateAxes=!1,t._constant=e,t}static createByConstantSeparate(e){var t=new pt;return t._type=0,t._separateAxes=!0,t._constantSeparate=e,t}static createByGradient(e){var t=new pt;return t._type=1,t._separateAxes=!1,t._gradient=e,t}static createByGradientSeparate(e,t,r){var n=new pt;return n._type=1,n._separateAxes=!0,n._gradientX=e,n._gradientY=t,n._gradientZ=r,n}static createByRandomTwoConstant(e,t){var r=new pt;return r._type=2,r._separateAxes=!1,r._constantMin=e,r._constantMax=t,r}static createByRandomTwoConstantSeparate(e,t){var r=new pt;return r._type=2,r._separateAxes=!0,r._constantMinSeparate=e,r._constantMaxSeparate=t,r}static createByRandomTwoGradient(e,t){var r=new pt;return r._type=3,r._separateAxes=!1,r._gradientMin=e,r._gradientMax=t,r}static createByRandomTwoGradientSeparate(e,t,r,n,a,i,s,o){var l=new pt;return l._type=3,l._separateAxes=!0,l._gradientXMin=e,l._gradientXMax=t,l._gradientYMin=r,l._gradientYMax=n,l._gradientZMin=a,l._gradientZMax=i,l._gradientWMin=s,l._gradientWMax=o,l}get _constantSeparate(){return this.__constantSeparate}set _constantSeparate(e){this.__constantSeparate=e.clone(),this._constantXGradientDdata=gt.createConstantData(e.x),this._constantYGradientDdata=gt.createConstantData(e.y),this._constantZGradientDdata=gt.createConstantData(e.z)}get _constant(){return this.__constant}set _constant(e){this.__constant=e,this._constantGradientDdata=gt.createConstantData(e)}get _constantMin(){return this.__constantMin}set _constantMin(e){this.__constantMin=e,this._constantMinGradientDdata=gt.createConstantData(e)}get _constantMax(){return this.__constantMax}set _constantMax(e){this.__constantMax=e,this._constantMaxGradientDdata=gt.createConstantData(e)}get _constantMinSeparate(){return this.__constantMinSeparate}set _constantMinSeparate(e){this.__constantMinSeparate=e.clone(),this._constantXMinGradientDdata=gt.createConstantData(e.x),this._constantYMinGradientDdata=gt.createConstantData(e.y),this._constantZMinGradientDdata=gt.createConstantData(e.z)}get _constantMaxSeparate(){return this.__constantMaxSeparate}set _constantMaxSeparate(e){this.__constantMaxSeparate=e,this._constantXMaxGradientDdata=gt.createConstantData(e.x),this._constantYMaxGradientDdata=gt.createConstantData(e.y),this._constantZMaxGradientDdata=gt.createConstantData(e.z)}get type(){return this._type}get separateAxes(){return this._separateAxes}get constant(){return this._constant}get constantSeparate(){return this._constantSeparate}get gradient(){return this._gradient}get gradientX(){return this._gradientX}get gradientY(){return this._gradientY}get gradientZ(){return this._gradientZ}get gradientW(){return this._gradientW}get constantMin(){return this._constantMin}get constantMax(){return this._constantMax}get constantMinSeparate(){return this._constantMinSeparate}get constantMaxSeparate(){return this._constantMaxSeparate}get gradientMin(){return this._gradientMin}get gradientMax(){return this._gradientMax}get gradientXMin(){return this._gradientXMin}get gradientXMax(){return this._gradientXMax}get gradientYMin(){return this._gradientYMin}get gradientYMax(){return this._gradientYMax}get gradientZMin(){return this._gradientZMin}get gradientZMax(){return this._gradientZMax}get gradientWMin(){return this._gradientWMin}get gradientWMax(){return this._gradientWMax}constructor(){this._type=0,this._separateAxes=!1,this.__constantSeparate=null,this._gradient=null,this._gradientX=null,this._gradientY=null,this._gradientZ=null,this._gradientW=null,this._constantGradientDdata=null,this._constantMinGradientDdata=null,this._constantMaxGradientDdata=null,this.__constant=0,this.__constantMin=0,this.__constantMax=0,this.__constantMinSeparate=null,this.__constantMaxSeparate=null,this._constantXGradientDdata=null,this._constantYGradientDdata=null,this._constantZGradientDdata=null,this._constantXMinGradientDdata=null,this._constantYMinGradientDdata=null,this._constantZMinGradientDdata=null,this._constantXMaxGradientDdata=null,this._constantYMaxGradientDdata=null,this._constantZMaxGradientDdata=null,this._gradientMin=null,this._gradientMax=null,this._gradientXMin=null,this._gradientXMax=null,this._gradientYMin=null,this._gradientYMax=null,this._gradientZMin=null,this._gradientZMax=null,this._gradientWMin=null,this._gradientWMax=null}cloneTo(e){var t=e;t._type=this._type,t._separateAxes=this._separateAxes,t._constant=this._constant,this._constantSeparate.cloneTo(t._constantSeparate),this._gradient.cloneTo(t._gradient),this._gradientX.cloneTo(t._gradientX),this._gradientY.cloneTo(t._gradientY),this._gradientZ.cloneTo(t._gradientZ),t._constantMin=this._constantMin,t._constantMax=this._constantMax,this._constantMinSeparate.cloneTo(t._constantMinSeparate),this._constantMaxSeparate.cloneTo(t._constantMaxSeparate),this._gradientMin.cloneTo(t._gradientMin),this._gradientMax.cloneTo(t._gradientMax),this._gradientXMin.cloneTo(t._gradientXMin),this._gradientXMax.cloneTo(t._gradientXMax),this._gradientYMin.cloneTo(t._gradientYMin),this._gradientYMax.cloneTo(t._gradientYMax),this._gradientZMin.cloneTo(t._gradientZMin),this._gradientZMax.cloneTo(t._gradientZMax)}clone(){var e=new pt;return this.cloneTo(e),e}}class St{get gradientCount(){return this._currentLength/2}constructor(){this._currentLength=0,this._curveMin=0,this._curveMax=1,this._elements=new Float32Array(8)}_formatData(){8!=this._currentLength&&1!==this._elements[this._currentLength-2]&&(this._elements[this._currentLength]=1,this._elements[this._currentLength+1]=this._elements[this._currentLength-1])}add(e,t){this._currentLength<8?(6===this._currentLength&&1!==e&&(e=1,console.log("Warning:the forth key is  be force set to 1.")),this._elements[this._currentLength++]=e,this._elements[this._currentLength++]=t):console.log("Warning:data count must lessEqual than 4")}cloneTo(e){var t=e;t._currentLength=this._currentLength;for(var r=t._elements,n=0,a=this._elements.length;n<a;n++)r[n]=this._elements[n]}clone(){var e=new St;return this.cloneTo(e),e}}class Tt{static createByGradient(e){var t=new Tt;return t._type=0,t._separateAxes=!1,t._gradient=e,t}static createByGradientSeparate(e,t,r){var n=new Tt;return n._type=0,n._separateAxes=!0,n._gradientX=e,n._gradientY=t,n._gradientZ=r,n}static createByRandomTwoConstant(e,t){var r=new Tt;return r._type=1,r._separateAxes=!1,r._constantMin=e,r._constantMax=t,r}static createByRandomTwoConstantSeparate(e,t){var r=new Tt;return r._type=1,r._separateAxes=!0,r._constantMinSeparate=e,r._constantMaxSeparate=t,r}static createByRandomTwoGradient(e,t){var r=new Tt;return r._type=2,r._separateAxes=!1,r._gradientMin=e,r._gradientMax=t,r}static createByRandomTwoGradientSeparate(e,t,r,n,a,i){var s=new Tt;return s._type=2,s._separateAxes=!0,s._gradientXMin=e,s._gradientXMax=t,s._gradientYMin=r,s._gradientYMax=n,s._gradientZMin=a,s._gradientZMax=i,s}get type(){return this._type}get separateAxes(){return this._separateAxes}get gradient(){return this._gradient}get gradientX(){return this._gradientX}get gradientY(){return this._gradientY}get gradientZ(){return this._gradientZ}get constantMin(){return this._constantMin}get constantMax(){return this._constantMax}get constantMinSeparate(){return this._constantMinSeparate}get constantMaxSeparate(){return this._constantMaxSeparate}get gradientMin(){return this._gradientMin}get gradientMax(){return this._gradientMax}get gradientXMin(){return this._gradientXMin}get gradientXMax(){return this._gradientXMax}get gradientYMin(){return this._gradientYMin}get gradientYMax(){return this._gradientYMax}get gradientZMin(){return this._gradientZMin}get gradientZMax(){return this._gradientZMax}constructor(){this._type=0,this._separateAxes=!1,this._gradient=null,this._gradientX=null,this._gradientY=null,this._gradientZ=null,this._constantMin=0,this._constantMax=0,this._constantMinSeparate=null,this._constantMaxSeparate=null,this._gradientMin=null,this._gradientMax=null,this._gradientXMin=null,this._gradientXMax=null,this._gradientYMin=null,this._gradientYMax=null,this._gradientZMin=null,this._gradientZMax=null}getMaxSizeInGradient(e=!1){var t,r,n=-Number.MAX_VALUE;switch(this._type){case 0:if(this._separateAxes){for(t=0,r=this._gradientX.gradientCount;t<r;t++)n=Math.max(n,this._gradientX.getValueByIndex(t));for(t=0,r=this._gradientY.gradientCount;t<r;t++)n=Math.max(n,this._gradientY.getValueByIndex(t));if(e)for(t=0,r=this._gradientZ.gradientCount;t<r;t++)n=Math.max(n,this._gradientZ.getValueByIndex(t))}else for(t=0,r=this._gradient.gradientCount;t<r;t++)n=Math.max(n,this._gradient.getValueByIndex(t));break;case 1:this._separateAxes?(n=Math.max(this._constantMinSeparate.x,this._constantMaxSeparate.x),n=Math.max(n,this._constantMinSeparate.y),e&&(n=n=Math.max(n,this._constantMaxSeparate.z))):n=Math.max(this._constantMin,this._constantMax);break;case 2:if(this._separateAxes){for(t=0,r=this._gradientXMin.gradientCount;t<r;t++)n=Math.max(n,this._gradientXMin.getValueByIndex(t));for(t=0,r=this._gradientXMax.gradientCount;t<r;t++)n=Math.max(n,this._gradientXMax.getValueByIndex(t));for(t=0,r=this._gradientYMin.gradientCount;t<r;t++)n=Math.max(n,this._gradientYMin.getValueByIndex(t));for(t=0,r=this._gradientZMax.gradientCount;t<r;t++)n=Math.max(n,this._gradientZMax.getValueByIndex(t));if(e){for(t=0,r=this._gradientZMin.gradientCount;t<r;t++)n=Math.max(n,this._gradientZMin.getValueByIndex(t));for(t=0,r=this._gradientZMax.gradientCount;t<r;t++)n=Math.max(n,this._gradientZMax.getValueByIndex(t))}}else{for(t=0,r=this._gradientMin.gradientCount;t<r;t++)n=Math.max(n,this._gradientMin.getValueByIndex(t));for(t=0,r=this._gradientMax.gradientCount;t<r;t++)n=Math.max(n,this._gradientMax.getValueByIndex(t))}}return n}cloneTo(e){var t=e;t._type=this._type,t._separateAxes=this._separateAxes,this._gradient.cloneTo(t._gradient),this._gradientX.cloneTo(t._gradientX),this._gradientY.cloneTo(t._gradientY),this._gradientZ.cloneTo(t._gradientZ),t._constantMin=this._constantMin,t._constantMax=this._constantMax,this._constantMinSeparate.cloneTo(t._constantMinSeparate),this._constantMaxSeparate.cloneTo(t._constantMaxSeparate),this._gradientMin.cloneTo(t._gradientMin),this._gradientMax.cloneTo(t._gradientMax),this._gradientXMin.cloneTo(t._gradientXMin),this._gradientXMax.cloneTo(t._gradientXMax),this._gradientYMin.cloneTo(t._gradientYMin),this._gradientYMax.cloneTo(t._gradientYMax),this._gradientZMin.cloneTo(t._gradientZMin),this._gradientZMax.cloneTo(t._gradientZMax)}clone(){var e=new Tt;return this.cloneTo(e),e}}class Et{static createByConstant(e){var t=new Et;return t._type=0,t._constant=e,t._gradientConstantXMin=gt.createConstantData(e.x),t._gradientConstantYMin=gt.createConstantData(e.y),t._gradientConstantZMin=gt.createConstantData(e.z),t}static createByGradient(e,t,r){var n=new Et;return n._type=1,n._gradientX=e,n._gradientY=t,n._gradientZ=r,n}static createByRandomTwoConstant(e,t){var r=new Et;return r._type=2,r._constantMin=e,r._constantMax=t,r._gradientConstantXMin=gt.createConstantData(e.x),r._gradientConstantXMax=gt.createConstantData(t.x),r._gradientConstantYMin=gt.createConstantData(e.y),r._gradientConstantYMax=gt.createConstantData(t.y),r._gradientConstantZMin=gt.createConstantData(e.z),r._gradientConstantZMax=gt.createConstantData(t.z),r}static createByRandomTwoGradient(e,t,r,n,a,i){var s=new Et;return s._type=3,s._gradientXMin=e,s._gradientXMax=t,s._gradientYMin=r,s._gradientYMax=n,s._gradientZMin=a,s._gradientZMax=i,s}get _constant(){return this.__constant}set _constant(e){this.__constant=e,this._gradientConstantX=gt.createConstantData(e.x),this._gradientConstantY=gt.createConstantData(e.y),this._gradientConstantZ=gt.createConstantData(e.z)}get _constantMin(){return this.__constantMin}set _constantMin(e){this.__constantMin=e,this._gradientConstantXMin=gt.createConstantData(e.x),this._gradientConstantYMin=gt.createConstantData(e.y),this._gradientConstantZMin=gt.createConstantData(e.z)}get _constantMax(){return this.__constantMax}set _constantMax(e){this.__constantMax=e,this._gradientConstantXMax=gt.createConstantData(e.x),this._gradientConstantYMax=gt.createConstantData(e.y),this._gradientConstantZMax=gt.createConstantData(e.z)}get type(){return this._type}get constant(){return this._constant}get gradientX(){return this._gradientX}get gradientY(){return this._gradientY}get gradientZ(){return this._gradientZ}get constantMin(){return this._constantMin}get constantMax(){return this._constantMax}get gradientConstantX(){return this._gradientConstantX}get gradientConstantY(){return this._gradientConstantY}get gradientConstantZ(){return this._gradientConstantZ}get gradientConstantXMin(){return this._gradientConstantXMin}get gradientConstantXMax(){return this._gradientConstantXMax}get gradientConstantYMin(){return this._gradientConstantYMin}get gradientConstantYMax(){return this._gradientConstantYMax}get gradientConstantZMin(){return this._gradientConstantZMin}get gradientConstantZMax(){return this._gradientConstantZMax}get gradientXMin(){return this._gradientXMin}get gradientXMax(){return this._gradientXMax}get gradientYMin(){return this._gradientYMin}get gradientYMax(){return this._gradientYMax}get gradientZMin(){return this._gradientZMin}get gradientZMax(){return this._gradientZMax}constructor(){this._type=0,this.__constant=null,this.__constantMin=null,this.__constantMax=null,this._gradientConstantX=null,this._gradientConstantY=null,this._gradientConstantZ=null,this._gradientConstantXMin=null,this._gradientConstantXMax=null,this._gradientConstantYMin=null,this._gradientConstantYMax=null,this._gradientConstantZMin=null,this._gradientConstantZMax=null,this._gradientX=null,this._gradientY=null,this._gradientZ=null,this._gradientXMin=null,this._gradientXMax=null,this._gradientYMin=null,this._gradientYMax=null,this._gradientZMin=null,this._gradientZMax=null}cloneTo(e){var t=e;t._type=this._type,this._constant.cloneTo(t._constant),this._gradientX.cloneTo(t._gradientX),this._gradientY.cloneTo(t._gradientY),this._gradientZ.cloneTo(t._gradientZ),this._constantMin.cloneTo(t._constantMin),this._constantMax.cloneTo(t._constantMax),this._gradientXMin.cloneTo(t._gradientXMin),this._gradientXMax.cloneTo(t._gradientXMax),this._gradientYMin.cloneTo(t._gradientYMin),this._gradientYMax.cloneTo(t._gradientYMax),this._gradientZMin.cloneTo(t._gradientZMin),this._gradientZMax.cloneTo(t._gradientZMax)}clone(){var e=new Et;return this.cloneTo(e),e}}class xt{get angularVelocity(){return this._angularVelocity}constructor(e){this._angularVelocity=e}cloneTo(e){var t=e;this._angularVelocity.cloneTo(t._angularVelocity),t.enable=this.enable}clone(){var e;switch(this._angularVelocity.type){case 0:e=this._angularVelocity.separateAxes?pt.createByConstantSeparate(this._angularVelocity.constantSeparate.clone()):pt.createByConstant(this._angularVelocity.constant);break;case 1:e=this._angularVelocity.separateAxes?pt.createByGradientSeparate(this._angularVelocity.gradientX.clone(),this._angularVelocity.gradientY.clone(),this._angularVelocity.gradientZ.clone()):pt.createByGradient(this._angularVelocity.gradient.clone());break;case 2:e=this._angularVelocity.separateAxes?pt.createByRandomTwoConstantSeparate(this._angularVelocity.constantMinSeparate.clone(),this._angularVelocity.constantMaxSeparate.clone()):pt.createByRandomTwoConstant(this._angularVelocity.constantMin,this._angularVelocity.constantMax);break;case 3:e=this._angularVelocity.separateAxes?pt.createByRandomTwoGradientSeparate(this._angularVelocity.gradientXMin.clone(),this._angularVelocity.gradientXMax.clone(),this._angularVelocity.gradientYMin.clone(),this._angularVelocity.gradientYMax.clone(),this._angularVelocity.gradientZMin.clone(),this._angularVelocity.gradientZMax.clone(),this._angularVelocity.gradientWMin.clone(),this._angularVelocity.gradientWMax.clone()):pt.createByRandomTwoGradient(this._angularVelocity.gradientMin.clone(),this._angularVelocity.gradientMax.clone())}var t=new xt(e);return t.enable=this.enable,t}}class At{constructor(e,t){this.min=e,this.max=t}_rotateExtents(e,t,r){var n=e.x,a=e.y,i=e.z,s=t.elements;r.x=Math.abs(s[0]*n)+Math.abs(s[4]*a)+Math.abs(s[8]*i),r.y=Math.abs(s[1]*n)+Math.abs(s[5]*a)+Math.abs(s[9]*i),r.z=Math.abs(s[2]*n)+Math.abs(s[6]*a)+Math.abs(s[10]*i)}getCorners(e){e.length=8;var r=this.min.x,n=this.min.y,a=this.min.z,i=this.max.x,s=this.max.y,o=this.max.z;e[0]=new t.Vector3(r,s,o),e[1]=new t.Vector3(i,s,o),e[2]=new t.Vector3(i,n,o),e[3]=new t.Vector3(r,n,o),e[4]=new t.Vector3(r,s,a),e[5]=new t.Vector3(i,s,a),e[6]=new t.Vector3(i,n,a),e[7]=new t.Vector3(r,n,a)}getCenter(e){t.Vector3.add(this.min,this.max,e),t.Vector3.scale(e,.5,e)}getExtent(e){t.Vector3.subtract(this.max,this.min,e),t.Vector3.scale(e,.5,e)}setCenterAndExtent(e,r){t.Vector3.subtract(e,r,this.min),t.Vector3.add(e,r,this.max)}tranform(e,r){var n=At._tempVector30,a=At._tempVector31;this.getCenter(n),this.getExtent(a),t.Vector3.transformCoordinate(n,e,n),this._rotateExtents(a,e,a),r.setCenterAndExtent(n,a)}toDefault(){this.min.toDefault(),this.max.toDefault()}static createfromPoints(e,r){if(null==e)throw new Error("points");var n=r.min,a=r.max;n.x=Number.MAX_VALUE,n.y=Number.MAX_VALUE,n.z=Number.MAX_VALUE,a.x=-Number.MAX_VALUE,a.y=-Number.MAX_VALUE,a.z=-Number.MAX_VALUE;for(var i=0,s=e.length;i<s;++i)t.Vector3.min(n,e[i],n),t.Vector3.max(a,e[i],a)}static merge(e,r,n){t.Vector3.min(e.min,r.min,n.min),t.Vector3.max(e.max,r.max,n.max)}cloneTo(e){var t=e;this.min.cloneTo(t.min),this.max.cloneTo(t.max)}clone(){var e=new At(new t.Vector3,new t.Vector3);return this.cloneTo(e),e}}At._tempVector30=new t.Vector3,At._tempVector31=new t.Vector3,e.ParticleSystemShapeType=void 0,(rt=e.ParticleSystemShapeType||(e.ParticleSystemShapeType={}))[rt.Box=0]="Box",rt[rt.Circle=1]="Circle",rt[rt.Cone=2]="Cone",rt[rt.Hemisphere=3]="Hemisphere",rt[rt.Sphere=4]="Sphere";class Dt{constructor(){this.enable=!0,this.randomDirection=0}_getShapeBoundBox(e){throw new Error("BaseShape: must override it.")}_getSpeedBoundBox(e){throw new Error("BaseShape: must override it.")}generatePositionAndDirection(e,t,r=null,n=null){throw new Error("BaseShape: must override it.")}_calculateProceduralBounds(e,r,n){this._getShapeBoundBox(e);var a=e.min,i=e.max;t.Vector3.multiply(a,r,a),t.Vector3.multiply(i,r,i);var s=new At(new t.Vector3,new t.Vector3);this.randomDirection?(s.min=new t.Vector3(-1,-1,-1),s.max=new t.Vector3(1,1,1)):this._getSpeedBoundBox(s);var o=new At(new t.Vector3,new t.Vector3),l=o.min,h=o.max;t.Vector3.scale(s.min,n.y,l),t.Vector3.scale(s.max,n.y,h),t.Vector3.add(e.min,l,l),t.Vector3.add(e.max,h,h),t.Vector3.min(e.min,l,e.min),t.Vector3.max(e.max,l,e.max);var d=new At(new t.Vector3,new t.Vector3),c=d.min,u=d.max;t.Vector3.scale(s.min,n.x,c),t.Vector3.scale(s.max,n.x,u),t.Vector3.min(d.min,u,l),t.Vector3.max(d.min,u,h),t.Vector3.min(e.min,l,e.min),t.Vector3.max(e.max,l,e.max)}cloneTo(e){e.enable=this.enable}clone(){var e=new Dt;return this.cloneTo(e),e}}class Rt{static _randomPointUnitArcCircle(e,t,r=null){var n;n=r?r.getFloat()*e:Math.random()*e,t.x=Math.cos(n),t.y=Math.sin(n)}static _randomPointInsideUnitArcCircle(e,t,r=null){var n;Rt._randomPointUnitArcCircle(e,t,r),n=r?Math.pow(r.getFloat(),.5):Math.pow(Math.random(),.5),t.x=t.x*n,t.y=t.y*n}static _randomPointUnitCircle(e,t=null){var r;r=t?t.getFloat()*Math.PI*2:Math.random()*Math.PI*2,e.x=Math.cos(r),e.y=Math.sin(r)}static _randomPointInsideUnitCircle(e,t=null){var r;Rt._randomPointUnitCircle(e),r=t?Math.pow(t.getFloat(),.5):Math.pow(Math.random(),.5),e.x=e.x*r,e.y=e.y*r}static _randomPointUnitSphere(e,t=null){var r,n;t?(r=e.z=2*t.getFloat()-1,n=t.getFloat()*Math.PI*2):(r=e.z=2*Math.random()-1,n=Math.random()*Math.PI*2);var a=Math.sqrt(1-r*r);e.x=a*Math.cos(n),e.y=a*Math.sin(n)}static _randomPointInsideUnitSphere(e,t=null){var r;Rt._randomPointUnitSphere(e),r=t?Math.pow(t.getFloat(),1/3):Math.pow(Math.random(),1/3),e.x=e.x*r,e.y=e.y*r,e.z=e.z*r}static _randomPointInsideHalfUnitBox(e,t=null){t?(e.x=t.getFloat()-.5,e.y=t.getFloat()-.5,e.z=t.getFloat()-.5):(e.x=Math.random()-.5,e.y=Math.random()-.5,e.z=Math.random()-.5)}constructor(){}}class Mt extends Dt{constructor(){super(),this.shapeType=e.ParticleSystemShapeType.Box,this.x=1,this.y=1,this.z=1}_getShapeBoundBox(e){var t=e.min;t.x=.5*-this.x,t.y=.5*-this.y,t.z=.5*-this.z;var r=e.max;r.x=.5*this.x,r.y=.5*this.y,r.z=.5*this.z}_getSpeedBoundBox(e){var t=e.min;t.x=0,t.y=0,t.z=0;var r=e.max;r.x=0,r.y=1,r.z=0}generatePositionAndDirection(e,t,r=null,n=null){r?(r.seed=n[16],Rt._randomPointInsideHalfUnitBox(e,r),n[16]=r.seed):Rt._randomPointInsideHalfUnitBox(e),e.x=this.x*e.x,e.y=this.y*e.y,e.z=this.z*e.z,this.randomDirection?r?(r.seed=n[17],Rt._randomPointUnitSphere(t,r),n[17]=r.seed):Rt._randomPointUnitSphere(t):(t.x=0,t.y=0,t.z=1)}cloneTo(e){super.cloneTo(e);var t=e;t.x=this.x,t.y=this.y,t.z=this.z,t.randomDirection=this.randomDirection}clone(){var e=new Mt;return this.cloneTo(e),e}}class Ct extends Dt{constructor(){super(),this.shapeType=e.ParticleSystemShapeType.Circle,this.radius=1,this.arc=2*Math.PI,this.emitFromEdge=!1}get arcDEG(){return 180*this.arc/Math.PI}set arcDEG(e){this.arc=e/180*Math.PI}_getShapeBoundBox(e){var t=e.min;t.x=t.z=-this.radius,t.y=0;var r=e.max;r.x=r.z=this.radius,r.y=0}_getSpeedBoundBox(e){var t=e.min;t.x=t.y=-1,t.z=0;var r=e.max;r.x=r.y=1,r.z=0}generatePositionAndDirection(e,r,n=null,a=null){var i=Ct._tempPositionPoint;n?(n.seed=a[16],this.emitFromEdge?Rt._randomPointUnitArcCircle(this.arc,Ct._tempPositionPoint,n):Rt._randomPointInsideUnitArcCircle(this.arc,Ct._tempPositionPoint,n),a[16]=n.seed):this.emitFromEdge?Rt._randomPointUnitArcCircle(this.arc,Ct._tempPositionPoint):Rt._randomPointInsideUnitArcCircle(this.arc,Ct._tempPositionPoint),e.x=-i.x,e.y=i.y,e.z=0,t.Vector3.scale(e,this.radius,e),this.randomDirection?n?(n.seed=a[17],Rt._randomPointUnitSphere(r,n),a[17]=n.seed):Rt._randomPointUnitSphere(r):e.cloneTo(r)}cloneTo(e){super.cloneTo(e);var t=e;t.radius=this.radius,t.arc=this.arc,t.emitFromEdge=this.emitFromEdge,t.randomDirection=this.randomDirection}clone(){var e=new Ct;return this.cloneTo(e),e}}Ct._tempPositionPoint=new t.Vector2;class vt extends Dt{constructor(){super(),this.shapeType=e.ParticleSystemShapeType.Cone,this.angle=25/180*Math.PI,this.radius=1,this.length=5,this.emitType=0}get angleDEG(){return 180*this.angle/Math.PI}set angleDEG(e){this.angle=e/180*Math.PI}_getShapeBoundBox(e){const t=this.radius+this.length*Math.sin(this.angle),r=this.length*Math.cos(this.angle);var n=e.min;n.x=n.y=-t,n.z=0;var a=e.max;a.x=a.y=t,a.z=r}_getSpeedBoundBox(e){const t=Math.sin(this.angle);var r=e.min;r.x=r.y=-t,r.z=0;var n=e.max;n.x=n.y=t,n.z=1}generatePositionAndDirection(e,r,n=null,a=null){var i,s,o,l=vt._tempPositionPoint,h=Math.cos(this.angle),d=Math.sin(this.angle);switch(this.emitType){case 0:n?(n.seed=a[16],Rt._randomPointInsideUnitCircle(vt._tempPositionPoint,n),a[16]=n.seed):Rt._randomPointInsideUnitCircle(vt._tempPositionPoint),i=l.x,s=l.y,e.x=i*this.radius,e.y=s*this.radius,e.z=0,this.randomDirection?(n?(n.seed=a[17],Rt._randomPointInsideUnitCircle(vt._tempDirectionPoint,n),a[17]=n.seed):Rt._randomPointInsideUnitCircle(vt._tempDirectionPoint),o=vt._tempDirectionPoint,r.x=o.x*d,r.y=o.y*d):(r.x=i*d,r.y=s*d),r.z=h;break;case 1:n?(n.seed=a[16],Rt._randomPointUnitCircle(vt._tempPositionPoint,n),a[16]=n.seed):Rt._randomPointUnitCircle(vt._tempPositionPoint),i=l.x,s=l.y,e.x=i*this.radius,e.y=s*this.radius,e.z=0,this.randomDirection?(n?(n.seed=a[17],Rt._randomPointInsideUnitCircle(vt._tempDirectionPoint,n),a[17]=n.seed):Rt._randomPointInsideUnitCircle(vt._tempDirectionPoint),o=vt._tempDirectionPoint,r.x=o.x*d,r.y=o.y*d):(r.x=i*d,r.y=s*d),r.z=h;break;case 2:n?(n.seed=a[16],Rt._randomPointInsideUnitCircle(vt._tempPositionPoint,n)):Rt._randomPointInsideUnitCircle(vt._tempPositionPoint),i=l.x,s=l.y,e.x=i*this.radius,e.y=s*this.radius,e.z=0,r.x=i*d,r.y=s*d,r.z=h,t.Vector3.normalize(r,r),n?(t.Vector3.scale(r,this.length*n.getFloat(),r),a[16]=n.seed):t.Vector3.scale(r,this.length*Math.random(),r),t.Vector3.add(e,r,e),this.randomDirection&&(n?(n.seed=a[17],Rt._randomPointUnitSphere(r,n),a[17]=n.seed):Rt._randomPointUnitSphere(r));break;case 3:n?(n.seed=a[16],Rt._randomPointUnitCircle(vt._tempPositionPoint,n)):Rt._randomPointUnitCircle(vt._tempPositionPoint),i=l.x,s=l.y,e.x=i*this.radius,e.y=s*this.radius,e.z=0,r.x=i*d,r.y=s*d,r.z=h,t.Vector3.normalize(r,r),n?(t.Vector3.scale(r,this.length*n.getFloat(),r),a[16]=n.seed):t.Vector3.scale(r,this.length*Math.random(),r),t.Vector3.add(e,r,e),this.randomDirection&&(n?(n.seed=a[17],Rt._randomPointUnitSphere(r,n),a[17]=n.seed):Rt._randomPointUnitSphere(r));break;default:throw new Error("ConeShape:emitType is invalid.")}}cloneTo(e){super.cloneTo(e);var t=e;t.angle=this.angle,t.radius=this.radius,t.length=this.length,t.emitType=this.emitType,t.randomDirection=this.randomDirection}clone(){var e=new vt;return this.cloneTo(e),e}}vt._tempPositionPoint=new t.Vector2,vt._tempDirectionPoint=new t.Vector2;class yt extends Dt{constructor(){super(),this.shapeType=e.ParticleSystemShapeType.Hemisphere,this.radius=1,this.emitFromShell=!1}_getShapeBoundBox(e){var t=e.min;t.x=t.y=t.z=-this.radius;var r=e.max;r.x=r.y=this.radius,r.z=0}_getSpeedBoundBox(e){var t=e.min;t.x=t.y=-1,t.z=0;var r=e.max;r.x=r.y=r.z=1}generatePositionAndDirection(e,r,n=null,a=null){n?(n.seed=a[16],this.emitFromShell?Rt._randomPointUnitSphere(e,n):Rt._randomPointInsideUnitSphere(e,n),a[16]=n.seed):this.emitFromShell?Rt._randomPointUnitSphere(e):Rt._randomPointInsideUnitSphere(e),t.Vector3.scale(e,this.radius,e);var i=e.z;i<0&&(e.z=-1*i),this.randomDirection?n?(n.seed=a[17],Rt._randomPointUnitSphere(r,n),a[17]=n.seed):Rt._randomPointUnitSphere(r):e.cloneTo(r)}cloneTo(e){super.cloneTo(e);var t=e;t.radius=this.radius,t.emitFromShell=this.emitFromShell,t.randomDirection=this.randomDirection}clone(){var e=new yt;return this.cloneTo(e),e}}class It extends Dt{constructor(){super(),this.shapeType=e.ParticleSystemShapeType.Sphere,this.radius=1,this.emitFromShell=!1}_getShapeBoundBox(e){var t=e.min;t.x=t.y=t.z=-this.radius;var r=e.max;r.x=r.y=r.z=this.radius}_getSpeedBoundBox(e){var t=e.min;t.x=t.y=t.z=-1;var r=e.max;r.x=r.y=r.z=1}generatePositionAndDirection(e,r,n=null,a=null){n?(n.seed=a[16],this.emitFromShell?Rt._randomPointUnitSphere(e,n):Rt._randomPointInsideUnitSphere(e,n),a[16]=n.seed):this.emitFromShell?Rt._randomPointUnitSphere(e):Rt._randomPointInsideUnitSphere(e),t.Vector3.scale(e,this.radius,e),this.randomDirection?n?(n.seed=a[17],Rt._randomPointUnitSphere(r,n),a[17]=n.seed):Rt._randomPointUnitSphere(r):e.cloneTo(r)}cloneTo(e){super.cloneTo(e);var t=e;t.radius=this.radius,t.emitFromShell=this.emitFromShell,t.randomDirection=this.randomDirection}clone(){var e=new It;return this.cloneTo(e),e}}class Lt{get size(){return this._size}constructor(e){this._size=e}cloneTo(e){var t=e;this._size.cloneTo(t._size),t.enable=this.enable}clone(){var e;switch(this._size.type){case 0:e=this._size.separateAxes?Tt.createByGradientSeparate(this._size.gradientX.clone(),this._size.gradientY.clone(),this._size.gradientZ.clone()):Tt.createByGradient(this._size.gradient.clone());break;case 1:e=this._size.separateAxes?Tt.createByRandomTwoConstantSeparate(this._size.constantMinSeparate.clone(),this._size.constantMaxSeparate.clone()):Tt.createByRandomTwoConstant(this._size.constantMin,this._size.constantMax);break;case 2:e=this._size.separateAxes?Tt.createByRandomTwoGradientSeparate(this._size.gradientXMin.clone(),this._size.gradientYMin.clone(),this._size.gradientZMin.clone(),this._size.gradientXMax.clone(),this._size.gradientYMax.clone(),this._size.gradientZMax.clone()):Tt.createByRandomTwoGradient(this._size.gradientMin.clone(),this._size.gradientMax.clone())}var t=new Lt(e);return t.enable=this.enable,t}}class Bt{static createByConstant(e=0){var t=new Bt;return t._type=0,t._constant=e,t}static createByRandomTwoConstant(e=0,t=0){var r=new Bt;return r._type=1,r._constantMin=e,r._constantMax=t,r}get type(){return this._type}get constant(){return this._constant}get constantMin(){return this._constantMin}get constantMax(){return this._constantMax}constructor(){this._type=0,this._constant=0,this._constantMin=0,this._constantMax=0}cloneTo(e){var t=e;t._type=this._type,t._constant=this._constant,t._constantMin=this._constantMin,t._constantMax=this._constantMax}clone(){var e=new Bt;return this.cloneTo(e),e}}class Ot{get frame(){return this._frame}get startFrame(){return this._startFrame}constructor(e,r){this.type=0,this.randomRow=!1,this.rowIndex=0,this.cycles=0,this.enableUVChannels=0,this.enable=!1,this.tiles=new t.Vector2(1,1),this.type=0,this.randomRow=!0,this.rowIndex=0,this.cycles=1,this.enableUVChannels=1,this._frame=e,this._startFrame=r}cloneTo(e){var t=e;this.tiles.cloneTo(t.tiles),t.type=this.type,t.randomRow=this.randomRow,t.rowIndex=this.rowIndex,t.cycles=this.cycles,t.enableUVChannels=this.enableUVChannels,t.enable=this.enable,this._frame.cloneTo(t._frame),this._startFrame.cloneTo(t._startFrame)}clone(){var e,t;switch(this._frame.type){case 0:e=ft.createByConstant(this._frame.constant);break;case 1:e=ft.createByOverTime(this._frame.frameOverTimeData.clone());break;case 2:e=ft.createByRandomTwoConstant(this._frame.constantMin,this._frame.constantMax);break;case 3:e=ft.createByRandomTwoOverTime(this._frame.frameOverTimeDataMin.clone(),this._frame.frameOverTimeDataMax.clone())}switch(this._startFrame.type){case 0:t=Bt.createByConstant(this._startFrame.constant);break;case 1:t=Bt.createByRandomTwoConstant(this._startFrame.constantMin,this._startFrame.constantMax)}var r=new Ot(e,t);return this.cloneTo(r),r}}class wt{get velocity(){return this._velocity}constructor(e){this.enable=!1,this.space=0,this._velocity=e}cloneTo(e){var t=e;this._velocity.cloneTo(t._velocity),t.enable=this.enable,t.space=this.space}clone(){var e;switch(this._velocity.type){case 0:e=Et.createByConstant(this._velocity.constant.clone());break;case 1:e=Et.createByGradient(this._velocity.gradientX.clone(),this._velocity.gradientY.clone(),this._velocity.gradientZ.clone());break;case 2:e=Et.createByRandomTwoConstant(this._velocity.constantMin.clone(),this._velocity.constantMax.clone());break;case 3:e=Et.createByRandomTwoGradient(this._velocity.gradientXMin.clone(),this._velocity.gradientXMax.clone(),this._velocity.gradientYMin.clone(),this._velocity.gradientYMax.clone(),this._velocity.gradientZMin.clone(),this._velocity.gradientZMax.clone())}var t=new wt(e);return t.enable=this.enable,t.space=this.space,t}}class Pt{constructor(){}}Pt.PARTICLE_DIRECTIONTIME=0,Pt.PARTICLE_POSITION0=1,Pt.PARTICLE_COLOR0=2,Pt.PARTICLE_TEXTURECOORDINATE0=3,Pt.PARTICLE_SHAPEPOSITIONSTARTLIFETIME=4,Pt.PARTICLE_CORNERTEXTURECOORDINATE0=5,Pt.PARTICLE_STARTCOLOR0=6,Pt.PARTICLE_ENDCOLOR0=7,Pt.PARTICLE_STARTSIZE=8,Pt.PARTICLE_STARTROTATION=9,Pt.PARTICLE_STARTSPEED=10,Pt.PARTICLE_RANDOM0=11,Pt.PARTICLE_RANDOM1=12,Pt.PARTICLE_SIMULATIONWORLDPOSTION=13,Pt.PARTICLE_SIMULATIONWORLDROTATION=14,Pt.PARTICLE_SIMULATIONUV=15;class Nt extends Pt{static get vertexDeclaration(){return Nt._vertexDeclaration}static get vertexInstanceMeshDeclaration(){return Nt._vertexInstanceMeshDeclaration}static get vertexInstanceParticleDeclaration(){return Nt._vertexInstanceParticleDeclaration}static get billboardVertexArray(){return Nt._billboardVertexArray}static get billboardIndexArray(){return Nt._billboardIndexArray}static set billboardIndexArray(e){Nt._billboardIndexArray=e}static __init__(){Nt._vertexDeclaration=new t.VertexDeclaration(168,[new t.VertexElement(0,t.VertexElementFormat.Vector4,Pt.PARTICLE_CORNERTEXTURECOORDINATE0),new t.VertexElement(16,t.VertexElementFormat.Vector4,Pt.PARTICLE_SHAPEPOSITIONSTARTLIFETIME),new t.VertexElement(32,t.VertexElementFormat.Vector4,Pt.PARTICLE_DIRECTIONTIME),new t.VertexElement(48,t.VertexElementFormat.Vector4,Pt.PARTICLE_STARTCOLOR0),new t.VertexElement(64,t.VertexElementFormat.Vector3,Pt.PARTICLE_STARTSIZE),new t.VertexElement(76,t.VertexElementFormat.Vector3,Pt.PARTICLE_STARTROTATION),new t.VertexElement(88,t.VertexElementFormat.Single,Pt.PARTICLE_STARTSPEED),new t.VertexElement(92,t.VertexElementFormat.Vector4,Pt.PARTICLE_RANDOM0),new t.VertexElement(108,t.VertexElementFormat.Vector4,Pt.PARTICLE_RANDOM1),new t.VertexElement(124,t.VertexElementFormat.Vector3,Pt.PARTICLE_SIMULATIONWORLDPOSTION),new t.VertexElement(136,t.VertexElementFormat.Vector4,Pt.PARTICLE_SIMULATIONWORLDROTATION),new t.VertexElement(152,t.VertexElementFormat.Vector4,Pt.PARTICLE_SIMULATIONUV)]),Nt._vertexInstanceMeshDeclaration=new t.VertexDeclaration(16,[new t.VertexElement(0,t.VertexElementFormat.Vector4,Pt.PARTICLE_CORNERTEXTURECOORDINATE0)]),Nt._vertexInstanceParticleDeclaration=new t.VertexDeclaration(152,[new t.VertexElement(0,t.VertexElementFormat.Vector4,Pt.PARTICLE_SHAPEPOSITIONSTARTLIFETIME),new t.VertexElement(16,t.VertexElementFormat.Vector4,Pt.PARTICLE_DIRECTIONTIME),new t.VertexElement(32,t.VertexElementFormat.Vector4,Pt.PARTICLE_STARTCOLOR0),new t.VertexElement(48,t.VertexElementFormat.Vector3,Pt.PARTICLE_STARTSIZE),new t.VertexElement(60,t.VertexElementFormat.Vector3,Pt.PARTICLE_STARTROTATION),new t.VertexElement(72,t.VertexElementFormat.Single,Pt.PARTICLE_STARTSPEED),new t.VertexElement(76,t.VertexElementFormat.Vector4,Pt.PARTICLE_RANDOM0),new t.VertexElement(92,t.VertexElementFormat.Vector4,Pt.PARTICLE_RANDOM1),new t.VertexElement(108,t.VertexElementFormat.Vector3,Pt.PARTICLE_SIMULATIONWORLDPOSTION),new t.VertexElement(120,t.VertexElementFormat.Vector4,Pt.PARTICLE_SIMULATIONWORLDROTATION),new t.VertexElement(136,t.VertexElementFormat.Vector4,Pt.PARTICLE_SIMULATIONUV)]),Nt._billboardIndexArray=new Uint16Array([0,2,1,0,3,2]),Nt._billboardVertexArray=new Float32Array([-.5,-.5,0,1,.5,-.5,1,1,.5,.5,1,0,-.5,.5,0,0])}get cornerTextureCoordinate(){return this._cornerTextureCoordinate}get positionStartLifeTime(){return this._positionStartLifeTime}get velocity(){return this._velocity}get startColor(){return this._startColor}get startSize(){return this._startSize}get startRotation0(){return this._startRotation0}get startRotation1(){return this._startRotation1}get startRotation2(){return this._startRotation2}get startLifeTime(){return this._startLifeTime}get time(){return this._time}get startSpeed(){return this._startSpeed}get random0(){return this._randoms0}get random1(){return this._randoms1}get simulationWorldPostion(){return this._simulationWorldPostion}constructor(e,t,r,n,a,i,s,o,l,h,d,c,u,_){super(),this._cornerTextureCoordinate=e,this._positionStartLifeTime=t,this._velocity=r,this._startColor=n,this._startSize=a,this._startRotation0=i,this._startRotation1=s,this._startRotation2=o,this._startLifeTime=l,this._time=h,this._startSpeed=d,this._randoms0=c,this._randoms1=u,this._simulationWorldPostion=_}}class Vt extends Pt{static __init__(){Vt._vertexDeclaration=new t.VertexDeclaration(188,[new t.VertexElement(0,t.VertexElementFormat.Vector3,Pt.PARTICLE_POSITION0),new t.VertexElement(12,t.VertexElementFormat.Vector4,Pt.PARTICLE_COLOR0),new t.VertexElement(28,t.VertexElementFormat.Vector2,Pt.PARTICLE_TEXTURECOORDINATE0),new t.VertexElement(36,t.VertexElementFormat.Vector4,Pt.PARTICLE_SHAPEPOSITIONSTARTLIFETIME),new t.VertexElement(52,t.VertexElementFormat.Vector4,Pt.PARTICLE_DIRECTIONTIME),new t.VertexElement(68,t.VertexElementFormat.Vector4,Pt.PARTICLE_STARTCOLOR0),new t.VertexElement(84,t.VertexElementFormat.Vector3,Pt.PARTICLE_STARTSIZE),new t.VertexElement(96,t.VertexElementFormat.Vector3,Pt.PARTICLE_STARTROTATION),new t.VertexElement(108,t.VertexElementFormat.Single,Pt.PARTICLE_STARTSPEED),new t.VertexElement(112,t.VertexElementFormat.Vector4,Pt.PARTICLE_RANDOM0),new t.VertexElement(128,t.VertexElementFormat.Vector4,Pt.PARTICLE_RANDOM1),new t.VertexElement(144,t.VertexElementFormat.Vector3,Pt.PARTICLE_SIMULATIONWORLDPOSTION),new t.VertexElement(156,t.VertexElementFormat.Vector4,Pt.PARTICLE_SIMULATIONWORLDROTATION),new t.VertexElement(172,t.VertexElementFormat.Vector4,Pt.PARTICLE_SIMULATIONUV)]),Vt._vertexInstanceMeshDeclaration=new t.VertexDeclaration(36,[new t.VertexElement(0,t.VertexElementFormat.Vector3,Pt.PARTICLE_POSITION0),new t.VertexElement(12,t.VertexElementFormat.Vector4,Pt.PARTICLE_COLOR0),new t.VertexElement(28,t.VertexElementFormat.Vector2,Pt.PARTICLE_TEXTURECOORDINATE0)]),Vt._vertexInstanceParticleDeclaration=new t.VertexDeclaration(152,[new t.VertexElement(0,t.VertexElementFormat.Vector4,Pt.PARTICLE_SHAPEPOSITIONSTARTLIFETIME),new t.VertexElement(16,t.VertexElementFormat.Vector4,Pt.PARTICLE_DIRECTIONTIME),new t.VertexElement(32,t.VertexElementFormat.Vector4,Pt.PARTICLE_STARTCOLOR0),new t.VertexElement(48,t.VertexElementFormat.Vector3,Pt.PARTICLE_STARTSIZE),new t.VertexElement(60,t.VertexElementFormat.Vector3,Pt.PARTICLE_STARTROTATION),new t.VertexElement(72,t.VertexElementFormat.Single,Pt.PARTICLE_STARTSPEED),new t.VertexElement(76,t.VertexElementFormat.Vector4,Pt.PARTICLE_RANDOM0),new t.VertexElement(92,t.VertexElementFormat.Vector4,Pt.PARTICLE_RANDOM1),new t.VertexElement(108,t.VertexElementFormat.Vector3,Pt.PARTICLE_SIMULATIONWORLDPOSTION),new t.VertexElement(120,t.VertexElementFormat.Vector4,Pt.PARTICLE_SIMULATIONWORLDROTATION),new t.VertexElement(136,t.VertexElementFormat.Vector4,Pt.PARTICLE_SIMULATIONUV)])}static get vertexDeclaration(){return Vt._vertexDeclaration}static get vertexInstanceMeshDeclaration(){return Vt._vertexInstanceMeshDeclaration}static get vertexInstanceParticleDeclaration(){return Vt._vertexInstanceParticleDeclaration}get cornerTextureCoordinate(){return this._cornerTextureCoordinate}get position(){return this._positionStartLifeTime}get velocity(){return this._velocity}get startColor(){return this._startColor}get startSize(){return this._startSize}get startRotation0(){return this._startRotation0}get startRotation1(){return this._startRotation1}get startRotation2(){return this._startRotation2}get startLifeTime(){return this._startLifeTime}get time(){return this._time}get startSpeed(){return this._startSpeed}get random0(){return this._randoms0}get random1(){return this._randoms1}get simulationWorldPostion(){return this._simulationWorldPostion}constructor(e,t,r,n,a,i,s,o,l,h,d,c,u,_){super(),this._cornerTextureCoordinate=e,this._positionStartLifeTime=t,this._velocity=r,this._startColor=n,this._startSize=a,this._startRotation0=i,this._startRotation1=s,this._startRotation2=o,this._startLifeTime=l,this._time=h,this._startSpeed=d,this._randoms0=c,this._randoms1=u,this._simulationWorldPostion=_}}class bt{static getFloatFromInt(e){return 1/8388607*(8388607&e)}static getByteFromInt(e){return(8388607&e)>>>15}get seed(){return this.seeds[0]}set seed(e){this.seeds[0]=e,this.seeds[1]=1812433253*this.seeds[0]+1,this.seeds[2]=1812433253*this.seeds[1]+1,this.seeds[3]=1812433253*this.seeds[2]+1}constructor(e){this._temp=new Uint32Array(1),this.seeds=new Uint32Array(4),this.seeds[0]=e,this.seeds[1]=1812433253*this.seeds[0]+1,this.seeds[2]=1812433253*this.seeds[1]+1,this.seeds[3]=1812433253*this.seeds[2]+1}getUint(){return this._temp[0]=this.seeds[0]^this.seeds[0]<<11,this.seeds[0]=this.seeds[1],this.seeds[1]=this.seeds[2],this.seeds[2]=this.seeds[3],this.seeds[3]=this.seeds[3]^this.seeds[3]>>>19^this._temp[0]^this._temp[0]>>>8,this.seeds[3]}getFloat(){return this.getUint(),(8388607&this.seeds[3])*(1/8388607)}getSignedFloat(){return 2*this.getFloat()-1}}class Ft{get emissionRate(){return this._emissionRate}set emissionRate(e){if(e<0)throw new Error("ParticleBaseShape:emissionRate value must large or equal than 0.");this._emissionRate=e}get emissionRateOverDistance(){return this._emissionRateOverDistance}set emissionRateOverDistance(e){e=Math.max(0,e),this._emissionRateOverDistance=e}get destroyed(){return this._destroyed}constructor(){this._emissionRate=10,this._emissionRateOverDistance=0,this._destroyed=!1,this._bursts=[]}destroy(){this._bursts=null,this._destroyed=!0}getBurstsCount(){return this._bursts.length}getBurstByIndex(e){return this._bursts[e]}addBurst(e){var t=this._bursts.length;if(t>0)for(var r=0;r<t;r++)this._bursts[r].time>e.time&&this._bursts.splice(r,0,e);this._bursts.push(e)}removeBurst(e){var t=this._bursts.indexOf(e);-1!==t&&this._bursts.splice(t,1)}removeBurstByIndex(e){this._bursts.splice(e,1)}clearBurst(){this._bursts.length=0}cloneTo(e){var t=e,r=t._bursts;r.length=this._bursts.length;for(var n=0,a=this._bursts.length;n<a;n++){var i=r[n];i?this._bursts[n].cloneTo(i):r[n]=this._bursts[n].clone()}t._emissionRate=this._emissionRate,t._emissionRateOverDistance=this._emissionRateOverDistance,t.enable=this.enable}clone(){var e=new Ft;return this.cloneTo(e),e}}class Ut{static __init__(){Ut.SHADERDEFINE_RENDERMODE_BILLBOARD=t.Shader3D.getDefineByName("SPHERHBILLBOARD"),Ut.SHADERDEFINE_RENDERMODE_STRETCHEDBILLBOARD=t.Shader3D.getDefineByName("STRETCHEDBILLBOARD"),Ut.SHADERDEFINE_RENDERMODE_HORIZONTALBILLBOARD=t.Shader3D.getDefineByName("HORIZONTALBILLBOARD"),Ut.SHADERDEFINE_RENDERMODE_VERTICALBILLBOARD=t.Shader3D.getDefineByName("VERTICALBILLBOARD"),Ut.SHADERDEFINE_COLORKEYCOUNT_8=t.Shader3D.getDefineByName("COLORKEYCOUNT_8"),Ut.SHADERDEFINE_RANDOMCOLOROVERLIFETIME=t.Shader3D.getDefineByName("RANDOMCOLOROVERLIFETIME"),Ut.SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCURVE=t.Shader3D.getDefineByName("VELOCITYOVERLIFETIMERANDOMCURVE"),Ut.SHADERDEFINE_TEXTURESHEETANIMATIONRANDOMCURVE=t.Shader3D.getDefineByName("TEXTURESHEETANIMATIONRANDOMCURVE"),Ut.SHADERDEFINE_ROTATIONOVERLIFETIME=t.Shader3D.getDefineByName("ROTATIONOVERLIFETIME"),Ut.SHADERDEFINE_ROTATIONOVERLIFETIMESEPERATE=t.Shader3D.getDefineByName("ROTATIONOVERLIFETIMESEPERATE"),Ut.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVES=t.Shader3D.getDefineByName("SIZEOVERLIFETIMERANDOMCURVES"),Ut.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVESSEPERATE=t.Shader3D.getDefineByName("SIZEOVERLIFETIMERANDOMCURVESSEPERATE"),Ut.SHADERDEFINE_RENDERMODE_MESH=t.Shader3D.getDefineByName("RENDERMODE_MESH"),Ut.WORLDPOSITION=t.Shader3D.propertyNameToID("u_WorldPosition"),Ut.WORLDROTATION=t.Shader3D.propertyNameToID("u_WorldRotation"),Ut.POSITIONSCALE=t.Shader3D.propertyNameToID("u_PositionScale"),Ut.SIZESCALE=t.Shader3D.propertyNameToID("u_SizeScale"),Ut.SCALINGMODE=t.Shader3D.propertyNameToID("u_ScalingMode"),Ut.GRAVITY=t.Shader3D.propertyNameToID("u_Gravity"),Ut.THREEDSTARTROTATION=t.Shader3D.propertyNameToID("u_ThreeDStartRotation"),Ut.SHAPE=t.Shader3D.propertyNameToID("u_Shape"),Ut.STRETCHEDBILLBOARDLENGTHSCALE=t.Shader3D.propertyNameToID("u_StretchedBillboardLengthScale"),Ut.STRETCHEDBILLBOARDSPEEDSCALE=t.Shader3D.propertyNameToID("u_StretchedBillboardSpeedScale"),Ut.SIMULATIONSPACE=t.Shader3D.propertyNameToID("u_SimulationSpace"),Ut.CURRENTTIME=t.Shader3D.propertyNameToID("u_CurrentTime"),Ut.DRAG=t.Shader3D.propertyNameToID("u_DragConstanct"),Ut.VOLVELOCITYGRADIENTX=t.Shader3D.propertyNameToID("u_VOLVelocityGradientX"),Ut.VOLVELOCITYGRADIENTY=t.Shader3D.propertyNameToID("u_VOLVelocityGradientY"),Ut.VOLVELOCITYGRADIENTZ=t.Shader3D.propertyNameToID("u_VOLVelocityGradientZ"),Ut.VOLVELOCITYGRADIENTXMAX=t.Shader3D.propertyNameToID("u_VOLVelocityGradientMaxX"),Ut.VOLVELOCITYGRADIENTYMAX=t.Shader3D.propertyNameToID("u_VOLVelocityGradientMaxY"),Ut.VOLVELOCITYGRADIENTZMAX=t.Shader3D.propertyNameToID("u_VOLVelocityGradientMaxZ"),Ut.VOLSPACETYPE=t.Shader3D.propertyNameToID("u_VOLSpaceType"),Ut.COLOROVERLIFEGRADIENTALPHAS=t.Shader3D.propertyNameToID("u_ColorOverLifeGradientAlphas"),Ut.COLOROVERLIFEGRADIENTCOLORS=t.Shader3D.propertyNameToID("u_ColorOverLifeGradientColors"),Ut.COLOROVERLIFEGRADIENTRANGES=t.Shader3D.propertyNameToID("u_ColorOverLifeGradientRanges"),Ut.MAXCOLOROVERLIFEGRADIENTALPHAS=t.Shader3D.propertyNameToID("u_MaxColorOverLifeGradientAlphas"),Ut.MAXCOLOROVERLIFEGRADIENTCOLORS=t.Shader3D.propertyNameToID("u_MaxColorOverLifeGradientColors"),Ut.MAXCOLOROVERLIFEGRADIENTRANGES=t.Shader3D.propertyNameToID("u_MaxColorOverLifeGradientRanges"),Ut.SOLSIZEGRADIENT=t.Shader3D.propertyNameToID("u_SOLSizeGradient"),Ut.SOLSIZEGRADIENTX=t.Shader3D.propertyNameToID("u_SOLSizeGradientX"),Ut.SOLSIZEGRADIENTY=t.Shader3D.propertyNameToID("u_SOLSizeGradientY"),Ut.SOLSizeGradientZ=t.Shader3D.propertyNameToID("u_SOLSizeGradientZ"),Ut.SOLSizeGradientMax=t.Shader3D.propertyNameToID("u_SOLSizeGradientMax"),Ut.SOLSIZEGRADIENTXMAX=t.Shader3D.propertyNameToID("u_SOLSizeGradientMaxX"),Ut.SOLSIZEGRADIENTYMAX=t.Shader3D.propertyNameToID("u_SOLSizeGradientMaxY"),Ut.SOLSizeGradientZMAX=t.Shader3D.propertyNameToID("u_SOLSizeGradientMaxZ"),Ut.ROLANGULARVELOCITYGRADIENT=t.Shader3D.propertyNameToID("u_ROLAngularVelocityGradient"),Ut.ROLANGULARVELOCITYGRADIENTX=t.Shader3D.propertyNameToID("u_ROLAngularVelocityGradientX"),Ut.ROLANGULARVELOCITYGRADIENTY=t.Shader3D.propertyNameToID("u_ROLAngularVelocityGradientY"),Ut.ROLANGULARVELOCITYGRADIENTZ=t.Shader3D.propertyNameToID("u_ROLAngularVelocityGradientZ"),Ut.ROLANGULARVELOCITYGRADIENTMAX=t.Shader3D.propertyNameToID("u_ROLAngularVelocityGradientMax"),Ut.ROLANGULARVELOCITYGRADIENTXMAX=t.Shader3D.propertyNameToID("u_ROLAngularVelocityGradientMaxX"),Ut.ROLANGULARVELOCITYGRADIENTYMAX=t.Shader3D.propertyNameToID("u_ROLAngularVelocityGradientMaxY"),Ut.ROLANGULARVELOCITYGRADIENTZMAX=t.Shader3D.propertyNameToID("u_ROLAngularVelocityGradientMaxZ"),Ut.TEXTURESHEETANIMATIONCYCLES=t.Shader3D.propertyNameToID("u_TSACycles"),Ut.TEXTURESHEETANIMATIONSUBUVLENGTH=t.Shader3D.propertyNameToID("u_TSASubUVLength"),Ut.TEXTURESHEETANIMATIONGRADIENTUVS=t.Shader3D.propertyNameToID("u_TSAGradientUVs"),Ut.TEXTURESHEETANIMATIONGRADIENTMAXUVS=t.Shader3D.propertyNameToID("u_TSAMaxGradientUVs");let r=t.LayaGL.renderDeviceFactory.createGlobalUniformMap("ShurikenSprite3D");r.addShaderUniform(Ut.WORLDPOSITION,"u_WorldPosition",e.ShaderDataType.Vector3),r.addShaderUniform(Ut.WORLDROTATION,"u_WorldRotation",e.ShaderDataType.Vector4),r.addShaderUniform(Ut.POSITIONSCALE,"u_PositionScale",e.ShaderDataType.Vector3),r.addShaderUniform(Ut.SIZESCALE,"u_SizeScale",e.ShaderDataType.Vector3),r.addShaderUniform(Ut.SCALINGMODE,"u_ScalingMode",e.ShaderDataType.Int),r.addShaderUniform(Ut.GRAVITY,"u_Gravity",e.ShaderDataType.Vector3),r.addShaderUniform(Ut.THREEDSTARTROTATION,"u_ThreeDStartRotation",e.ShaderDataType.Int),r.addShaderUniform(Ut.STRETCHEDBILLBOARDLENGTHSCALE,"u_StretchedBillboardLengthScale",e.ShaderDataType.Float),r.addShaderUniform(Ut.STRETCHEDBILLBOARDSPEEDSCALE,"u_StretchedBillboardSpeedScale",e.ShaderDataType.Float),r.addShaderUniform(Ut.SIMULATIONSPACE,"u_SimulationSpace",e.ShaderDataType.Int),r.addShaderUniform(Ut.CURRENTTIME,"u_CurrentTime",e.ShaderDataType.Vector2),r.addShaderUniform(Ut.SHAPE,"u_Shape",e.ShaderDataType.Float),r.addShaderUniform(Ut.COLOROVERLIFEGRADIENTALPHAS,"u_ColorOverLifeGradientAlphas",e.ShaderDataType.Buffer),r.addShaderUniform(Ut.COLOROVERLIFEGRADIENTCOLORS,"u_ColorOverLifeGradientColors",e.ShaderDataType.Buffer),r.addShaderUniform(Ut.COLOROVERLIFEGRADIENTRANGES,"u_ColorOverLifeGradientRanges",e.ShaderDataType.Vector4),r.addShaderUniform(Ut.MAXCOLOROVERLIFEGRADIENTALPHAS,"u_MaxColorOverLifeGradientAlphas",e.ShaderDataType.Buffer),r.addShaderUniform(Ut.MAXCOLOROVERLIFEGRADIENTCOLORS,"u_MaxColorOverLifeGradientColors",e.ShaderDataType.Buffer),r.addShaderUniform(Ut.MAXCOLOROVERLIFEGRADIENTRANGES,"u_MaxColorOverLifeGradientRanges",e.ShaderDataType.Vector4),r.addShaderUniform(Ut.VOLVELOCITYGRADIENTX,"u_VOLVelocityGradientX",e.ShaderDataType.Buffer),r.addShaderUniform(Ut.VOLVELOCITYGRADIENTY,"u_VOLVelocityGradientY",e.ShaderDataType.Buffer),r.addShaderUniform(Ut.VOLVELOCITYGRADIENTZ,"u_VOLVelocityGradientZ",e.ShaderDataType.Buffer),r.addShaderUniform(Ut.VOLVELOCITYGRADIENTXMAX,"u_VOLVelocityGradientMaxX",e.ShaderDataType.Buffer),r.addShaderUniform(Ut.VOLVELOCITYGRADIENTYMAX,"u_VOLVelocityGradientMaxY",e.ShaderDataType.Buffer),r.addShaderUniform(Ut.VOLVELOCITYGRADIENTZMAX,"u_VOLVelocityGradientMaxZ",e.ShaderDataType.Buffer),r.addShaderUniform(Ut.VOLSPACETYPE,"u_VOLSpaceType",e.ShaderDataType.Int),r.addShaderUniform(Ut.SOLSIZEGRADIENT,"u_SOLSizeGradient",e.ShaderDataType.Buffer),r.addShaderUniform(Ut.SOLSIZEGRADIENTX,"u_SOLSizeGradientX",e.ShaderDataType.Buffer),r.addShaderUniform(Ut.SOLSIZEGRADIENTY,"u_SOLSizeGradientY",e.ShaderDataType.Buffer),r.addShaderUniform(Ut.SOLSizeGradientZ,"u_SOLSizeGradientZ",e.ShaderDataType.Buffer),r.addShaderUniform(Ut.SOLSizeGradientMax,"u_SOLSizeGradientMax",e.ShaderDataType.Buffer),r.addShaderUniform(Ut.SOLSIZEGRADIENTXMAX,"u_SOLSizeGradientMaxX",e.ShaderDataType.Buffer),r.addShaderUniform(Ut.SOLSIZEGRADIENTYMAX,"u_SOLSizeGradientMaxY",e.ShaderDataType.Buffer),r.addShaderUniform(Ut.SOLSizeGradientZMAX,"u_SOLSizeGradientMaxZ",e.ShaderDataType.Buffer),r.addShaderUniform(Ut.ROLANGULARVELOCITYGRADIENT,"u_ROLAngularVelocityGradient",e.ShaderDataType.Buffer),r.addShaderUniform(Ut.ROLANGULARVELOCITYGRADIENTX,"u_ROLAngularVelocityGradientX",e.ShaderDataType.Buffer),r.addShaderUniform(Ut.ROLANGULARVELOCITYGRADIENTY,"u_ROLAngularVelocityGradientY",e.ShaderDataType.Buffer),r.addShaderUniform(Ut.ROLANGULARVELOCITYGRADIENTZ,"u_ROLAngularVelocityGradientZ",e.ShaderDataType.Buffer),r.addShaderUniform(Ut.ROLANGULARVELOCITYGRADIENTMAX,"u_ROLAngularVelocityGradientMax",e.ShaderDataType.Buffer),r.addShaderUniform(Ut.ROLANGULARVELOCITYGRADIENTXMAX,"u_ROLAngularVelocityGradientMaxX",e.ShaderDataType.Buffer),r.addShaderUniform(Ut.ROLANGULARVELOCITYGRADIENTYMAX,"u_ROLAngularVelocityGradientMaxY",e.ShaderDataType.Buffer),r.addShaderUniform(Ut.ROLANGULARVELOCITYGRADIENTZMAX,"u_ROLAngularVelocityGradientMaxZ",e.ShaderDataType.Buffer),r.addShaderUniform(Ut.TEXTURESHEETANIMATIONCYCLES,"u_TSACycles",e.ShaderDataType.Float),r.addShaderUniform(Ut.TEXTURESHEETANIMATIONSUBUVLENGTH,"u_TSASubUVLength",e.ShaderDataType.Vector2),r.addShaderUniform(Ut.TEXTURESHEETANIMATIONGRADIENTUVS,"u_TSAGradientUVs",e.ShaderDataType.Buffer),r.addShaderUniform(Ut.TEXTURESHEETANIMATIONGRADIENTMAXUVS,"u_TSAMaxGradientUVs",e.ShaderDataType.Buffer),r.addShaderUniform(Ut.DRAG,"u_DragConstanct",e.ShaderDataType.Vector2)}}class Gt{constructor(){}static _getStartLifetimeFromGradient(e,r){for(var n=1,a=e.gradientCount;n<a;n++){var i=e.getKeyByIndex(n);if(i>=r){var s=e.getKeyByIndex(n-1),o=(r-s)/(i-s);return t.MathUtil.lerp(e.getValueByIndex(n-1),e.getValueByIndex(n),o)}}throw new Error("ShurikenParticleData: can't get value foam startLifeTimeGradient.")}static _randomInvertRoationArray(e,t,r,n,a){var i;n?(n.seed=a[6],i=n.getFloat(),a[6]=n.seed):i=Math.random(),i<r?(t.x=-e.x,t.y=-e.y,t.z=-e.z):(t.x=e.x,t.y=e.y,t.z=e.z)}static _randomInvertRoation(e,t,r,n){var a;return r?(r.seed=n[6],a=r.getFloat(),n[6]=r.seed):a=Math.random(),a<t&&(e=-e),e}static create(e,r){var n=e.autoRandomSeed,a=e._rand,i=e._randomSeeds;switch(e.startColorType){case 0:var s=e.startColorConstant;Gt.startColor.x=s.x,Gt.startColor.y=s.y,Gt.startColor.z=s.z,Gt.startColor.w=s.w;break;case 2:n?t.Vector4.lerp(e.startColorConstantMin,e.startColorConstantMax,Math.random(),Gt.startColor):(a.seed=i[3],t.Vector4.lerp(e.startColorConstantMin,e.startColorConstantMax,a.getFloat(),Gt.startColor),i[3]=a.seed)}var o=e.colorOverLifetime;if(o&&o.enable){var l=o.color;switch(l.type){case 0:Gt.startColor.x=Gt.startColor.x*l.constant.x,Gt.startColor.y=Gt.startColor.y*l.constant.y,Gt.startColor.z=Gt.startColor.z*l.constant.z,Gt.startColor.w=Gt.startColor.w*l.constant.w;break;case 2:var h;n?h=Math.random():(a.seed=i[10],h=a.getFloat(),i[10]=a.seed);var d=l.constantMin,c=l.constantMax;Gt.startColor.x=Gt.startColor.x*t.MathUtil.lerp(d.x,c.x,h),Gt.startColor.y=Gt.startColor.y*t.MathUtil.lerp(d.y,c.y,h),Gt.startColor.z=Gt.startColor.z*t.MathUtil.lerp(d.z,c.z,h),Gt.startColor.w=Gt.startColor.w*t.MathUtil.lerp(d.w,c.w,h)}}var u=Gt.startSize;switch(e.startSizeType){case 0:if(e.threeDStartSize){var _=e.startSizeConstantSeparate;u[0]=_.x,u[1]=_.y,u[2]=_.z}else u[0]=u[1]=u[2]=e.startSizeConstant;break;case 2:if(e.threeDStartSize){var m=e.startSizeConstantMinSeparate,f=e.startSizeConstantMaxSeparate;n?(u[0]=t.MathUtil.lerp(m.x,f.x,Math.random()),u[1]=t.MathUtil.lerp(m.y,f.y,Math.random()),u[2]=t.MathUtil.lerp(m.z,f.z,Math.random())):(a.seed=i[4],u[0]=t.MathUtil.lerp(m.x,f.x,a.getFloat()),u[1]=t.MathUtil.lerp(m.y,f.y,a.getFloat()),u[2]=t.MathUtil.lerp(m.z,f.z,a.getFloat()),i[4]=a.seed)}else n?u[0]=u[1]=u[2]=t.MathUtil.lerp(e.startSizeConstantMin,e.startSizeConstantMax,Math.random()):(a.seed=i[4],u[0]=u[1]=u[2]=t.MathUtil.lerp(e.startSizeConstantMin,e.startSizeConstantMax,a.getFloat()),i[4]=a.seed)}var g=e.sizeOverLifetime;if(g&&g.enable&&1===g.size.type){var p,S=g.size;if(S.separateAxes)n?(u[0]=u[0]*t.MathUtil.lerp(S.constantMinSeparate.x,S.constantMaxSeparate.x,Math.random()),u[1]=u[1]*t.MathUtil.lerp(S.constantMinSeparate.y,S.constantMaxSeparate.y,Math.random()),u[2]=u[2]*t.MathUtil.lerp(S.constantMinSeparate.z,S.constantMaxSeparate.z,Math.random())):(a.seed=i[11],u[0]=u[0]*t.MathUtil.lerp(S.constantMinSeparate.x,S.constantMaxSeparate.x,a.getFloat()),u[1]=u[1]*t.MathUtil.lerp(S.constantMinSeparate.y,S.constantMaxSeparate.y,a.getFloat()),u[2]=u[2]*t.MathUtil.lerp(S.constantMinSeparate.z,S.constantMaxSeparate.z,a.getFloat()),i[11]=a.seed);else n?p=t.MathUtil.lerp(S.constantMin,S.constantMax,Math.random()):(a.seed=i[11],p=t.MathUtil.lerp(S.constantMin,S.constantMax,a.getFloat()),i[11]=a.seed),u[0]=u[0]*p,u[1]=u[1]*p,u[2]=u[2]*p}var T=r.renderMode;if(1!==T)switch(e.startRotationType){case 0:if(e.threeDStartRotation){var E=e.startRotationConstantSeparate,x=Gt._tempVector30;Gt._randomInvertRoationArray(E,x,e.randomizeRotationDirection,n?null:a,i),Gt.startRotation[0]=x.x,Gt.startRotation[1]=x.y,Gt.startRotation[2]=4!==T?-x.z:x.z}else Gt.startRotation[0]=Gt._randomInvertRoation(e.startRotationConstant,e.randomizeRotationDirection,n?null:a,i),Gt.startRotation[1]=0,Gt.startRotation[2]=0;break;case 2:if(e.threeDStartRotation){var A=e.startRotationConstantMinSeparate,D=e.startRotationConstantMaxSeparate,R=Gt._tempVector30;n?(R.x=t.MathUtil.lerp(A.x,D.x,Math.random()),R.y=t.MathUtil.lerp(A.y,D.y,Math.random()),R.z=t.MathUtil.lerp(A.z,D.z,Math.random())):(a.seed=i[5],R.x=t.MathUtil.lerp(A.x,D.x,a.getFloat()),R.y=t.MathUtil.lerp(A.y,D.y,a.getFloat()),R.z=t.MathUtil.lerp(A.z,D.z,a.getFloat()),i[5]=a.seed),Gt._randomInvertRoationArray(R,R,e.randomizeRotationDirection,n?null:a,i),Gt.startRotation[0]=R.x,Gt.startRotation[1]=R.y,Gt.startRotation[2]=4!==T?-R.z:R.z}else n?Gt.startRotation[0]=Gt._randomInvertRoation(t.MathUtil.lerp(e.startRotationConstantMin,e.startRotationConstantMax,Math.random()),e.randomizeRotationDirection,n?null:a,i):(a.seed=i[5],Gt.startRotation[0]=Gt._randomInvertRoation(t.MathUtil.lerp(e.startRotationConstantMin,e.startRotationConstantMax,a.getFloat()),e.randomizeRotationDirection,n?null:a,i),i[5]=a.seed)}switch(e.startLifetimeType){case 0:Gt.startLifeTime=e.startLifetimeConstant;break;case 1:Gt.startLifeTime=Gt._getStartLifetimeFromGradient(e.startLifeTimeGradient,e.emissionTime);break;case 2:n?Gt.startLifeTime=t.MathUtil.lerp(e.startLifetimeConstantMin,e.startLifetimeConstantMax,Math.random()):(a.seed=i[7],Gt.startLifeTime=t.MathUtil.lerp(e.startLifetimeConstantMin,e.startLifetimeConstantMax,a.getFloat()),i[7]=a.seed);break;case 3:var M=e.emissionTime;n?Gt.startLifeTime=t.MathUtil.lerp(Gt._getStartLifetimeFromGradient(e.startLifeTimeGradientMin,M),Gt._getStartLifetimeFromGradient(e.startLifeTimeGradientMax,M),Math.random()):(a.seed=i[7],Gt.startLifeTime=t.MathUtil.lerp(Gt._getStartLifetimeFromGradient(e.startLifeTimeGradientMin,M),Gt._getStartLifetimeFromGradient(e.startLifeTimeGradientMax,M),a.getFloat()),i[7]=a.seed)}var C=e.textureSheetAnimation;if(C&&C.enable){var v,y=C.tiles,I=y.x,L=y.y,B=1/I,O=1/L,w=C.startFrame;switch(w.type){case 0:v=w.constant;break;case 1:n?v=t.MathUtil.lerp(w.constantMin,w.constantMax,Math.random()):(a.seed=i[14],v=t.MathUtil.lerp(w.constantMin,w.constantMax,a.getFloat()),i[14]=a.seed)}var P=C.frame,N=C.cycles;switch(P.type){case 0:v+=P.constant*N;break;case 2:n?v+=t.MathUtil.lerp(P.constantMin,P.constantMax,Math.random())*N:(a.seed=i[15],v+=t.MathUtil.lerp(P.constantMin,P.constantMax,a.getFloat())*N,i[15]=a.seed)}var V=0;switch(C.type){case 0:V=Math.floor(v/I);break;case 1:C.randomRow?n?V=Math.floor(Math.random()*L):(a.seed=i[13],V=Math.floor(a.getFloat()*L),i[13]=a.seed):V=C.rowIndex}var b=Math.floor(v%I);Gt.startUVInfo=Gt.startUVInfo,Gt.startUVInfo[0]=B,Gt.startUVInfo[1]=O,Gt.startUVInfo[2]=b*B,Gt.startUVInfo[3]=V*O}else Gt.startUVInfo=Gt.startUVInfo,Gt.startUVInfo[0]=1,Gt.startUVInfo[1]=1,Gt.startUVInfo[2]=0,Gt.startUVInfo[3]=0}}Gt._tempVector30=new t.Vector3,Gt.startColor=new t.Vector4,Gt.startSize=new Float32Array(3),Gt.startRotation=new Float32Array(3),Gt.startUVInfo=new Float32Array(4);class Ht extends Z{get maxParticles(){return this._bufferMaxParticles-1}set maxParticles(e){var r=e+1;r!==this._bufferMaxParticles&&(this._bufferMaxParticles=r,this._initBufferDatas()),t.SerializeUtil.isDeserializing||this._updateParticlesSimulationRestart(0)}get emission(){return this._emission}get aliveParticleCount(){return this._firstNewElement>=this._firstRetiredElement?this._firstNewElement-this._firstRetiredElement:this._bufferMaxParticles-this._firstRetiredElement+this._firstNewElement}get emissionTime(){return this._emissionTime>this.duration?this.duration:this._emissionTime}get shape(){return this._shape}set shape(e){this._shape!==e&&(this._shape=e)}get isAlive(){return!!(this._isPlaying||this.aliveParticleCount>0)}get isEmitting(){return this._isEmitting}get isPlaying(){return this._isPlaying}get isPaused(){return this._isPaused}get startLifetimeType(){return this._startLifetimeType}set startLifetimeType(e){var t,r;switch(this.startLifetimeType){case 0:this._maxStartLifetime=this.startLifetimeConstant;break;case 1:this._maxStartLifetime=-Number.MAX_VALUE;var n=n;for(t=0,r=n.gradientCount;t<r;t++)this._maxStartLifetime=Math.max(this._maxStartLifetime,n.getValueByIndex(t));break;case 2:this._maxStartLifetime=Math.max(this.startLifetimeConstantMin,this.startLifetimeConstantMax);break;case 3:this._maxStartLifetime=-Number.MAX_VALUE;var a=a;for(t=0,r=a.gradientCount;t<r;t++)this._maxStartLifetime=Math.max(this._maxStartLifetime,a.getValueByIndex(t));var i=i;for(t=0,r=i.gradientCount;t<r;t++)this._maxStartLifetime=Math.max(this._maxStartLifetime,i.getValueByIndex(t))}this._startLifetimeType=e}get startLifetimeConstant(){return this._startLifetimeConstant}set startLifetimeConstant(e){0===this._startLifetimeType&&(this._maxStartLifetime=e),this._startLifetimeConstant=e}get startLifeTimeGradient(){return this._startLifeTimeGradient}set startLifeTimeGradient(e){if(1===this._startLifetimeType){this._maxStartLifetime=-Number.MAX_VALUE;for(var t=0,r=e.gradientCount;t<r;t++)this._maxStartLifetime=Math.max(this._maxStartLifetime,e.getValueByIndex(t))}this._startLifeTimeGradient=e}get startLifetimeConstantMin(){return this._startLifetimeConstantMin}set startLifetimeConstantMin(e){2===this._startLifetimeType&&(this._maxStartLifetime=Math.max(e,this._startLifetimeConstantMax)),this._startLifetimeConstantMin=e}get startLifetimeConstantMax(){return this._startLifetimeConstantMax}set startLifetimeConstantMax(e){2===this._startLifetimeType&&(this._maxStartLifetime=Math.max(this._startLifetimeConstantMin,e)),this._startLifetimeConstantMax=e}get startLifeTimeGradientMin(){return this._startLifeTimeGradientMin}set startLifeTimeGradientMin(e){if(3===this._startLifetimeType){var t,r;for(this._maxStartLifetime=-Number.MAX_VALUE,t=0,r=e.gradientCount;t<r;t++)this._maxStartLifetime=Math.max(this._maxStartLifetime,e.getValueByIndex(t));for(t=0,r=this._startLifeTimeGradientMax.gradientCount;t<r;t++)this._maxStartLifetime=Math.max(this._maxStartLifetime,this._startLifeTimeGradientMax.getValueByIndex(t))}this._startLifeTimeGradientMin=e}get startLifeTimeGradientMax(){return this._startLifeTimeGradientMax}set startLifeTimeGradientMax(e){if(3===this._startLifetimeType){var t,r;for(this._maxStartLifetime=-Number.MAX_VALUE,t=0,r=this._startLifeTimeGradientMin.gradientCount;t<r;t++)this._maxStartLifetime=Math.max(this._maxStartLifetime,this._startLifeTimeGradientMin.getValueByIndex(t));for(t=0,r=e.gradientCount;t<r;t++)this._maxStartLifetime=Math.max(this._maxStartLifetime,e.getValueByIndex(t))}this._startLifeTimeGradientMax=e}get velocityOverLifetime(){return this._velocityOverLifetime}set velocityOverLifetime(e){var t=this._ownerRender._baseRenderNode.shaderData;if(t.removeDefine(Ut.SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCURVE),this._velocityOverLifetime=e,e){var r=e.velocity,n=r.type;if(e.enable)switch(t.addDefine(Ut.SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCURVE),n){case 0:r.gradientConstantX._formatData(),r.gradientConstantY._formatData(),r.gradientConstantZ._formatData(),t.setBuffer(Ut.VOLVELOCITYGRADIENTX,r.gradientConstantX._elements),t.setBuffer(Ut.VOLVELOCITYGRADIENTY,r.gradientConstantY._elements),t.setBuffer(Ut.VOLVELOCITYGRADIENTZ,r.gradientConstantZ._elements),t.setBuffer(Ut.VOLVELOCITYGRADIENTXMAX,r.gradientConstantX._elements),t.setBuffer(Ut.VOLVELOCITYGRADIENTYMAX,r.gradientConstantY._elements),t.setBuffer(Ut.VOLVELOCITYGRADIENTZMAX,r.gradientConstantZ._elements);break;case 1:r.gradientX._formatData(),r.gradientY._formatData(),r.gradientZ._formatData(),t.setBuffer(Ut.VOLVELOCITYGRADIENTX,r.gradientX._elements),t.setBuffer(Ut.VOLVELOCITYGRADIENTY,r.gradientY._elements),t.setBuffer(Ut.VOLVELOCITYGRADIENTZ,r.gradientZ._elements),t.setBuffer(Ut.VOLVELOCITYGRADIENTXMAX,r.gradientX._elements),t.setBuffer(Ut.VOLVELOCITYGRADIENTZMAX,r.gradientZ._elements),t.setBuffer(Ut.VOLVELOCITYGRADIENTYMAX,r.gradientY._elements);break;case 2:r.gradientConstantXMin._formatData(),r.gradientConstantYMin._formatData(),r.gradientConstantZMin._formatData(),r.gradientConstantXMax._formatData(),r.gradientConstantYMax._formatData(),r.gradientConstantZMax._formatData(),t.setBuffer(Ut.VOLVELOCITYGRADIENTX,r.gradientConstantXMin._elements),t.setBuffer(Ut.VOLVELOCITYGRADIENTY,r.gradientConstantYMin._elements),t.setBuffer(Ut.VOLVELOCITYGRADIENTZ,r.gradientConstantZMin._elements),t.setBuffer(Ut.VOLVELOCITYGRADIENTXMAX,r.gradientConstantXMax._elements),t.setBuffer(Ut.VOLVELOCITYGRADIENTYMAX,r.gradientConstantYMax._elements),t.setBuffer(Ut.VOLVELOCITYGRADIENTZMAX,r.gradientConstantZMax._elements);break;case 3:r.gradientXMin._formatData(),r.gradientYMin._formatData(),r.gradientZMin._formatData(),r.gradientXMax._formatData(),r.gradientYMax._formatData(),r.gradientZMax._formatData(),t.setBuffer(Ut.VOLVELOCITYGRADIENTX,r.gradientXMin._elements),t.setBuffer(Ut.VOLVELOCITYGRADIENTY,r.gradientYMin._elements),t.setBuffer(Ut.VOLVELOCITYGRADIENTZ,r.gradientZMin._elements),t.setBuffer(Ut.VOLVELOCITYGRADIENTXMAX,r.gradientXMax._elements),t.setBuffer(Ut.VOLVELOCITYGRADIENTZMAX,r.gradientZMax._elements),t.setBuffer(Ut.VOLVELOCITYGRADIENTYMAX,r.gradientYMax._elements)}t.setInt(Ut.VOLSPACETYPE,e.space)}}get colorOverLifetime(){return this._colorOverLifetime}set colorOverLifetime(e){var t=this._ownerRender._baseRenderNode.shaderData;if(t.removeDefine(Ut.SHADERDEFINE_RANDOMCOLOROVERLIFETIME),this._colorOverLifetime=e,e){var r=e.color;if(e.enable)switch(r.type){case 1:t.addDefine(Ut.SHADERDEFINE_RANDOMCOLOROVERLIFETIME);let e=r.gradient,n=e.alphaElements,a=e.rgbElements;t.setBuffer(Ut.COLOROVERLIFEGRADIENTALPHAS,n),t.setBuffer(Ut.COLOROVERLIFEGRADIENTCOLORS,a),t.setBuffer(Ut.MAXCOLOROVERLIFEGRADIENTALPHAS,n),t.setBuffer(Ut.MAXCOLOROVERLIFEGRADIENTCOLORS,a);let i=e._keyRanges;i.setValue(1,0,1,0);for(let t=0,r=Math.max(2,e.colorRGBKeysCount);t<r;t++){let e=a[4*t];i.x=Math.min(i.x,e),i.y=Math.max(i.y,e)}for(let t=0,r=Math.max(2,e.colorAlphaKeysCount);t<r;t++){let e=n[2*t];i.z=Math.min(i.z,e),i.w=Math.max(i.w,e)}t.setVector(Ut.COLOROVERLIFEGRADIENTRANGES,i),t.setVector(Ut.MAXCOLOROVERLIFEGRADIENTRANGES,i),8==e.maxColorAlphaKeysCount?t.addDefine(Ut.SHADERDEFINE_COLORKEYCOUNT_8):t.removeDefine(Ut.SHADERDEFINE_COLORKEYCOUNT_8);break;case 3:t.addDefine(Ut.SHADERDEFINE_RANDOMCOLOROVERLIFETIME);let s=r.gradientMin,o=r.gradientMax,l=s.alphaElements,h=s.rgbElements,d=o.alphaElements,c=o.rgbElements;t.setBuffer(Ut.COLOROVERLIFEGRADIENTALPHAS,l),t.setBuffer(Ut.COLOROVERLIFEGRADIENTCOLORS,h),t.setBuffer(Ut.MAXCOLOROVERLIFEGRADIENTALPHAS,d),t.setBuffer(Ut.MAXCOLOROVERLIFEGRADIENTCOLORS,c);let u=s._keyRanges;u.setValue(1,0,1,0);for(let e=0,t=Math.max(2,s.colorRGBKeysCount);e<t;e++){let t=h[4*e];u.x=Math.min(u.x,t),u.y=Math.max(u.y,t)}for(let e=0,t=Math.max(2,s.colorAlphaKeysCount);e<t;e++){let t=l[2*e];u.z=Math.min(u.z,t),u.w=Math.max(u.w,t)}t.setVector(Ut.COLOROVERLIFEGRADIENTRANGES,u);let _=o._keyRanges;_.setValue(1,0,1,0);for(let e=0,t=Math.max(2,o.colorRGBKeysCount);e<t;e++){let t=c[4*e];_.x=Math.min(_.x,t),_.y=Math.max(_.y,t)}for(let e=0,t=Math.max(2,o.colorAlphaKeysCount);e<t;e++){let t=d[2*e];_.z=Math.min(_.z,t),_.w=Math.max(_.w,t)}t.setVector(Ut.MAXCOLOROVERLIFEGRADIENTRANGES,_),8==Math.max(s.maxColorAlphaKeysCount,o.maxColorAlphaKeysCount)?t.addDefine(Ut.SHADERDEFINE_COLORKEYCOUNT_8):t.removeDefine(Ut.SHADERDEFINE_COLORKEYCOUNT_8)}}}get sizeOverLifetime(){return this._sizeOverLifetime}set sizeOverLifetime(e){var t=this._ownerRender._baseRenderNode.shaderData;if(t.removeDefine(Ut.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVES),t.removeDefine(Ut.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVESSEPERATE),this._sizeOverLifetime=e,e){var r=e.size,n=r.separateAxes,a=r.type;if(e.enable)switch(a){case 0:n?(r.gradientX._formatData(),r.gradientY._formatData(),r.gradientZ._formatData(),t.addDefine(Ut.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVESSEPERATE),t.setBuffer(Ut.SOLSIZEGRADIENTX,r.gradientX._elements),t.setBuffer(Ut.SOLSIZEGRADIENTY,r.gradientY._elements),t.setBuffer(Ut.SOLSizeGradientZ,r.gradientZ._elements),t.setBuffer(Ut.SOLSIZEGRADIENTXMAX,r.gradientX._elements),t.setBuffer(Ut.SOLSIZEGRADIENTYMAX,r.gradientY._elements),t.setBuffer(Ut.SOLSizeGradientZMAX,r.gradientZ._elements)):(t.addDefine(Ut.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVES),r.gradient._formatData(),t.setBuffer(Ut.SOLSIZEGRADIENT,r.gradient._elements),t.setBuffer(Ut.SOLSizeGradientMax,r.gradient._elements));break;case 2:n?(t.addDefine(Ut.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVESSEPERATE),r.gradientXMin._formatData(),r.gradientXMax._formatData(),r.gradientYMin._formatData(),r.gradientYMax._formatData(),r.gradientZMin._formatData(),r.gradientZMax._formatData(),t.setBuffer(Ut.SOLSIZEGRADIENTX,r.gradientXMin._elements),t.setBuffer(Ut.SOLSIZEGRADIENTXMAX,r.gradientXMax._elements),t.setBuffer(Ut.SOLSIZEGRADIENTY,r.gradientYMin._elements),t.setBuffer(Ut.SOLSIZEGRADIENTYMAX,r.gradientYMax._elements),t.setBuffer(Ut.SOLSizeGradientZ,r.gradientZMin._elements),t.setBuffer(Ut.SOLSizeGradientZMAX,r.gradientZMax._elements)):(t.addDefine(Ut.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVES),r.gradientMin._formatData(),r.gradientMax._formatData(),t.setBuffer(Ut.SOLSIZEGRADIENT,r.gradientMin._elements),t.setBuffer(Ut.SOLSizeGradientMax,r.gradientMax._elements))}}}get rotationOverLifetime(){return this._rotationOverLifetime}set rotationOverLifetime(e){var t=this._ownerRender._baseRenderNode.shaderData;if(t.removeDefine(Ut.SHADERDEFINE_ROTATIONOVERLIFETIME),t.removeDefine(Ut.SHADERDEFINE_ROTATIONOVERLIFETIMESEPERATE),this._rotationOverLifetime=e,e){var r=e.angularVelocity;if(!r)return;var n=r.separateAxes,a=r.type;if(e.enable)switch(n?t.addDefine(Ut.SHADERDEFINE_ROTATIONOVERLIFETIMESEPERATE):t.addDefine(Ut.SHADERDEFINE_ROTATIONOVERLIFETIME),a){case 0:n?(r._constantXGradientDdata._formatData(),r._constantYGradientDdata._formatData(),r._constantZGradientDdata._formatData(),t.setBuffer(Ut.ROLANGULARVELOCITYGRADIENTX,r._constantXGradientDdata._elements),t.setBuffer(Ut.ROLANGULARVELOCITYGRADIENTXMAX,r._constantXGradientDdata._elements),t.setBuffer(Ut.ROLANGULARVELOCITYGRADIENTY,r._constantYGradientDdata._elements),t.setBuffer(Ut.ROLANGULARVELOCITYGRADIENTYMAX,r._constantYGradientDdata._elements),t.setBuffer(Ut.ROLANGULARVELOCITYGRADIENTZ,r._constantZGradientDdata._elements),t.setBuffer(Ut.ROLANGULARVELOCITYGRADIENTZMAX,r._constantZGradientDdata._elements)):(r._constantGradientDdata._formatData(),t.setBuffer(Ut.ROLANGULARVELOCITYGRADIENT,r._constantGradientDdata._elements),t.setBuffer(Ut.ROLANGULARVELOCITYGRADIENTMAX,r._constantGradientDdata._elements));break;case 1:n?(r.gradientX._formatData(),r.gradientY._formatData(),r.gradientZ._formatData(),t.setBuffer(Ut.ROLANGULARVELOCITYGRADIENTX,r.gradientX._elements),t.setBuffer(Ut.ROLANGULARVELOCITYGRADIENTXMAX,r.gradientX._elements),t.setBuffer(Ut.ROLANGULARVELOCITYGRADIENTY,r.gradientY._elements),t.setBuffer(Ut.ROLANGULARVELOCITYGRADIENTYMAX,r.gradientY._elements),t.setBuffer(Ut.ROLANGULARVELOCITYGRADIENTZ,r.gradientZ._elements),t.setBuffer(Ut.ROLANGULARVELOCITYGRADIENTZMAX,r.gradientZ._elements)):(r.gradient._formatData(),t.setBuffer(Ut.ROLANGULARVELOCITYGRADIENT,r.gradient._elements),t.setBuffer(Ut.ROLANGULARVELOCITYGRADIENTMAX,r.gradient._elements));break;case 2:n?(r._constantXMinGradientDdata._formatData(),r._constantXMaxGradientDdata._formatData(),r._constantYMinGradientDdata._formatData(),r._constantYMaxGradientDdata._formatData(),r._constantZMinGradientDdata._formatData(),r._constantZMaxGradientDdata._formatData(),t.setBuffer(Ut.ROLANGULARVELOCITYGRADIENTX,r._constantXMinGradientDdata._elements),t.setBuffer(Ut.ROLANGULARVELOCITYGRADIENTXMAX,r._constantXMaxGradientDdata._elements),t.setBuffer(Ut.ROLANGULARVELOCITYGRADIENTY,r._constantYMinGradientDdata._elements),t.setBuffer(Ut.ROLANGULARVELOCITYGRADIENTYMAX,r._constantYMaxGradientDdata._elements),t.setBuffer(Ut.ROLANGULARVELOCITYGRADIENTZ,r._constantZMinGradientDdata._elements),t.setBuffer(Ut.ROLANGULARVELOCITYGRADIENTZMAX,r._constantZMaxGradientDdata._elements)):(r._constantMinGradientDdata._formatData(),r._constantMaxGradientDdata._formatData(),t.setBuffer(Ut.ROLANGULARVELOCITYGRADIENT,r._constantMinGradientDdata._elements),t.setBuffer(Ut.ROLANGULARVELOCITYGRADIENTMAX,r._constantMaxGradientDdata._elements));break;case 3:n?(r.gradientXMin._formatData(),r.gradientXMax._formatData(),r.gradientYMin._formatData(),r.gradientYMax._formatData(),r.gradientZMin._formatData(),r.gradientZMax._formatData(),t.setBuffer(Ut.ROLANGULARVELOCITYGRADIENTX,r.gradientXMin._elements),t.setBuffer(Ut.ROLANGULARVELOCITYGRADIENTXMAX,r.gradientXMax._elements),t.setBuffer(Ut.ROLANGULARVELOCITYGRADIENTY,r.gradientYMin._elements),t.setBuffer(Ut.ROLANGULARVELOCITYGRADIENTYMAX,r.gradientYMax._elements),t.setBuffer(Ut.ROLANGULARVELOCITYGRADIENTZ,r.gradientZMin._elements),t.setBuffer(Ut.ROLANGULARVELOCITYGRADIENTZMAX,r.gradientZMax._elements)):(r.gradientMin._formatData(),r.gradientMax._formatData(),t.setBuffer(Ut.ROLANGULARVELOCITYGRADIENT,r.gradientMin._elements),t.setBuffer(Ut.ROLANGULARVELOCITYGRADIENTMAX,r.gradientMax._elements))}}}get textureSheetAnimation(){return this._textureSheetAnimation}set textureSheetAnimation(e){var t=this._ownerRender._baseRenderNode.shaderData;if(this._textureSheetAnimation=e,e){var r=e.frame,n=r.type;t.addDefine(Ut.SHADERDEFINE_TEXTURESHEETANIMATIONRANDOMCURVE),t.setNumber(Ut.TEXTURESHEETANIMATIONCYCLES,e.cycles);var a=e.tiles,i=this._uvLength;if(i.x=1/a.x,i.y=1/a.y,t.setVector2(Ut.TEXTURESHEETANIMATIONSUBUVLENGTH,this._uvLength),e.enable)switch(n){case 1:r.frameOverTimeData._formatData(),t.setBuffer(Ut.TEXTURESHEETANIMATIONGRADIENTUVS,r.frameOverTimeData._elements),t.setBuffer(Ut.TEXTURESHEETANIMATIONGRADIENTMAXUVS,r.frameOverTimeData._elements);break;case 3:r.frameOverTimeDataMin._formatData(),r.frameOverTimeDataMax._formatData(),t.setBuffer(Ut.TEXTURESHEETANIMATIONGRADIENTUVS,r.frameOverTimeDataMin._elements),t.setBuffer(Ut.TEXTURESHEETANIMATIONGRADIENTMAXUVS,r.frameOverTimeDataMax._elements);break;default:t.removeDefine(Ut.SHADERDEFINE_TEXTURESHEETANIMATIONRANDOMCURVE)}}}constructor(e,r=t.MeshTopology.Triangles,n=t.DrawType.DrawElement){super(r,n),this._bounds=null,this._gravityOffset=new t.Vector2,this._customBounds=null,this._useCustomBounds=!1,this._owner=null,this._ownerRender=null,this._vertices=null,this._floatCountPerVertex=0,this._startLifeTimeIndex=0,this._timeIndex=0,this._simulationUV_Index=0,this._simulateUpdate=!1,this._firstActiveElement=0,this._firstNewElement=0,this._firstFreeElement=0,this._firstRetiredElement=0,this._drawCounter=0,this._bufferMaxParticles=0,this._emission=null,this._shape=null,this._isEmitting=!1,this._isPlaying=!1,this._isPaused=!1,this._playStartDelay=0,this._frameRateTime=0,this._emissionTime=0,this._totalDelayTime=0,this._emissionDistance=0,this._emissionLastPosition=new t.Vector3,this._burstsIndex=0,this._velocityOverLifetime=null,this._colorOverLifetime=null,this._sizeOverLifetime=null,this._rotationOverLifetime=null,this._textureSheetAnimation=null,this._startLifetimeType=0,this._startLifetimeConstant=0,this._startLifeTimeGradient=null,this._startLifetimeConstantMin=0,this._startLifetimeConstantMax=0,this._startLifeTimeGradientMin=null,this._startLifeTimeGradientMax=null,this._maxStartLifetime=0,this._uvLength=new t.Vector2,this._vertexStride=0,this._indexStride=0,this._vertexBuffer=null,this._indexBuffer=null,this._bufferState=new t.BufferState,this._updateMask=0,this._currentTime=0,this._startUpdateLoopCount=0,this._rand=null,this._randomSeeds=null,this.duration=0,this.looping=!1,this.prewarm=!1,this.startDelayType=0,this.startDelay=0,this.startDelayMin=0,this.startDelayMax=0,this.startSpeedType=0,this.startSpeedConstant=0,this.startSpeedConstantMin=0,this.startSpeedConstantMax=0,this.dragType=0,this.dragConstant=0,this.dragSpeedConstantMin=0,this.dragSpeedConstantMax=0,this.threeDStartSize=!1,this.startSizeType=0,this.startSizeConstant=0,this.startSizeConstantSeparate=null,this.startSizeConstantMin=0,this.startSizeConstantMax=0,this.startSizeConstantMinSeparate=null,this.startSizeConstantMaxSeparate=null,this.threeDStartRotation=!1,this.startRotationType=0,this.startRotationConstant=0,this.startRotationConstantSeparate=null,this.startRotationConstantMin=0,this.startRotationConstantMax=0,this.startRotationConstantMinSeparate=null,this.startRotationConstantMaxSeparate=null,this.randomizeRotationDirection=0,this.startColorType=0,this.startColorConstant=new t.Vector4(1,1,1,1),this.startColorConstantMin=new t.Vector4(0,0,0,0),this.startColorConstantMax=new t.Vector4(1,1,1,1),this.gravityModifier=0,this.simulationSpace=0,this.simulationSpeed=1,this.scaleMode=1,this.playOnAwake=!1,this.randomSeed=null,this.autoRandomSeed=!1,this.isPerformanceMode=!1,this.indexFormat=t.IndexFormat.UInt16,this._firstActiveElement=0,this._firstNewElement=0,this._firstFreeElement=0,this._firstRetiredElement=0,this._owner=e.owner,this._ownerRender=e,this._useCustomBounds=!1,this._currentTime=0,this._bounds=new H(new t.Vector3(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE),new t.Vector3(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE)),this.bufferState=this._bufferState=new t.BufferState,this._isEmitting=!1,this._isPlaying=!1,this._isPaused=!1,this._burstsIndex=0,this._frameRateTime=0,this._emissionTime=0,this._totalDelayTime=0,this._simulateUpdate=!1,this._bufferMaxParticles=1,this.duration=5,this.looping=!0,this.prewarm=!1,this.startDelayType=0,this.startDelay=0,this.startDelayMin=0,this.startDelayMax=0,this._startLifetimeType=0,this._startLifetimeConstant=5,this._startLifeTimeGradient=new gt,this._startLifetimeConstantMin=0,this._startLifetimeConstantMax=5,this._startLifeTimeGradientMin=new gt,this._startLifeTimeGradientMax=new gt,this._maxStartLifetime=5,this.startSpeedType=0,this.startSpeedConstant=5,this.startSpeedConstantMin=0,this.startSpeedConstantMax=5,this.dragType=0,this.dragConstant=0,this.dragSpeedConstantMin=0,this.dragSpeedConstantMax=0,this.threeDStartSize=!1,this.startSizeType=0,this.startSizeConstant=1,this.startSizeConstantSeparate=new t.Vector3(1,1,1),this.startSizeConstantMin=0,this.startSizeConstantMax=1,this.startSizeConstantMinSeparate=new t.Vector3(0,0,0),this.startSizeConstantMaxSeparate=new t.Vector3(1,1,1),this.threeDStartRotation=!1,this.startRotationType=0,this.startRotationConstant=0,this.startRotationConstantSeparate=new t.Vector3(0,0,0),this.startRotationConstantMin=0,this.startRotationConstantMax=0,this.startRotationConstantMinSeparate=new t.Vector3(0,0,0),this.startRotationConstantMaxSeparate=new t.Vector3(0,0,0),this.gravityModifier=0,this.simulationSpace=1,this.scaleMode=1,this.playOnAwake=!0,this._rand=new bt(0),this.autoRandomSeed=!0,this.randomSeed=new Uint32Array(1),this._randomSeeds=new Uint32Array(Ht._RANDOMOFFSET.length),this.isPerformanceMode=!0,this._emission=new Ft,this._emission.enable=!0}_getVertexBuffer(e=0){return 0===e?this._vertexBuffer:null}_getIndexBuffer(){return this._indexBuffer}_generateBounds(){var r=this._ownerRender,n=this._bounds.getMin(),a=this._bounds.getMax(),i=0;switch(this.startLifetimeType){case 0:i=this._startLifetimeConstant;break;case 2:i=this._startLifetimeConstantMax}var s=0;switch(this.startSpeedType){case 0:s=this.startSpeedConstant;break;case 2:s=this.startSpeedConstantMax}var o=0;if(this.threeDStartSize)switch(this.startSizeType){case 0:o=Math.max(this.startSizeConstantSeparate.x,this.startSizeConstantSeparate.y,this.startSizeConstantSeparate.z);break;case 2:o=Math.max(this.startSizeConstantMaxSeparate.x,this.startSizeConstantMaxSeparate.y,this.startSizeConstantMaxSeparate.z)}else switch(this.startSizeType){case 0:o=this.startSizeConstant;break;case 2:o=this.startSizeConstantMax}var l=Ht._tempVector30,h=Ht._tempVector31,d=Ht._tempVector32,c=Ht._tempVector33;if(l.setValue(0,0,1),h.setValue(0,0,0),d.setValue(0,0,0),c.setValue(0,0,0),this.shape&&this.shape.enable)switch(this.shape.shapeType){case e.ParticleSystemShapeType.Sphere:var u=this.shape;l.setValue(1,1,1),h.setValue(1,1,1),d.setValue(u.radius,u.radius,u.radius),c.setValue(u.radius,u.radius,u.radius);break;case e.ParticleSystemShapeType.Hemisphere:var _=this.shape;l.setValue(1,1,1),h.setValue(1,1,1),d.setValue(_.radius,_.radius,_.radius),c.setValue(_.radius,_.radius,0);break;case e.ParticleSystemShapeType.Cone:var m=this.shape;if(0==m.emitType||1==m.emitType){var f=m.angle,g=Math.sin(f);l.setValue(g,g,1),h.setValue(g,g,0),d.setValue(m.radius,m.radius,0),c.setValue(m.radius,m.radius,0);break}if(2==m.emitType||3==m.emitType){f=m.angle,g=Math.sin(f);var p=m.length;l.setValue(g,g,1),h.setValue(g,g,0);var S=Math.tan(f),T=m.radius+p*S;d.setValue(T,T,p),c.setValue(T,T,0)}break;case e.ParticleSystemShapeType.Box:var E=this.shape;0!=this.shape.randomDirection&&(l.setValue(1,1,1),h.setValue(1,1,1)),d.setValue(E.x/2,E.y/2,E.z/2),c.setValue(E.x/2,E.y/2,E.z/2);break;case e.ParticleSystemShapeType.Circle:var x=this.shape;l.setValue(1,1,1),h.setValue(1,1,1),d.setValue(x.radius,x.radius,0),c.setValue(x.radius,x.radius,0)}var A=0,D=4==r.renderMode;switch(r.renderMode){case 0:case 1:case 2:case 3:A=Ht.halfKSqrtOf2;break;case 4:if(r.mesh){var R=r.mesh.bounds;A=Math.sqrt(Math.pow(R.getExtent().x,2)+Math.pow(R.getExtent().y,2)+Math.pow(R.getExtent().z,2))}else A=Ht.halfKSqrtOf2}var M=Ht._tempVector36;if(M.setValue(1,1,1),this.sizeOverLifetime&&this.sizeOverLifetime.enable){var C=this.sizeOverLifetime.size.getMaxSizeInGradient(D);M.setValue(C,C,C)}var v=A*o;t.Vector3.scale(M,v,M);var y=Ht._tempVector34,I=Ht._tempVector35;if(s>0?(t.Vector3.scale(l,s,y),t.Vector3.scale(h,s,I)):(t.Vector3.scale(l,-s,I),t.Vector3.scale(h,-s,y)),this.velocityOverLifetime&&this.velocityOverLifetime.enable){var L=this.velocityOverLifetime.velocity,B=Ht._tempVector37;switch(B.setValue(0,0,0),L.type){case 0:L.constant.cloneTo(B);break;case 2:L.constantMax.cloneTo(B);break;case 1:var O=L.gradientX.getAverageValue(),w=L.gradientY.getAverageValue(),P=L.gradientZ.getAverageValue();B.setValue(O,w,P);break;case 3:var N=L.gradientXMax.getAverageValue(),V=L.gradientYMax.getAverageValue(),b=L.gradientZMax.getAverageValue();B.setValue(N,V,b)}1==this.velocityOverLifetime.space&&t.Vector3.transformV3ToV3(B,this._owner.transform.worldMatrix,B),t.Vector3.add(y,B,y),t.Vector3.subtract(I,B,I),t.Vector3.max(y,t.Vector3.ZERO,y),t.Vector3.max(I,t.Vector3.ZERO,I)}t.Vector3.scale(y,i,y),t.Vector3.scale(I,i,I);var F=this.gravityModifier;if(0!=F){var U=.5*Ht.g*F*i*i,G=y.y-U,H=I.y+U;G=G>0?G:0,H=H>0?H:0,this._gravityOffset.setValue(y.y-G,H-I.y)}t.Vector3.add(y,M,a),t.Vector3.add(a,d,a),t.Vector3.add(I,M,n),t.Vector3.add(n,c,n),t.Vector3.scale(n,-1,n),this._bounds.setMin(n),this._bounds.setMax(a)}get customBounds(){return this._customBounds}set customBounds(e){e?(this._useCustomBounds=!0,this._customBounds||(this._customBounds=new H(new t.Vector3,new t.Vector3),this._ownerRender.geometryBounds=this._customBounds),this._customBounds=e):(this._useCustomBounds=!1,this._customBounds=null,this._ownerRender.geometryBounds=null)}_simulationSupported(){return!(0==this.simulationSpace&&this.emission.emissionRateOverDistance>0)}_updateEmission(){if(this.isAlive)if(this._simulateUpdate)this._simulateUpdate=!1;else{var e=this._startUpdateLoopCount!==t.Stat.loopCount&&!this._isPaused&&this._owner._scene?this._owner._scene.timer._delta/1e3:0;e=Math.min(Ht._maxElapsedTime,e*this.simulationSpeed),this._updateParticles(e)}}_updateParticles(e){(4!==this._ownerRender.renderMode||this._ownerRender.mesh)&&(this._currentTime+=e,this._retireActiveParticles(),this._freeRetiredParticles(),this._totalDelayTime+=e,this._totalDelayTime<this._playStartDelay||this._emission.enable&&this._isEmitting&&!this._isPaused&&(this._advanceTime(e,this._currentTime),this.emission.emissionRateOverDistance>0&&this._advanceDistance(this._currentTime)))}_updateParticlesSimulationRestart(e){this._firstActiveElement=0,this._firstNewElement=0,this._firstFreeElement=0,this._firstRetiredElement=0,this._burstsIndex=0,this._frameRateTime=e,this._emissionTime=0,this._emissionDistance=0,this._totalDelayTime=0,this._currentTime=e;var t=e;t<this._playStartDelay?this._totalDelayTime=t:this._emission.enable&&(this._advanceTime(e,e),this.emission.emissionRateOverDistance>0&&this._advanceDistance(this._currentTime))}_retireActiveParticles(){for(;this._firstActiveElement!=this._firstNewElement;){var e=this._firstActiveElement*this._floatCountPerVertex*this._vertexStride,t=e+this._timeIndex;if(this._currentTime-this._vertices[t]+1e-4<this._vertices[e+this._startLifeTimeIndex])break;this._vertices[t]=this._drawCounter,this._firstActiveElement++,this._firstActiveElement>=this._bufferMaxParticles&&(this._firstActiveElement=0)}}_freeRetiredParticles(){for(;this._firstRetiredElement!=this._firstActiveElement;)this._drawCounter,this._vertices[this._firstRetiredElement*this._floatCountPerVertex*this._vertexStride+this._timeIndex],this._firstRetiredElement++,this._firstRetiredElement>=this._bufferMaxParticles&&(this._firstRetiredElement=0)}_burst(e,r){for(var n=0,a=this._emission._bursts,i=a.length;this._burstsIndex<i;this._burstsIndex++){var s,o=a[this._burstsIndex],l=o.time;if(!(e<=l&&l<r))break;this.autoRandomSeed?s=t.MathUtil.lerp(o.minCount,o.maxCount,Math.random()):(this._rand.seed=this._randomSeeds[0],s=t.MathUtil.lerp(o.minCount,o.maxCount,this._rand.getFloat()),this._randomSeeds[0]=this._rand.seed),n+=s}return n}_advanceTime(e,t){var r,n=this._emissionTime;this._emissionTime+=e;var a=0;if(this._emissionTime>this.duration){if(!this.looping){for(a=Math.min(this.maxParticles-this.aliveParticleCount,a),r=0;r<a;r++)this.emit(t);return this._isPlaying=!1,void this.stop()}a+=this._burst(n,this._emissionTime),this._emissionTime-=this.duration,this._burstsIndex=0,a+=this._burst(0,this._emissionTime)}else a+=this._burst(n,this._emissionTime);for(a=Math.min(this.maxParticles-this.aliveParticleCount,a),r=0;r<a;r++)this.emit(t);var i=this.emission.emissionRate;if(i>0){var s=1/i;for(this._frameRateTime+=s,this._frameRateTime=this._currentTime-(this._currentTime-this._frameRateTime)%this._maxStartLifetime;this._frameRateTime<=t&&this.emit(this._frameRateTime);)this._frameRateTime+=s;this._frameRateTime=Math.floor(t/s)*s}}_advanceDistance(e){let r=this._owner.transform.position,n=t.Vector3.distance(r,this._emissionLastPosition),a=this.emission.emissionRateOverDistance,i=this._emissionDistance+n;if(i>1/a){let t=i*a;t=Math.floor(t),t=Math.min(this.maxParticles-this.aliveParticleCount,t);for(let r=0;r<t;r++)this.emit(e);this._emissionDistance=0}else this._emissionDistance=i;r.cloneTo(this._emissionLastPosition)}_initBufferDatas(){if(this._vertexBuffer&&this._vertexBuffer._buffer){var e=this._vertexBuffer._byteLength+2*this._indexBuffer.indexCount;this._vertexBuffer.destroy(),this._indexBuffer.destroy(),t.Resource._addMemory(-e,-e)}var r=this._ownerRender,n=r.renderMode;if(-1!==n&&this.maxParticles>0){var a,i,s,o,l,h,d,c=0,u=(e=0,r.mesh);if(4===n){if(u){d=Vt.vertexDeclaration,this._floatCountPerVertex=d.vertexStride/4,this._simulationUV_Index=d.getVertexElementByUsage(Pt.PARTICLE_SIMULATIONUV).offset/4,this._startLifeTimeIndex=12,this._timeIndex=16,this._vertexStride=u._vertexCount;var _=this._bufferMaxParticles*this._vertexStride,m=_%65535;if(Math.floor(_/65535)+1>1)throw new Error("ShurikenParticleSystem:the maxParticleCount multiply mesh vertexCount is large than 65535.");c=d.vertexStride*m,this._vertexBuffer=A.renderOBJCreate.createVertexBuffer3D(c,t.BufferUsage.Dynamic,!1),this._vertexBuffer.vertexDeclaration=d,this._vertices=new Float32Array(this._floatCountPerVertex*m),this._indexStride=u._indexBuffer.indexCount;var f=u._indexBuffer.getData(),g=this._bufferMaxParticles*this._indexStride;for(this._indexBuffer=A.renderOBJCreate.createIndexBuffer3D(t.IndexFormat.UInt16,g,t.BufferUsage.Static,!1),a=new Uint16Array(g),e=c+2*g,l=0,i=0;i<this._bufferMaxParticles;i++){var p=i*this._vertexStride;for(s=0,o=f.length;s<o;s++)a[l++]=p+f[s]}this._indexBuffer.setData(a),this._bufferState.applyState([this._vertexBuffer],this._indexBuffer),this.bufferState=this._bufferState}}else{for(d=Nt.vertexDeclaration,this._floatCountPerVertex=d.vertexStride/4,this._startLifeTimeIndex=7,this._simulationUV_Index=d.getVertexElementByUsage(Pt.PARTICLE_SIMULATIONUV).offset/4,this._timeIndex=11,this._vertexStride=4,c=d.vertexStride*this._bufferMaxParticles*this._vertexStride,this._vertexBuffer=A.renderOBJCreate.createVertexBuffer3D(c,t.BufferUsage.Dynamic,!1),this._vertexBuffer.vertexDeclaration=d,this._vertices=new Float32Array(this._floatCountPerVertex*this._bufferMaxParticles*this._vertexStride),i=0;i<this._bufferMaxParticles;i++)h=i*this._floatCountPerVertex*this._vertexStride,this._vertices[h]=-.5,this._vertices[h+1]=-.5,this._vertices[h+2]=0,this._vertices[h+3]=1,h+=this._floatCountPerVertex,this._vertices[h]=.5,this._vertices[h+1]=-.5,this._vertices[h+2]=1,this._vertices[h+3]=1,h+=this._floatCountPerVertex,this._vertices[h]=.5,this._vertices[h+1]=.5,this._vertices[h+2]=1,this._vertices[h+3]=0,h+=this._floatCountPerVertex,this._vertices[h]=-.5,this._vertices[h+1]=.5,this._vertices[h+2]=0,this._vertices[h+3]=0;for(this._indexStride=6,this._indexBuffer=A.renderOBJCreate.createIndexBuffer3D(t.IndexFormat.UInt16,6*this._bufferMaxParticles,t.BufferUsage.Static,!1),a=new Uint16Array(6*this._bufferMaxParticles),i=0;i<this._bufferMaxParticles;i++){l=6*i;var S=i*this._vertexStride,T=S+2;a[l++]=S,a[l++]=T,a[l++]=S+1,a[l++]=S,a[l++]=S+3,a[l++]=T}this._indexBuffer.setData(a),e=c+6*this._bufferMaxParticles*2,this._bufferState.applyState([this._vertexBuffer],this._indexBuffer),this.bufferState=this._bufferState}t.Resource._addMemory(e,e)}}destroy(){if(super.destroy(),this._vertexBuffer){var e=this._vertexBuffer._byteLength;t.Resource._addMemory(-e,-e),this._vertexBuffer.destroy(),this._vertexBuffer=null}if(this._indexBuffer){e=this._indexBuffer._byteLength;t.Resource._addMemory(-e,-e),this._indexBuffer.destroy(),this._indexBuffer=null}this._emission.destroy(),this._bounds=null,this._customBounds=null,this._bufferState=null,this._owner=null,this._vertices=null,this._indexBuffer=null,this._emission=null,this._shape=null,this.startLifeTimeGradient=null,this.startLifeTimeGradientMin=null,this.startLifeTimeGradientMax=null,this.startSizeConstantSeparate=null,this.startSizeConstantMinSeparate=null,this.startSizeConstantMaxSeparate=null,this.startRotationConstantSeparate=null,this.startRotationConstantMinSeparate=null,this.startRotationConstantMaxSeparate=null,this.startColorConstant=null,this.startColorConstantMin=null,this.startColorConstantMax=null,this._velocityOverLifetime=null,this._colorOverLifetime=null,this._sizeOverLifetime=null,this._rotationOverLifetime=null,this._textureSheetAnimation=null}emit(e){var t=Ht._tempPosition,r=Ht._tempDirection;return this._shape&&this._shape.enable?this.autoRandomSeed?this._shape.generatePositionAndDirection(t,r):this._shape.generatePositionAndDirection(t,r,this._rand,this._randomSeeds):(t.x=t.y=t.z=0,r.x=r.y=0,r.z=1),this.addParticle(t,r,e)}addParticle(e,r,n){t.Vector3.normalize(r,r);var a=this._firstFreeElement+1;if(a>=this._bufferMaxParticles&&(a=0),a===this._firstRetiredElement)return!1;var i,s,o,l,h,d,c,u,_,m,f=this._owner.transform;if(Gt.create(this,this._ownerRender),this._currentTime-n>=Gt.startLifeTime)return!0;switch(0==this.simulationSpace&&(i=f.position,s=f.rotation),this.startSpeedType){case 0:o=this.startSpeedConstant;break;case 2:this.autoRandomSeed?o=t.MathUtil.lerp(this.startSpeedConstantMin,this.startSpeedConstantMax,Math.random()):(this._rand.seed=this._randomSeeds[8],o=t.MathUtil.lerp(this.startSpeedConstantMin,this.startSpeedConstantMax,this._rand.getFloat()),this._randomSeeds[8]=this._rand.seed)}var g=this._velocityOverLifetime&&this._velocityOverLifetime.enable;if(g){var p=this._velocityOverLifetime.velocity.type;2===p||3===p?this.autoRandomSeed?(l=Math.random(),h=Math.random(),d=Math.random()):(this._rand.seed=this._randomSeeds[9],l=this._rand.getFloat(),h=this._rand.getFloat(),d=this._rand.getFloat(),this._randomSeeds[9]=this._rand.seed):g=!1}else g=!1;var S=this._colorOverLifetime&&this._colorOverLifetime.enable;S?3===this._colorOverLifetime.color.type?this.autoRandomSeed?c=Math.random():(this._rand.seed=this._randomSeeds[10],c=this._rand.getFloat(),this._randomSeeds[10]=this._rand.seed):S=!1:S=!1;var T=this._sizeOverLifetime&&this._sizeOverLifetime.enable;T?3===this._sizeOverLifetime.size.type?this.autoRandomSeed?u=Math.random():(this._rand.seed=this._randomSeeds[11],u=this._rand.getFloat(),this._randomSeeds[11]=this._rand.seed):T=!1:T=!1;var E=this._rotationOverLifetime&&this._rotationOverLifetime.enable;if(E){var x=this._rotationOverLifetime.angularVelocity.type;2===x||3===x?this.autoRandomSeed?_=Math.random():(this._rand.seed=this._randomSeeds[12],_=this._rand.getFloat(),this._randomSeeds[12]=this._rand.seed):E=!1}else E=!1;var A=this._textureSheetAnimation&&this._textureSheetAnimation.enable;A?3===this._textureSheetAnimation.frame.type?this.autoRandomSeed?m=Math.random():(this._rand.seed=this._randomSeeds[15],m=this._rand.getFloat(),this._randomSeeds[15]=this._rand.seed):A=!1:A=!1;var D,R,M,C,v,y,I=this._firstFreeElement*this._floatCountPerVertex*this._vertexStride,L=Gt.startUVInfo[0],B=Gt.startUVInfo[1],O=Gt.startUVInfo[2],w=Gt.startUVInfo[3],P=this._ownerRender;if(4===P.renderMode){var N=P.mesh._vertexBuffer;D=N.getFloat32Data();var V=N.vertexDeclaration;M=V.getVertexElementByUsage(t.VertexMesh.MESH_POSITION0)._offset/4;var b=V.getVertexElementByUsage(t.VertexMesh.MESH_COLOR0);C=b?b._offset/4:-1;var F=V.getVertexElementByUsage(t.VertexMesh.MESH_TEXTURECOORDINATE0);v=F?F._offset/4:-1,R=V.vertexStride/4,y=0}for(var U=I,G=I+this._floatCountPerVertex*this._vertexStride;U<G;U+=this._floatCountPerVertex){var H;if(4===P.renderMode){H=U;var z=R*y++,k=z+M;this._vertices[H++]=D[k++],this._vertices[H++]=D[k++],this._vertices[H++]=D[k],-1===C?(this._vertices[H++]=1,this._vertices[H++]=1,this._vertices[H++]=1,this._vertices[H++]=1):(k=z+C,this._vertices[H++]=D[k++],this._vertices[H++]=D[k++],this._vertices[H++]=D[k++],this._vertices[H++]=D[k]),-1===v?(this._vertices[H++]=0,this._vertices[H++]=0):(k=z+v,this._vertices[H++]=D[k++],this._vertices[H++]=D[k])}else H=U+4;switch(this._vertices[H++]=e.x,this._vertices[H++]=e.y,this._vertices[H++]=e.z,this._vertices[H++]=Gt.startLifeTime,this._vertices[H++]=r.x,this._vertices[H++]=r.y,this._vertices[H++]=r.z,this._vertices[H++]=n,this._vertices[H++]=Gt.startColor.x,this._vertices[H++]=Gt.startColor.y,this._vertices[H++]=Gt.startColor.z,this._vertices[H++]=Gt.startColor.w,this._vertices[H++]=Gt.startSize[0],this._vertices[H++]=Gt.startSize[1],this._vertices[H++]=Gt.startSize[2],this._vertices[H++]=Gt.startRotation[0],this._vertices[H++]=Gt.startRotation[1],this._vertices[H++]=Gt.startRotation[2],this._vertices[H++]=o,S&&(this._vertices[H+1]=c),T&&(this._vertices[H+2]=u),E&&(this._vertices[H+3]=_),A&&(this._vertices[H+4]=m),g&&(this._vertices[H+5]=l,this._vertices[H+6]=h,this._vertices[H+7]=d),this.simulationSpace){case 0:H+=8,this._vertices[H++]=i.x,this._vertices[H++]=i.y,this._vertices[H++]=i.z,this._vertices[H++]=s.x,this._vertices[H++]=s.y,this._vertices[H++]=s.z,this._vertices[H++]=s.w;break;case 1:break;default:throw new Error("ShurikenParticleMaterial: SimulationSpace value is invalid.")}H=U+this._simulationUV_Index,this._vertices[H++]=O,this._vertices[H++]=w,this._vertices[H++]=L,this._vertices[H]=B}return this._firstFreeElement=a,!0}addNewParticlesToVertexBuffer(){var e,t=this._vertexStride*this._floatCountPerVertex*4;this._firstNewElement<this._firstFreeElement?(e=this._firstNewElement*t,this._vertexBuffer.setData(this._vertices.buffer,e,e,(this._firstFreeElement-this._firstNewElement)*t)):(e=this._firstNewElement*t,this._vertexBuffer.setData(this._vertices.buffer,e,e,(this._bufferMaxParticles-this._firstNewElement)*t),this._firstFreeElement>0&&this._vertexBuffer.setData(this._vertices.buffer,0,0,this._firstFreeElement*t)),this._firstNewElement=this._firstFreeElement}_getType(){return Ht._type}_prepareRender(e){return this._updateMask!=t.Stat.loopCount&&(this._updateMask=t.Stat.loopCount,this._updateEmission(),this._firstNewElement!=this._firstFreeElement&&this.addNewParticlesToVertexBuffer(),this._drawCounter++),this._firstActiveElement!=this._firstFreeElement}_updateRenderParams(e){var t;this.clearRenderParams(),this._firstActiveElement<this._firstFreeElement?(t=(this._firstFreeElement-this._firstActiveElement)*this._indexStride,this.setDrawElemenParams(t,2*this._firstActiveElement*this._indexStride)):(t=(this._bufferMaxParticles-this._firstActiveElement)*this._indexStride,this.setDrawElemenParams(t,2*this._firstActiveElement*this._indexStride),this._firstFreeElement>0&&(t=this._firstFreeElement*this._indexStride,this.setDrawElemenParams(t,0)))}play(){if(this._burstsIndex=0,this._isEmitting=!0,this._isPlaying=!0,this._isPaused=!1,this._emissionTime=0,this._emissionDistance=0,this._owner.transform.position.cloneTo(this._emissionLastPosition),this._totalDelayTime=0,!this.autoRandomSeed)for(var e=0,r=this._randomSeeds.length;e<r;e++)this._randomSeeds[e]=this.randomSeed[0]+Ht._RANDOMOFFSET[e];switch(this.startDelayType){case 0:this._playStartDelay=this.startDelay;break;case 1:this.autoRandomSeed?this._playStartDelay=t.MathUtil.lerp(this.startDelayMin,this.startDelayMax,Math.random()):(this._rand.seed=this._randomSeeds[2],this._playStartDelay=t.MathUtil.lerp(this.startDelayMin,this.startDelayMax,this._rand.getFloat()),this._randomSeeds[2]=this._rand.seed);break;default:throw new Error("Utils3D: startDelayType is invalid.")}this._frameRateTime=this._currentTime+this._playStartDelay,this._startUpdateLoopCount=t.Stat.loopCount}pause(){this._isPaused=!0}simulate(e,t=!0){this._simulateUpdate=!0,t?this._updateParticlesSimulationRestart(e):(this._isPaused=!1,this._updateParticles(e)),this.pause()}stop(){this._burstsIndex=0,this._isEmitting=!1,this._emissionTime=0}cloneTo(e){var t=e;t._useCustomBounds=this._useCustomBounds,this._customBounds&&this._customBounds.cloneTo(t._customBounds),t.duration=this.duration,t.looping=this.looping,t.prewarm=this.prewarm,t.startDelayType=this.startDelayType,t.startDelay=this.startDelay,t.startDelayMin=this.startDelayMin,t.startDelayMax=this.startDelayMax,t._maxStartLifetime=this._maxStartLifetime,t.startLifetimeType=this.startLifetimeType,t.startLifetimeConstant=this.startLifetimeConstant,this.startLifeTimeGradient.cloneTo(t.startLifeTimeGradient),t.startLifetimeConstantMin=this.startLifetimeConstantMin,t.startLifetimeConstantMax=this.startLifetimeConstantMax,this.startLifeTimeGradientMin.cloneTo(t.startLifeTimeGradientMin),this.startLifeTimeGradientMax.cloneTo(t.startLifeTimeGradientMax),t.startSpeedType=this.startSpeedType,t.startSpeedConstant=this.startSpeedConstant,t.startSpeedConstantMin=this.startSpeedConstantMin,t.startSpeedConstantMax=this.startSpeedConstantMax,t.dragType=this.dragType,t.dragConstant=this.dragConstant,t.dragSpeedConstantMax=this.dragSpeedConstantMax,t.dragSpeedConstantMin=this.dragSpeedConstantMin,t.threeDStartSize=this.threeDStartSize,t.startSizeType=this.startSizeType,t.startSizeConstant=this.startSizeConstant,this.startSizeConstantSeparate.cloneTo(t.startSizeConstantSeparate),t.startSizeConstantMin=this.startSizeConstantMin,t.startSizeConstantMax=this.startSizeConstantMax,this.startSizeConstantMinSeparate.cloneTo(t.startSizeConstantMinSeparate),this.startSizeConstantMaxSeparate.cloneTo(t.startSizeConstantMaxSeparate),t.threeDStartRotation=this.threeDStartRotation,t.startRotationType=this.startRotationType,t.startRotationConstant=this.startRotationConstant,this.startRotationConstantSeparate.cloneTo(t.startRotationConstantSeparate),t.startRotationConstantMin=this.startRotationConstantMin,t.startRotationConstantMax=this.startRotationConstantMax,this.startRotationConstantMinSeparate.cloneTo(t.startRotationConstantMinSeparate),this.startRotationConstantMaxSeparate.cloneTo(t.startRotationConstantMaxSeparate),t.randomizeRotationDirection=this.randomizeRotationDirection,t.startColorType=this.startColorType,this.startColorConstant.cloneTo(t.startColorConstant),this.startColorConstantMin.cloneTo(t.startColorConstantMin),this.startColorConstantMax.cloneTo(t.startColorConstantMax),t.gravityModifier=this.gravityModifier,t.simulationSpace=this.simulationSpace,t.simulationSpeed=this.simulationSpeed,t.scaleMode=this.scaleMode,t.playOnAwake=this.playOnAwake,t.autoRandomSeed=this.autoRandomSeed,t.randomSeed[0]=this.randomSeed[0],t.maxParticles=this.maxParticles,this._emission&&(t._emission=this._emission.clone()),this.shape&&(t.shape=this.shape.clone()),this.velocityOverLifetime&&(t.velocityOverLifetime=this.velocityOverLifetime.clone()),this.colorOverLifetime&&(t.colorOverLifetime=this.colorOverLifetime.clone()),this.sizeOverLifetime&&(t.sizeOverLifetime=this.sizeOverLifetime.clone()),this.rotationOverLifetime&&(t.rotationOverLifetime=this.rotationOverLifetime.clone()),this.textureSheetAnimation&&(t.textureSheetAnimation=this.textureSheetAnimation.clone()),t.isPerformanceMode=this.isPerformanceMode,t._isEmitting=this._isEmitting,t._isPlaying=this._isPlaying,t._isPaused=this._isPaused,t._playStartDelay=this._playStartDelay,t._frameRateTime=this._frameRateTime,t._emissionTime=this._emissionTime,t._totalDelayTime=this._totalDelayTime,t._burstsIndex=this._burstsIndex}clone(){var e=new Ht(null);return this.cloneTo(e),e}}Ht._RANDOMOFFSET=new Uint32Array([592910910,3276756734,322376503,306581307,1793934638,3737431713,2527743459,2368504881,4085612399,3774601268,326370691,1494990940,1089181156,3159510623,2941263940,2786374529,271901988,4233252447]),Ht.halfKSqrtOf2=.71,Ht.g=9.8,Ht._maxElapsedTime=1/3,Ht._tempVector30=new t.Vector3,Ht._tempVector31=new t.Vector3,Ht._tempVector32=new t.Vector3,Ht._tempVector33=new t.Vector3,Ht._tempVector34=new t.Vector3,Ht._tempVector35=new t.Vector3,Ht._tempVector36=new t.Vector3,Ht._tempVector37=new t.Vector3,Ht._tempPosition=new t.Vector3,Ht._tempDirection=new t.Vector3,Ht._type=Z._typeCounter++;class zt extends Ht{constructor(e){super(e,t.MeshTopology.Triangles,t.DrawType.DrawElementInstance),this._instanceParticleVertexBuffer=null,this._instanceVertex=null}_initMeshVertex(e,r){let n=r._vertexBuffer,a=n.getFloat32Data(),i=n.vertexDeclaration,s=i.getVertexElementByUsage(t.VertexMesh.MESH_POSITION0)._offset/4,o=i.getVertexElementByUsage(t.VertexMesh.MESH_COLOR0),l=o?o._offset/4:-1,h=i.getVertexElementByUsage(t.VertexMesh.MESH_TEXTURECOORDINATE0),d=h?h._offset/4:-1,c=i.vertexStride/4,u=0,_=r.vertexCount,m=this._vertexBuffer.vertexDeclaration.vertexStride/4;for(let t=0;t<_;t++){let r=t*m,n=c*u++,i=n+s;if(e[r++]=a[i++],e[r++]=a[i++],e[r++]=a[i++],-1==l)e[r++]=1,e[r++]=1,e[r++]=1,e[r++]=1;else{let t=n+l;e[r++]=a[t++],e[r++]=a[t++],e[r++]=a[t++],e[r++]=a[t++]}if(-1==d)e[r++]=0,e[r++]=0;else{let t=n+d;e[r++]=a[t++],e[r++]=a[t++]}}}_initBufferDatas(){this._vertexBuffer&&(this._vertexBuffer.destroy(),this._instanceParticleVertexBuffer.destroy(),this._indexBuffer.destroy(),this._vertexBuffer=null,this._instanceParticleVertexBuffer=null,this._indexBuffer=null);let e=this._ownerRender,r=e.renderMode;if(!(-1==r||this.maxParticles<=0))if(4==r){let r=e.mesh;if(r){let e=Vt.vertexInstanceMeshDeclaration,n=Vt.vertexInstanceParticleDeclaration;this._meshIndexCount=r.indexCount,this._simulationUV_Index=n.getVertexElementByUsage(Pt.PARTICLE_SIMULATIONUV).offset/4,this._floatCountPerParticleData=n.vertexStride/4,this._startLifeTimeIndex=n.getVertexElementByUsage(Pt.PARTICLE_SHAPEPOSITIONSTARTLIFETIME)._offset/4+3,this._timeIndex=n.getVertexElementByUsage(Pt.PARTICLE_DIRECTIONTIME)._offset/4+3;let a=r.indexCount;this._indexBuffer=A.renderOBJCreate.createIndexBuffer3D(r.indexFormat,a,t.BufferUsage.Static,!1),this._indexBuffer.setData(r._indexBuffer.getData());let i=r.vertexCount,s=e.vertexStride*i;this._vertexBuffer=A.renderOBJCreate.createVertexBuffer3D(s,t.BufferUsage.Static,!1),this._vertexBuffer.vertexDeclaration=e;let o=new Float32Array(s/4);this._initMeshVertex(o,r),this._vertexBuffer.setData(o.buffer);let l=this._bufferMaxParticles*n.vertexStride;this._instanceVertex=new Float32Array(l/4),this._instanceParticleVertexBuffer=A.renderOBJCreate.createVertexBuffer3D(l,t.BufferUsage.Dynamic,!1),this._instanceParticleVertexBuffer.vertexDeclaration=n,this._instanceParticleVertexBuffer.setData(this._instanceVertex.buffer),this._instanceParticleVertexBuffer.instanceBuffer=!0,this._bufferState.applyState([this._vertexBuffer,this._instanceParticleVertexBuffer],this._indexBuffer)}}else{let e=Nt.vertexInstanceMeshDeclaration,r=Nt.vertexInstanceParticleDeclaration;this._meshIndexCount=6,this._simulationUV_Index=r.getVertexElementByUsage(Pt.PARTICLE_SIMULATIONUV).offset/4,this._floatCountPerParticleData=r.vertexStride/4,this._startLifeTimeIndex=r.getVertexElementByUsage(Pt.PARTICLE_SHAPEPOSITIONSTARTLIFETIME)._offset/4+3,this._timeIndex=r.getVertexElementByUsage(Pt.PARTICLE_DIRECTIONTIME)._offset/4+3;let n=Nt.billboardIndexArray,a=n.length;this._indexBuffer=A.renderOBJCreate.createIndexBuffer3D(t.IndexFormat.UInt16,a,t.BufferUsage.Static,!1),this._indexBuffer.setData(n);let i=this._meshIndexCount*e.vertexStride;this._vertexBuffer=A.renderOBJCreate.createVertexBuffer3D(i,t.BufferUsage.Static,!1),this._vertexBuffer.vertexDeclaration=e,this._vertexBuffer.setData(Nt.billboardVertexArray.buffer);let s=this._bufferMaxParticles*r.vertexStride;this._instanceVertex=new Float32Array(s/4),this._instanceParticleVertexBuffer=A.renderOBJCreate.createVertexBuffer3D(s,t.BufferUsage.Dynamic,!1),this._instanceParticleVertexBuffer.vertexDeclaration=r,this._instanceParticleVertexBuffer.setData(this._instanceVertex.buffer),this._instanceParticleVertexBuffer.instanceBuffer=!0,this._bufferState.applyState([this._vertexBuffer,this._instanceParticleVertexBuffer],this._indexBuffer)}}_retireActiveParticles(){if(null==this._instanceParticleVertexBuffer)return;let e=this._firstActiveElement;for(;this._firstActiveElement!=this._firstNewElement;){let e=this._firstActiveElement*this._floatCountPerParticleData,t=e+this._timeIndex;if(this._currentTime-this._instanceVertex[t]+1e-4<this._instanceVertex[e+this._startLifeTimeIndex])break;this._instanceVertex[t]=this._drawCounter,this._firstActiveElement++,this._firstActiveElement>=this._bufferMaxParticles&&(this._firstActiveElement=0)}if(this._firstActiveElement!=e){let e=4*this._floatCountPerParticleData;if(this._firstActiveElement<this._firstFreeElement){let t=this._firstActiveElement*e;this._instanceParticleVertexBuffer.setData(this._instanceVertex.buffer,0,t,(this._firstFreeElement-this._firstActiveElement)*e)}else{let t=this._firstActiveElement*e,r=this._bufferMaxParticles-this._firstActiveElement;this._instanceParticleVertexBuffer.setData(this._instanceVertex.buffer,0,t,r*e),this._firstFreeElement>0&&this._instanceParticleVertexBuffer.setData(this._instanceVertex.buffer,r*e,0,this._firstFreeElement*e)}}}_freeRetiredParticles(){for(;this._firstRetiredElement!=this._firstActiveElement;)this._drawCounter,this._instanceVertex[this._firstRetiredElement*this._floatCountPerParticleData+this._timeIndex],this._firstRetiredElement++,this._firstRetiredElement>=this._bufferMaxParticles&&(this._firstRetiredElement=0)}addParticle(e,r,n){t.Vector3.normalize(r,r);let a=this._firstFreeElement+1;if(a>=this._bufferMaxParticles&&(a=0),a==this._firstRetiredElement)return!1;let i,s,o=this._owner.transform;if(Gt.create(this,this._ownerRender),this._currentTime-n>=Gt.startLifeTime)return!0;0==this.simulationSpace&&(i=o.position,s=o.rotation);let l,h,d,c=0;switch(this.startSpeedType){case 0:c=this.startSpeedConstant;break;case 2:this.autoRandomSeed?c=t.MathUtil.lerp(this.startSpeedConstantMin,this.startSpeedConstantMax,Math.random()):(this._rand.seed=this._randomSeeds[8],c=t.MathUtil.lerp(this.startSpeedConstantMin,this.startSpeedConstantMax,this._rand.getFloat()),this._randomSeeds[8]=this._rand.seed)}let u,_=this._velocityOverLifetime&&this._velocityOverLifetime.enable;if(_){let e=this._velocityOverLifetime.velocity.type;2==e||3==e?this.autoRandomSeed?(l=Math.random(),h=Math.random(),d=Math.random()):(this._rand.seed=this._randomSeeds[9],l=this._rand.getFloat(),h=this._rand.getFloat(),d=this._rand.getFloat(),this._randomSeeds[9]=this._rand.seed):_=!1}else _=!1;let m,f=this._colorOverLifetime&&this._colorOverLifetime.enable;if(f){3==this._colorOverLifetime.color.type?this.autoRandomSeed?u=Math.random():(this._rand.seed=this._randomSeeds[10],u=this._rand.getFloat(),this._randomSeeds[10]=this._rand.seed):f=!1}else f=!1;let g,p=this._sizeOverLifetime&&this._sizeOverLifetime.enable;if(p){3==this._sizeOverLifetime.size.type?this.autoRandomSeed?m=Math.random():(this._rand.seed=this._randomSeeds[11],m=this._rand.getFloat(),this.randomSeed[11]=this._rand.seed):p=!1}else p=!1;let S,T=this._rotationOverLifetime&&this._rotationOverLifetime.enable;if(T){let e=this._rotationOverLifetime.angularVelocity.type;2==e||3==e?this.autoRandomSeed?g=Math.random():(this._rand.seed=this._randomSeeds[12],g=this._rand.getFloat(),this._randomSeeds[12]=this._rand.seed):T=!1}else T=!1;let E=this._textureSheetAnimation&&this._textureSheetAnimation.enable;if(E){3==this._textureSheetAnimation.frame.type?this.autoRandomSeed?S=Math.random():(this._rand.seed=this._randomSeeds[15],S=this._rand.getFloat(),this._randomSeeds[15]=this._rand.seed):E=!1}else E=!1;let x=Gt.startUVInfo[0],A=Gt.startUVInfo[1],D=Gt.startUVInfo[2],R=Gt.startUVInfo[3];this._ownerRender.renderMode;let M=this._firstFreeElement*this._floatCountPerParticleData,C=M;switch(this._instanceVertex[C++]=e.x,this._instanceVertex[C++]=e.y,this._instanceVertex[C++]=e.z,this._instanceVertex[C++]=Gt.startLifeTime,this._instanceVertex[C++]=r.x,this._instanceVertex[C++]=r.y,this._instanceVertex[C++]=r.z,this._instanceVertex[C++]=n,this._instanceVertex[C++]=Gt.startColor.x,this._instanceVertex[C++]=Gt.startColor.y,this._instanceVertex[C++]=Gt.startColor.z,this._instanceVertex[C++]=Gt.startColor.w,this._instanceVertex[C++]=Gt.startSize[0],this._instanceVertex[C++]=Gt.startSize[1],this._instanceVertex[C++]=Gt.startSize[2],this._instanceVertex[C++]=Gt.startRotation[0],this._instanceVertex[C++]=Gt.startRotation[1],this._instanceVertex[C++]=Gt.startRotation[2],this._instanceVertex[C++]=c,f&&(this._instanceVertex[C+1]=u),p&&(this._instanceVertex[C+2]=m),T&&(this._instanceVertex[C+3]=g),E&&(this._instanceVertex[C+4]=S),_&&(this._instanceVertex[C+5]=l,this._instanceVertex[C+6]=h,this._instanceVertex[C+7]=d),this.simulationSpace){case 0:C+=8,this._instanceVertex[C++]=i.x,this._instanceVertex[C++]=i.y,this._instanceVertex[C++]=i.z,this._instanceVertex[C++]=s.x,this._instanceVertex[C++]=s.y,this._instanceVertex[C++]=s.z,this._instanceVertex[C++]=s.w;break;case 1:break;default:throw new Error("ShurikenParticleMaterial: SimulationSpace value is invalid.")}return C=M+this._simulationUV_Index,this._instanceVertex[C++]=D,this._instanceVertex[C++]=R,this._instanceVertex[C++]=x,this._instanceVertex[C++]=A,this._firstFreeElement=a,!0}addNewParticlesToVertexBuffer(){let e=4*this._floatCountPerParticleData;if(this._firstActiveElement<this._firstFreeElement){let t=this._firstActiveElement*e;this._instanceParticleVertexBuffer.setData(this._instanceVertex.buffer,0,t,(this._firstFreeElement-this._firstActiveElement)*e)}else{let t=this._firstActiveElement*e,r=this._bufferMaxParticles-this._firstActiveElement;this._instanceParticleVertexBuffer.setData(this._instanceVertex.buffer,0,t,r*e),this._firstFreeElement>0&&this._instanceParticleVertexBuffer.setData(this._instanceVertex.buffer,r*e,0,this._firstFreeElement*e)}this._firstNewElement=this._firstFreeElement}_updateRenderParams(e){if(this.clearRenderParams(),this._firstActiveElement<this._firstFreeElement){let e=this._firstFreeElement-this._firstActiveElement;this.setDrawElemenParams(this._meshIndexCount,0),this.instanceCount=e}else{let e=this._bufferMaxParticles-this._firstActiveElement;this._firstFreeElement>0&&(e+=this._firstFreeElement),this.setDrawElemenParams(this._meshIndexCount,0),this.instanceCount=e}}destroy(){super.destroy(),this._indexBuffer&&this._indexBuffer.destroy(),this._vertexBuffer&&this._vertexBuffer.destroy(),this._instanceParticleVertexBuffer&&this._instanceParticleVertexBuffer.destroy(),this._instanceVertex=null,this._meshIndexCount=null,this._meshFloatCountPreVertex=null}}class kt extends t.Material{static __initDefine__(){kt.SHADERDEFINE_DIFFUSEMAP=t.Shader3D.getDefineByName("DIFFUSEMAP"),kt.SHADERDEFINE_TINTCOLOR=t.Shader3D.getDefineByName("TINTCOLOR"),kt.SHADERDEFINE_ADDTIVEFOG=t.Shader3D.getDefineByName("ADDTIVEFOG"),kt.DIFFUSETEXTURE=t.Shader3D.propertyNameToID("u_texture"),kt.TINTCOLOR=t.Shader3D.propertyNameToID("u_Tintcolor"),kt.TILINGOFFSET=t.Shader3D.propertyNameToID("u_TilingOffset")}get color(){return this._shaderValues.getColor(kt.TINTCOLOR)}set color(e){e?this._shaderValues.addDefine(kt.SHADERDEFINE_TINTCOLOR):this._shaderValues.removeDefine(kt.SHADERDEFINE_TINTCOLOR),this._shaderValues.setColor(kt.TINTCOLOR,e)}get tilingOffset(){return this._shaderValues.getVector(kt.TILINGOFFSET)}set tilingOffset(e){e?this._shaderValues.setVector(kt.TILINGOFFSET,e):this._shaderValues.getVector(kt.TILINGOFFSET).setValue(1,1,0,0)}get texture(){return this._shaderValues.getTexture(kt.DIFFUSETEXTURE)}set texture(e){e?this._shaderValues.addDefine(kt.SHADERDEFINE_DIFFUSEMAP):this._shaderValues.removeDefine(kt.SHADERDEFINE_DIFFUSEMAP),this._shaderValues.setTexture(kt.DIFFUSETEXTURE,e)}constructor(){super(),this.setShaderName("PARTICLESHURIKEN"),this.renderMode=kt.RENDERMODE_ALPHABLENDED}clone(){var e=new kt;return this.cloneTo(e),e}set renderMode(e){switch(e){case kt.RENDERMODE_ADDTIVE:this.renderQueue=t.Material.RENDERQUEUE_TRANSPARENT,this.depthWrite=!1,this.cull=Ee.CULL_NONE,this.blend=Ee.BLEND_ENABLE_ALL,this.blendSrc=Ee.BLENDPARAM_SRC_ALPHA,this.blendDst=Ee.BLENDPARAM_ONE,this.alphaTest=!1,this._shaderValues.addDefine(kt.SHADERDEFINE_ADDTIVEFOG);break;case kt.RENDERMODE_ALPHABLENDED:this.renderQueue=t.Material.RENDERQUEUE_TRANSPARENT,this.depthWrite=!1,this.cull=Ee.CULL_NONE,this.blend=Ee.BLEND_ENABLE_ALL,this.blendSrc=Ee.BLENDPARAM_SRC_ALPHA,this.blendDst=Ee.BLENDPARAM_ONE_MINUS_SRC_ALPHA,this.alphaTest=!1,this._shaderValues.removeDefine(kt.SHADERDEFINE_ADDTIVEFOG);break;default:throw new Error("ShurikenParticleMaterial : renderMode value error.")}}get tilingOffsetX(){return this._MainTex_STX}set tilingOffsetX(e){this._MainTex_STX=e}get tilingOffsetY(){return this._MainTex_STY}set tilingOffsetY(e){this._MainTex_STY=e}get tilingOffsetZ(){return this._MainTex_STZ}set tilingOffsetZ(e){this._MainTex_STZ=e}get tilingOffsetW(){return this._MainTex_STW}set tilingOffsetW(e){this._MainTex_STW=e}get _TintColor(){return this.color}set _TintColor(e){this.color=e}get _TintColorR(){return this.color.r}set _TintColorR(e){this.color.r=e}get _TintColorG(){return this.color.g}set _TintColorG(e){this.color.g=e}get _TintColorB(){return this.color.b}set _TintColorB(e){this.color.b=e}get _TintColorA(){return this.color.a}set _TintColorA(e){this.color.a=e}get _MainTex_ST(){return this._shaderValues.getVector(kt.TILINGOFFSET)}set _MainTex_ST(e){var t=this._shaderValues.getVector(kt.TILINGOFFSET);t.setValue(e.x,e.y,e.z,e.w),this.tilingOffset=t}get _MainTex_STX(){return this._shaderValues.getVector(kt.TILINGOFFSET).x}set _MainTex_STX(e){var t=this._shaderValues.getVector(kt.TILINGOFFSET);t.x=e,this.tilingOffset=t}get _MainTex_STY(){return this._shaderValues.getVector(kt.TILINGOFFSET).y}set _MainTex_STY(e){var t=this._shaderValues.getVector(kt.TILINGOFFSET);t.y=e,this.tilingOffset=t}get _MainTex_STZ(){return this._shaderValues.getVector(kt.TILINGOFFSET).z}set _MainTex_STZ(e){var t=this._shaderValues.getVector(kt.TILINGOFFSET);t.z=e,this.tilingOffset=t}get _MainTex_STW(){return this._shaderValues.getVector(kt.TILINGOFFSET).w}set _MainTex_STW(e){var t=this._shaderValues.getVector(kt.TILINGOFFSET);t.w=e,this.tilingOffset=t}get colorR(){return this._TintColorR}set colorR(e){this._TintColorR=e}get colorG(){return this._TintColorG}set colorG(e){this._TintColorG=e}get colorB(){return this._TintColorB}set colorB(e){this._TintColorB=e}get colorA(){return this._TintColorA}set colorA(e){this._TintColorA=e}}kt.RENDERMODE_ALPHABLENDED=0,kt.RENDERMODE_ADDTIVE=1;class Wt extends j{get particleSystem(){return this._particleSystem}get renderMode(){return this._renderMode}set renderMode(e){if(this._renderMode!==e){var t=this._baseRenderNode.shaderData;switch(this._renderMode){case 0:t.removeDefine(Ut.SHADERDEFINE_RENDERMODE_BILLBOARD);break;case 1:t.removeDefine(Ut.SHADERDEFINE_RENDERMODE_STRETCHEDBILLBOARD);break;case 2:t.removeDefine(Ut.SHADERDEFINE_RENDERMODE_HORIZONTALBILLBOARD);break;case 3:t.removeDefine(Ut.SHADERDEFINE_RENDERMODE_VERTICALBILLBOARD);break;case 4:t.removeDefine(Ut.SHADERDEFINE_RENDERMODE_MESH)}switch(this._renderMode=e,e){case 0:t.addDefine(Ut.SHADERDEFINE_RENDERMODE_BILLBOARD);break;case 1:t.addDefine(Ut.SHADERDEFINE_RENDERMODE_STRETCHEDBILLBOARD);break;case 2:t.addDefine(Ut.SHADERDEFINE_RENDERMODE_HORIZONTALBILLBOARD);break;case 3:t.addDefine(Ut.SHADERDEFINE_RENDERMODE_VERTICALBILLBOARD);break;case 4:t.addDefine(Ut.SHADERDEFINE_RENDERMODE_MESH);break;default:throw new Error("ShurikenParticleRender: unknown renderMode Value.")}var r=this._particleSystem;r&&r._initBufferDatas()}}get mesh(){return this._mesh}set mesh(e){this._mesh!==e&&(this._mesh&&this._mesh._removeReference(),this._mesh=e,e&&e._addReference(),this._particleSystem._initBufferDatas())}constructor(){super(),this._finalGravity=new t.Vector3,this._dragConstant=new t.Vector2,this._mesh=null,this.stretchedBillboardCameraSpeedScale=0,this.stretchedBillboardSpeedScale=0,this.stretchedBillboardLengthScale=2,this.renderMode=0,this._baseRenderNode.renderNodeType=e.BaseRenderType.ParticleRender}_getcommonUniformMap(){return["Sprite3D","ShurikenSprite3D"]}_onAdded(){super._onAdded(),t.LayaGL.renderEngine.getCapable(t.RenderCapable.DrawElement_Instance)?this._particleSystem=new zt(this):this._particleSystem=new Ht(this);var e=this._renderElements[0]=new te;e.setTransform(this.owner._transform),e.render=this,e.setGeometry(this._particleSystem),e.material=kt.defaultMaterial,this._setRenderElements()}_onEnable(){super._onEnable(),t.Stat.particleRenderNode++,this._particleSystem.playOnAwake&&t.LayaEnv.isPlaying&&this._particleSystem.play()}_onDisable(){super._onDisable(),t.Stat.particleRenderNode--,this._particleSystem.isAlive&&this._particleSystem.simulate(0,!0)}_calculateBoundingBox(){var e=this._particleSystem;if(e._useCustomBounds)e.customBounds._tranform(this.owner.transform.worldMatrix,this._bounds);else if(e._simulationSupported()){if(e._generateBounds(),e._bounds._tranform(this.owner.transform.worldMatrix,this._bounds),0!=e.gravityModifier){var t=this._bounds.getMax(),r=this._bounds.getMin(),n=e._gravityOffset;t.y-=n.x,r.y-=n.y,this._bounds.setMax(t),this._bounds.setMin(r)}}else{(r=this._bounds.getMin()).setValue(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE),this._bounds.setMin(r),(t=this._bounds.getMax()).setValue(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE),this._bounds.setMax(t)}}_needRender(e,r){return!!t.Stat.enableParticle&&(!e||!!e.intersects(this.bounds)&&!!this._particleSystem.isAlive)}_renderUpdate(r){var n=this._particleSystem,a=this._baseRenderNode.shaderData,i=this.owner.transform;switch(n.simulationSpace){case 0:break;case 1:a.setVector3(Ut.WORLDPOSITION,i.position),a.setShaderData(Ut.WORLDROTATION,e.ShaderDataType.Vector4,i.rotation);break;default:throw new Error("ShurikenParticleMaterial: SimulationSpace value is invalid.")}switch(n.shape&&n.shape.enable?a.setBool(Ut.SHAPE,!0):a.setBool(Ut.SHAPE,!1),n.scaleMode){case 0:var s=i.getWorldLossyScale();a.setVector3(Ut.POSITIONSCALE,s),a.setVector3(Ut.SIZESCALE,s);break;case 1:var o=i.localScale;a.setVector3(Ut.POSITIONSCALE,o),a.setVector3(Ut.SIZESCALE,o);break;case 2:a.setVector3(Ut.POSITIONSCALE,i.getWorldLossyScale()),a.setVector3(Ut.SIZESCALE,t.Vector3.ONE)}switch(n.dragType){case 0:this._dragConstant.setValue(n.dragSpeedConstantMin,n.dragSpeedConstantMin),a.setVector2(Ut.DRAG,this._dragConstant);break;case 2:this._dragConstant.setValue(n.dragSpeedConstantMin,n.dragSpeedConstantMax),a.setVector2(Ut.DRAG,this._dragConstant);break;default:this._dragConstant.setValue(0,0)}t.Vector3.scale(Wt.gravity,n.gravityModifier,this._finalGravity),a.setVector3(Ut.GRAVITY,this._finalGravity),a.setInt(Ut.SIMULATIONSPACE,n.simulationSpace),a.setBool(Ut.THREEDSTARTROTATION,n.threeDStartRotation),a.setInt(Ut.SCALINGMODE,n.scaleMode),a.setNumber(Ut.STRETCHEDBILLBOARDLENGTHSCALE,this.stretchedBillboardLengthScale),a.setNumber(Ut.STRETCHEDBILLBOARDSPEEDSCALE,this.stretchedBillboardSpeedScale),a.setNumber(Ut.CURRENTTIME,n._currentTime)}renderUpdate(e){this._renderElements.forEach((t=>{t._renderElementOBJ.isRender=t._geometry._prepareRender(e),t._geometry._prepareRender(e),t._geometry._updateRenderParams(e)}))}get bounds(){return this.boundsChange&&(this._calculateBoundingBox(),this.boundsChange=!1),this._bounds}_cloneTo(e){let t=e;this._particleSystem.cloneTo(t._particleSystem),t.sharedMaterial=this.sharedMaterial,t.renderMode=this.renderMode,t.mesh=this.mesh,t.stretchedBillboardCameraSpeedScale=this.stretchedBillboardCameraSpeedScale,t.stretchedBillboardSpeedScale=this.stretchedBillboardSpeedScale,t.stretchedBillboardLengthScale=this.stretchedBillboardLengthScale,t.sortingFudge=this.sortingFudge}_onDestroy(){this._mesh&&(this._mesh._removeReference(),this._mesh=null),this._particleSystem.destroy(),this._particleSystem=null,super._onDestroy()}_statAdd(){t.Stat.renderNode++,t.Stat.particleRenderNode++}_statRemove(){t.Stat.renderNode--,t.Stat.particleRenderNode--}}Wt.gravity=new t.Vector3(0,-9.81,0);class Yt extends U{get particleSystem(){return this._particleSystem}get particleRenderer(){return this._render}constructor(){super(null),this._render=this.addComponent(Wt),this._particleSystem=this._render._particleSystem}_parseModule(e,r){for(var n in r)switch(n){case"bases":var a=r.bases;for(var i in a)e[i]=a[i];break;case"vector2s":var s=r.vector2s;for(var i in s){var o=e[i],l=s[i];o.setValue(l[0],l[1]),e[i]=o}break;case"vector3s":var h=r.vector3s;for(var i in h){var d=e[i],c=h[i];d.setValue(c[0],c[1],c[2]),e[i]=d}break;case"vector4s":var u=r.vector4s;for(var i in u){var _=e[i],m=u[i];_.setValue(m[0],m[1],m[2],m[3]),e[i]=_}break;case"gradientDataNumbers":var f=r.gradientDataNumbers;for(var i in f){for(var g=e[i],p=r[i],S=0,T=p.length;S<T;S++){var E=p[S];g.add(E.key,E.value)}e[i]=g}break;case"resources":var x=r.resources;for(var i in x){let r=t.Loader.getRes(x[i]);r&&r instanceof t.Texture&&(r=r.bitmap),e[i]=r}break;case"bursts":var A=r.bursts;for(S=0,T=A.length;S<T;S++){var D=A[S];e.addBurst(new ut(D.time,D.min,D.max))}break;case"randomSeed":e.randomSeed[0]=r.randomSeed;break;case"shapeType":case"type":case"color":case"size":case"frame":case"startFrame":case"angularVelocity":case"velocity":break;default:throw"ShurikenParticle3D:unknown type."}}_parse(e,r){if(super._parse(e,r),e.main){var n=this.particleSystem,a=this.particleRenderer;this._parseModule(a,e.renderer),this._parseModule(n,e.main),this._parseModule(n.emission,e.emission);var i=e.shape;if(i){var s;switch(i.shapeType){case 0:s=new It;break;case 1:s=new yt;break;case 2:s=new vt;break;case 3:s=new Mt;break;case 7:s=new Ct;break;default:throw"ShuriKenParticle3D:unknown shape type."}this._parseModule(s,i),n.shape=s}var o=e.velocityOverLifetime;if(o){var l,h=o.velocity;switch(h.type){case 0:var d=h.constant;l=Et.createByConstant(d?new t.Vector3(d[0],d[1],d[2]):new t.Vector3(0,0,0));break;case 1:l=Et.createByGradient(this._initParticleVelocity(h.gradientX),this._initParticleVelocity(h.gradientY),this._initParticleVelocity(h.gradientZ));break;case 2:var c=h.constantMin,u=h.constantMax;l=Et.createByRandomTwoConstant(c?new t.Vector3(c[0],c[1],c[2]):new t.Vector3(0,0,0),u?new t.Vector3(u[0],u[1],u[2]):new t.Vector3(0,0,0));break;case 3:l=Et.createByRandomTwoGradient(this._initParticleVelocity(h.gradientXMin),this._initParticleVelocity(h.gradientXMax),this._initParticleVelocity(h.gradientYMin),this._initParticleVelocity(h.gradientYMax),this._initParticleVelocity(h.gradientZMin),this._initParticleVelocity(h.gradientZMax))}var _=new wt(l);this._parseModule(_,o),n.velocityOverLifetime=_}var m=e.colorOverLifetime;if(m){var f=m.color;let e=f.maxKeyCount;var g;switch(f.type){case 0:var p=f.constant;g=_t.createByConstant(p?new t.Vector4(p[0],p[1],p[2],p[3]):new t.Vector4(0,0,0,0));break;case 1:g=_t.createByGradient(this._initParticleColor(f.gradient,e));break;case 2:var S=f.constantMin,T=f.constantMax;g=_t.createByRandomTwoConstant(S?new t.Vector4(S[0],S[1],S[2],S[3]):new t.Vector4(0,0,0,0),S?new t.Vector4(T[0],T[1],T[2],T[3]):new t.Vector4(0,0,0,0));break;case 3:g=_t.createByRandomTwoGradient(this._initParticleColor(f.gradientMin,e),this._initParticleColor(f.gradientMax,e))}var E=new mt(g);this._parseModule(E,m),n.colorOverLifetime=E}var x=e.sizeOverLifetime;if(x){var A,D=x.size;switch(D.type){case 0:A=D.separateAxes?Tt.createByGradientSeparate(this._initParticleSize(D.gradientX),this._initParticleSize(D.gradientY),this._initParticleSize(D.gradientZ)):Tt.createByGradient(this._initParticleSize(D.gradient));break;case 1:if(D.separateAxes){var R=D.constantMinSeparate,M=D.constantMaxSeparate;A=Tt.createByRandomTwoConstantSeparate(R?new t.Vector3(R[0],R[1],R[2]):new t.Vector3(0,0,0),M?new t.Vector3(M[0],M[1],M[2]):new t.Vector3(0,0,0))}else A=Tt.createByRandomTwoConstant(D.constantMin||0,D.constantMax||0);break;case 2:A=D.separateAxes?Tt.createByRandomTwoGradientSeparate(this._initParticleSize(D.gradientXMin),this._initParticleSize(D.gradientYMin),this._initParticleSize(D.gradientZMin),this._initParticleSize(D.gradientXMax),this._initParticleSize(D.gradientYMax),this._initParticleSize(D.gradientZMax)):Tt.createByRandomTwoGradient(this._initParticleSize(D.gradientMin),this._initParticleSize(D.gradientMax))}var C=new Lt(A);this._parseModule(C,x),n.sizeOverLifetime=C}var v=e.rotationOverLifetime;if(v){var y,I=v.angularVelocity;switch(I.type){case 0:if(I.separateAxes){var L=I.constantSeparate;y=pt.createByConstantSeparate(L?new t.Vector3(L[0],L[1],L[2]):new t.Vector3(0,0,Math.PI/4))}else y=pt.createByConstant(I.constant||Math.PI/4);break;case 1:y=I.separateAxes?pt.createByGradientSeparate(this._initParticleRotation(I.gradientX),this._initParticleRotation(I.gradientY),this._initParticleRotation(I.gradientZ)):pt.createByGradient(this._initParticleRotation(I.gradient));break;case 2:if(I.separateAxes){var B=I.constantMinSeparate,O=I.constantMaxSeparate;y=pt.createByRandomTwoConstantSeparate(B?new t.Vector3(B[0],B[1],B[2]):new t.Vector3(0,0,0),O?new t.Vector3(O[0],O[1],O[2]):new t.Vector3(0,0,Math.PI/4))}else y=pt.createByRandomTwoConstant(I.constantMin||0,I.constantMax||Math.PI/4);break;case 3:I.separateAxes||(y=pt.createByRandomTwoGradient(this._initParticleRotation(I.gradientMin),this._initParticleRotation(I.gradientMax)))}var w=new xt(y);this._parseModule(w,v),n.rotationOverLifetime=w}var P=e.textureSheetAnimation;if(P){var N,V=P.frame;switch(V.type){case 0:N=ft.createByConstant(V.constant);break;case 1:N=ft.createByOverTime(this._initParticleFrame(V.overTime));break;case 2:N=ft.createByRandomTwoConstant(V.constantMin,V.constantMax);break;case 3:N=ft.createByRandomTwoOverTime(this._initParticleFrame(V.overTimeMin),this._initParticleFrame(V.overTimeMax))}var b,F=P.startFrame;switch(F.type){case 0:b=Bt.createByConstant(F.constant);break;case 1:b=Bt.createByRandomTwoConstant(F.constantMin,F.constantMax)}var U=new Ot(N,b);this._parseModule(U,P),n.textureSheetAnimation=U}}else this._parseOld(e)}destroy(e=!0){this._destroyed||super.destroy(e)}_create(){return new B}_parseOld(e){const r=Math.PI/180;var n,a,i,s=this.particleRenderer,o=e.material;o&&(i=t.Loader.getRes(o.path)),s.sharedMaterial=i;var l=e.meshPath;l&&(s.mesh=t.Loader.getRes(l)),s.renderMode=e.renderMode,s.stretchedBillboardCameraSpeedScale=e.stretchedBillboardCameraSpeedScale,s.stretchedBillboardSpeedScale=e.stretchedBillboardSpeedScale,s.stretchedBillboardLengthScale=e.stretchedBillboardLengthScale,s.sortingFudge=e.sortingFudge?e.sortingFudge:0;var h=this.particleSystem;h.isPerformanceMode=e.isPerformanceMode,h.duration=e.duration,h.looping=e.looping,h.prewarm=e.prewarm,h.startDelayType=e.startDelayType,h.startDelay=e.startDelay,h.startDelayMin=e.startDelayMin,h.startDelayMax=e.startDelayMax,h.startLifetimeType=e.startLifetimeType,h.startLifetimeConstant=e.startLifetimeConstant,h.startLifeTimeGradient=Yt._initStartLife(e.startLifetimeGradient),h.startLifetimeConstantMin=e.startLifetimeConstantMin,h.startLifetimeConstantMax=e.startLifetimeConstantMax,h.startLifeTimeGradientMin=Yt._initStartLife(e.startLifetimeGradientMin),h.startLifeTimeGradientMax=Yt._initStartLife(e.startLifetimeGradientMax),h.startSpeedType=e.startSpeedType,h.startSpeedConstant=e.startSpeedConstant,h.startSpeedConstantMin=e.startSpeedConstantMin,h.startSpeedConstantMax=e.startSpeedConstantMax,h.threeDStartSize=e.threeDStartSize,h.startSizeType=e.startSizeType,h.startSizeConstant=e.startSizeConstant;var d=e.startSizeConstantSeparate,c=h.startSizeConstantSeparate;c.x=d[0],c.y=d[1],c.z=d[2],h.startSizeConstantMin=e.startSizeConstantMin,h.startSizeConstantMax=e.startSizeConstantMax;var u=e.startSizeConstantMinSeparate,_=h.startSizeConstantMinSeparate;_.x=u[0],_.y=u[1],_.z=u[2];var m=e.startSizeConstantMaxSeparate,f=h.startSizeConstantMaxSeparate;f.x=m[0],f.y=m[1],f.z=m[2],h.threeDStartRotation=e.threeDStartRotation,h.startRotationType=e.startRotationType,h.startRotationConstant=e.startRotationConstant*r;var g=e.startRotationConstantSeparate,p=h.startRotationConstantSeparate;p.x=g[0]*r,p.y=g[1]*r,p.z=g[2]*r,h.startRotationConstantMin=e.startRotationConstantMin*r,h.startRotationConstantMax=e.startRotationConstantMax*r;var S=e.startRotationConstantMinSeparate,T=h.startRotationConstantMinSeparate;T.x=S[0]*r,T.y=S[1]*r,T.z=S[2]*r;var E=e.startRotationConstantMaxSeparate,x=h.startRotationConstantMaxSeparate;x.x=E[0]*r,x.y=E[1]*r,x.z=E[2]*r,h.randomizeRotationDirection=e.randomizeRotationDirection,h.startColorType=e.startColorType;var A=e.startColorConstant,D=h.startColorConstant;D.x=A[0],D.y=A[1],D.z=A[2],D.w=A[3];var R=e.startColorConstantMin,M=h.startColorConstantMin;M.x=R[0],M.y=R[1],M.z=R[2],M.w=R[3];var C=e.startColorConstantMax,v=h.startColorConstantMax;v.x=C[0],v.y=C[1],v.z=C[2],v.w=C[3],h.gravityModifier=e.gravityModifier,h.simulationSpace=e.simulationSpace,void 0!==e.simulationSpeed&&(h.simulationSpeed=e.simulationSpeed),h.scaleMode=e.scaleMode,h.playOnAwake=e.playOnAwake,h.maxParticles=e.maxParticles;var y=e.autoRandomSeed;null!=y&&(h.autoRandomSeed=y);var I=e.randomSeed;null!=I&&(h.randomSeed[0]=I);var L=e.emission,B=h.emission;if(L){B.emissionRate=L.emissionRate;var O=L.bursts;if(O)for(n=0,a=O.length;n<a;n++){var w=O[n];B.addBurst(new ut(w.time,w.min,w.max))}B.enable=L.enable}else B.enable=!1;var P=e.shape;if(P){var N;switch(P.shapeType){case 0:var V;N=V=new It,V.radius=P.sphereRadius,V.emitFromShell=P.sphereEmitFromShell,V.randomDirection=P.sphereRandomDirection;break;case 1:var b;N=b=new yt,b.radius=P.hemiSphereRadius,b.emitFromShell=P.hemiSphereEmitFromShell,b.randomDirection=P.hemiSphereRandomDirection;break;case 2:var F;N=F=new vt,F.angle=P.coneAngle*r,F.radius=P.coneRadius,F.length=P.coneLength,F.emitType=P.coneEmitType,F.randomDirection=P.coneRandomDirection;break;case 3:var U;N=U=new Mt,U.x=P.boxX,U.y=P.boxY,U.z=P.boxZ,U.randomDirection=P.boxRandomDirection;break;case 7:var G;N=G=new Ct,G.radius=P.circleRadius,G.arc=P.circleArc*r,G.emitFromEdge=P.circleEmitFromEdge,G.randomDirection=P.circleRandomDirection;break;default:var H;N=H=new Ct,H.radius=P.circleRadius,H.arc=P.circleArc*r,H.emitFromEdge=P.circleEmitFromEdge,H.randomDirection=P.circleRandomDirection}N.enable=P.enable,h.shape=N}var z=e.velocityOverLifetime;if(z){var k,W=z.velocity;switch(W.type){case 0:var Y=W.constant;k=Et.createByConstant(new t.Vector3(Y[0],Y[1],Y[2]));break;case 1:k=Et.createByGradient(this._initParticleVelocity(W.gradientX),this._initParticleVelocity(W.gradientY),this._initParticleVelocity(W.gradientZ));break;case 2:var X=W.constantMin,Q=W.constantMax;k=Et.createByRandomTwoConstant(new t.Vector3(X[0],X[1],X[2]),new t.Vector3(Q[0],Q[1],Q[2]));break;case 3:k=Et.createByRandomTwoGradient(this._initParticleVelocity(W.gradientXMin),this._initParticleVelocity(W.gradientXMax),this._initParticleVelocity(W.gradientYMin),this._initParticleVelocity(W.gradientYMax),this._initParticleVelocity(W.gradientZMin),this._initParticleVelocity(W.gradientZMax))}var K=new wt(k);K.space=z.space,K.enable=z.enable,h.velocityOverLifetime=K}var j=e.colorOverLifetime;if(j){var Z,J=j.color;switch(J.type){case 0:var q=J.constant;Z=_t.createByConstant(new t.Vector4(q[0],q[1],q[2],q[3]));break;case 1:Z=_t.createByGradient(this._initParticleColor(J.gradient));break;case 2:var $=J.constantMin,ee=J.constantMax;Z=_t.createByRandomTwoConstant(new t.Vector4($[0],$[1],$[2],$[3]),new t.Vector4(ee[0],ee[1],ee[2],ee[3]));break;case 3:Z=_t.createByRandomTwoGradient(this._initParticleColor(J.gradientMin),this._initParticleColor(J.gradientMax))}var te=new mt(Z);te.enable=j.enable,h.colorOverLifetime=te}var re=e.sizeOverLifetime;if(re){var ne,ae=re.size;switch(ae.type){case 0:ne=ae.separateAxes?Tt.createByGradientSeparate(this._initParticleSize(ae.gradientX),this._initParticleSize(ae.gradientY),this._initParticleSize(ae.gradientZ)):Tt.createByGradient(this._initParticleSize(ae.gradient));break;case 1:if(ae.separateAxes){var ie=ae.constantMinSeparate,se=ae.constantMaxSeparate;ne=Tt.createByRandomTwoConstantSeparate(new t.Vector3(ie[0],ie[1],ie[2]),new t.Vector3(se[0],se[1],se[2]))}else ne=Tt.createByRandomTwoConstant(ae.constantMin,ae.constantMax);break;case 2:ne=ae.separateAxes?Tt.createByRandomTwoGradientSeparate(this._initParticleSize(ae.gradientXMin),this._initParticleSize(ae.gradientYMin),this._initParticleSize(ae.gradientZMin),this._initParticleSize(ae.gradientXMax),this._initParticleSize(ae.gradientYMax),this._initParticleSize(ae.gradientZMax)):Tt.createByRandomTwoGradient(this._initParticleSize(ae.gradientMin),this._initParticleSize(ae.gradientMax))}var oe=new Lt(ne);oe.enable=re.enable,h.sizeOverLifetime=oe}var le=e.rotationOverLifetime;if(le){var he,de=le.angularVelocity;switch(de.type){case 0:if(de.separateAxes){var ce=de.constantSeparate;he=pt.createByConstantSeparate(new t.Vector3(ce[0]*r,ce[1]*r,ce[2]*r))}else he=pt.createByConstant(de.constant*r);break;case 1:he=de.separateAxes?pt.createByGradientSeparate(this._initParticleRotation(de.gradientX),this._initParticleRotation(de.gradientY),this._initParticleRotation(de.gradientZ)):pt.createByGradient(this._initParticleRotation(de.gradient));break;case 2:if(de.separateAxes){var ue=de.constantMinSeparate,_e=de.constantMaxSeparate;he=pt.createByRandomTwoConstantSeparate(new t.Vector3(ue[0]*r,ue[1]*r,ue[2]*r),new t.Vector3(_e[0]*r,_e[1]*r,_e[2]*r))}else he=pt.createByRandomTwoConstant(de.constantMin*r,de.constantMax*r);break;case 3:de.separateAxes||(he=pt.createByRandomTwoGradient(this._initParticleRotation(de.gradientMin),this._initParticleRotation(de.gradientMax)))}var me=new xt(he);me.enable=le.enable,h.rotationOverLifetime=me}var fe=e.textureSheetAnimation;if(fe){var ge,pe=fe.frame;switch(pe.type){case 0:ge=ft.createByConstant(pe.constant);break;case 1:ge=ft.createByOverTime(this._initParticleFrame(pe.overTime));break;case 2:ge=ft.createByRandomTwoConstant(pe.constantMin,pe.constantMax);break;case 3:ge=ft.createByRandomTwoOverTime(this._initParticleFrame(pe.overTimeMin),this._initParticleFrame(pe.overTimeMax))}var Se,Te=fe.startFrame;switch(Te.type){case 0:Se=Bt.createByConstant(Te.constant);break;case 1:Se=Bt.createByRandomTwoConstant(Te.constantMin,Te.constantMax)}var Ee=new Ot(ge,Se);Ee.enable=fe.enable;var xe=fe.tiles;Ee.tiles=new t.Vector2(xe[0],xe[1]),Ee.type=fe.type,Ee.randomRow=fe.randomRow;var Ae=fe.rowIndex;void 0!==Ae&&(Ee.rowIndex=Ae),Ee.cycles=fe.cycles,h.textureSheetAnimation=Ee}}_initParticleColor(e,r=4){var n=new ct;if(n.setMaxKeyCount(r,r),e){var a,i,s=e.alphas;if(s)for(a=0,i=s.length;a<i;a++){a==r-1&&i>r&&(a=i-1,console.warn(`GradientDataColor warning:alpha data length is large than ${r}, will ignore the middle data.`));var o=s[a];n.addColorAlpha(o.key,o.value)}else n.addColorAlpha(0,1),n.addColorAlpha(1,1);var l=e.rgbs;if(l)for(a=0,i=l.length;a<i;a++){a==r-1&&i>r&&(a=i-1,console.warn(`GradientDataColor warning:rgb data length is large than ${r}, will ignore the middle data.`));var h=l[a],d=h.value;n.addColorRGB(h.key,new t.Color(d[0],d[1],d[2],1))}else n.addColorRGB(0,new t.Color(1,1,1,1)),n.addColorRGB(1,new t.Color(1,1,1,1))}else n.addColorAlpha(0,1),n.addColorAlpha(1,1),n.addColorRGB(0,new t.Color(1,1,1,1)),n.addColorRGB(1,new t.Color(1,1,1,1));return n}_initParticleFrame(e){var t=new St;if(e)for(var r=e.frames,n=0,a=r.length;n<a;n++){var i=r[n];t.add(i.key,i.value)}else t.add(0,0),t.add(1,1);return t}static _initStartLife(e){for(var t=new gt,r=e.startLifetimes,n=0,a=r.length;n<a;n++){var i=r[n];t.add(i.key,i.value)}return t}_initParticleVelocity(e){for(var t=new gt,r=e.velocitys,n=0,a=r.length;n<a;n++){var i=r[n];t.add(i.key,i.value)}return t}_initParticleSize(e){var t=new gt;if(e)for(var r=e.sizes,n=0,a=r.length;n<a;n++){var i=r[n];t.add(i.key,i.value)}else t.add(0,0),t.add(1,1);return t}_initParticleRotation(e){for(var t=new gt,r=e.angularVelocitys,n=0,a=r.length;n<a;n++){var i=r[n];t.add(i.key,i.value/180*Math.PI)}return t}}class Xt{static get vertexDeclaration(){return Xt._vertexDeclaration}static __init__(){Xt._vertexDeclaration=new t.VertexDeclaration(40,[new t.VertexElement(0,t.VertexElementFormat.Vector3,t.VertexMesh.MESH_POSITION0),new t.VertexElement(12,t.VertexElementFormat.Vector4,t.VertexMesh.MESH_COLOR0),new t.VertexElement(28,t.VertexElementFormat.Vector3,t.VertexMesh.MESH_NORMAL0)])}get vertexDeclaration(){return Xt._vertexDeclaration}constructor(){}}class Qt{}class Kt extends te{setSkinData(e){this._renderElementOBJ.skinnedData=e}constructor(){super()}_createRenderElementOBJ(){this._renderElementOBJ=A.Render3DPassFactory.createSkinRenderElement()}_render(e){}}class jt extends De{get _bones(){return this.__bones}set _bones(e){this.__bones=e,this._isISkinRenderNode()&&this._ownerSkinRenderNode.setBones(e)}get localBounds(){return this._localBounds}set localBounds(e){this._localBounds=e,this.geometryBounds=this._localBounds}get rootBone(){return this._cacheRootBone}set rootBone(e){if(this._cacheRootBone!=e){this._cacheRootBone?this._cacheRootBone.transform.off(t.Event.TRANSFORM_CHANGED,this,this._onWorldMatNeedChange):this.owner.transform.off(t.Event.TRANSFORM_CHANGED,this,this._onWorldMatNeedChange),e?(e.transform.on(t.Event.TRANSFORM_CHANGED,this,this._onWorldMatNeedChange),this._baseRenderNode.transform=e.transform):(this.owner.transform.on(t.Event.TRANSFORM_CHANGED,this,this._onWorldMatNeedChange),this._baseRenderNode.transform=this.owner.transform),this._cacheRootBone=e,this._onWorldMatNeedChange(F.TRANSFORM_WORLDPOSITION|F.TRANSFORM_WORLDQUATERNION|F.TRANSFORM_WORLDSCALE);let n=this._renderElements.length;for(var r=0;r<n;r++){this._renderElements[r].setTransform(e.transform)}this._isISkinRenderNode()&&this._ownerSkinRenderNode.setRootBoneTransfom(this._cacheRootBone)}this._baseRenderNode.transform=this.rootBone?this.rootBone.transform:this.owner.transform}get bones(){return this._bones}set bones(e){this._bones=e}constructor(){super(),this.__bones=[],this._worldParams=new t.Vector4,this.localBounds=new H(t.Vector3.ZERO,t.Vector3.ZERO),this._baseRenderNode.shaderData.addDefine(Qt.SHADERDEFINE_BONE),this._baseRenderNode.renderNodeType=e.BaseRenderType.SkinnedMeshRender}_createBaseRenderNode(){return this._ownerSkinRenderNode=A.Render3DModuleDataFactory.createSkinRenderNode(),this._ownerSkinRenderNode}_needRender(e,r){return!!t.Stat.enableSkin&&super._needRender(e,r)}_createRenderElement(){return new Kt}_isISkinRenderNode(){return this._ownerSkinRenderNode.setCacheMesh}_onSkinMeshChange(e){if(e&&this._mesh!=e){this._changeVertexDefine(e),this._changeMorphData(e),this._mesh=e,this._isISkinRenderNode()&&this._ownerSkinRenderNode.setCacheMesh(e);var t=e.subMeshCount;this._renderElements.length=t;let n=this.sharedMaterials;n.length=t;for(var r=0;r<t;r++){let t=this._renderElements[r];t||(t=this._renderElements[r]=this._createRenderElement(),this._cacheRootBone?t.setTransform(this._cacheRootBone.transform):t.setTransform(this.owner._transform),t.render=this),n[r]=n[r]||xe.defaultMaterial,t.setGeometry(e.getSubMesh(r))}this.sharedMaterials=n,this.boundsChange=!0}else e||(this._renderElements.length=0,this._mesh=null,this._changeVertexDefine(null),this._changeMorphData(null),this.boundsChange=!1);this._meshChange=!0}_onMeshChange(e){if(this._onSkinMeshChange(e),e){this._cacheMesh=e;var t=e.subMeshCount;this._skinnedData=[];for(var r=0;r<t;r++){for(var n=e.getSubMesh(r)._boneIndicesList,a=n.length,i=this._skinnedData[r]=[],s=0;s<a;s++)i[s]=new Float32Array(16*n[s].length);this._renderElements[r].setSkinData(i)}this._isISkinRenderNode()&&this._ownerSkinRenderNode.setSkinnedData(this._skinnedData),this._setRenderElements()}}_setBelongScene(e){super._setBelongScene(e),this._isISkinRenderNode()&&this._ownerSkinRenderNode.setOwnerTransform(this.owner)}_setUnBelongScene(){super._setUnBelongScene()}_statAdd(){t.Stat.renderNode++,t.Stat.skinRenderNode++}_statRemove(){t.Stat.renderNode--,t.Stat.skinRenderNode--}renderUpdate(e){super.renderUpdate(e),this._isISkinRenderNode()&&this._ownerSkinRenderNode.computeSkinnedData()}_cloneTo(e){let cloneHierachFun=(e,t,r)=>{let n=((e,t)=>{let r=[],n=e;for(;n;)n instanceof B&&r.push(n),n=n.parent;let a=t;for(;a&&-1==r.indexOf(a);)a=a.parent;return a})(e,t);if(!n)return null;let a=[];T._getHierarchyPath(n,e,a);let i=[];T._getHierarchyPath(n,t,i);let s=T._getParentNodeByHierarchyPath(r,a);return s?T._getNodeByHierarchyPath(s,i):null};var t=this.rootBone;if(t){let r=cloneHierachFun(this.owner,this.rootBone,e.owner);e.rootBone=r||t}var r=this.bones,n=e.bones;let a=n.length=r.length;for(var i=0;i<a;i++){let t=r[i];n[i]=cloneHierachFun(this.owner,t,e.owner)}e.bones=e.bones;var s=this.localBounds;s&&s.cloneTo(e.localBounds),e.localBounds&&(e.localBounds=e.localBounds),super._cloneTo(e)}_onDestroy(){this._cacheRootBone?!this._cacheRootBone._destroyed&&this._cacheRootBone.transform.off(t.Event.TRANSFORM_CHANGED,this,this._onWorldMatNeedChange):this.owner&&!this.owner._destroyed&&this.owner.transform.off(t.Event.TRANSFORM_CHANGED,this,this._onWorldMatNeedChange),super._onDestroy()}}class Zt extends U{static __init__(){Qt.SHADERDEFINE_BONE=t.Shader3D.getDefineByName("BONE"),Qt.SHADERDEFINE_SIMPLEBONE=t.Shader3D.getDefineByName("SIMPLEBONE");const r=t.LayaGL.renderDeviceFactory.createGlobalUniformMap("Custom");Zt.BONES=t.Shader3D.propertyNameToID("u_Bones"),r.addShaderUniform(Zt.BONES,"u_Bones",e.ShaderDataType.Buffer)}get meshFilter(){return this._meshFilter}get skinnedMeshRenderer(){return this._render}constructor(e=null,t=null){super(t),this._meshFilter=this.addComponent(Te),this._render=this.addComponent(jt),e&&(this._meshFilter.sharedMesh=e)}_parse(e,r){super._parse(e,r);var n=this.skinnedMeshRenderer,a=e.lightmapIndex;null!=a&&(n.lightmapIndex=a);var i,s=e.lightmapScaleOffset;if(s&&(n.lightmapScaleOffset=new t.Vector4(s[0],s[1],s[2],s[3])),null!=e.enableRender&&(n.enabled=e.enableRender),null!=e.receiveShadows&&(n.receiveShadow=e.receiveShadows),null!=e.castShadow&&(n.castShadow=e.castShadow),i=e.meshPath){var o=t.Loader.getRes(i);o&&(this.meshFilter.sharedMesh=o)}var l=e.materials;if(l){var h=n.sharedMaterials,d=l.length;h.length=d;for(var c=0;c<d;c++)h[c]=t.Loader.getRes(l[c].path);n.sharedMaterials=h}var u=e.boundBox,_=u.min,m=u.max;if(n.localBounds.setMin(new t.Vector3(_[0],_[1],_[2])),n.localBounds.setMax(new t.Vector3(m[0],m[1],m[2])),n.localBounds=n.localBounds,r){var f=e.rootBone;n.rootBone=r[f];var g,p=e.bones;for(c=0,g=p.length;c<g;c++)n.bones.push(r[p[c]]);n.bones=n.bones}}_cloneTo(e,t,r){super._cloneTo(e,t,r)}destroy(e=!0){this._destroyed||(super.destroy(e),this._meshFilter.destroy())}_create(){return new B}}Zt._tempArray0=[];class Jt extends t.Material{static __initDefine__(){Jt.MAINTEXTURE=t.Shader3D.propertyNameToID("u_MainTexture"),Jt.TINTCOLOR=t.Shader3D.propertyNameToID("u_MainColor"),Jt.TILINGOFFSET=t.Shader3D.propertyNameToID("u_TilingOffset")}get color(){return this._shaderValues.getColor(Jt.TINTCOLOR)}set color(e){this._shaderValues.setColor(Jt.TINTCOLOR,e)}get texture(){return this._shaderValues.getTexture(Jt.MAINTEXTURE)}set texture(e){e?this._shaderValues.addDefine(Jt.SHADERDEFINE_MAINTEXTURE):this._shaderValues.removeDefine(Jt.SHADERDEFINE_MAINTEXTURE),this._shaderValues.setTexture(Jt.MAINTEXTURE,e)}get tilingOffset(){return this._shaderValues.getVector(Jt.TILINGOFFSET)}set tilingOffset(e){e?this._shaderValues.setVector(Jt.TILINGOFFSET,e):this._shaderValues.getVector(Jt.TILINGOFFSET).setValue(1,1,0,0)}constructor(){super(),this.setShaderName("Trail"),this.materialRenderMode=t.MaterialRenderMode.RENDERMODE_ALPHABLENDED}clone(){var e=new Jt;return this.cloneTo(e),e}set renderMode(e){switch(e){case Jt.RENDERMODE_ADDTIVE:this.renderQueue=t.Material.RENDERQUEUE_TRANSPARENT,this.depthWrite=!1,this.cull=Ee.CULL_NONE,this.blend=Ee.BLEND_ENABLE_ALL,this.blendSrc=Ee.BLENDPARAM_SRC_ALPHA,this.blendDst=Ee.BLENDPARAM_ONE,this.alphaTest=!1,this._shaderValues.addDefine(Jt.SHADERDEFINE_ADDTIVEFOG);break;case Jt.RENDERMODE_ALPHABLENDED:this.renderQueue=t.Material.RENDERQUEUE_TRANSPARENT,this.depthWrite=!1,this.cull=Ee.CULL_NONE,this.blend=Ee.BLEND_ENABLE_ALL,this.blendSrc=Ee.BLENDPARAM_SRC_ALPHA,this.blendDst=Ee.BLENDPARAM_ONE_MINUS_SRC_ALPHA,this.alphaTest=!1,this._shaderValues.removeDefine(Jt.SHADERDEFINE_ADDTIVEFOG);break;default:throw new Error("ShurikenParticleMaterial : renderMode value error.")}}}Jt.RENDERMODE_ALPHABLENDED=0,Jt.RENDERMODE_ADDTIVE=1;class qt{static get vertexDeclaration1(){return qt._vertexDeclaration1}static get vertexDeclaration2(){return qt._vertexDeclaration2}get vertexDeclaration(){return qt._vertexDeclaration1}static __init__(){qt._vertexDeclaration1=new t.VertexDeclaration(32,[new t.VertexElement(0,t.VertexElementFormat.Vector3,qt.TRAIL_POSITION0),new t.VertexElement(12,t.VertexElementFormat.Vector3,qt.TRAIL_OFFSETVECTOR),new t.VertexElement(24,t.VertexElementFormat.Single,qt.TRAIL_TIME0),new t.VertexElement(28,t.VertexElementFormat.Single,qt.TRAIL_TEXTURECOORDINATE0Y)]),qt._vertexDeclaration2=new t.VertexDeclaration(20,[new t.VertexElement(0,t.VertexElementFormat.Single,qt.TRAIL_TEXTURECOORDINATE0X),new t.VertexElement(4,t.VertexElementFormat.Color,qt.TRAIL_COLOR)])}}qt.TRAIL_POSITION0=0,qt.TRAIL_OFFSETVECTOR=1,qt.TRAIL_TIME0=2,qt.TRAIL_TEXTURECOORDINATE0Y=3,qt.TRAIL_TEXTURECOORDINATE0X=4,qt.TRAIL_COLOR=5;class $t extends Z{static __init__(){$t.instance=new $t}constructor(){super(t.MeshTopology.Triangles,t.DrawType.DrawElementInstance),this.instanceWorldMatrixData=new Float32Array(16*$t.maxInstanceCount),this.instanceSimpleAnimatorData=new Float32Array(4*$t.maxInstanceCount),this.indexFormat=t.IndexFormat.UInt16,this.instanceWorldMatrixBuffer=A.renderOBJCreate.createVertexBuffer3D(4*this.instanceWorldMatrixData.length,t.BufferUsage.Dynamic,!1),this.instanceWorldMatrixBuffer.vertexDeclaration=t.VertexMesh.instanceWorldMatrixDeclaration,this.instanceWorldMatrixBuffer.instanceBuffer=!0,this.instanceSimpleAnimatorBuffer=A.renderOBJCreate.createVertexBuffer3D(4*this.instanceSimpleAnimatorData.length,t.BufferUsage.Dynamic,!1),this.instanceSimpleAnimatorBuffer.vertexDeclaration=t.VertexMesh.instanceSimpleAnimatorDeclaration,this.instanceSimpleAnimatorBuffer.instanceBuffer=!0}_updateRenderParams(e){}}$t.maxInstanceCount=1024;class er{static __init__(){er._vertexDeclaration=new t.VertexDeclaration(40,[new t.VertexElement(0,t.VertexElementFormat.Vector3,er.TERRAIN_POSITION0),new t.VertexElement(12,t.VertexElementFormat.Vector3,er.TERRAIN_NORMAL0),new t.VertexElement(24,t.VertexElementFormat.Vector2,er.TERRAIN_TEXTURECOORDINATE0),new t.VertexElement(32,t.VertexElementFormat.Vector2,er.TERRAIN_TEXTURECOORDINATE1)])}static get vertexDeclaration(){return er._vertexDeclaration}get position(){return this._position}get normal(){return this._normal}get textureCoord0(){return this._textureCoord0}get textureCoord1(){return this._textureCoord1}get vertexDeclaration(){return er._vertexDeclaration}constructor(e,t,r,n){this._position=e,this._normal=t,this._textureCoord0=r,this._textureCoord1=n}}er.TERRAIN_POSITION0=0,er.TERRAIN_NORMAL0=1,er.TERRAIN_TEXTURECOORDINATE0=2,er.TERRAIN_TEXTURECOORDINATE1=3;class tr extends te{static create(){let e=tr._pool.length>0?tr._pool.pop():new tr;return e._isInPool=!1,e.clear(),e}constructor(){super(),this._InvertFront=!1,this.setGeometry(new ve(null)),this._instanceBatchElementList=new t.FastSinglelist,this._isUpdataData=!0,this._invertFrontFace=!1}getInvertFront(){return this._invertFrontFace}set InvertFront(e){this._InvertFront=e}_createRenderElementOBJ(){}compileShader(e){this._subShader._passes}_renderUpdatePre(e){}updateInstanceData(e){}clear(){this._instanceBatchElementList.length=0}recover(){}}tr.maxInstanceCount=1024,tr._pool=[];class rr extends Z{get indexCount(){return this._indexCount}constructor(e){super(t.MeshTopology.Triangles,t.DrawType.DrawElement),this.indexFormat=e.indexFormat,e.indexFormat!==t.IndexFormat.UInt32||t.LayaGL.renderEngine.getCapable(t.RenderCapable.Element_Index_Uint32)?(this._mesh=e,this._boneIndicesList=[],this._subIndexBufferStart=[],this._subIndexBufferCount=[],this.bufferState=e._bufferState):console.warn("SubMesh:this device do not support IndexFormat.UInt32.")}_setIndexRange(e,r,n=t.IndexFormat.UInt16){this._indexStart=e,this._indexCount=r,this._indexBuffer.canRead&&(n==t.IndexFormat.UInt16?this._indices=new Uint16Array(this._indexBuffer.getData().buffer,2*e,r):this._indices=new Uint32Array(this._indexBuffer.getData().buffer,4*e,r))}_getType(){return rr._type}_prepareRender(e){return this._mesh._uploadVerticesData(),!0}_updateRenderParams(e){var r;switch(this._mesh._indexFormat){case t.IndexFormat.UInt32:r=4;break;case t.IndexFormat.UInt16:r=2;break;case t.IndexFormat.UInt8:r=1}if(this.clearRenderParams(),this._boneIndicesList&&this._boneIndicesList.length>1)for(var n=0,a=this._boneIndicesList.length;n<a;n++)this.setDrawElemenParams(this._subIndexBufferCount[n],this._subIndexBufferStart[n]*r);else this.setDrawElemenParams(this._indexCount,this._indexStart*r)}getIndices(){if(this._mesh._isReadable)return this._indices.slice();throw"SubMesh:can't get indices on subMesh,mesh's isReadable must be true."}setIndices(e){this._indexBuffer.setData(e,this._indexStart,0,this._indexCount)}destroy(){this._destroyed||(super.destroy(),this._indexBuffer=null,this._vertexBuffer=null,this._mesh=null,this._boneIndicesList=null,this._subIndexBufferStart=null,this._subIndexBufferCount=null)}}rr._type=Z._typeCounter++,e.EPhysicsCapable=void 0,(nt=e.EPhysicsCapable||(e.EPhysicsCapable={}))[nt.Physics_Gravity=0]="Physics_Gravity",nt[nt.Physics_StaticCollider=1]="Physics_StaticCollider",nt[nt.Physics_DynamicCollider=2]="Physics_DynamicCollider",nt[nt.Physics_CharacterCollider=3]="Physics_CharacterCollider",nt[nt.Physics_BoxColliderShape=4]="Physics_BoxColliderShape",nt[nt.Physics_SphereColliderShape=5]="Physics_SphereColliderShape",nt[nt.Physics_CapsuleColliderShape=6]="Physics_CapsuleColliderShape",nt[nt.Physics_CylinderColliderShape=7]="Physics_CylinderColliderShape",nt[nt.Physics_ConeColliderShape=8]="Physics_ConeColliderShape",nt[nt.Physics_MeshColliderShape=9]="Physics_MeshColliderShape",nt[nt.Physics_CompoundColliderShape=10]="Physics_CompoundColliderShape",nt[nt.Physics_CreateCorveMesh=11]="Physics_CreateCorveMesh",nt[nt.physics_heightFieldColliderShape=12]="physics_heightFieldColliderShape",nt[nt.Physics_Joint=13]="Physics_Joint",nt[nt.Physics_FixedJoint=14]="Physics_FixedJoint",nt[nt.Physics_SpringJoint=15]="Physics_SpringJoint",nt[nt.Physics_HingeJoint=16]="Physics_HingeJoint",nt[nt.Physics_D6Joint=17]="Physics_D6Joint";class nr{constructor(e,t,r){this.subMeshIndex=e,this.batchIndex=t,this.batchBoneIndex=r}}class ar extends t.Resource{static __init__(){}static load(e,r){t.ILaya.loader.load(e,r,null,t.Loader.MESH)}get inverseAbsoluteBindPoses(){return this._inverseBindPoses}get vertexCount(){return this._vertexCount}get indexCount(){return this._indexBuffer.indexCount}get subMeshCount(){return this._subMeshes.length}get bounds(){return this._bounds}set bounds(e){this._bounds!==e&&e.cloneTo(this._bounds)}get indexFormat(){return this._indexFormat}set indexFormat(e){this._indexFormat=e,this._subMeshes.forEach((t=>{t.indexFormat=e}))}constructor(e=!0){super(),this._tempVector30=new t.Vector3,this._tempVector31=new t.Vector3,this._minVerticesUpdate=-1,this._maxVerticesUpdate=-1,this._needUpdateBounds=!0,this._bufferState=new t.BufferState,this._instanceBufferStateType=0,this._vertexBuffer=null,this._indexBuffer=null,this._skinnedMatrixCaches=[],this._vertexCount=0,this._indexFormat=t.IndexFormat.UInt16,this._bounds=new H(new t.Vector3,new t.Vector3),this._isReadable=e,this._subMeshes=[],this.destroyedImmediately=t.Config.destroyResourceImmediatelyDefault}_getPositionElement(e){for(var r=e.vertexDeclaration._vertexElements,n=0,a=r.length;n<a;n++){var i=r[n];if(i._elementFormat===t.VertexElementFormat.Vector3&&i._elementUsage===t.VertexMesh.MESH_POSITION0)return i}return null}_getVerticeElementData(e,r){e.length=this._vertexCount;var n=this._vertexBuffer.vertexDeclaration,a=n.getVertexElementByUsage(r);if(a){var i=this._vertexBuffer.getUint8Data(),s=this._vertexBuffer.getFloat32Data(),o=n.vertexStride,l=o/4,h=a._offset,d=h/4;switch(r){case t.VertexMesh.MESH_TEXTURECOORDINATE0:case t.VertexMesh.MESH_TEXTURECOORDINATE1:for(var c=0;c<this._vertexCount;c++){var u=l*c+d;e[c]=new t.Vector2(s[u],s[u+1])}break;case t.VertexMesh.MESH_POSITION0:case t.VertexMesh.MESH_NORMAL0:for(c=0;c<this._vertexCount;c++){u=l*c+d;e[c]=new t.Vector3(s[u],s[u+1],s[u+2])}break;case t.VertexMesh.MESH_TANGENT0:case t.VertexMesh.MESH_BLENDWEIGHT0:for(c=0;c<this._vertexCount;c++){u=l*c+d;e[c]=new t.Vector4(s[u],s[u+1],s[u+2],s[u+3])}break;case t.VertexMesh.MESH_COLOR0:for(c=0;c<this._vertexCount;c++){u=l*c+d;e[c]=new t.Color(s[u],s[u+1],s[u+2],s[u+3])}break;case t.VertexMesh.MESH_BLENDINDICES0:for(c=0;c<this._vertexCount;c++){u=o*c+h;e[c]=new t.Vector4(i[u],i[u+1],i[u+2],i[u+3])}break;default:throw"Mesh:Unknown elementUsage."}}}_setVerticeElementData(e,r){var n=this._vertexBuffer.vertexDeclaration,a=n.getVertexElementByUsage(r);if(a){var i=this._vertexBuffer.getUint8Data(),s=this._vertexBuffer.getFloat32Data(),o=n.vertexStride,l=o/4,h=a._offset,d=h/4;switch(r){case t.VertexMesh.MESH_TEXTURECOORDINATE0:case t.VertexMesh.MESH_TEXTURECOORDINATE1:for(var c=0,u=e.length;c<u;c++){var _=l*c+d,m=e[c];s[_]=m.x,s[_+1]=m.y}break;case t.VertexMesh.MESH_POSITION0:case t.VertexMesh.MESH_NORMAL0:for(c=0,u=e.length;c<u;c++){_=l*c+d;var f=e[c];s[_]=f.x,s[_+1]=f.y,s[_+2]=f.z}break;case t.VertexMesh.MESH_TANGENT0:case t.VertexMesh.MESH_BLENDWEIGHT0:for(c=0,u=e.length;c<u;c++){_=l*c+d;var g=e[c];s[_]=g.x,s[_+1]=g.y,s[_+2]=g.z,s[_+3]=g.w}break;case t.VertexMesh.MESH_COLOR0:for(c=0,u=e.length;c<u;c++){_=l*c+d;var p=e[c];s[_]=p.r,s[_+1]=p.g,s[_+2]=p.b,s[_+3]=p.a}break;case t.VertexMesh.MESH_BLENDINDICES0:for(c=0,u=e.length;c<u;c++){_=o*c+h,g=e[c];i[_]=g.x,i[_+1]=g.y,i[_+2]=g.z,i[_+3]=g.w}break;default:throw"Mesh:Unknown elementUsage."}this._minVerticesUpdate=0,this._maxVerticesUpdate=Number.MAX_SAFE_INTEGER}else console.warn("Mesh: the mesh don't have  this VertexElement.")}_disposeResource(){for(var e=0,t=this._subMeshes.length;e<t;e++)this._subMeshes[e].destroy();this._vertexBuffer&&this._vertexBuffer.destroy(),this._indexBuffer&&this._indexBuffer.destroy(),this._bufferState.destroy(),this._instanceBufferState&&this._instanceBufferState.destroy(),this._instanceWorldVertexBuffer&&this._instanceWorldVertexBuffer.destroy(),this._instanceSimpleAniVertexBuffer&&this._instanceSimpleAniVertexBuffer.destroy(),this._instanceLightMapVertexBuffer&&this._instanceLightMapVertexBuffer.destroy(),this.instanceLightMapScaleOffsetData&&(this.instanceLightMapScaleOffsetData=null),this._setCPUMemory(0),this._setGPUMemory(0),this._bufferState=null,this._instanceBufferState=null,this._vertexBuffer=null,this._indexBuffer=null,this._subMeshes=null,this._btTriangleMesh=null,this._indexBuffer=null,this._boneNames=null,this._inverseBindPoses=null,this.morphTargetData&&this.morphTargetData.destroy(),this.__convexMesh&&this.__convexMesh.destroy()}_setSubMeshes(e){this._subMeshes=e;for(var t=0,r=e.length;t<r;t++)e[t]._indexInMesh=t}_setBuffer(e,t){this._bufferState.applyState([e],t)}_setInstanceBuffer(){if(this._instanceBufferState)return;var e=this._instanceBufferState=new t.BufferState,r=this._instanceBufferStateType;let n=[];n.push(this._vertexBuffer);let a=this._instanceWorldVertexBuffer=A.renderOBJCreate.createVertexBuffer3D(16*tr.maxInstanceCount*4,t.BufferUsage.Dynamic,!1);switch(a.vertexDeclaration=t.VertexMesh.instanceWorldMatrixDeclaration,a.instanceBuffer=!0,n.push(a),r){case ar.MESH_INSTANCEBUFFER_TYPE_SIMPLEANIMATOR:let e=this._instanceSimpleAniVertexBuffer=A.renderOBJCreate.createVertexBuffer3D(4*tr.maxInstanceCount*4,t.BufferUsage.Dynamic,!1);e.vertexDeclaration=t.VertexMesh.instanceSimpleAnimatorDeclaration,e.instanceBuffer=!0,n.push(e);break;case ar.MESH_INSTANCEBUFFER_TYPE_NORMAL:if(this.getVertexDeclaration().getVertexElementByUsage(t.VertexMesh.MESH_TEXTURECOORDINATE1)){let e=this._instanceLightMapVertexBuffer=A.renderOBJCreate.createVertexBuffer3D(4*tr.maxInstanceCount*4,t.BufferUsage.Dynamic,!1);e.vertexDeclaration=t.VertexMesh.instanceLightMapScaleOffsetDeclaration,e.instanceBuffer=!0,this.instanceLightMapScaleOffsetData=new Float32Array(4*tr.maxInstanceCount),n.push(e)}}e.applyState(n,this._indexBuffer)}_uploadVerticesData(){var e=this._minVerticesUpdate,t=this._maxVerticesUpdate;if(-1!==e&&-1!==t){var r=e;this._vertexBuffer.setData(this._vertexBuffer.getUint8Data().buffer,r,r,t-e),this._minVerticesUpdate=-1,this._maxVerticesUpdate=-1}}getSubMesh(e){return this._subMeshes[e]}getPositions(e){if(!this._isReadable)throw"Mesh:can't get positions on mesh,isReadable must be true.";this._getVerticeElementData(e,t.VertexMesh.MESH_POSITION0)}setPositions(e){if(!this._isReadable)throw"Mesh:setPosition() need isReadable must be true or use setVertices().";this._setVerticeElementData(e,t.VertexMesh.MESH_POSITION0),this._needUpdateBounds=!0}getColors(e){if(!this._isReadable)throw"Mesh:can't get colors on mesh,isReadable must be true.";this._getVerticeElementData(e,t.VertexMesh.MESH_COLOR0)}setColors(e){if(!this._isReadable)throw"Mesh:setColors() need isReadable must be true or use setVertices().";this._setVerticeElementData(e,t.VertexMesh.MESH_COLOR0)}getUVs(e,r=0){if(!this._isReadable)throw"Mesh:can't get uvs on mesh,isReadable must be true.";switch(r){case 0:this._getVerticeElementData(e,t.VertexMesh.MESH_TEXTURECOORDINATE0);break;case 1:this._getVerticeElementData(e,t.VertexMesh.MESH_TEXTURECOORDINATE1);break;default:throw"Mesh:Invalid channel."}}setUVs(e,r=0){if(!this._isReadable)throw"Mesh:setUVs() need isReadable must be true or use setVertices().";switch(r){case 0:this._setVerticeElementData(e,t.VertexMesh.MESH_TEXTURECOORDINATE0);break;case 1:this._setVerticeElementData(e,t.VertexMesh.MESH_TEXTURECOORDINATE1);break;default:throw"Mesh:Invalid channel."}}getNormals(e){if(!this._isReadable)throw"Mesh:can't get colors on mesh,isReadable must be true.";this._getVerticeElementData(e,t.VertexMesh.MESH_NORMAL0)}setNormals(e){if(!this._isReadable)throw"Mesh:setNormals() need must be true or use setVertices().";this._setVerticeElementData(e,t.VertexMesh.MESH_NORMAL0)}getTangents(e){if(!this._isReadable)throw"Mesh:can't get colors on mesh,isReadable must be true.";this._getVerticeElementData(e,t.VertexMesh.MESH_TANGENT0)}setTangents(e){if(!this._isReadable)throw"Mesh:setTangents() need isReadable must be true or use setVertices().";this._setVerticeElementData(e,t.VertexMesh.MESH_TANGENT0)}getBoneWeights(e){if(!this._isReadable)throw"Mesh:can't get boneWeights on mesh,isReadable must be true.";this._getVerticeElementData(e,t.VertexMesh.MESH_BLENDWEIGHT0)}setBoneWeights(e){if(!this._isReadable)throw"Mesh:setBoneWeights() need isReadable must be true or use setVertices().";this._setVerticeElementData(e,t.VertexMesh.MESH_BLENDWEIGHT0)}getBoneIndices(e){if(!this._isReadable)throw"Mesh:can't get boneIndices on mesh,isReadable must be true.";this._getVerticeElementData(e,t.VertexMesh.MESH_BLENDINDICES0)}setBoneIndices(e){if(!this._isReadable)throw"Mesh:setBoneIndices() need isReadable must be true or use setVertices().";this._setVerticeElementData(e,t.VertexMesh.MESH_BLENDINDICES0)}markAsUnreadbale(){this._uploadVerticesData(),this._vertexBuffer.markAsUnreadbale(),this._isReadable=!1}getVertexDeclaration(){return this._vertexBuffer.vertexDeclaration}getVertices(){if(this._isReadable)return this._vertexBuffer.getUint8Data().buffer.slice(0);throw"Mesh:can't get vertices on mesh,isReadable must be true."}setVertices(e){this._vertexBuffer.setData(e),this._needUpdateBounds=!0}getIndices(){if(this._isReadable)return this._indexBuffer.getData().slice();throw"Mesh:can't get indices on subMesh,mesh's isReadable must be true."}setIndices(e){var r;e instanceof Uint32Array?r=t.IndexFormat.UInt32:e instanceof Uint16Array?r=t.IndexFormat.UInt16:e instanceof Uint8Array&&(r=t.IndexFormat.UInt8);var n=this._indexBuffer;this._indexFormat===r&&n.indexCount===e.length||(n.destroy(),this._indexBuffer=n=A.renderOBJCreate.createIndexBuffer3D(r,e.length,t.BufferUsage.Static,this._isReadable)),n.setData(e),this.indexFormat=r}calculateBounds(){if(!this._isReadable)throw"Mesh:can't calculate bounds on subMesh,mesh's isReadable must be true.";if(this._needUpdateBounds){var e=this._tempVector30,t=this._tempVector31;e.x=e.y=e.z=Number.MAX_VALUE,t.x=t.y=t.z=-Number.MAX_VALUE;for(var r=this._vertexBuffer,n=this._getPositionElement(r),a=r.getFloat32Data(),i=r.vertexDeclaration.vertexStride/4,s=n._offset/4,o=0,l=a.length;o<l;o+=i){var h=o+s,d=a[h],c=a[h+1],u=a[h+2];e.x=Math.min(e.x,d),e.y=Math.min(e.y,c),e.z=Math.min(e.z,u),t.x=Math.max(t.x,d),t.y=Math.max(t.y,c),t.z=Math.max(t.z,u)}this._bounds.setMin(e),this._bounds.setMax(t),this._needUpdateBounds=!1}}getCorveMesh(){return null==this._convexMesh?null:(null==this.__convexMesh&&Xr._PhysicsCreateUtil&&Xr._PhysicsCreateUtil.getPhysicsCapable(e.EPhysicsCapable.Physics_CreateCorveMesh)&&(this.__convexMesh=Xr._PhysicsCreateUtil.createCorveMesh(this)),this.__convexMesh)}cloneTo(e){var r=e,n=this._vertexBuffer,a=A.renderOBJCreate.createVertexBuffer3D(n._byteLength,n.bufferUsage,n.canRead);a.vertexDeclaration=n.vertexDeclaration,a.setData(n.getUint8Data().slice().buffer),r._vertexBuffer=a,r._vertexCount=this._vertexCount;var i,s=this._indexBuffer,o=A.renderOBJCreate.createIndexBuffer3D(t.IndexFormat.UInt16,s.indexCount,s.bufferUsage,s.canRead);o.setData(s.getData().slice()),r._indexBuffer=o,r._setBuffer(r._vertexBuffer,o),r._instanceBufferStateType=this._instanceBufferStateType,r._setCPUMemory(this.cpuMemory),r._setGPUMemory(this.gpuMemory);var l=this._boneNames;if(l){var h=r._boneNames=[];for(i=0;i<l.length;i++)h[i]=l[i]}var d=this._inverseBindPoses;if(d){var c=r._inverseBindPoses=[];for(i=0;i<d.length;i++)c[i]=d[i]}if(this._inverseBindPosesBuffer){let e=this._inverseBindPosesBuffer.byteLength;r._inverseBindPosesBuffer=new ArrayBuffer(e),new Uint8Array(r._inverseBindPosesBuffer).set(new Uint8Array(this._inverseBindPosesBuffer))}var u=this._skinnedMatrixCaches.length;for(r._skinnedMatrixCaches.length=u,i=0;i<u;i++){var _=this._skinnedMatrixCaches[i];_&&(r._skinnedMatrixCaches[i]=new nr(_.subMeshIndex,_.batchIndex,_.batchBoneIndex))}for(i=0;i<this.subMeshCount;i++){var m=this._subMeshes[i],f=m._subIndexBufferStart,g=m._subIndexBufferCount,p=m._boneIndicesList,S=new rr(r);S._subIndexBufferStart.length=f.length,S._subIndexBufferCount.length=g.length,S._boneIndicesList.length=p.length;for(var T=0;T<f.length;T++)S._subIndexBufferStart[T]=f[T];for(T=0;T<g.length;T++)S._subIndexBufferCount[T]=g[T];for(T=0;T<p.length;T++)S._boneIndicesList[T]=new Uint16Array(p[T]);S._indexBuffer=o,S._indexStart=m._indexStart,S._indexCount=m._indexCount,S._indices=new Uint16Array(o.getData().buffer,2*m._indexStart,m._indexCount);var E=r._vertexBuffer;S._vertexBuffer=E,r._subMeshes.push(S)}r._setSubMeshes(r._subMeshes),this.morphTargetData&&(r.morphTargetData=this.morphTargetData.clone())}clone(){var e=new ar;return this.cloneTo(e),e}}ar.MESH_INSTANCEBUFFER_TYPE_NORMAL=0,ar.MESH_INSTANCEBUFFER_TYPE_SIMPLEANIMATOR=1;class ir{static __init__(){}static _createMesh(e,r,n){var a=new ar,i=new rr(a),s=A.renderOBJCreate.createVertexBuffer3D(4*r.length,t.BufferUsage.Static,!0);s.vertexDeclaration=e,s.setData(r.buffer),a._vertexBuffer=s,a._vertexCount=s._byteLength/e.vertexStride;var o=A.renderOBJCreate.createIndexBuffer3D(t.IndexFormat.UInt16,n.length,t.BufferUsage.Static,!0);o.setData(n),a._indexBuffer=o,a._setBuffer(s,o),i._vertexBuffer=s,i._indexBuffer=o,i._setIndexRange(0,o.indexCount);var l=i._subIndexBufferStart,h=i._subIndexBufferCount,d=i._boneIndicesList;l.length=1,h.length=1,d.length=1,l[0]=0,h[0]=o.indexCount;var c=[];c.push(i),a._setSubMeshes(c),a.calculateBounds();var u=s._byteLength+o._byteLength;return a._setCPUMemory(u),a._setGPUMemory(u),a}static createBox(e=1,r=1,n=1){var a=t.VertexMesh.getVertexDeclaration("POSITION,NORMAL,UV"),i=e/2,s=r/2,o=n/2,l=new Float32Array([-i,s,-o,0,1,0,0,0,i,s,-o,0,1,0,1,0,i,s,o,0,1,0,1,1,-i,s,o,0,1,0,0,1,-i,-s,-o,0,-1,0,0,1,i,-s,-o,0,-1,0,1,1,i,-s,o,0,-1,0,1,0,-i,-s,o,0,-1,0,0,0,-i,s,-o,-1,0,0,0,0,-i,s,o,-1,0,0,1,0,-i,-s,o,-1,0,0,1,1,-i,-s,-o,-1,0,0,0,1,i,s,-o,1,0,0,1,0,i,s,o,1,0,0,0,0,i,-s,o,1,0,0,0,1,i,-s,-o,1,0,0,1,1,-i,s,o,0,0,1,0,0,i,s,o,0,0,1,1,0,i,-s,o,0,0,1,1,1,-i,-s,o,0,0,1,0,1,-i,s,-o,0,0,-1,1,0,i,s,-o,0,0,-1,0,0,i,-s,-o,0,0,-1,0,1,-i,-s,-o,0,0,-1,1,1]),h=new Uint16Array([0,1,2,2,3,0,4,7,6,6,5,4,8,9,10,10,11,8,12,15,14,14,13,12,16,17,18,18,19,16,20,23,22,22,21,20]);return ir._createMesh(a,l,h)}static createCapsule(e=.5,r=2,n=16,a=32){var i,s,o=(n+1)*(a+1)*2+2*(a+1),l=3*n*(a+1)*2*2+2*a*3,h=t.VertexMesh.getVertexDeclaration("POSITION,NORMAL,UV"),d=h.vertexStride/4,c=new Float32Array(o*d),u=new Uint16Array(l),_=Math.PI/2/n,m=2*Math.PI/a,f=r/2-e,g=0,p=0,S=0,T=0,E=0,x=0;for(i=0;i<=n;i++)for(s=0;s<=a;s++)g=e*Math.cos(i*_)*Math.cos(s*m+Math.PI),p=e*Math.sin(i*_),S=e*Math.cos(i*_)*Math.sin(s*m+Math.PI),c[T++]=g,c[T++]=p+f,c[T++]=S,c[T++]=g,c[T++]=p,c[T++]=S,c[T++]=1-s/a,c[T++]=(1-i/n)*(Math.PI*e/2/(r+Math.PI*e)),i<n&&(u[E++]=i*(a+1)+s+(a+1),u[E++]=i*(a+1)+s,u[E++]=i*(a+1)+s+1,u[E++]=i*(a+1)+s+a,u[E++]=i*(a+1)+s,u[E++]=i*(a+1)+s+(a+1));for(x+=(n+1)*(a+1),i=0;i<=n;i++)for(s=0;s<=a;s++)g=e*Math.cos(i*_)*Math.cos(s*m+Math.PI),p=e*Math.sin(-i*_),S=e*Math.cos(i*_)*Math.sin(s*m+Math.PI),c[T++]=g,c[T++]=p-f,c[T++]=S,c[T++]=g,c[T++]=p,c[T++]=S,c[T++]=1-s/a,c[T++]=(i/n*(Math.PI*e/2)+(r+Math.PI*e/2))/(r+Math.PI*e),i<n&&(u[E++]=x+i*(a+1)+s,u[E++]=x+i*(a+1)+s+(a+1),u[E++]=x+i*(a+1)+s+1,u[E++]=x+i*(a+1)+s,u[E++]=x+i*(a+1)+s+a,u[E++]=x+i*(a+1)+s+(a+1));for(x+=(n+1)*(a+1),s=0;s<=a;s++)g=e*Math.cos(s*m+Math.PI),p=f,S=e*Math.sin(s*m+Math.PI),c[T++]=g,c[T+8*(a+1)-1]=g,c[T++]=p,c[T+8*(a+1)-1]=-p,c[T++]=S,c[T+8*(a+1)-1]=S,c[T++]=g,c[T+8*(a+1)-1]=g,c[T++]=0,c[T+8*(a+1)-1]=0,c[T++]=S,c[T+8*(a+1)-1]=S,c[T++]=1-1*s/a,c[T+8*(a+1)-1]=1-1*s/a,c[T++]=Math.PI*e/2/(r+Math.PI*e),c[T+8*(a+1)-1]=(Math.PI*e/2+r)/(r+Math.PI*e);for(s=0;s<a;s++)u[E++]=s+x+(a+1),u[E++]=s+x+1,u[E++]=s+x,u[E++]=s+x+(a+1),u[E++]=s+x+(a+1)+1,u[E++]=s+x+1;return x+=2*(a+1),ir._createMesh(h,c,u)}static createCone(e=.5,r=1,n=32){for(var a,i=n+1+1+2*(n+1),s=6*n+3*n,o=t.VertexMesh.getVertexDeclaration("POSITION,NORMAL,UV"),l=o.vertexStride/4,h=new Float32Array(i*l),d=new Uint16Array(s),c=2*Math.PI/n,u=r/2,_=0,m=0,f=0,g=0,p=0,S=new t.Vector3,T=new t.Vector3(0,-1,0),E=new t.Vector3(0,u,0),x=new t.Vector3,A=new t.Vector3,D=new t.Quaternion,R=new t.Vector3,M=0,C=0,v=0;v<=n;v++)_=v*c,f=Math.cos(_+Math.PI)*e,g=u,p=Math.sin(_+Math.PI)*e,h[M++]=0,h[M+8*(n+1)-1]=f,h[M++]=g,h[M+8*(n+1)-1]=-g,h[M++]=0,h[M+8*(n+1)-1]=p,S.x=f,S.y=0,S.z=p,x.x=f,x.y=-g,x.z=p,t.Vector3.subtract(x,E,A),t.Vector3.normalize(A,A),a=Math.acos(t.Vector3.dot(T,A)),t.Vector3.cross(T,A,R),t.Vector3.normalize(R,R),t.Quaternion.createFromAxisAngle(R,a,D),t.Vector3.normalize(S,S),t.Vector3.transformQuat(S,D,S),t.Vector3.normalize(S,S),h[M++]=S.x,h[M+8*(n+1)-1]=S.x,h[M++]=S.y,h[M+8*(n+1)-1]=S.y,h[M++]=S.z,h[M+8*(n+1)-1]=S.z,h[M++]=1-1*v/n,h[M+8*(n+1)-1]=1-1*v/n,h[M++]=0,h[M+8*(n+1)-1]=1;M+=8*(n+1);for(var y=0;y<n;y++)d[C++]=y+m+(n+1),d[C++]=y+m+1,d[C++]=y+m,d[C++]=y+m+(n+1),d[C++]=y+m+(n+1)+1,d[C++]=y+m+1;m+=2*(n+1);for(var I=0;I<=n;I++)0===I&&(h[M++]=0,h[M++]=-u,h[M++]=0,h[M++]=0,h[M++]=-1,h[M++]=0,h[M++]=.5,h[M++]=.5),_=I*c,f=Math.cos(_+Math.PI)*e,g=-u,p=Math.sin(_+Math.PI)*e,h[M++]=f,h[M++]=g,h[M++]=p,h[M++]=0,h[M++]=-1,h[M++]=0,h[M++]=.5+.5*Math.cos(_),h[M++]=.5+.5*Math.sin(_);for(var L=0;L<n;L++)d[C++]=0+m,d[C++]=L+2+m,d[C++]=L+1+m;return m+=n+1+1,ir._createMesh(o,h,d)}static createCylinder(e=.5,r=2,n=32){for(var a=n+1+1+2*(n+1)+(n+1+1),i=3*n+6*n+3*n,s=t.VertexMesh.getVertexDeclaration("POSITION,NORMAL,UV"),o=s.vertexStride/4,l=new Float32Array(a*o),h=new Uint16Array(i),d=2*Math.PI/n,c=r/2,u=0,_=0,m=0,f=0,g=0,p=0,S=0,T=0;T<=n;T++)0===T&&(l[p++]=0,l[p++]=c,l[p++]=0,l[p++]=0,l[p++]=1,l[p++]=0,l[p++]=.5,l[p++]=.5),u=T*d,m=Math.cos(u)*e,f=c,g=Math.sin(u)*e,l[p++]=m,l[p++]=f,l[p++]=g,l[p++]=0,l[p++]=1,l[p++]=0,l[p++]=.5+.5*Math.cos(u),l[p++]=.5+.5*Math.sin(u);for(var E=0;E<n;E++)h[S++]=0,h[S++]=E+1,h[S++]=E+2;_+=n+1+1;for(var x=0;x<=n;x++)u=x*d,m=Math.cos(u+Math.PI)*e,f=c,g=Math.sin(u+Math.PI)*e,l[p++]=m,l[p+8*(n+1)-1]=m,l[p++]=f,l[p+8*(n+1)-1]=-f,l[p++]=g,l[p+8*(n+1)-1]=g,l[p++]=m,l[p+8*(n+1)-1]=m,l[p++]=0,l[p+8*(n+1)-1]=0,l[p++]=g,l[p+8*(n+1)-1]=g,l[p++]=1-1*x/n,l[p+8*(n+1)-1]=1-1*x/n,l[p++]=0,l[p+8*(n+1)-1]=1;p+=8*(n+1);for(var A=0;A<n;A++)h[S++]=A+_+(n+1),h[S++]=A+_+1,h[S++]=A+_,h[S++]=A+_+(n+1),h[S++]=A+_+(n+1)+1,h[S++]=A+_+1;_+=2*(n+1);for(var D=0;D<=n;D++)0===D&&(l[p++]=0,l[p++]=-c,l[p++]=0,l[p++]=0,l[p++]=-1,l[p++]=0,l[p++]=.5,l[p++]=.5),u=D*d,m=Math.cos(u+Math.PI)*e,f=-c,g=Math.sin(u+Math.PI)*e,l[p++]=m,l[p++]=f,l[p++]=g,l[p++]=0,l[p++]=-1,l[p++]=0,l[p++]=.5+.5*Math.cos(u),l[p++]=.5+.5*Math.sin(u);for(var R=0;R<n;R++)h[S++]=0+_,h[S++]=R+2+_,h[S++]=R+1+_;return _+=n+1+1,ir._createMesh(s,l,h)}static createPlane(e=10,r=10,n=10,a=10){for(var i=(n+1)*(a+1),s=new Uint16Array(n*a*2*3),o=t.VertexMesh.getVertexDeclaration("POSITION,NORMAL,UV"),l=o.vertexStride/4,h=new Float32Array(i*l),d=e/2,c=r/2,u=e/n,_=r/a,m=0,f=0;f<=a;f++)for(var g=0;g<=n;g++)h[m++]=g*u-d,h[m++]=0,h[m++]=f*_-c,h[m++]=0,h[m++]=1,h[m++]=0,h[m++]=1*g/n,h[m++]=1*f/a;var p=0;for(f=0;f<a;f++)for(g=0;g<n;g++)s[p++]=(f+1)*(n+1)+g,s[p++]=f*(n+1)+g,s[p++]=(f+1)*(n+1)+g+1,s[p++]=f*(n+1)+g,s[p++]=f*(n+1)+g+1,s[p++]=(f+1)*(n+1)+g+1;return ir._createMesh(o,h,s)}static createQuad(e=1,r=1){var n=t.VertexMesh.getVertexDeclaration("POSITION,NORMAL,UV"),a=e/2,i=r/2,s=new Float32Array([-a,i,0,0,0,1,0,0,a,i,0,0,0,1,1,0,-a,-i,0,0,0,1,0,1,a,-i,0,0,0,1,1,1]),o=new Uint16Array([0,1,2,3,2,1]);return ir._createMesh(n,s,o)}static createSphere(e=.5,r=32,n=32){var a=(r+1)*(n+1),i=3*r*(n+1)*2,s=new Uint16Array(i),o=t.VertexMesh.getVertexDeclaration("POSITION,NORMAL,UV"),l=o.vertexStride/4,h=new Float32Array(a*l),d=Math.PI/r,c=2*Math.PI/n,u=0;a=0,i=0;for(var _=0;_<r+1;_++)for(var m=Math.sin(_*d),f=Math.cos(_*d),g=0;g<n+1;g++){var p=m*Math.sin(g*c+1*Math.PI/2),S=m*Math.cos(g*c+1*Math.PI/2);h[a+0]=p*e,h[a+1]=f*e,h[a+2]=S*e,h[a+3]=p,h[a+4]=f,h[a+5]=S,h[a+6]=g/n,h[a+7]=_/r,a+=l,_!=r-1&&(s[i++]=u+(n+1),s[i++]=u,s[i++]=u+1,s[i++]=u+n,s[i++]=u,s[i++]=u+(n+1),u++)}return ir._createMesh(o,h,s)}}var sr='#define SHADER_NAME BlitFS\r\n\r\n#include "Color.glsl";\r\n#include "FastApproximateAntiAliasing.glsl";\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\nvoid main()\r\n{\r\n#ifdef FXAA\r\n    gl_FragColor = FXAAMain(u_MainTex, v_Texcoord0, u_MainTex_TexelSize.zw);\r\n#else\r\n    vec4 mainColor = texture2D(u_MainTex, v_Texcoord0);\r\n    #ifdef Gamma_u_MainTex\r\n    mainColor = gammaToLinear(mainColor);\r\n    #endif // Gamma_u_AlbedoTexture\r\n    gl_FragColor = mainColor;\r\n#endif\r\n\r\n    gl_FragColor = outputTransform(gl_FragColor);\r\n}\r\n';class or{static init(){t.Shader3D.addInclude("FastApproximateAntiAliasing.glsl","#if !defined(FXAA_lib)\r\n    #define FXAA_lib\r\n#ifdef FXAA\r\n    #define EDGE_THRESHOLD_MIN 0.0312\r\n    #define EDGE_THRESHOLD_MAX 0.125\r\n    #define QUALITY(q)\t       ((q) < 5 ? 1.0 : ((q) > 5 ? ((q) < 10 ? 2.0 : ((q) < 11 ? 4.0 : 8.0)) : 1.5))\r\n    #define ITERATIONS\t       12\r\n    #define SUBPIXEL_QUALITY   0.75\r\n\r\nfloat rgb2luma(in vec3 rgb)\r\n{\r\n    return dot(rgb, vec3(0.299, 0.587, 0.114));\r\n}\r\n\r\nvec3 textureOffsetbyScreenSize(in sampler2D mainTex, in vec2 uv, in vec2 offset, in vec2 inverseScreenSize)\r\n{\r\n    vec2 sampleruv = uv + inverseScreenSize * offset; // u_texturesize表示每个像素的偏移量\r\n    return texture2D(mainTex, sampleruv).rgb;\r\n}\r\n\r\nvec4 FXAAMain(in sampler2D mainTex, in vec2 texuv, in vec2 inverseScreenSize)\r\n{\r\n\r\n    vec4 mainColor = texture2D(mainTex, texuv);\r\n    vec3 colorCenter = mainColor.rgb;\r\n    // Luma at the current fragment\r\n    float lumaCenter = rgb2luma(colorCenter);\r\n\r\n    // Luma at the four direct neighbours of the current fragment.\r\n    float lumaDown = rgb2luma(textureOffsetbyScreenSize(mainTex, texuv, vec2(0, -1), inverseScreenSize));\r\n    float lumaUp = rgb2luma(textureOffsetbyScreenSize(mainTex, texuv, vec2(0, 1), inverseScreenSize));\r\n    float lumaLeft = rgb2luma(textureOffsetbyScreenSize(mainTex, texuv, vec2(-1, 0), inverseScreenSize));\r\n    float lumaRight = rgb2luma(textureOffsetbyScreenSize(mainTex, texuv, vec2(1, 0), inverseScreenSize));\r\n\r\n    // Find the maximum and minimum luma around the current fragment.\r\n    float lumaMin = min(lumaCenter, min(min(lumaDown, lumaUp), min(lumaLeft, lumaRight)));\r\n    float lumaMax = max(lumaCenter, max(max(lumaDown, lumaUp), max(lumaLeft, lumaRight)));\r\n\r\n    // Compute the delta.\r\n    float lumaRange = lumaMax - lumaMin;\r\n\r\n    // If the luma variation is lower that a threshold (or if we are in a really dark area), we are not on an edge, don't perform any AA.\r\n    if (lumaRange < max(EDGE_THRESHOLD_MIN, lumaMax * EDGE_THRESHOLD_MAX))\r\n\t{\r\n\t    return mainColor;\r\n\t}\r\n\r\n    // Query the 4 remaining corners lumas.\r\n    float lumaDownLeft = rgb2luma(textureOffsetbyScreenSize(mainTex, texuv, vec2(-1, -1), inverseScreenSize));\r\n    float lumaUpRight = rgb2luma(textureOffsetbyScreenSize(mainTex, texuv, vec2(1, 1), inverseScreenSize));\r\n    float lumaUpLeft = rgb2luma(textureOffsetbyScreenSize(mainTex, texuv, vec2(-1, 1), inverseScreenSize));\r\n    float lumaDownRight = rgb2luma(textureOffsetbyScreenSize(mainTex, texuv, vec2(1, -1), inverseScreenSize));\r\n\r\n    // Combine the four edges lumas (using intermediary variables for future computations with the same values).\r\n    float lumaDownUp = lumaDown + lumaUp;\r\n    float lumaLeftRight = lumaLeft + lumaRight;\r\n\r\n    // Same for corners\r\n    float lumaLeftCorners = lumaDownLeft + lumaUpLeft;\r\n    float lumaDownCorners = lumaDownLeft + lumaDownRight;\r\n    float lumaRightCorners = lumaDownRight + lumaUpRight;\r\n    float lumaUpCorners = lumaUpRight + lumaUpLeft;\r\n\r\n    // Compute an estimation of the gradient along the horizontal and vertical axis.\r\n    float edgeHorizontal = abs(-2.0 * lumaLeft + lumaLeftCorners) + abs(-2.0 * lumaCenter + lumaDownUp) * 2.0 + abs(-2.0 * lumaRight + lumaRightCorners);\r\n    float edgeVertical = abs(-2.0 * lumaUp + lumaUpCorners) + abs(-2.0 * lumaCenter + lumaLeftRight) * 2.0 + abs(-2.0 * lumaDown + lumaDownCorners);\r\n\r\n    // Is the local edge horizontal or vertical ?\r\n    bool isHorizontal = (edgeHorizontal >= edgeVertical);\r\n\r\n    // Choose the step size (one pixel) accordingly.\r\n    float stepLength = isHorizontal ? inverseScreenSize.y : inverseScreenSize.x;\r\n\r\n    // Select the two neighboring texels lumas in the opposite direction to the local edge.\r\n    float luma1 = isHorizontal ? lumaDown : lumaLeft;\r\n    float luma2 = isHorizontal ? lumaUp : lumaRight;\r\n    // Compute gradients in this direction.\r\n    float gradient1 = luma1 - lumaCenter;\r\n    float gradient2 = luma2 - lumaCenter;\r\n\r\n    // Which direction is the steepest ?\r\n    bool is1Steepest = abs(gradient1) >= abs(gradient2);\r\n\r\n    // Gradient in the corresponding direction, normalized.\r\n    float gradientScaled = 0.25 * max(abs(gradient1), abs(gradient2));\r\n\r\n    // Average luma in the correct direction.\r\n    float lumaLocalAverage = 0.0;\r\n    if (is1Steepest)\r\n\t{\r\n\t    // Switch the direction\r\n\t    stepLength = -stepLength;\r\n\t    lumaLocalAverage = 0.5 * (luma1 + lumaCenter);\r\n\t}\r\n    else\r\n\t{\r\n\t    lumaLocalAverage = 0.5 * (luma2 + lumaCenter);\r\n\t}\r\n\r\n    // Shift UV in the correct direction by half a pixel.\r\n    vec2 currentUv = texuv;\r\n    if (isHorizontal)\r\n\t{\r\n\t    currentUv.y += stepLength * 0.5;\r\n\t}\r\n    else\r\n\t{\r\n\t    currentUv.x += stepLength * 0.5;\r\n\t}\r\n\r\n    // Compute offset (for each iteration step) in the right direction.\r\n    vec2 offset = isHorizontal ? vec2(inverseScreenSize.x, 0.0) : vec2(0.0, inverseScreenSize.y);\r\n    // Compute UVs to explore on each side of the edge, orthogonally. The QUALITY allows us to step faster.\r\n    vec2 uv1 = currentUv - offset * QUALITY(0);\r\n    vec2 uv2 = currentUv + offset * QUALITY(0);\r\n\r\n    // Read the lumas at both current extremities of the exploration segment, and compute the delta wrt to the local average luma.\r\n    float lumaEnd1 = rgb2luma(textureOffsetbyScreenSize(mainTex, uv1, vec2(0.0, 0.0), inverseScreenSize));\r\n    float lumaEnd2 = rgb2luma(textureOffsetbyScreenSize(mainTex, uv2, vec2(0.0, 0.0), inverseScreenSize));\r\n    lumaEnd1 -= lumaLocalAverage;\r\n    lumaEnd2 -= lumaLocalAverage;\r\n\r\n    // If the luma deltas at the current extremities is larger than the local gradient, we have reached the side of the edge.\r\n    bool reached1 = abs(lumaEnd1) >= gradientScaled;\r\n    bool reached2 = abs(lumaEnd2) >= gradientScaled;\r\n    bool reachedBoth = reached1 && reached2;\r\n\r\n    // If the side is not reached, we continue to explore in this direction.\r\n    if (!reached1)\r\n\t{\r\n\t    uv1 -= offset * QUALITY(1);\r\n\t}\r\n    if (!reached2)\r\n\t{\r\n\t    uv2 += offset * QUALITY(1);\r\n\t}\r\n\r\n    // If both sides have not been reached, continue to explore.\r\n    if (!reachedBoth)\r\n\t{\r\n\r\n\t    for (int i = 2; i < ITERATIONS; i++)\r\n\t\t{\r\n\t\t    // If needed, read luma in 1st direction, compute delta.\r\n\t\t    if (!reached1)\r\n\t\t\t{\r\n\t\t\t    lumaEnd1 = rgb2luma(textureOffsetbyScreenSize(mainTex, uv1, vec2(0.0, 0.0), inverseScreenSize));\r\n\t\t\t    lumaEnd1 = lumaEnd1 - lumaLocalAverage;\r\n\t\t\t}\r\n\t\t    // If needed, read luma in opposite direction, compute delta.\r\n\t\t    if (!reached2)\r\n\t\t\t{\r\n\t\t\t    lumaEnd2 = rgb2luma(textureOffsetbyScreenSize(mainTex, uv2, vec2(0.0, 0.0), inverseScreenSize));\r\n\t\t\t    lumaEnd2 = lumaEnd2 - lumaLocalAverage;\r\n\t\t\t}\r\n\t\t    // If the luma deltas at the current extremities is larger than the local gradient, we have reached the side of the edge.\r\n\t\t    reached1 = abs(lumaEnd1) >= gradientScaled;\r\n\t\t    reached2 = abs(lumaEnd2) >= gradientScaled;\r\n\t\t    reachedBoth = reached1 && reached2;\r\n\r\n\t\t    // If the side is not reached, we continue to explore in this direction, with a variable quality.\r\n\t\t    if (!reached1)\r\n\t\t\t{\r\n\t\t\t    uv1 -= offset * QUALITY(i);\r\n\t\t\t}\r\n\t\t    if (!reached2)\r\n\t\t\t{\r\n\t\t\t    uv2 += offset * QUALITY(i);\r\n\t\t\t}\r\n\r\n\t\t    // If both sides have been reached, stop the exploration.\r\n\t\t    if (reachedBoth)\r\n\t\t\t{\r\n\t\t\t    break;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n    // Compute the distances to each side edge of the edge (!).\r\n    float distance1 = isHorizontal ? (texuv.x - uv1.x) : (texuv.y - uv1.y);\r\n    float distance2 = isHorizontal ? (uv2.x - texuv.x) : (uv2.y - texuv.y);\r\n\r\n    // In which direction is the side of the edge closer ?\r\n    bool isDirection1 = distance1 < distance2;\r\n    float distanceFinal = min(distance1, distance2);\r\n\r\n    // Thickness of the edge.\r\n    float edgeThickness = (distance1 + distance2);\r\n\r\n    // Is the luma at center smaller than the local average ?\r\n    bool isLumaCenterSmaller = lumaCenter < lumaLocalAverage;\r\n\r\n    // If the luma at center is smaller than at its neighbour, the delta luma at each end should be positive (same variation).\r\n    bool correctVariation1 = (lumaEnd1 < 0.0) != isLumaCenterSmaller;\r\n    bool correctVariation2 = (lumaEnd2 < 0.0) != isLumaCenterSmaller;\r\n\r\n    // Only keep the result in the direction of the closer side of the edge.\r\n    bool correctVariation = isDirection1 ? correctVariation1 : correctVariation2;\r\n\r\n    // UV offset: read in the direction of the closest side of the edge.\r\n    float pixelOffset = -distanceFinal / edgeThickness + 0.5;\r\n\r\n    // If the luma variation is incorrect, do not offset.\r\n    float finalOffset = correctVariation ? pixelOffset : 0.0;\r\n\r\n    // Sub-pixel shifting\r\n    // Full weighted average of the luma over the 3x3 neighborhood.\r\n    float lumaAverage = (1.0 / 12.0) * (2.0 * (lumaDownUp + lumaLeftRight) + lumaLeftCorners + lumaRightCorners);\r\n    // Ratio of the delta between the global average and the center luma, over the luma range in the 3x3 neighborhood.\r\n    float subPixelOffset1 = clamp(abs(lumaAverage - lumaCenter) / lumaRange, 0.0, 1.0);\r\n    float subPixelOffset2 = (-2.0 * subPixelOffset1 + 3.0) * subPixelOffset1 * subPixelOffset1;\r\n    // Compute a sub-pixel offset based on this delta.\r\n    float subPixelOffsetFinal = subPixelOffset2 * subPixelOffset2 * SUBPIXEL_QUALITY;\r\n\r\n    // Pick the biggest of the two offsets.\r\n    finalOffset = max(finalOffset, subPixelOffsetFinal);\r\n\r\n    // Compute the final UV coordinates.\r\n    vec2 finalUv = texuv;\r\n    if (isHorizontal)\r\n\t{\r\n\t    finalUv.y += finalOffset * stepLength;\r\n\t}\r\n    else\r\n\t{\r\n\t    finalUv.x += finalOffset * stepLength;\r\n\t}\r\n\r\n    // Read the color at the new UV coordinates, and use it.\r\n    return texture2D(mainTex, finalUv);\r\n}\r\n#endif//FXAA\r\n#endif // Color_lib\r\n"),t.Shader3D.addInclude("ColorGrading.glsl","#if !defined(ColorGrading_lib)\r\n    #define ColorGrading_lib\r\n\r\nconst float ACEScc_MAX = 1.4679964;\r\nconst float ACEScc_MIDGRAY = 0.4135884;\r\n\r\nconst float LogC_cut = 0.011361;\r\nconst float LogC_a = 5.555556;\r\nconst float LogC_b = 0.047996;\r\nconst float LogC_c = 0.244161;\r\nconst float LogC_d = 0.386036;\r\nconst float LogC_e = 5.301883;\r\nconst float LogC_f = 0.092819;\r\n\r\nfloat linearToLogC(float x)\r\n{\r\n    float o;\r\n    if (x > LogC_cut)\r\n\t{\r\n\t    o = LogC_c * log10(max(LogC_a * x + LogC_b, 0.0)) + LogC_d;\r\n\t}\r\n    else\r\n\t{\r\n\t    o = LogC_e * x + LogC_f;\r\n\t}\r\n    return o;\r\n}\r\n\r\nvec3 linearToLogC(vec3 x)\r\n{\r\n    vec3 logc;\r\n    logc.x = linearToLogC(x.x);\r\n    logc.y = linearToLogC(x.y);\r\n    logc.z = linearToLogC(x.z);\r\n    return logc;\r\n}\r\n\r\nfloat logCToLinear(float x)\r\n{\r\n    float o;\r\n    if (x > LogC_e * LogC_cut + LogC_f)\r\n\to = (pow(10.0, (x - LogC_d) / LogC_c) - LogC_b) / LogC_a;\r\n    else\r\n\to = (x - LogC_f) / LogC_e;\r\n    return o;\r\n}\r\n\r\nvec3 logCToLinear(vec3 x)\r\n{\r\n    vec3 linear;\r\n    linear.x = logCToLinear(x.x);\r\n    linear.y = logCToLinear(x.y);\r\n    linear.z = logCToLinear(x.z);\r\n    return linear;\r\n}\r\n\r\n// Hue, Saturation, Value\r\n// Ranges:\r\n//  Hue [0.0, 1.0]\r\n//  Sat [0.0, 1.0]\r\n//  Lum [0.0, HALF_MAX]\r\nvec3 RgbToHsv(vec3 c)\r\n{\r\n    const vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\r\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\r\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\r\n    float d = q.x - min(q.w, q.y);\r\n    const float e = 1.0e-4;\r\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\r\n}\r\n\r\nvec3 HsvToRgb(vec3 c)\r\n{\r\n    const vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\r\n    vec3 p = abs(fract(vec3(c.x) + K.xyz) * 6.0 - K.www);\r\n    return c.z * mix(vec3(K.x) , saturate(p - vec3(K.x)), c.y);\r\n}\r\n\r\nfloat RotateHue(float value, float low, float hi)\r\n{\r\n    return (value < low)\r\n            ? value + hi\r\n            : (value > hi)\r\n                ? value - hi\r\n                : value;\r\n}\r\n\r\n\r\nconst mat3 Linear_to_LMS_MAT = mat3(\r\n    vec3(3.90405e-1, 7.08416e-2, 2.31082e-2),\r\n    vec3(5.49941e-1, 9.63172e-1, 1.28021e-1),\r\n    vec3(8.92632e-3, 1.35775e-3, 9.36245e-1));\r\n\r\nconst mat3 LMS_to_Linear_MAT = mat3(\r\n    vec3(2.85847e+0, -2.10182e-1, -4.18120e-2),\r\n    vec3(-1.62879e+0, 1.15820e+0, -1.18169e-1),\r\n    vec3(-2.48910e-2, 3.24281e-4, 1.06867e+0));\r\n\r\n// white balance\r\nuniform vec3 u_ColorBalance;\r\n\r\n// split toning\r\nuniform vec4 u_SplitShadows;\r\nuniform vec3 u_Splithighlights;\r\n\r\n// shadows, midtones, highlights\r\nuniform vec3 u_Shadows;\r\nuniform vec3 u_Midtones;\r\nuniform vec3 u_Highlights;\r\nuniform vec4 u_Limits;\r\n\r\n// lift, gamma, gain\r\nuniform vec3 u_Lift;\r\nuniform vec3 u_Gamma;\r\nuniform vec3 u_Gain;\r\n\r\n//color adjusted\r\nuniform vec4 u_ColorFilter;\r\nuniform vec4 u_HueSatCon;\r\n\r\nfloat luminance(in vec3 color)\r\n{\r\n    #ifdef ACES\r\n    float luma = dot(color, AP1_RGB2Y);\r\n    #else\r\n    float luma = dot(color, vec3(0.2126729, 0.7151522, 0.0721750));\r\n    #endif // ACES\r\n    return luma;\r\n}\r\n\r\nvec3 softlight(vec3 base, vec3 blend)\r\n{\r\n    vec3 r1 = 2.0 * base * blend + base * base * (1.0 - 2.0 * blend);\r\n    vec3 r2 = sqrt(base) * (2.0 * blend - 1.0) + 2.0 * base * (1.0 - blend);\r\n    vec3 t = step(0.5, blend);\r\n    return r2 * t + (1.0 - t) * r1;\r\n}\r\n\r\n// input linear sRGB\r\n// if ACES tonemap, calculate in ACEScg, return ACEScg\r\n// else calculate in logC, return linear sRGB\r\nvec3 colorGrade(in vec3 color)\r\n{\r\n    // White balance in LMS space\r\n    vec3 colorLMS = Linear_to_LMS_MAT * color;\r\n    colorLMS *= u_ColorBalance.xyz;\r\n    color = LMS_to_Linear_MAT * colorLMS;\r\n\r\n    // Do contrast in log after white balance\r\n    #ifdef ACES\r\n        vec3 colorLog = ACES_to_ACEScc(sRGB_to_AP0_MAT * color);\r\n    #else\r\n        vec3 colorLog = linearToLogC(color);\r\n    #endif\r\n    \r\n    colorLog = (colorLog - vec3(ACEScc_MIDGRAY)) * u_HueSatCon.z + vec3(ACEScc_MIDGRAY);\r\n\r\n\r\n    #ifdef ACES\r\n        //colorLinear = ACES_to_ACEScg(ACEScc_to_ACES(colorLog));\r\n        color = AP0_to_AP1_MAT * ACEScc_to_ACES(colorLog);\r\n    #else\r\n        color = logCToLinear(colorLog);\r\n    #endif // ACES\r\n\r\n    // Color filter is just an unclipped multiplier\r\n    color = color * u_ColorFilter.rgb;\r\n\r\n    color = max(vec3(0.0), color);\r\n\r\n    // split toning\r\n    float balance = u_SplitShadows.w;\r\n    vec3 gamma = linearToGamma(color);\r\n    float splitLuma = saturate(luminance(color)) + balance;\r\n    vec3 splitShadows = mix(vec3(0.5, 0.5, 0.5), u_SplitShadows.xyz, 1.0 - splitLuma);\r\n    vec3 splitHeighlights = mix(vec3(0.5, 0.5, 0.5), u_Splithighlights.xyz, splitLuma);\r\n    gamma = softlight(gamma, splitShadows);\r\n    gamma = softlight(gamma, splitHeighlights);\r\n    color = gammaToLinear(gamma);\r\n\r\n    // shadows, midtones, highlights\r\n    float luma = luminance(color);\r\n    float shadowFactor = 1.0 - smoothstep(u_Limits.x, u_Limits.y, luma);\r\n    float highlightsFactor = smoothstep(u_Limits.z, u_Limits.w, luma);\r\n    float midtonesFactor = 1.0 - shadowFactor - highlightsFactor;\r\n    color = color * u_Shadows.xyz * shadowFactor + color * u_Midtones.xyz * midtonesFactor + color * u_Highlights.xyz * highlightsFactor;\r\n\r\n    // Lift, gamma, gain\r\n    color = color * u_Gain.xyz + u_Lift.xyz;\r\n    color = sign(color) * pow(abs(color), u_Gamma.xyz);\r\n    \r\n    // HSV operations\r\n    vec3 hsv = RgbToHsv(color);\r\n    // Hue Shift & Hue Vs Hue\r\n    float hue = hsv.x + u_HueSatCon.x;\r\n    hsv.x = RotateHue(hsv.x, 0.0, 1.0);\r\n    color = HsvToRgb(hsv);\r\n\r\n    // Global saturation\r\n    luma = luminance(color);\r\n    color = vec3(luma) + (vec3(u_HueSatCon.y)) * (color - vec3(luma));\r\n    \r\n    return color;\r\n}\r\n\r\n#endif // ColorGrading_lib"),t.Shader3D.addInclude("Tonemapping.glsl","#if !defined(Tonemapping_lib)\r\n    #define Tonemapping_lib\r\n\r\n// ACES Tonemapping color grading in ACEScg space\r\nvec3 tonemap(in vec3 ap1)\r\n{\r\n    vec3 color = ap1;\r\n\r\n    #ifdef ACES\r\n    vec3 aces = AP1_to_AP0_MAT * color;\r\n    vec3 oces = RRT(aces);\r\n    color = ODT_sRGB_100nits(oces);\r\n    #endif // ACES\r\n\r\n    // todo other tonemap\r\n\r\n    return color;\r\n}\r\n\r\n#endif // Tonemapping_lib"),t.Shader3D.addInclude("LUT.glsl","#if !defined(LUT_lib)\r\n    #define LUT_lib\r\n\r\n// scaleOffset = (1 / lut_width, 1 / lut_height, lut_height - 1)\r\nvec3 applyLut(sampler2D lut, vec3 uvw, vec3 scaleOffset)\r\n{\r\n    uvw.z *= scaleOffset.z;\r\n\r\n    float shift = floor(uvw.z);\r\n    uvw.xy = uvw.xy * scaleOffset.z * scaleOffset.xy + scaleOffset.xy * 0.5;\r\n    uvw.x += shift * scaleOffset.y;\r\n\r\n    uvw.xyz = mix(\r\n\ttexture2DLodEXT(lut, uvw.xy, 0.0).rgb,\r\n\ttexture2DLodEXT(lut, uvw.xy + vec2(scaleOffset.y, 0.0), 0.0).rgb,\r\n\tuvw.z - shift);\r\n    return uvw;\r\n}\r\n\r\n#endif // LUT_lib");let r={a_PositionTexcoord:[t.VertexMesh.MESH_POSITION0,e.ShaderDataType.Vector4]},n={u_OffsetScale:e.ShaderDataType.Vector4,u_MainTex:e.ShaderDataType.Texture2D,u_MainTex_TexelSize:e.ShaderDataType.Vector4},a=t.Shader3D.add("BlitScreen");a.shaderType=t.ShaderFeatureType.PostProcess;let i=new t.SubShader(r,n);a.addSubShader(i);let s=i.addShaderPass(je,sr);s.statefirst=!0;let o=s.renderState;o.depthTest=Ee.DEPTHTEST_ALWAYS,o.depthWrite=!1,o.cull=Ee.CULL_NONE,o.blend=Ee.BLEND_DISABLE;let l=t.Shader3D.add("BlitScreen_Transparnet");a.shaderType=t.ShaderFeatureType.PostProcess;let h=new t.SubShader(r,n);l.addSubShader(h);let d=h.addShaderPass(je,sr);s.statefirst=!0,o=d.renderState,o.depthTest=Ee.DEPTHTEST_ALWAYS,o.depthWrite=!1,o.cull=Ee.CULL_NONE,o.blend=Ee.BLEND_ENABLE_ALL,o.srcBlend=Ee.BLENDPARAM_SRC_ALPHA,o.dstBlend=Ee.BLENDPARAM_ONE_MINUS_SRC_ALPHA,this.lutBuilderInit()}static lutBuilderInit(){let r={a_PositionTexcoord:[t.VertexMesh.MESH_POSITION0,e.ShaderDataType.Vector4]},n={u_OffsetScale:e.ShaderDataType.Vector4,u_MainTex:e.ShaderDataType.Texture2D,u_MainTex_TexelSize:e.ShaderDataType.Vector4,u_LutParams:e.ShaderDataType.Vector4},a=t.Shader3D.add("LUTBuilder");a.shaderType=t.ShaderFeatureType.PostProcess;let i=new t.SubShader(r,n);a.addSubShader(i);let s=i.addShaderPass(je,'#define SHADER_NAME LutBuilder\r\n\r\n#include "Color.glsl";\r\n\r\n#ifdef ACES\r\n    #include "ACES.glsl";\r\n#endif // ACES\r\n\r\n#include "ColorGrading.glsl";\r\n\r\n#include "Tonemapping.glsl";\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\n// lut params: (lutHeight, 0.5 / lutWidth, 0.5 / lutHeight, lutHeidht / (lutHeight - 1))\r\nvec3 lutValue(vec2 uv, vec4 params)\r\n{\r\n    vec3 color;\r\n    uv -= params.yz;\r\n    color.r = fract(uv.x * params.x);\r\n    color.b = uv.x - color.r / params.x;\r\n    color.g = uv.y;\r\n    return color * params.w;\r\n}\r\n\r\n// internal lut logC space\r\nvoid main()\r\n{\r\n    vec2 uv = v_Texcoord0;\r\n    vec3 color = lutValue(uv, u_LutParams);\r\n    color = logCToLinear(color);\r\n    vec3 grade = colorGrade(color);\r\n    vec3 tone = tonemap(grade);\r\n\r\n    gl_FragColor = vec4(tone, 1.0);\r\n}');s.renderState.depthTest=Ee.DEPTHTEST_ALWAYS,s.renderState.depthWrite=!1,s.renderState.cull=Ee.CULL_NONE,s.renderState.blend=Ee.BLEND_DISABLE,s.statefirst=!0}}var lr='#define SHADER_NAME DepthVS\r\n\r\n#include "DepthVertex.glsl";\r\n\r\nvoid main()\r\n{\r\n    Vertex vertex;\r\n    getVertexParams(vertex);\r\n\r\n    mat4 worldMat = getWorldMatrix();\r\n    vec4 pos = (worldMat * vec4(vertex.positionOS, 1.0));\r\n    vec3 positionWS = pos.xyz / pos.w;\r\n\r\n    mat4 normalMat = transpose(inverse(worldMat));\r\n    vec3 normalWS = normalize((normalMat * vec4(vertex.normalOS, 0.0)).xyz);\r\n\r\n    vec4 positionCS = DepthPositionCS(positionWS, normalWS);\r\n    gl_Position = remapPositionZ(positionCS);\r\n}',hr='#define SHADER_NAME DepthFS\r\n\r\n#include "DepthFrag.glsl";\r\n\r\nvoid main()\r\n{\r\n    gl_FragColor = getDepthColor();\r\n}';class dr{static init(){let r={UnlitBlock:{u_AlbedoColor:e.ShaderDataType.Color,u_TilingOffset:e.ShaderDataType.Vector4},u_AlbedoTexture:e.ShaderDataType.Texture2D,u_AlphaTestValue:e.ShaderDataType.Float},n={u_AlbedoColor:t.Color.WHITE,u_TilingOffset:new t.Vector4(1,1,0,0),u_AlphaTestValue:.5},a=t.Shader3D.add("Unlit",!0,!1);a.shaderType=t.ShaderFeatureType.D3;let i=new t.SubShader(t.SubShader.DefaultAttributeMap,r,n);a.addSubShader(i),i.addShaderPass('\r\n#define SHADER_NAME UnlitVS\r\n\r\n#include "Math.glsl";\r\n\r\n#include "Scene.glsl";\r\n#include "SceneFogInput.glsl";\r\n\r\n#include "Camera.glsl";\r\n#include "Sprite3DVertex.glsl";\r\n\r\n#include "VertexCommon.glsl";\r\n\r\n#ifdef UV\r\nvarying vec2 v_Texcoord0;\r\n#endif // UV\r\n\r\n#ifdef COLOR\r\nvarying vec4 v_VertexColor;\r\n#endif // COLOR\r\n\r\nvoid main()\r\n{\r\n    Vertex vertex;\r\n    getVertexParams(vertex);\r\n\r\n#ifdef UV\r\n    v_Texcoord0 = transformUV(vertex.texCoord0, u_TilingOffset);\r\n#endif // UV\r\n\r\n#ifdef COLOR\r\n    v_VertexColor = vertex.vertexColor;\r\n#endif // COLOR\r\n\r\n    mat4 worldMat = getWorldMatrix();\r\n    vec4 pos = (worldMat * vec4(vertex.positionOS, 1.0));\r\n    vec3 positionWS = pos.xyz / pos.w;\r\n\r\n    gl_Position = getPositionCS(positionWS);\r\n\r\n    gl_Position = remapPositionZ(gl_Position);\r\n\r\n#ifdef FOG\r\n    FogHandle(gl_Position.z);\r\n#endif\r\n}\r\n','\r\n#define SHADER_NAME UNLITFS\r\n\r\n#include "Color.glsl";\r\n\r\n#include "Scene.glsl";\r\n#include "SceneFog.glsl";\r\n\r\n#include "Camera.glsl";\r\n#include "Sprite3DFrag.glsl";\r\n\r\n#ifdef UV\r\nvarying vec2 v_Texcoord0;\r\n#endif // UV\r\n\r\n#ifdef COLOR\r\nvarying vec4 v_VertexColor;\r\n#endif // COLOR\r\n\r\nvoid main()\r\n{\r\n    vec3 color = u_AlbedoColor.rgb;\r\n    float alpha = u_AlbedoColor.a;\r\n\r\n#ifdef COLOR\r\n    #ifdef ENABLEVERTEXCOLOR\r\n    vec4 vertexColor = v_VertexColor;\r\n    color *= vertexColor.rgb;\r\n    alpha *= vertexColor.a;\r\n    #endif // ENABLEVERTEXCOLOR\r\n#endif // COLOR\r\n\r\n#ifdef UV\r\n    vec2 uv = v_Texcoord0;\r\n\r\n    #ifdef ALBEDOTEXTURE\r\n    vec4 albedoSampler = texture2D(u_AlbedoTexture, uv);\r\n\r\n\t#ifdef Gamma_u_AlbedoTexture\r\n    albedoSampler = gammaToLinear(albedoSampler);\r\n\t#endif // Gamma_u_AlbedoTexture\r\n\r\n    color *= albedoSampler.rgb;\r\n    alpha *= albedoSampler.a;\r\n    #endif // ALBEDOTEXTURE\r\n#endif // UV\r\n\r\n#ifdef ALPHATEST\r\n    if (alpha < u_AlphaTestValue)\r\n\tdiscard;\r\n#endif // ALPHATEST\r\n\r\n#ifdef FOG\r\n    color = scenUnlitFog(color);\r\n#endif // FOG\r\n\r\n    gl_FragColor = vec4(color, alpha);\r\n    gl_FragColor = outputTransform(gl_FragColor);\r\n}'),i.addShaderPass(lr,hr,"ShadowCaster")}}class cr{static init(){t.Shader3D.addInclude("BlinnPhongCommon.glsl","#if !defined(BlinnPhongCommon_lib)\r\n    #define BlinnPhongCommon_lib\r\n\r\n// varying\r\nvarying vec3 v_PositionWS;\r\n// todo\r\nvarying vec3 v_NormalWS;\r\nvarying vec3 v_TangentWS;\r\nvarying vec3 v_BiNormalWS;\r\n\r\n    #ifdef UV\r\nvarying vec2 v_Texcoord0;\r\n    #endif // UV\r\n\r\n    #ifdef UV1\r\n\t#ifdef LIGHTMAP\r\nvarying vec2 v_Texcoord1;\r\n\t#endif // LIGHTMAP\r\n    #endif // UV1\r\n\r\n    #ifdef COLOR\r\nvarying vec4 v_VertexColor;\r\n    #endif // COLOR\r\n\r\n// 记录顶点信息, 用于由vs向fs传递数据\r\nstruct PixelParams {\r\n    vec3 positionWS;\r\n\r\n    vec3 normalWS;\r\n    vec3 tangentWS;\r\n    vec3 biNormalWS;\r\n    mat3 TBN;\r\n\r\n    #ifdef UV\r\n    vec2 uv0;\r\n    #endif // UV\r\n\r\n    #ifdef UV1\r\n\t#ifdef LIGHTMAP\r\n    vec2 uv1;\r\n\t#endif // LIGHTMAP\r\n    #endif // UV1\r\n\r\n    #ifdef COLOR\r\n    vec4 vertexColor;\r\n    #endif // COLOR\r\n};\r\n\r\n#endif // BlinnPhongCommon_lib"),t.Shader3D.addInclude("BlinnPhongVertex.glsl",'#if !defined(BlinnPhongVertex_lib)\r\n    #define BlinnPhongVertex_lib\r\n\r\n    #include "ShadingVertex.glsl";\r\n\r\nvoid initPixelParams(inout PixelParams params, in Vertex vertex)\r\n{\r\n    shadingPixelParams(params, vertex);\r\n    sharePixelParams(params);\r\n}\r\n\r\n#endif // BlinnPhongVertex_lib'),t.Shader3D.addInclude("BlinnPhongFrag.glsl",'#if !defined(BlinnPhongFrag_lib)\r\n    #define BlinnPhongFrag_lib\r\n\r\n    #include "BlinnPhongLighting.glsl";\r\n\r\n    #include "ShadingFrag.glsl";\r\n\r\nvoid getPixelInfo(inout PixelInfo info, const in PixelParams pixel, const in Surface surface)\r\n{\r\n    info.positionWS = pixel.positionWS;\r\n\r\n    info.vertexNormalWS = pixel.normalWS;\r\n\r\n    #ifdef TANGENT\r\n    info.normalWS = normalize(pixel.TBN * surface.normalTS);\r\n    #else // TANGENT\r\n    info.normalWS = pixel.normalWS;\r\n    #endif // TANGENT\r\n\r\n    info.viewDir = normalize(u_CameraPos - info.positionWS);\r\n\r\n    #ifdef LIGHTMAP\r\n\t#ifdef UV1\r\n    info.lightmapUV = pixel.uv1;\r\n\t#endif // UV1\r\n    #endif // LIGHTMAP\r\n}\r\n\r\nvec3 BlinnPhongLighting(const in Surface surface, const in PixelParams pixel)\r\n{\r\n    PixelInfo info;\r\n    getPixelInfo(info, pixel, surface);\r\n\r\n    vec3 positionWS = info.positionWS;\r\n    vec3 normalWS = info.normalWS;\r\n    vec3 v = info.viewDir;\r\n\r\n    vec3 lightColor = vec3(0.0, 0.0, 0.0);\r\n\r\n    #ifdef DIRECTIONLIGHT\r\n    for (int i = 0; i < CalculateLightCount; i++)\r\n\t{\r\n\t    if (i >= DirectionCount) break;\r\n\t    DirectionLight directionLight = getDirectionLight(i, positionWS);\r\n\t    // if (directionLight.lightMode == LightMode_Mix) //兼容WGSL\r\n\t\t// {\r\n\t\t//     continue;\r\n\t\t// }\r\n        if (directionLight.lightMode != LightMode_Mix) {\r\n\t        Light light = getLight(directionLight);\r\n\t        lightColor += BlinnPhongLighting(surface, light, info) * light.attenuation;\r\n        }\r\n\t}\r\n    #endif // DIRECTIONLIGHT\r\n\r\n    #if defined(POINTLIGHT) || defined(SPOTLIGHT)\r\n    ivec4 clusterInfo = getClusterInfo(u_View, u_Viewport, positionWS, gl_FragCoord, u_ProjectionParams);\r\n    #endif // POINTLIGHT || SPOTLIGHT\r\n\r\n    #ifdef POINTLIGHT\r\n    for (int i = 0; i < CalculateLightCount; i++)\r\n\t{\r\n        #ifdef BREAK_TEXTURE_SAMPLE\r\n\t    if (i >= clusterInfo.x) break; //兼容WGSL\r\n        #endif\r\n\t    PointLight pointLight = getPointLight(i, clusterInfo, positionWS);\r\n\t    // if (pointLight.lightMode == LightMode_Mix)\r\n\t\t// {\r\n\t\t//     continue;\r\n\t\t// }\r\n        if (pointLight.lightMode != LightMode_Mix) {\r\n\t        Light light = getLight(pointLight, normalWS, positionWS);\r\n            #ifndef BREAK_TEXTURE_SAMPLE\r\n            if (i < clusterInfo.x)\r\n            #endif\r\n\t            lightColor += BlinnPhongLighting(surface, light, info) * light.attenuation;\r\n        }\r\n\t}\r\n    #endif // POINTLIGHT\r\n\r\n    #ifdef SPOTLIGHT\r\n    for (int i = 0; i < CalculateLightCount; i++)\r\n\t{\r\n        #ifdef BREAK_TEXTURE_SAMPLE\r\n\t    if (i >= clusterInfo.y) break; //兼容WGSL\r\n        #endif\r\n\t    SpotLight spotLight = getSpotLight(i, clusterInfo, positionWS);\r\n\t    // if (spotLight.lightMode == LightMode_Mix)\r\n\t\t// {\r\n\t\t//     continue;\r\n\t\t// }\r\n        if (spotLight.lightMode != LightMode_Mix) {\r\n\t        Light light = getLight(spotLight, normalWS, positionWS);\r\n            #ifndef BREAK_TEXTURE_SAMPLE\r\n            if (i < clusterInfo.y)\r\n            #endif\r\n\t            lightColor += BlinnPhongLighting(surface, light, info) * light.attenuation;\r\n        }\r\n\t}\r\n    #endif // SPOTLIGHT\r\n\r\n    vec3 giColor = BlinnPhongGI(surface, info);\r\n\r\n    return lightColor + giColor;\r\n}\r\n\r\n#endif // BlinnPhongFrag_lib');let r={u_AlphaTestValue:e.ShaderDataType.Float,u_TilingOffset:e.ShaderDataType.Vector4,u_DiffuseColor:e.ShaderDataType.Color,u_DiffuseTexture:e.ShaderDataType.Texture2D,u_AlbedoIntensity:e.ShaderDataType.Float,u_MaterialSpecular:e.ShaderDataType.Color,u_SpecularTexture:e.ShaderDataType.Texture2D,u_Shininess:e.ShaderDataType.Float,u_NormalTexture:e.ShaderDataType.Texture2D},n={u_AlbedoIntensity:1,u_DiffuseColor:t.Color.WHITE,u_MaterialSpecular:t.Color.WHITE,u_Shininess:.078125,u_AlphaTestValue:.5,u_TilingOffset:new t.Vector4(1,1,0,0)},a=t.Shader3D.add("BLINNPHONG",!0,!0);a.shaderType=t.ShaderFeatureType.D3;let i=new t.SubShader(t.SubShader.DefaultAttributeMap,r,n);a.addSubShader(i),i.addShaderPass('#define SHADER_NAME BlinnPhongVS\r\n\r\n#include "Math.glsl";\r\n\r\n#include "Scene.glsl";\r\n#include "SceneFogInput.glsl";\r\n\r\n#include "Camera.glsl";\r\n#include "Sprite3DVertex.glsl";\r\n\r\n#include "VertexCommon.glsl";\r\n\r\n#include "BlinnPhongVertex.glsl";\r\n\r\nvoid main()\r\n{\r\n    Vertex vertex;\r\n    getVertexParams(vertex);\r\n\r\n    PixelParams pixel;\r\n    initPixelParams(pixel, vertex);\r\n\r\n    gl_Position = getPositionCS(pixel.positionWS);\r\n\r\n    gl_Position = remapPositionZ(gl_Position);\r\n\r\n#ifdef FOG\r\n    FogHandle(gl_Position.z);\r\n#endif\r\n}\r\n','#define SHADER_NAME BlinnPhongFS\r\n\r\n#include "Color.glsl";\r\n\r\n#include "Scene.glsl";\r\n#include "SceneFog.glsl";\r\n\r\n#include "Camera.glsl";\r\n#include "Sprite3DFrag.glsl";\r\n\r\n#include "BlinnPhongFrag.glsl";\r\n\r\nvoid getBinnPhongSurfaceParams(inout Surface surface, in PixelParams pixel)\r\n{\r\n#ifdef UV\r\n    vec2 uv = transformUV(pixel.uv0, u_TilingOffset);\r\n#else // UV\r\n    vec2 uv = vec2(0.0);\r\n#endif // UV\r\n\r\n    surface.diffuseColor = u_DiffuseColor.rgb;\r\n    surface.alpha = u_DiffuseColor.a;\r\n\r\n#ifdef COLOR\r\n    #ifdef ENABLEVERTEXCOLOR\r\n    surface.diffuseColor *= pixel.vertexColor.xyz;\r\n    surface.alpha *= pixel.vertexColor.a;\r\n    #endif // ENABLEVERTEXCOLOR\r\n#endif // COLOR\r\n\r\n#ifdef DIFFUSEMAP\r\n    vec4 diffuseSampler = texture2D(u_DiffuseTexture, uv);\r\n    #ifdef Gamma_u_DiffuseTexture\r\n    diffuseSampler = gammaToLinear(diffuseSampler);\r\n    #endif // Gamma_u_DiffuseTexture\r\n    surface.diffuseColor *= u_DiffuseColor.rgb * diffuseSampler.rgb * u_AlbedoIntensity;\r\n    surface.alpha *= diffuseSampler.a;\r\n#endif // DIFFUSEMAP\r\n\r\n    surface.diffuseColor *= u_AlbedoIntensity;\r\n\r\n    surface.normalTS = vec3(0.0, 0.0, 1.0);\r\n#ifdef NORMALMAP\r\n    vec3 normalSampler = texture2D(u_NormalTexture, uv).rgb;\r\n    normalSampler = normalize(normalSampler * 2.0 - 1.0);\r\n    normalSampler.y *= -1.0;\r\n    surface.normalTS = normalSampler;\r\n#endif // NORMALMAP\r\n\r\n#ifdef SPECULARMAP\r\n    vec4 specularSampler = texture2D(u_SpecularTexture, uv);\r\n    #ifdef Gamma_u_SpecularTexture\r\n    specularSampler = gammaToLinear(specularSampler);\r\n    #endif // Gamma_u_SpecularTexture\r\n    surface.gloss = specularSampler.rgb;\r\n#else // SPECULARMAP\r\n    #ifdef DIFFUSEMAP\r\n    surface.gloss = vec3(diffuseSampler.a);\r\n    #else // DIFFUSEMAP\r\n    surface.gloss = vec3(1.0, 1.0, 1.0);\r\n    #endif // DIFFUSEMAP\r\n#endif // SPECULARMAP\r\n    surface.specularColor = u_MaterialSpecular.rgb;\r\n    surface.shininess = u_Shininess;\r\n}\r\n\r\nvoid main()\r\n{\r\n    PixelParams pixel;\r\n    getPixelParams(pixel);\r\n\r\n    Surface surface;\r\n    getBinnPhongSurfaceParams(surface, pixel);\r\n\r\n#ifdef ALPHATEST\r\n    if (surface.alpha < u_AlphaTestValue)\r\n\t{\r\n\t    discard;\r\n\t}\r\n#endif // ALPHATEST\r\n\r\n    vec3 surfaceColor = vec3(0.0);\r\n\r\n    surfaceColor = BlinnPhongLighting(surface, pixel);\r\n\r\n#ifdef FOG\r\n    surfaceColor = sceneLitFog(surfaceColor);\r\n#endif // FOG\r\n\r\n    gl_FragColor = vec4(surfaceColor, surface.alpha);\r\n\r\n    gl_FragColor = outputTransform(gl_FragColor);\r\n}\r\n'),i.addShaderPass(lr,hr,"ShadowCaster"),i.addShaderPass('#define SHADER_NAME BlinnPhongDephtNormalVS\r\n\r\n#include "Math.glsl";\r\n\r\n#include "Camera.glsl";\r\n\r\n#include "Sprite3DVertex.glsl";\r\n\r\n#include "VertexCommon.glsl";\r\n\r\n#include "BlinnPhongVertex.glsl";\r\n\r\nvarying vec4 v_PositionCS;\r\n\r\nvoid main()\r\n{\r\n    Vertex vertex;\r\n    getVertexParams(vertex);\r\n\r\n    PixelParams pixel;\r\n    initPixelParams(pixel, vertex);\r\n\r\n    vec4 positionCS = getPositionCS(pixel.positionWS);\r\n    v_PositionCS = positionCS;\r\n    gl_Position = positionCS;\r\n    gl_Position = remapPositionZ(gl_Position);\r\n}','#define SHADER_NAME BlinnPhongDephtNormalFS\r\n\r\n#include "Color.glsl";\r\n\r\n#include "Scene.glsl";\r\n\r\n#include "Camera.glsl";\r\n#include "Sprite3DFrag.glsl";\r\n\r\n#include "ShadingFrag.glsl";\r\n\r\n#include "DepthNormalFrag.glsl";\r\n\r\nvarying vec4 v_PositionCS;\r\n\r\nvoid main()\r\n{\r\n    PixelParams pixel;\r\n    getPixelParams(pixel);\r\n\r\n    vec3 normalWS = pixel.normalWS;\r\n\r\n#ifdef NORMALMAP\r\n    #ifdef UV\r\n\r\n    vec2 uv = transformUV(pixel.uv0, u_TilingOffset);\r\n    vec3 normalSampler = texture2D(u_NormalTexture, uv).rgb;\r\n    normalSampler = normalize(normalSampler * 2.0 - 1.0);\r\n    normalSampler.y *= -1.0;\r\n    vec3 normalTS = normalSampler;\r\n    normalWS = normalize(pixel.TBN * normalTS);\r\n\r\n    #endif // UV\r\n#endif // NORMALMAP\r\n\r\n    vec4 positionCS = v_PositionCS;\r\n\r\n    vec4 dephtNormal = encodeDepthNormal(positionCS, normalWS);\r\n\r\n    gl_FragColor = dephtNormal;\r\n}',"DepthNormal")}}class ur{static init(){let r={a_Position:[qt.TRAIL_POSITION0,e.ShaderDataType.Vector4],a_OffsetVector:[qt.TRAIL_OFFSETVECTOR,e.ShaderDataType.Vector3],a_Texcoord0X:[qt.TRAIL_TEXTURECOORDINATE0X,e.ShaderDataType.Float],a_Texcoord0Y:[qt.TRAIL_TEXTURECOORDINATE0Y,e.ShaderDataType.Float],a_BirthTime:[qt.TRAIL_TIME0,e.ShaderDataType.Float],a_Color:[qt.TRAIL_COLOR,e.ShaderDataType.Vector4]},n={u_TilingOffset:e.ShaderDataType.Vector4,u_MainTexture:e.ShaderDataType.Texture2D,u_MainColor:e.ShaderDataType.Color},a={u_MainColor:t.Color.WHITE,u_TilingOffset:new t.Vector4(1,1,0,0)},i=t.Shader3D.add("Trail",!1,!1);i.shaderType=t.ShaderFeatureType.Effect;let s=new t.SubShader(r,n,a);i.addSubShader(s),s.addShaderPass('#define SHADER_NAME TrailVS\r\n\r\n#include "Camera.glsl";\r\n#include "Scene.glsl"\r\n#include "SceneFogInput.glsl"\r\n\r\n// Sprite uniform\r\nuniform float u_CurTime;\r\nuniform float u_LifeTime;\r\nuniform vec4 u_WidthCurve[10];\r\nuniform int u_WidthCurveKeyLength;\r\n\r\nvarying vec2 v_Texcoord0;\r\nvarying vec4 v_Color;\r\n\r\nfloat hermiteInterpolate(float t, float outTangent, float inTangent, float duration, float value1, float value2)\r\n{\r\n    float t2 = t * t;\r\n    float t3 = t2 * t;\r\n    float a = 2.0 * t3 - 3.0 * t2 + 1.0;\r\n    float b = t3 - 2.0 * t2 + t;\r\n    float c = t3 - t2;\r\n    float d = -2.0 * t3 + 3.0 * t2;\r\n    return a * value1 + b * outTangent * duration + c * inTangent * duration + d * value2;\r\n}\r\n\r\nfloat getCurWidth(in float normalizeTime)\r\n{\r\n    float width;\r\n    if (normalizeTime == 0.0)\r\n\t{\r\n\t    width = u_WidthCurve[0].w;\r\n\t}\r\n    else if (normalizeTime >= 1.0)\r\n\t{\r\n\t    width = u_WidthCurve[u_WidthCurveKeyLength - 1].w;\r\n\t}\r\n    else\r\n\t{\r\n\t    for (int i = 0; i < 10; i++)\r\n\t\t{\r\n\t\t    if (normalizeTime == u_WidthCurve[i].x)\r\n\t\t\t{\r\n\t\t\t    width = u_WidthCurve[i].w;\r\n\t\t\t    break;\r\n\t\t\t}\r\n\r\n\t\t    vec4 lastFrame = u_WidthCurve[i];\r\n\t\t    vec4 nextFrame = u_WidthCurve[i + 1];\r\n\t\t    if (normalizeTime > lastFrame.x && normalizeTime < nextFrame.x)\r\n\t\t\t{\r\n\t\t\t    float duration = nextFrame.x - lastFrame.x;\r\n\t\t\t    float t = (normalizeTime - lastFrame.x) / duration;\r\n\t\t\t    float outTangent = lastFrame.z;\r\n\t\t\t    float inTangent = nextFrame.y;\r\n\t\t\t    float value1 = lastFrame.w;\r\n\t\t\t    float value2 = nextFrame.w;\r\n\t\t\t    width = hermiteInterpolate(t, outTangent, inTangent, duration, value1, value2);\r\n\t\t\t    break;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n    return width;\r\n}\r\n\r\nvoid main()\r\n{\r\n    float normalizeTime = (u_CurTime - a_BirthTime) / u_LifeTime;\r\n\r\n    v_Texcoord0 = vec2(a_Texcoord0X, 1.0 - a_Texcoord0Y) * u_TilingOffset.xy + u_TilingOffset.zw;\r\n\r\n    v_Color = a_Color;\r\n\r\n    vec3 cameraPos = (u_View * a_Position).rgb;\r\n    gl_Position = u_Projection * vec4(cameraPos + a_OffsetVector * getCurWidth(normalizeTime), 1.0);\r\n\r\n    gl_Position = remapPositionZ(gl_Position);\r\n\t#ifdef FOG\r\n        FogHandle(gl_Position.z);\r\n    #endif\r\n}','#define SHADER_NAME TrailFS\r\n\r\n#include "Color.glsl";\r\n#include "Scene.glsl";\r\n#include "SceneFog.glsl";\r\n\r\nvarying vec2 v_Texcoord0;\r\nvarying vec4 v_Color;\r\n\r\nvoid main()\r\n{\r\n    vec4 color = 2.0 * u_MainColor * v_Color;\r\n#ifdef MAINTEXTURE\r\n    vec4 mainTextureColor = texture2D(u_MainTexture, v_Texcoord0);\r\n    #ifdef Gamma_u_MainTexture\r\n    mainTextureColor = gammaToLinear(mainTextureColor);\r\n    #endif // Gamma_u_MainTexture\r\n\r\n    color *= mainTextureColor;\r\n#endif\r\n\r\n#ifdef FOG\r\n    color.xyz = scenUnlitFog(color.xyz);\r\n#endif // FOG\r\n    gl_FragColor = color;\r\n\r\n    gl_FragColor = outputTransform(gl_FragColor);\r\n}\r\n')}}class _r{static init(){let r={u_AlbedoColor:e.ShaderDataType.Color,u_TilingOffset:e.ShaderDataType.Vector4,u_NormalScale:e.ShaderDataType.Float,u_Metallic:e.ShaderDataType.Float,u_Smoothness:e.ShaderDataType.Float,u_OcclusionStrength:e.ShaderDataType.Float,u_AlphaTestValue:e.ShaderDataType.Float,u_EmissionColor:e.ShaderDataType.Color,u_EmissionIntensity:e.ShaderDataType.Float,u_AlbedoTexture:e.ShaderDataType.Texture2D,u_NormalTexture:e.ShaderDataType.Texture2D,u_OcclusionTexture:e.ShaderDataType.Texture2D,u_EmissionTexture:e.ShaderDataType.Texture2D,u_MetallicGlossTexture:e.ShaderDataType.Texture2D,u_AnisotropyStrength:e.ShaderDataType.Float,u_AnisotropyTexture:e.ShaderDataType.Texture2D,u_AnisotropyRotation:e.ShaderDataType.Float,u_ClearCoatFactor:e.ShaderDataType.Float,u_ClearCoatTexture:e.ShaderDataType.Texture2D,u_ClearCoatRoughness:e.ShaderDataType.Float,u_ClearCoatRoughnessTexture:e.ShaderDataType.Texture2D,u_ClearCoatNormalTexture:e.ShaderDataType.Texture2D,u_DetailAlbedoTexture:e.ShaderDataType.Texture2D,u_DetailNormalTexture:e.ShaderDataType.Texture2D,u_DetailNormalScale:e.ShaderDataType.Float,u_DetailTillingOffset:e.ShaderDataType.Vector4},n={u_AlbedoColor:t.Color.WHITE,u_TilingOffset:new t.Vector4(1,1,0,0),u_DetailTillingOffset:new t.Vector4(1,1,0,0),u_NormalScale:1,u_DetailNormalScale:1,u_Metallic:0,u_Smoothness:.5,u_OcclusionStrength:1,u_EmissionColor:t.Color.WHITE,u_EmissionIntensity:1,u_AlphaTestValue:.5,u_AnisotropyStrength:0,u_AnisotropyRotation:0,u_ClearCoatFactor:0,u_ClearCoatRoughness:0},a=t.Shader3D.add("PBR",!0,!0);a.shaderType=t.ShaderFeatureType.D3,a._surportVolumetricGI=!0;let i=new t.SubShader(t.SubShader.DefaultAttributeMap,r,n);a.addSubShader(i),i.addShaderPass('#define SHADER_NAME PBRStandardVS\r\n\r\n#include "Math.glsl";\r\n\r\n#include "Scene.glsl";\r\n#include "SceneFogInput.glsl";\r\n\r\n#include "Camera.glsl";\r\n#include "Sprite3DVertex.glsl";\r\n\r\n#include "VertexCommon.glsl";\r\n\r\n#include "PBRVertex.glsl";\r\n\r\n#if defined(DETAILTEXTURE) || defined(DETAILNORMAL)\r\nvarying vec2 v_DetailUV;\r\n#endif\r\n\r\nvoid main()\r\n{\r\n    Vertex vertex;\r\n    getVertexParams(vertex);\r\n\r\n    PixelParams pixel;\r\n    initPixelParams(pixel, vertex);\r\n\r\n#if defined(DETAILTEXTURE) || defined(DETAILNORMAL)\r\n    #ifdef UV\r\n    v_DetailUV = transformUV(vertex.texCoord0, u_DetailTillingOffset);\r\n    #else // UV\r\n    v_DetailUV = vec2(0.0);\r\n    #endif\r\n#endif\r\n\r\n    gl_Position = getPositionCS(pixel.positionWS);\r\n\r\n    gl_Position = remapPositionZ(gl_Position);\r\n\r\n#ifdef FOG\r\n    FogHandle(gl_Position.z);\r\n#endif\r\n}','#define SHADER_NAME PBRStandardFS\r\n\r\n#include "Color.glsl";\r\n\r\n#include "Scene.glsl";\r\n#include "SceneFog.glsl";\r\n\r\n#include "Camera.glsl";\r\n#include "Sprite3DFrag.glsl";\r\n\r\n#include "PBRMetallicFrag.glsl";\r\n\r\n#if defined(DETAILTEXTURE) || defined(DETAILNORMAL)\r\nvarying vec2 v_DetailUV;\r\n    #define ColorSpaceDouble vec3(4.59479380, 4.59479380, 4.59479380);\r\nvec3 BlendNormals(vec3 n1, vec3 n2)\r\n{\r\n    return normalize(vec3(n1.xy + n2.xy, n1.z * n2.z));\r\n}\r\n#endif // DETAILTEXTURE || DETAILNORMAL\r\n\r\nvoid initSurfaceInputs(inout SurfaceInputs inputs, const in PixelParams pixel)\r\n{\r\n#ifdef UV\r\n    vec2 uv = transformUV(pixel.uv0, u_TilingOffset);\r\n#else // UV\r\n    vec2 uv = vec2(0.0);\r\n#endif // UV\r\n\r\n    inputs.diffuseColor = u_AlbedoColor.rgb;\r\n    inputs.alpha = u_AlbedoColor.a;\r\n\r\n#ifdef COLOR\r\n    #ifdef ENABLEVERTEXCOLOR\r\n    inputs.diffuseColor *= pixel.vertexColor.xyz;\r\n    inputs.alpha *= pixel.vertexColor.a;\r\n    #endif // ENABLEVERTEXCOLOR\r\n#endif // COLOR\r\n\r\n    inputs.alphaTest = u_AlphaTestValue;\r\n\r\n#ifdef ALBEDOTEXTURE\r\n    vec4 albedoSampler = texture2D(u_AlbedoTexture, uv);\r\n    #ifdef Gamma_u_AlbedoTexture\r\n    albedoSampler = gammaToLinear(albedoSampler);\r\n    #endif // Gamma_u_AlbedoTexture\r\n    inputs.diffuseColor *= albedoSampler.rgb;\r\n    inputs.alpha *= albedoSampler.a;\r\n#endif // ALBEDOTEXTURE\r\n\r\n// Detail Albedo\r\n#ifdef DETAILTEXTURE\r\n    vec3 detailSampler = texture2D(u_DetailAlbedoTexture, v_DetailUV).rgb;\r\n    #ifdef Gamma_u_DetailAlbedoTexture\r\n    detailSampler = gammaToLinear(detailSampler);\r\n    #endif // Gamma_u_DetailAlbedoTexture\r\n    detailSampler *= ColorSpaceDouble;\r\n    inputs.diffuseColor *= detailSampler;\r\n#endif\r\n\r\n    inputs.normalTS = vec3(0.0, 0.0, 1.0);\r\n#ifdef NORMALTEXTURE\r\n    vec3 normalSampler = texture2D(u_NormalTexture, uv).rgb;\r\n    normalSampler = normalize(normalSampler * 2.0 - 1.0);\r\n    normalSampler.y *= -1.0;\r\n    inputs.normalTS = normalScale(normalSampler, u_NormalScale);\r\n#endif\r\n\r\n#ifdef DETAILNORMAL\r\n    vec3 detailnormalSampler = texture2D(u_DetailNormalTexture, v_DetailUV).rgb;\r\n    detailnormalSampler = normalize(detailnormalSampler * 2.0 - 1.0);\r\n    detailnormalSampler.y *= -1.0;\r\n    detailnormalSampler = normalScale(detailnormalSampler, u_DetailNormalScale);\r\n    inputs.normalTS = BlendNormals(inputs.normalTS, detailnormalSampler);\r\n#endif\r\n\r\n    inputs.metallic = u_Metallic;\r\n    inputs.smoothness = u_Smoothness;\r\n\r\n#ifdef METALLICGLOSSTEXTURE\r\n\r\n    vec4 metallicSampler = texture2D(u_MetallicGlossTexture, uv);\r\n    #ifdef Gamma_u_MetallicGlossTexture\r\n    metallicSampler = gammaToLinear(metallicSampler);\r\n    #endif // Gamma_u_MetallicGlossTexture\r\n\r\n    inputs.metallic = metallicSampler.x;\r\n\r\n    #ifdef SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA\r\n\t#ifdef ALBEDOTEXTURE\r\n    inputs.smoothness = (albedoSampler.a * u_Smoothness);\r\n\t#endif // ALBEDOTEXTURE\r\n    #else // SMOOTHNESSSOURCE_METALLICTEXTURE_ALPHA\r\n    inputs.smoothness = (metallicSampler.a * u_Smoothness);\r\n    #endif // SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA\r\n\r\n#endif // METALLICGLOSSTEXTURE\r\n\r\n    inputs.occlusion = 1.0;\r\n#ifdef OCCLUSIONTEXTURE\r\n    vec4 occlusionSampler = texture2D(u_OcclusionTexture, uv);\r\n    #ifdef Gamma_u_OcclusionTexture\r\n    occlusionSampler = gammaToLinear(occlusionSampler);\r\n    #endif // Gamma_u_OcclusionTexture\r\n\r\n    float occlusion = occlusionSampler.g;\r\n    inputs.occlusion = (1.0 - u_OcclusionStrength) + occlusion * u_OcclusionStrength;\r\n#endif // OCCLUSIONTEXTURE\r\n\r\n    inputs.emissionColor = vec3(0.0);\r\n#ifdef EMISSION\r\n    inputs.emissionColor = u_EmissionColor.rgb * u_EmissionIntensity;\r\n    #ifdef EMISSIONTEXTURE\r\n    vec4 emissionSampler = texture2D(u_EmissionTexture, uv);\r\n\t#ifdef Gamma_u_EmissionTexture\r\n    emissionSampler = gammaToLinear(emissionSampler);\r\n\t#endif // Gamma_u_EmissionTexture\r\n    inputs.emissionColor *= emissionSampler.rgb;\r\n    #endif // EMISSIONTEXTURE\r\n#endif // EMISSION\r\n\r\n#ifdef CLEARCOAT\r\n    inputs.clearCoat = u_ClearCoatFactor;\r\n    inputs.clearCoatRoughness = u_ClearCoatRoughness;\r\n\r\n    #ifdef CLEARCOATMAP\r\n    // todo\r\n    // linear tex no need gamma\r\n    vec4 clearCoatSampler = texture2D(u_ClearCoatTexture, uv);\r\n    inputs.clearCoat *= clearCoatSampler.r;\r\n    #endif // CLEARCOATMAP\r\n\r\n    #ifdef CLEARCOAT_ROUGHNESSMAP\r\n    // todo\r\n    // linear tex no need gamma\r\n    vec4 clearcoatSampleRoughness = texture2D(u_ClearCoatRoughnessTexture, uv);\r\n    inputs.clearCoatRoughness *= clearcoatSampleRoughness.g;\r\n    #endif // CLEARCOAT_ROUGHNESSMAP\r\n\r\n    #ifdef CLEARCOAT_NORMAL\r\n    vec3 clearCoatNormalSampler = texture2D(u_ClearCoatNormalTexture, uv).rgb;\r\n    clearCoatNormalSampler = normalize(clearCoatNormalSampler * 2.0 - 1.0);\r\n    clearCoatNormalSampler.y *= -1.0;\r\n    inputs.clearCoatNormalTS = clearCoatNormalSampler;\r\n    #endif // CLEARCOAT_NORMAL\r\n#endif // CLEARCOAT\r\n\r\n#ifdef ANISOTROPIC\r\n    inputs.anisotropy = u_AnisotropyStrength;\r\n    vec2 direction = vec2(1.0, 0.0);\r\n\r\n    #ifdef ANISOTROPYMAP\r\n    vec3 anisotropySampler = texture2D(u_AnisotropyTexture, uv).rgb;\r\n\r\n    inputs.anisotropy *= anisotropySampler.b;\r\n    direction = anisotropySampler.xy * 2.0 - 1.0;\r\n    #endif // ANISOTROPYMAP\r\n\r\n    vec2 anisotropyRotation = vec2(cos(u_AnisotropyRotation), sin(u_AnisotropyRotation));\r\n    mat2 rotationMatrix = mat2(anisotropyRotation.x, anisotropyRotation.y, -anisotropyRotation.y, anisotropyRotation.x);\r\n    inputs.anisotropyDirection = rotationMatrix * direction;\r\n\r\n#endif // ANISOTROPIC\r\n}\r\n\r\nvoid main()\r\n{\r\n    PixelParams pixel;\r\n    getPixelParams(pixel);\r\n\r\n    SurfaceInputs inputs;\r\n    initSurfaceInputs(inputs, pixel);\r\n\r\n    vec4 surfaceColor = PBR_Metallic_Flow(inputs, pixel);\r\n\r\n#ifdef FOG\r\n    surfaceColor.rgb = sceneLitFog(surfaceColor.rgb);\r\n#endif // FOG\r\n\r\n    gl_FragColor = surfaceColor;\r\n\r\n    gl_FragColor = outputTransform(gl_FragColor);\r\n}'),i.addShaderPass(lr,hr,"ShadowCaster"),i.addShaderPass('#define SHADER_NAME PBRStandardDepthNormalVS\r\n\r\n#include "Math.glsl";\r\n\r\n#include "Camera.glsl";\r\n\r\n#include "Sprite3DVertex.glsl";\r\n\r\n#include "VertexCommon.glsl";\r\n\r\n#include "PBRVertex.glsl";\r\n\r\nvarying vec4 v_PositionCS;\r\n\r\nvoid main()\r\n{\r\n    Vertex vertex;\r\n    getVertexParams(vertex);\r\n\r\n    PixelParams pixel;\r\n    initPixelParams(pixel, vertex);\r\n\r\n    sharePixelParams(pixel);\r\n\r\n    vec4 positionCS = getPositionCS(pixel.positionWS);\r\n    v_PositionCS = positionCS;\r\n    gl_Position = positionCS;\r\n    gl_Position = remapPositionZ(gl_Position);\r\n}','#define SHADER_NAME PBRStandardDepthNormalFS\r\n\r\n#include "Color.glsl";\r\n\r\n#include "Scene.glsl";\r\n\r\n#include "Camera.glsl";\r\n#include "Sprite3DFrag.glsl";\r\n\r\n#include "ShadingFrag.glsl";\r\n\r\n#include "DepthNormalFrag.glsl";\r\n\r\nvarying vec4 v_PositionCS;\r\n\r\nvoid main()\r\n{\r\n    PixelParams pixel;\r\n    getPixelParams(pixel);\r\n\r\n    vec3 normalWS = pixel.normalWS;\r\n\r\n#ifdef NORMALTEXTURE\r\n    #ifdef UV\r\n\r\n    vec2 uv = transformUV(pixel.uv0, u_TilingOffset);\r\n    vec3 normalSampler = texture2D(u_NormalTexture, uv).rgb;\r\n    normalSampler = normalize(normalSampler * 2.0 - 1.0);\r\n    normalSampler.y *= -1.0;\r\n    vec3 normalTS = normalScale(normalSampler, u_NormalScale);\r\n    normalWS = normalize(pixel.TBN * normalTS);\r\n\r\n    #endif // UV\r\n#endif // NORMALTEXTURE\r\n\r\n    vec4 positionCS = v_PositionCS;\r\n\r\n    vec4 dephtNormal = encodeDepthNormal(positionCS, normalWS);\r\n\r\n    gl_FragColor = dephtNormal;\r\n}',"DepthNormal")}}class mr{static init(){let r={a_Position:[t.VertexMesh.MESH_POSITION0,e.ShaderDataType.Vector4]},n={u_TintColor:e.ShaderDataType.Color,u_Exposure:e.ShaderDataType.Float,u_Rotation:e.ShaderDataType.Float,u_CubeTexture:e.ShaderDataType.TextureCube},a={u_TintColor:new t.Color(.5,.5,.5,.5),u_Exposure:1,u_Rotation:0},i=t.Shader3D.add("SkyBox");i.shaderType=t.ShaderFeatureType.Sky;let s=new t.SubShader(r,n,a);i.addSubShader(s);let o=s.addShaderPass('#define SHADER_NAME SkyBoxVS\r\n\r\n#include "SkyCommon.glsl";\r\n\r\nvarying vec3 v_Texcoord;\r\n\r\nvoid main()\r\n{\r\n    // todo 这个转换 ？\r\n    v_Texcoord = vec3(-a_Position.x, a_Position.yz); //转换坐标系\r\n\r\n    vec4 position = rotateAroundYInDegrees(a_Position, u_Rotation);\r\n    // gl_Position = getPositionCS(position.xyz);\r\n\r\n    gl_Position = u_SkyProjectionViewMat * position;\r\n\r\n    gl_Position = remapSkyPositionZ(gl_Position);\r\n}','#define SHADER_NAME SkyBoxFS\r\n\r\n#include "Color.glsl";\r\n\r\nvarying vec3 v_Texcoord;\r\n\r\nconst vec4 c_ColorSpace = vec4(4.59479380, 4.59479380, 4.59479380, 2.0);\r\n\r\nvoid main()\r\n{\r\n    vec3 uv = v_Texcoord;\r\n    vec4 cubeSampler = textureCube(u_CubeTexture, uv);\r\n#ifdef Gamma_u_CubeTexture\r\n    cubeSampler = gammaToLinear(cubeSampler);\r\n#endif // Gamma_u_CubeTexture\r\n\r\n    vec3 color = cubeSampler.rgb * u_TintColor.rgb * pow(u_Exposure, 2.2) * c_ColorSpace.rgb;\r\n\r\n    gl_FragColor = vec4(color, 1.0);\r\n\r\n    gl_FragColor = outputTransform(gl_FragColor);\r\n}');o.renderState.depthTest=Ee.DEPTHTEST_LEQUAL,o.renderState.cull=t.CullMode.Back,o.renderState.depthWrite=!1,o.renderState.stencilWrite=!1,o.statefirst=!0}}class fr{static init(){t.Shader3D.addInclude("MathGradient.glsl","#ifdef GRAPHICS_API_GLES3\r\nvec2 getVec2ValueByIndexFromeVec4Array(in vec4 gradientNumbers[2],in int vec2Index){\r\n\tint v4Index = int(floor(float(vec2Index)/2.0));\r\n\tint offset =(vec2Index- v4Index*2)*2;\r\n\treturn vec2(gradientNumbers[v4Index][offset],gradientNumbers[v4Index][offset+1]);\r\n}\r\n\r\nvec2 getVec2ValueByIndexFromeVec4Array_COLORCOUNT(in vec4 gradientNumbers[COLORCOUNT_HALF],in int vec2Index){\r\n\tint v4Index = int(floor(float(vec2Index)/2.0));\r\n\tint offset =(vec2Index- v4Index*2)*2;\r\n\tvec4 v4Value = gradientNumbers[v4Index];\r\n\treturn vec2(v4Value[offset],v4Value[offset+1]);\r\n}\r\n#endif\r\n\r\nfloat getCurValueFromGradientFloat(in vec4 gradientNumbers[2], in float normalizedAge)\r\n{\r\n    float curValue;\r\n\t#ifndef GRAPHICS_API_GLES3\r\n\t\tvec2 gradientNumbersVec2[4];\r\n\t\tgradientNumbersVec2[0] = gradientNumbers[0].xy;\r\n\t\tgradientNumbersVec2[1] = gradientNumbers[0].zw;\r\n\t\tgradientNumbersVec2[2] = gradientNumbers[1].xy;\r\n\t\tgradientNumbersVec2[3] = gradientNumbers[1].zw;\r\n\r\n\t#endif\r\n    for (int i = 1; i < 4; i++)\r\n\t{\r\n\t    vec2 gradientNumber;\r\n\t\t#ifdef GRAPHICS_API_GLES3\r\n\t\t\tgradientNumber = getVec2ValueByIndexFromeVec4Array(gradientNumbers,i);\r\n\t\t#else\r\n\t\t\tgradientNumber = gradientNumbersVec2[i];\r\n\t\t#endif\r\n\t    float key = gradientNumber.x;\r\n\t\tcurValue = gradientNumber.y;\r\n\t    if (key >= normalizedAge)\r\n\t\t{\r\n\t\t\tvec2 lastGradientNumber;\r\n\t\t\t#ifdef GRAPHICS_API_GLES3\r\n\t\t\t\tlastGradientNumber = getVec2ValueByIndexFromeVec4Array(gradientNumbers,i - 1);\r\n\t\t\t#else\r\n\t\t\t\tlastGradientNumber = gradientNumbersVec2[i-1];\r\n\t\t\t#endif\r\n\r\n\t\t    float lastKey = lastGradientNumber.x;\r\n\t\t    float age = max((normalizedAge - lastKey), 0.0) / (key - lastKey);\r\n\t\t    curValue = mix(lastGradientNumber.y, gradientNumber.y, age);\r\n\t\t    break;\r\n\t\t}\r\n\t}\r\n    return curValue;\r\n}\r\n\r\nfloat getTotalValueFromGradientFloat(in vec4 gradientNumbers[2],\r\n    in float normalizedAge)\r\n{\r\n\t#ifndef GRAPHICS_API_GLES3\r\n\t\tvec2 gradientNumbersVec2[4];\r\n\t\tgradientNumbersVec2[0] = gradientNumbers[0].xy;\r\n\t\tgradientNumbersVec2[1] = gradientNumbers[0].zw;\r\n\t\tgradientNumbersVec2[2] = gradientNumbers[1].xy;\r\n\t\tgradientNumbersVec2[3] = gradientNumbers[1].zw;\r\n\t#endif\r\n\t\r\n\t#ifdef GRAPHICS_API_GLES3\r\n\t\tvec2 val = getVec2ValueByIndexFromeVec4Array(gradientNumbers,0);\t\r\n\t#else\r\n\t\tvec2 val = gradientNumbersVec2[0];\r\n\t#endif\r\n\r\n\tfloat keyTime = min(normalizedAge,val.x);\r\n    float totalValue = keyTime * val.y;\r\n\r\n\tfloat lastSpeed = 0.;\r\n    for (int i = 1; i < 4; i++)\r\n\t{\r\n\t\t#ifdef GRAPHICS_API_GLES3\r\n\t\t\tvec2 gradientNumber= getVec2ValueByIndexFromeVec4Array(gradientNumbers,i);\r\n\t\t\tvec2 lastGradientNumber = getVec2ValueByIndexFromeVec4Array(gradientNumbers,i - 1);\r\n\t\t#else\r\n\t\t\tvec2 gradientNumber = gradientNumbersVec2[i];\r\n\t\t\tvec2 lastGradientNumber =gradientNumbersVec2[i - 1];\r\n\t\t#endif\r\n\r\n\t    float key = gradientNumber.x;\r\n\t\tfloat lastValue = lastGradientNumber.y;\r\n\r\n\t    if (key >= normalizedAge)\r\n\t\t{\r\n\t\t    float lastKey = lastGradientNumber.x;\r\n\t\t\tfloat time =  max((normalizedAge - lastKey), 0.);\r\n\t\t\tfloat age = time / (key-lastKey);\r\n\t\t\tlastSpeed = mix(lastValue, gradientNumber.y,age);\r\n\t\t    totalValue += (lastValue + mix(lastValue, gradientNumber.y, age)) / 2.0 * a_ShapePositionStartLifeTime.w * time;\r\n\t\t    keyTime = normalizedAge;\r\n\t\t\tbreak;\r\n\t\t}\r\n\t    else if(key > keyTime)\r\n\t\t{\r\n\t\t    totalValue += (lastValue + gradientNumber.y) / 2.0 * a_ShapePositionStartLifeTime.w * (key - lastGradientNumber.x);\r\n\t\t\tkeyTime = key;\r\n\t\t\tlastSpeed = gradientNumber.y;\r\n\t\t}\r\n\t}\r\n    return totalValue + max(normalizedAge-keyTime, 0.) * lastSpeed * a_ShapePositionStartLifeTime.w;\r\n}\r\n\r\nvec4 getColorFromGradient(in vec4 gradientAlphas[COLORCOUNT_HALF],\r\n    in vec4 gradientColors[COLORCOUNT],\r\n    in float normalizedAge, in vec4 keyRanges)\r\n{\r\n\t#ifndef GRAPHICS_API_GLES3\r\n\t\t#ifdef COLORKEYCOUNT_8\r\n\t\t\tvec2 resoult[8];\r\n\t\t\tresoult[0] = gradientAlphas[0].xy;\r\n\t\t\tresoult[1] = gradientAlphas[0].zw;\r\n\t\t\tresoult[2] = gradientAlphas[1].xy;\r\n\t\t\tresoult[3] = gradientAlphas[1].zw;\r\n\t\t\tresoult[4] = gradientAlphas[2].xy;\r\n\t\t\tresoult[5] = gradientAlphas[2].zw;\r\n\t\t\tresoult[6] = gradientAlphas[3].xy;\r\n\t\t\tresoult[7] = gradientAlphas[3].zw;\r\n\t\t#else\r\n\t\t\tvec2 resoult[4];\r\n\t\t\tresoult[0] = gradientAlphas[0].xy;\r\n\t\t\tresoult[1] = gradientAlphas[0].zw;\r\n\t\t\tresoult[2] = gradientAlphas[1].xy;\r\n\t\t\tresoult[3] = gradientAlphas[1].zw;\r\n\t\t#endif\r\n\t#endif\r\n\r\n    float alphaAge = clamp(normalizedAge, keyRanges.z, keyRanges.w);\r\n    vec4 overTimeColor;\r\n    for (int i = 1; i < COLORCOUNT; i++)\r\n\t{\r\n\t\t#ifdef GRAPHICS_API_GLES3\r\n\t    \tvec2 gradientAlpha = getVec2ValueByIndexFromeVec4Array_COLORCOUNT(gradientAlphas,i);\r\n\t\t#else\r\n\t\t\tvec2 gradientAlpha = resoult[i];\r\n\t\t#endif\r\n\t    float alphaKey = gradientAlpha.x;\r\n\t    if (alphaKey >= alphaAge)\r\n\t\t{\r\n\r\n\t\t\t#ifdef GRAPHICS_API_GLES3\r\n\t\t    \tvec2 lastGradientAlpha =getVec2ValueByIndexFromeVec4Array_COLORCOUNT(gradientAlphas,i - 1);\r\n\t\t\t#else\r\n\t\t\t\tvec2 lastGradientAlpha = resoult[i - 1];\r\n\t\t\t#endif\r\n\r\n\t\t    float lastAlphaKey = lastGradientAlpha.x;\r\n\t\t    float age = clamp((alphaAge - lastAlphaKey) / (alphaKey - lastAlphaKey), 0.0, 1.0);\r\n\t\t    overTimeColor.a = mix(lastGradientAlpha.y, gradientAlpha.y, age);\r\n\t\t    break;\r\n\t\t}\r\n\t}\r\n\r\n    float colorAge = clamp(normalizedAge, keyRanges.x, keyRanges.y);\r\n    for (int i = 1; i < COLORCOUNT; i++)\r\n\t{\r\n\t    vec4 gradientColor = gradientColors[i];\r\n\t    float colorKey = gradientColor.x;\r\n\t    if (colorKey >= colorAge)\r\n\t\t{\r\n\t\t    vec4 lastGradientColor = gradientColors[i - 1];\r\n\t\t    float lastColorKey = lastGradientColor.x;\r\n\t\t    float age = (colorAge - lastColorKey) / (colorKey - lastColorKey);\r\n\t\t    overTimeColor.rgb = mix(gradientColors[i - 1].yzw, gradientColor.yzw, age);\r\n\t\t    break;\r\n\t\t}\r\n\t}\r\n    return overTimeColor;\r\n}\r\n\r\nfloat getFrameFromGradient(in vec4 gradientFrames[2], in float normalizedAge)\r\n{\r\n\t#ifndef GRAPHICS_API_GLES3\r\n\t\tvec2 gradientNumbersVec2[4];\r\n\t\tgradientNumbersVec2[0] = gradientFrames[0].xy;\r\n\t\tgradientNumbersVec2[1] = gradientFrames[0].zw;\r\n\t\tgradientNumbersVec2[2] = gradientFrames[1].xy;\r\n\t\tgradientNumbersVec2[3] = gradientFrames[1].zw;\r\n\t#endif\r\n    float overTimeFrame;\r\n    for (int i = 1; i < 4; i++)\r\n\t{\r\n\t\t#ifdef GRAPHICS_API_GLES3\r\n\t    \tvec2 gradientFrame = getVec2ValueByIndexFromeVec4Array(gradientFrames,i);\r\n\t\t#else\r\n\t\t\tvec2 gradientFrame = gradientNumbersVec2[i];\r\n\t\t#endif\r\n\t    float key = gradientFrame.x;\r\n\t\toverTimeFrame = gradientFrame.y;\r\n\t    if (key >= normalizedAge)\r\n\t\t{\r\n\t\t\t#ifdef GRAPHICS_API_GLES3\r\n\t\t\t\tvec2 lastGradientFrame = getVec2ValueByIndexFromeVec4Array(gradientFrames,i-1);\r\n\t\t\t#else\r\n\t\t\t\tvec2 lastGradientFrame = gradientNumbersVec2[i-1];\r\n\t\t\t#endif\r\n\t\t    float lastKey = lastGradientFrame.x;\r\n\t\t\tfloat age = max((normalizedAge-lastKey), 0.)/(key-lastKey);\r\n\t\t    overTimeFrame = mix(lastGradientFrame.y, gradientFrame.y, age);\r\n\t\t    break;\r\n\t\t}\r\n\t}\r\n    return floor(overTimeFrame);\r\n}\r\n"),t.Shader3D.addInclude("particleShuriKenSpriteVS.glsl","// sprite Uniform\r\nuniform float u_CurrentTime;\r\nuniform vec3 u_Gravity;\r\nuniform vec2 u_DragConstanct;\r\nuniform vec3 u_WorldPosition;\r\nuniform vec4 u_WorldRotation;\r\nuniform int u_ThreeDStartRotation;\r\nuniform int u_Shape;\r\nuniform int u_ScalingMode;\r\nuniform vec3 u_PositionScale;\r\nuniform vec3 u_SizeScale;\r\n\r\nuniform float u_StretchedBillboardLengthScale;\r\nuniform float u_StretchedBillboardSpeedScale;\r\nuniform int u_SimulationSpace;\r\n\r\n#ifdef VELOCITYOVERLIFETIMERANDOMCURVE\r\n    uniform int u_VOLSpaceType;\r\n\r\n    uniform vec4 u_VOLVelocityGradientX[2];  // x为key,y为速度 z为key,w为速度\r\n    uniform vec4 u_VOLVelocityGradientY[2];  // x为key,y为速度 z为key,w为速度\r\n    uniform vec4 u_VOLVelocityGradientZ[2];  // x为key,y为速度 z为key,w为速度\r\n\r\n    uniform vec4 u_VOLVelocityGradientMaxX[2]; // x为key,y为速度 z为key,w为速度\r\n    uniform vec4 u_VOLVelocityGradientMaxY[2]; // x为key,y为速度 z为key,w为速度\r\n    uniform vec4 u_VOLVelocityGradientMaxZ[2]; // x为key,y为速度 z为key,w为速度\r\n#endif\r\n\r\n#ifdef COLORKEYCOUNT_8\r\n    #define COLORCOUNT 8\r\n    #define COLORCOUNT_HALF 4\r\n#else\r\n    #define COLORCOUNT 4\r\n    #define COLORCOUNT_HALF 2\r\n#endif\r\n\r\n#ifdef RANDOMCOLOROVERLIFETIME\r\n    uniform vec4 u_ColorOverLifeGradientColors[COLORCOUNT]; // x为key,yzw为Color\r\n    uniform vec4 u_ColorOverLifeGradientAlphas[COLORCOUNT_HALF]; // x为key,y为Alpha,z为key,w为Alpha \r\n    uniform vec4 u_ColorOverLifeGradientRanges;\r\n    uniform vec4 u_MaxColorOverLifeGradientColors[COLORCOUNT]; // x为key,yzw为Color\r\n    uniform vec4 u_MaxColorOverLifeGradientAlphas[COLORCOUNT_HALF]; // x为key,y为Alpha,z为key,w为Alpha \r\n    uniform vec4 u_MaxColorOverLifeGradientRanges;\r\n#endif\r\n\r\n#ifdef SIZEOVERLIFETIMERANDOMCURVES\r\n    uniform vec4 u_SOLSizeGradient[2]; // x为key,y为尺寸, z为key,w为尺寸\r\n    uniform vec4 u_SOLSizeGradientMax[2]; // x为key,y为尺寸, z为key,w为尺寸\r\n#endif\r\n\r\n#ifdef SIZEOVERLIFETIMERANDOMCURVESSEPERATE\r\n    uniform vec4 u_SOLSizeGradientX[2]; // x为key,y为尺寸,z为key,w为尺寸\r\n    uniform vec4 u_SOLSizeGradientY[2]; // x为key,y为尺寸,z为key,w为尺寸\r\n    uniform vec4 u_SOLSizeGradientZ[2]; // x为key,y为尺寸,z为key,w为尺寸\r\n    uniform vec4 u_SOLSizeGradientMaxX[2];// x为key,y为尺寸,z为key,w为尺寸\r\n    uniform vec4 u_SOLSizeGradientMaxY[2]; // x为key,y为尺寸,z为key,w为尺寸\r\n    uniform vec4 u_SOLSizeGradientMaxZ[2]; // x为key,y为尺寸,z为key,w为尺寸\r\n#endif\r\n\r\n#ifdef ROTATIONOVERLIFETIME\r\n    uniform vec4 u_ROLAngularVelocityGradient[2]; // x为key,y为旋转,z为key,w为旋转\r\n    uniform vec4 u_ROLAngularVelocityGradientMax[2]; // x为key,y为旋转,z为key,w为旋转,\r\n#endif\r\n\r\n#ifdef ROTATIONOVERLIFETIMESEPERATE\r\n    uniform vec4 u_ROLAngularVelocityGradientX[2]; //x为key,y为旋转速度,z为key,w为旋转速度\r\n    uniform vec4 u_ROLAngularVelocityGradientY[2];\r\n    uniform vec4 u_ROLAngularVelocityGradientZ[2];\r\n\r\n    uniform vec4 u_ROLAngularVelocityGradientMaxX[2];\r\n    uniform vec4 u_ROLAngularVelocityGradientMaxY[2];\r\n    uniform vec4 u_ROLAngularVelocityGradientMaxZ[2];\r\n#endif\r\n\r\n#ifdef TEXTURESHEETANIMATIONRANDOMCURVE\r\n    uniform float u_TSACycles;\r\n    uniform vec2 u_TSASubUVLength;\r\n    uniform vec4 u_TSAGradientUVs[2]; // x为key,y为frame,z为key,w为frame\r\n    uniform vec4 u_TSAMaxGradientUVs[2]; // x为key,y为frame,z为key,w为frame\r\n#endif");let r={a_CornerTextureCoordinate:[Pt.PARTICLE_CORNERTEXTURECOORDINATE0,e.ShaderDataType.Vector4],a_MeshPosition:[Pt.PARTICLE_POSITION0,e.ShaderDataType.Vector3],a_MeshColor:[Pt.PARTICLE_COLOR0,e.ShaderDataType.Vector4],a_MeshTextureCoordinate:[Pt.PARTICLE_TEXTURECOORDINATE0,e.ShaderDataType.Vector2],a_ShapePositionStartLifeTime:[Pt.PARTICLE_SHAPEPOSITIONSTARTLIFETIME,e.ShaderDataType.Vector4],a_DirectionTime:[Pt.PARTICLE_DIRECTIONTIME,e.ShaderDataType.Vector4],a_StartColor:[Pt.PARTICLE_STARTCOLOR0,e.ShaderDataType.Vector4],a_StartSize:[Pt.PARTICLE_STARTSIZE,e.ShaderDataType.Vector3],a_StartRotation0:[Pt.PARTICLE_STARTROTATION,e.ShaderDataType.Vector3],a_StartSpeed:[Pt.PARTICLE_STARTSPEED,e.ShaderDataType.Float],a_Random0:[Pt.PARTICLE_RANDOM0,e.ShaderDataType.Vector4],a_Random1:[Pt.PARTICLE_RANDOM1,e.ShaderDataType.Vector4],a_SimulationWorldPostion:[Pt.PARTICLE_SIMULATIONWORLDPOSTION,e.ShaderDataType.Vector3],a_SimulationWorldRotation:[Pt.PARTICLE_SIMULATIONWORLDROTATION,e.ShaderDataType.Vector4],a_SimulationUV:[Pt.PARTICLE_SIMULATIONUV,e.ShaderDataType.Vector4]},n={u_Tintcolor:e.ShaderDataType.Color,u_texture:e.ShaderDataType.Texture2D,u_TilingOffset:e.ShaderDataType.Vector4,u_AlphaTestValue:e.ShaderDataType.Float},a={u_Tintcolor:new t.Color(.5,.5,.5,.5),u_TilingOffset:new t.Vector4(1,1,0,0),u_AlphaTestValue:.5},i=t.Shader3D.add("PARTICLESHURIKEN",!1,!1),s=new t.SubShader(r,n,a);i.addSubShader(s),i.shaderType=t.ShaderFeatureType.Effect,s.addShaderPass('#define SHADER_NAME ParticleVS\r\n\r\n#include "Camera.glsl";\r\n#include "particleShuriKenSpriteVS.glsl";\r\n#include "Math.glsl";\r\n#include "MathGradient.glsl";\r\n#include "Color.glsl";\r\n#include "Scene.glsl"\r\n#include "SceneFogInput.glsl"\r\n\r\n\r\n#ifdef RENDERMODE_MESH\r\nvarying vec4 v_MeshColor;\r\n#endif\r\n\r\nvarying vec4 v_Color;\r\nvarying vec2 v_TextureCoordinate;\r\n\r\n//修改这里剔除没有用到的光照函数，增加粒子的编译速度\r\nvec2 TransformUV(vec2 texcoord, vec4 tilingOffset)\r\n{\r\n    vec2 transTexcoord = vec2(texcoord.x, texcoord.y - 1.0) * tilingOffset.xy + vec2(tilingOffset.z, -tilingOffset.w);\r\n    transTexcoord.y += 1.0;\r\n    return transTexcoord;\r\n}\r\n\r\n#ifdef VELOCITYOVERLIFETIMERANDOMCURVE\r\nvec3 computeParticleLifeVelocity(in float normalizedAge)\r\n{\r\n    vec3 outLifeVelocity;\r\n    \toutLifeVelocity = vec3(\r\n\t\tmix(getCurValueFromGradientFloat(u_VOLVelocityGradientX, normalizedAge),\r\n\t\t\tgetCurValueFromGradientFloat(u_VOLVelocityGradientMaxX, normalizedAge),\r\n\t\t\ta_Random1.y),\r\n\t\tmix(getCurValueFromGradientFloat(u_VOLVelocityGradientY, normalizedAge),\r\n\t\t\tgetCurValueFromGradientFloat(u_VOLVelocityGradientMaxY, normalizedAge),\r\n\t\t\ta_Random1.z),\r\n\t\tmix(getCurValueFromGradientFloat(u_VOLVelocityGradientZ, normalizedAge),\r\n\t\t\tgetCurValueFromGradientFloat(u_VOLVelocityGradientMaxZ, normalizedAge),\r\n\t\t\ta_Random1.w));\r\n\r\n    return outLifeVelocity;\r\n}\r\n#endif\r\n\r\n// drag\r\nvec3 getStartPosition(vec3 startVelocity, float age, vec3 dragData)\r\n{\r\n    vec3 startPosition;\r\n    float lasttime = min(startVelocity.x / dragData.x, age);\r\n    startPosition = lasttime * (startVelocity - 0.5 * dragData * lasttime);\r\n    return startPosition;\r\n}\r\n\r\nvec3 computeParticlePosition(in vec3 startVelocity, in vec3 lifeVelocity, in float age, in float normalizedAge, vec3 gravityVelocity, vec4 worldRotation, vec3 dragData)\r\n{\r\n    vec3 startPosition = getStartPosition(startVelocity, age, dragData);\r\n    vec3 lifePosition;\r\n#ifdef VELOCITYOVERLIFETIMERANDOMCURVE\r\n   \r\n    #ifdef VELOCITYOVERLIFETIMERANDOMCURVE\r\n\t\tlifePosition = vec3(\r\n\t\tmix(\r\n\t\t\tgetTotalValueFromGradientFloat(u_VOLVelocityGradientX, normalizedAge),\r\n\t\t\tgetTotalValueFromGradientFloat(u_VOLVelocityGradientMaxX, normalizedAge),\r\n\t\t\ta_Random1.y),\r\n\t\tmix(\r\n\t\t\tgetTotalValueFromGradientFloat(u_VOLVelocityGradientY, normalizedAge),\r\n\t\t\tgetTotalValueFromGradientFloat(u_VOLVelocityGradientMaxY, normalizedAge),\r\n\t\t\ta_Random1.z),\r\n\t\tmix(\r\n\t\t\tgetTotalValueFromGradientFloat(u_VOLVelocityGradientZ, normalizedAge),\r\n\t\t\tgetTotalValueFromGradientFloat(u_VOLVelocityGradientMaxZ, normalizedAge),\r\n\t\t\ta_Random1.w));\r\n    #endif\r\n\r\n    vec3 finalPosition;\r\n    if (u_VOLSpaceType == 0)\r\n\t{\r\n\t    if (u_ScalingMode != 2)\r\n\t\tfinalPosition = rotationByQuaternions(\r\n\t\t    u_PositionScale * (a_ShapePositionStartLifeTime.xyz + startPosition + lifePosition),\r\n\t\t    worldRotation);\r\n\t    else\r\n\t\tfinalPosition = rotationByQuaternions(\r\n\t\t    u_PositionScale * a_ShapePositionStartLifeTime.xyz + startPosition + lifePosition,\r\n\t\t    worldRotation);\r\n\t}\r\n    else\r\n\t{\r\n\t    if (u_ScalingMode != 2)\r\n\t\tfinalPosition = rotationByQuaternions(\r\n\t\t\t\t    u_PositionScale * (a_ShapePositionStartLifeTime.xyz + startPosition),\r\n\t\t\t\t    worldRotation)\r\n\t\t    + lifePosition;\r\n\t    else\r\n\t\tfinalPosition = rotationByQuaternions(\r\n\t\t\t\t    u_PositionScale * a_ShapePositionStartLifeTime.xyz + startPosition,\r\n\t\t\t\t    worldRotation)\r\n\t\t    + lifePosition;\r\n\t}\r\n#else\r\n    // startPosition = startVelocity * age;\r\n    vec3 finalPosition;\r\n    if (u_ScalingMode != 2)\r\n\tfinalPosition = rotationByQuaternions(\r\n\t    u_PositionScale * (a_ShapePositionStartLifeTime.xyz + startPosition),\r\n\t    worldRotation);\r\n    else\r\n\tfinalPosition = rotationByQuaternions(\r\n\t    u_PositionScale * a_ShapePositionStartLifeTime.xyz + startPosition,\r\n\t    worldRotation);\r\n#endif\r\n\r\n    if (u_SimulationSpace == 0)\r\n\tfinalPosition = finalPosition + a_SimulationWorldPostion;\r\n    else if (u_SimulationSpace == 1)\r\n\tfinalPosition = finalPosition + u_WorldPosition;\r\n\r\n    finalPosition += 0.5 * gravityVelocity * age;\r\n\r\n    return finalPosition;\r\n}\r\n\r\nvec4 computeParticleColor(in vec4 color, in float normalizedAge)\r\n{\r\n#ifdef RANDOMCOLOROVERLIFETIME\r\n    color *= mix(getColorFromGradient(u_ColorOverLifeGradientAlphas,\r\n\t\t     u_ColorOverLifeGradientColors,\r\n\t\t     normalizedAge, u_ColorOverLifeGradientRanges),\r\n\tgetColorFromGradient(u_MaxColorOverLifeGradientAlphas,\r\n\t    u_MaxColorOverLifeGradientColors,\r\n\t    normalizedAge, u_MaxColorOverLifeGradientRanges),\r\n\ta_Random0.y);\r\n#endif\r\n    return color;\r\n}\r\n\r\nvec2 computeParticleSizeBillbard(in vec2 size, in float normalizedAge)\r\n{\r\n\r\n#ifdef SIZEOVERLIFETIMERANDOMCURVES\r\n    size *= mix(getCurValueFromGradientFloat(u_SOLSizeGradient, normalizedAge),\r\n\tgetCurValueFromGradientFloat(u_SOLSizeGradientMax, normalizedAge),\r\n\ta_Random0.z);\r\n#endif\r\n\r\n#ifdef SIZEOVERLIFETIMERANDOMCURVESSEPERATE\r\n    size *= vec2(mix(getCurValueFromGradientFloat(u_SOLSizeGradientX, normalizedAge),\r\n\t\t     getCurValueFromGradientFloat(u_SOLSizeGradientMaxX, normalizedAge),\r\n\t\t     a_Random0.z),\r\n\tmix(getCurValueFromGradientFloat(u_SOLSizeGradientY, normalizedAge),\r\n\t    getCurValueFromGradientFloat(u_SOLSizeGradientMaxY, normalizedAge),\r\n\t    a_Random0.z));\r\n#endif\r\n\r\n    return size;\r\n}\r\n\r\n#ifdef RENDERMODE_MESH\r\nvec3 computeParticleSizeMesh(in vec3 size, in float normalizedAge)\r\n{\r\n\r\n    #ifdef SIZEOVERLIFETIMERANDOMCURVES\r\n    \tsize *= mix(getCurValueFromGradientFloat(u_SOLSizeGradient, normalizedAge),\r\n\t\t\t\t\tgetCurValueFromGradientFloat(u_SOLSizeGradientMax, normalizedAge),\r\n\t\t\t\t\ta_Random0.z);\r\n    #endif\r\n\r\n    #ifdef SIZEOVERLIFETIMERANDOMCURVESSEPERATE\r\n    \tsize *= vec3(mix(getCurValueFromGradientFloat(u_SOLSizeGradientX, normalizedAge),\r\n\t\t\t     getCurValueFromGradientFloat(u_SOLSizeGradientMaxX, normalizedAge),\r\n\t\t    \t a_Random0.z),\r\n\t\t\t\tmix(getCurValueFromGradientFloat(u_SOLSizeGradientY, normalizedAge),\r\n\t\t\t\t\tgetCurValueFromGradientFloat(u_SOLSizeGradientMaxY, normalizedAge),\r\n\t\t\t\t\ta_Random0.z),\r\n\t\t\t\tmix(getCurValueFromGradientFloat(u_SOLSizeGradientZ, normalizedAge),\r\n\t\t\t\t\tgetCurValueFromGradientFloat(u_SOLSizeGradientMaxZ, normalizedAge),\r\n\t\t\t\t\ta_Random0.z));\r\n    #endif\r\n\t\r\n    return size;\r\n}\r\n#endif\r\n\r\nfloat computeParticleRotationFloat(in float rotation,\r\n    in float age,\r\n    in float normalizedAge)\r\n{\r\n\t#ifdef ROTATIONOVERLIFETIME\r\n\t\trotation += mix(\r\n\t\t\tgetTotalValueFromGradientFloat(u_ROLAngularVelocityGradient, normalizedAge),\r\n\t\t\tgetTotalValueFromGradientFloat(u_ROLAngularVelocityGradientMax,normalizedAge),\r\n\t\t\ta_Random0.w);\r\n\t#endif\r\n\r\n\t#ifdef ROTATIONOVERLIFETIMESEPERATE\r\n\t\trotation += mix(getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientZ,\r\n\t\t\t\tnormalizedAge),\r\n\t\tgetTotalValueFromGradientFloat(\r\n\t\t\tu_ROLAngularVelocityGradientMaxZ, normalizedAge),\r\n\t\ta_Random0.w);\r\n\t#endif\r\n    return rotation;\r\n}\r\n\r\n#if defined(RENDERMODE_MESH) && (defined(ROTATIONOVERLIFETIME) || defined(ROTATIONOVERLIFETIMESEPERATE))\r\nvec3 computeParticleRotationVec3(in vec3 rotation,\r\n    in float age,\r\n    in float normalizedAge)\r\n{\r\n    #ifdef ROTATIONOVERLIFETIME\r\n\t\t\trotation += mix(\r\n\t\t\tgetTotalValueFromGradientFloat(u_ROLAngularVelocityGradient, normalizedAge),\r\n\t\t\tgetTotalValueFromGradientFloat(u_ROLAngularVelocityGradientMax,\r\n\t\t\t\tnormalizedAge),\r\n\t\t\ta_Random0.w);\r\n    #endif\r\n    \r\n\t#ifdef ROTATIONOVERLIFETIMESEPERATE\r\n\t\trotation += vec3(mix(getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientX,\r\n\t\t\t\t\tnormalizedAge),\r\n\t\t\t\tgetTotalValueFromGradientFloat(u_ROLAngularVelocityGradientMaxX,\r\n\t\t\t\t\tnormalizedAge),\r\n\t\t\t\ta_Random0.w),\r\n\t\tmix(getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientY,\r\n\t\t\tnormalizedAge),\r\n\t\t\tgetTotalValueFromGradientFloat(u_ROLAngularVelocityGradientMaxY,\r\n\t\t\tnormalizedAge),\r\n\t\t\ta_Random0.w),\r\n\t\tmix(getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientZ,\r\n\t\t\tnormalizedAge),\r\n\t\t\tgetTotalValueFromGradientFloat(u_ROLAngularVelocityGradientMaxZ,\r\n\t\t\tnormalizedAge),\r\n\t\t\ta_Random0.w));\r\n    #endif\r\n    return rotation;\r\n}\r\n#endif\r\n\r\nvec2 computeParticleUV(in vec2 uv, in float normalizedAge)\r\n{\r\n\r\n#ifdef TEXTURESHEETANIMATIONRANDOMCURVE\r\n    float cycleNormalizedAge = normalizedAge * u_TSACycles;\r\n    float uvNormalizedAge = cycleNormalizedAge - floor(cycleNormalizedAge);\r\n    float frame = floor(mix(getFrameFromGradient(u_TSAGradientUVs, uvNormalizedAge),\r\n\tgetFrameFromGradient(u_TSAMaxGradientUVs, uvNormalizedAge),\r\n\ta_Random1.x));\r\n    float totalULength = frame * u_TSASubUVLength.x;\r\n    float floorTotalULength = floor(totalULength);\r\n    uv.x += totalULength - floorTotalULength;\r\n    uv.y += floorTotalULength * u_TSASubUVLength.y;\r\n#endif\r\n    return uv;\r\n}\r\n\r\nvoid main()\r\n{\r\n    float age = u_CurrentTime - a_DirectionTime.w;\r\n    float normalizedAge = age / a_ShapePositionStartLifeTime.w;\r\n    vec3 lifeVelocity;\r\n    if (normalizedAge < 1.0)\r\n\t{\r\n\t    vec3 startVelocity = a_DirectionTime.xyz * a_StartSpeed;\r\n\t\r\n\t\t#ifdef VELOCITYOVERLIFETIMERANDOMCURVE\r\n\t\t\t\tlifeVelocity = computeParticleLifeVelocity(normalizedAge); //计算粒子生命周期速度\r\n\t\t#endif\r\n\t\r\n\t    vec3 gravityVelocity = u_Gravity * age;\r\n\r\n\t    vec4 worldRotation;\r\n\t    \r\n\t\tif (u_SimulationSpace == 0)\r\n\t\t\tworldRotation = a_SimulationWorldRotation;\r\n\t    else\r\n\t\t\tworldRotation = u_WorldRotation;\r\n\r\n\t    // drag\r\n\t    vec3 dragData = a_DirectionTime.xyz * mix(u_DragConstanct.x, u_DragConstanct.y, a_Random0.x);\r\n\t\t//miner 计算顶点位置\r\n\t    vec3 center = computeParticlePosition(startVelocity, lifeVelocity, age, normalizedAge, gravityVelocity, worldRotation, dragData); //计算粒子位置\r\n\r\n#ifdef SPHERHBILLBOARD\r\n\t    vec2 corner = a_CornerTextureCoordinate.xy; // Billboard模式z轴无效\r\n\t    vec3 cameraUpVector = normalize(u_CameraUp); // TODO:是否外面归一化\r\n\t    vec3 sideVector = normalize(cross(u_CameraDirection, cameraUpVector));\r\n\t    vec3 upVector = normalize(cross(sideVector, u_CameraDirection));\r\n\t    corner *= computeParticleSizeBillbard(a_StartSize.xy, normalizedAge);\r\n    #if defined(ROTATIONOVERLIFETIME) || defined(ROTATIONOVERLIFETIMESEPERATE)\r\n\t    if (u_ThreeDStartRotation!=0)\r\n\t\t{\r\n\t\t    vec3 rotation = vec3(\r\n\t\t\ta_StartRotation0.xy,\r\n\t\t\tcomputeParticleRotationFloat(a_StartRotation0.z, age, normalizedAge));\r\n\t\t    center += u_SizeScale.xzy * rotationByEuler(corner.x * sideVector + corner.y * upVector, rotation);\r\n\t\t}\r\n\t    else\r\n\t\t{\r\n\t\t    float rot = computeParticleRotationFloat(a_StartRotation0.x, age, normalizedAge);\r\n\t\t    float c = cos(rot);\r\n\t\t    float s = sin(rot);\r\n\t\t    mat2 rotation = mat2(c, -s, s, c);\r\n\t\t    corner = rotation * corner;\r\n\t\t    center += u_SizeScale.xzy * (corner.x * sideVector + corner.y * upVector);\r\n\t\t}\r\n    #else\r\n\t    if (u_ThreeDStartRotation!=0)\r\n\t\t{\r\n\t\t    center += u_SizeScale.xzy * rotationByEuler(corner.x * sideVector + corner.y * upVector, a_StartRotation0);\r\n\t\t}\r\n\t    else\r\n\t\t{\r\n\t\t    float c = cos(a_StartRotation0.x);\r\n\t\t    float s = sin(a_StartRotation0.x);\r\n\t\t    mat2 rotation = mat2(c, -s, s, c);\r\n\t\t    corner = rotation * corner;\r\n\t\t    center += u_SizeScale.xzy * (corner.x * sideVector + corner.y * upVector);\r\n\t\t}\r\n    #endif\r\n#endif\r\n\r\n#ifdef STRETCHEDBILLBOARD\r\n\t    vec2 corner = a_CornerTextureCoordinate.xy; // Billboard模式z轴无效\r\n\t    vec3 velocity;\r\n    #ifdef VELOCITYOVERLIFETIMERANDOMCURVE\r\n\t    if (u_VOLSpaceType == 0)\r\n\t\tvelocity = rotationByQuaternions(u_SizeScale * (startVelocity + lifeVelocity),\r\n\t\t\t       worldRotation)\r\n\t\t    + gravityVelocity;\r\n\t    else\r\n\t\tvelocity = rotationByQuaternions(u_SizeScale * startVelocity, worldRotation) + lifeVelocity + gravityVelocity;\r\n    #else\r\n\t    velocity = rotationByQuaternions(u_SizeScale * startVelocity, worldRotation) + gravityVelocity;\r\n    #endif\r\n\r\n\t    vec3 cameraUpVector = normalize(velocity);\r\n\t    vec3 direction = normalize(center - u_CameraPos);\r\n\t    vec3 sideVector = normalize(cross(direction, normalize(velocity)));\r\n\r\n\t    sideVector = u_SizeScale.xzy * sideVector;\r\n\t    cameraUpVector = length(vec3(u_SizeScale.x, 0.0, 0.0)) * cameraUpVector;\r\n\r\n\t    vec2 size = computeParticleSizeBillbard(a_StartSize.xy, normalizedAge);\r\n\r\n\t    const mat2 rotaionZHalfPI = mat2(0.0, -1.0, 1.0, 0.0);\r\n\t    corner = rotaionZHalfPI * corner;\r\n\t    corner.y = corner.y - abs(corner.y);\r\n\r\n\t    float speed = length(velocity); // TODO:\r\n\t    center += sign(u_SizeScale.x) * (sign(u_StretchedBillboardLengthScale) * size.x * corner.x * sideVector + (speed * u_StretchedBillboardSpeedScale + size.y * u_StretchedBillboardLengthScale) * corner.y * cameraUpVector);\r\n#endif\r\n\r\n#ifdef HORIZONTALBILLBOARD\r\n\t    vec2 corner = a_CornerTextureCoordinate.xy; // Billboard模式z轴无效\r\n\t    const vec3 cameraUpVector = vec3(0.0, 0.0, 1.0);\r\n\t    const vec3 sideVector = vec3(-1.0, 0.0, 0.0);\r\n\r\n\t    float rot = computeParticleRotationFloat(a_StartRotation0.x, age, normalizedAge);\r\n\t    float c = cos(rot);\r\n\t    float s = sin(rot);\r\n\t    mat2 rotation = mat2(c, -s, s, c);\r\n\t    corner = rotation * corner * cos(0.78539816339744830961566084581988); // TODO:临时缩小cos45,不确定U3D原因\r\n\t    corner *= computeParticleSizeBillbard(a_StartSize.xy, normalizedAge);\r\n\t    center += u_SizeScale.xzy * (corner.x * sideVector + corner.y * cameraUpVector);\r\n#endif\r\n\r\n#ifdef VERTICALBILLBOARD\r\n\t    vec2 corner = a_CornerTextureCoordinate.xy; // Billboard模式z轴无效\r\n\t    const vec3 cameraUpVector = vec3(0.0, 1.0, 0.0);\r\n\t    vec3 sideVector = normalize(cross(u_CameraDirection, cameraUpVector));\r\n\r\n\t    float rot = computeParticleRotationFloat(a_StartRotation0.x, age, normalizedAge);\r\n\t    float c = cos(rot);\r\n\t    float s = sin(rot);\r\n\t    mat2 rotation = mat2(c, -s, s, c);\r\n\t    corner = rotation * corner * cos(0.78539816339744830961566084581988); // TODO:临时缩小cos45,不确定U3D原因\r\n\t    corner *= computeParticleSizeBillbard(a_StartSize.xy, normalizedAge);\r\n\t    center += u_SizeScale.xzy * (corner.x * sideVector + corner.y * cameraUpVector);\r\n#endif\r\n\r\n#ifdef RENDERMODE_MESH\r\n\t    vec3 size = computeParticleSizeMesh(a_StartSize, normalizedAge);\r\n\t\t#if defined(ROTATIONOVERLIFETIME) || defined(ROTATIONOVERLIFETIMESEPERATE)\r\n\t\t\tif (u_ThreeDStartRotation!=0)\r\n\t\t\t{\r\n\t\t\t\tvec3 rotation = vec3(\r\n\t\t\t\ta_StartRotation0.xy,\r\n\t\t\t\tcomputeParticleRotationFloat(a_StartRotation0.z, age, normalizedAge));\r\n\t\t\t\tcenter += rotationByQuaternions(\r\n\t\t\t\tu_SizeScale * rotationByEuler(a_MeshPosition * size, rotation),\r\n\t\t\t\tworldRotation);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\t#ifdef ROTATIONOVERLIFETIME\r\n\t\t\t\t\t\tfloat angle = computeParticleRotationFloat(a_StartRotation0.x, age, normalizedAge);\r\n\t\t\t\t\t\tif (a_ShapePositionStartLifeTime.x != 0.0 || a_ShapePositionStartLifeTime.y != 0.0)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcenter += (rotationByQuaternions(\r\n\t\t\t\t\t\t\trotationByAxis(\r\n\t\t\t\t\t\t\t\tu_SizeScale * a_MeshPosition * size,\r\n\t\t\t\t\t\t\t\tnormalize(cross(vec3(0.0, 0.0, 1.0),\r\n\t\t\t\t\t\t\t\tvec3(a_ShapePositionStartLifeTime.xy, 0.0))),\r\n\t\t\t\t\t\t\t\tangle),\r\n\t\t\t\t\t\t\tworldRotation)); //已验证\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvec3 axis = mix(vec3(0.0, 0.0, -1.0), vec3(0.0, -1.0, 0.0), float(u_Shape));\r\n\t\t\t\t\t\t\tif (u_SimulationSpace == 0)\r\n\t\t\t\t\t\t\t\tcenter += rotationByAxis(u_SizeScale * a_MeshPosition * size,axis,angle); //已验证\r\n\t\t\t\t\t\t\telse if (u_SimulationSpace == 1)\r\n\t\t\t\t\t\t\t\tcenter += rotationByQuaternions(u_SizeScale * rotationByAxis(a_MeshPosition * size, axis, angle),worldRotation); //已验证\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t#endif\r\n\t\t\t\t#ifdef ROTATIONOVERLIFETIMESEPERATE\r\n\t\t\t\t\t\t// TODO:是否应合并if(u_ThreeDStartRotation)分支代码,待测试\r\n\t\t\t\t\t\tvec3 angle = computeParticleRotationVec3(\r\n\t\t\t\t\t\tvec3(0.0, 0.0, -a_StartRotation0.x), age, normalizedAge);\r\n\t\t\t\t\t\tcenter += (rotationByQuaternions(\r\n\t\t\t\t\t\trotationByEuler(u_SizeScale * a_MeshPosition * size,\r\n\t\t\t\t\t\t\tvec3(angle.x, angle.y, angle.z)),\r\n\t\t\t\t\t\tworldRotation)); //已验证\r\n\t\t\t\t#endif\r\n\t\t}\r\n    #else\r\n\t    if (u_ThreeDStartRotation!=0)\r\n\t\t{\r\n\t\t    center += rotationByQuaternions(\r\n\t\t\tu_SizeScale * rotationByEuler(a_MeshPosition * size, a_StartRotation0),\r\n\t\t\tworldRotation); //已验证\r\n\t\t}\r\n\t    else\r\n\t\t{\r\n\t\t    if (a_ShapePositionStartLifeTime.x != 0.0 || a_ShapePositionStartLifeTime.y != 0.0)\r\n\t\t\t{\r\n\t\t\t    if (u_SimulationSpace == 0)\r\n\t\t\t\t\tcenter += rotationByAxis(\r\n\t\t\t\t\t\tu_SizeScale * a_MeshPosition * size,\r\n\t\t\t\t\t\tnormalize(cross(vec3(0.0, 0.0, 1.0),\r\n\t\t\t\t\t\tvec3(a_ShapePositionStartLifeTime.xy, 0.0))),\r\n\t\t\t\t\t\ta_StartRotation0.x);\r\n\t\t\t    else if (u_SimulationSpace == 1)\r\n\t\t\t\t\tcenter += (rotationByQuaternions(\r\n\t\t\t\t\t\tu_SizeScale * rotationByAxis(a_MeshPosition * size, normalize(cross(vec3(0.0, 0.0, 1.0), vec3(a_ShapePositionStartLifeTime.xy, 0.0))), a_StartRotation0.x),\r\n\t\t\t\t\t\tworldRotation)); //已验证\r\n\t\t\t}\r\n\t\t    else\r\n\t\t\t{\r\n\t\t\t\tvec3 axis = mix(vec3(0.0, 0.0, -1.0), vec3(0.0, -1.0, 0.0), float(u_Shape));\r\n\t\t\t\tif (u_SimulationSpace == 0)\r\n\t\t\t\t\tcenter += u_SizeScale * rotationByAxis(a_MeshPosition * size, axis, a_StartRotation0.x);\r\n\t\t\t\telse if (u_SimulationSpace == 1)\r\n\t\t\t\t\tcenter += rotationByQuaternions(\r\n\t\t\t\t\tu_SizeScale * rotationByAxis(a_MeshPosition * size, axis, a_StartRotation0.x),\r\n\t\t\t\t\tworldRotation);\r\n\t\t\t}\r\n\t\t}\r\n    #endif\r\n\t    v_MeshColor = a_MeshColor;\r\n#endif\r\n\t    gl_Position = u_Projection * u_View * vec4(center, 1.0);\r\n\t\tvec4 startcolor = gammaToLinear(a_StartColor);\r\n\t    v_Color = computeParticleColor(startcolor, normalizedAge);\r\n#ifdef DIFFUSEMAP\r\n\t    vec2 simulateUV;\r\n    #if defined(SPHERHBILLBOARD) || defined(STRETCHEDBILLBOARD) || defined(HORIZONTALBILLBOARD) || defined(VERTICALBILLBOARD)\r\n\t    simulateUV = a_SimulationUV.xy + a_CornerTextureCoordinate.zw * a_SimulationUV.zw;\r\n\t    v_TextureCoordinate = computeParticleUV(simulateUV, normalizedAge);\r\n    #endif\r\n\t\r\n    #ifdef RENDERMODE_MESH\r\n\t    simulateUV = a_SimulationUV.xy + a_MeshTextureCoordinate * a_SimulationUV.zw;\r\n\t    v_TextureCoordinate = computeParticleUV(simulateUV, normalizedAge);\r\n    #endif\r\n\t    v_TextureCoordinate = TransformUV(v_TextureCoordinate, u_TilingOffset);\r\n#endif\r\n\t}\r\n    else\r\n\t{\r\n\t    gl_Position = vec4(2.0, 2.0, 2.0, 1.0); // Discard use out of X(-1,1),Y(-1,1),Z(0,1)\r\n\t}\r\n    gl_Position = remapPositionZ(gl_Position);\r\n\t#ifdef FOG\r\n        FogHandle(gl_Position.z);\r\n    #endif\r\n}\r\n','#define SHADER_NAME ParticleFS\r\n\r\n#include "Scene.glsl";\r\n#include "SceneFog.glsl";\r\n#include "Color.glsl";\r\n\r\nconst vec4 c_ColorSpace = vec4(4.59479380, 4.59479380, 4.59479380, 2.0);\r\n\r\nvarying vec4 v_Color;\r\nvarying vec2 v_TextureCoordinate;\r\n// uniform sampler2D u_texture;\r\n// uniform vec4 u_Tintcolor;\r\n\r\n#ifdef RENDERMODE_MESH\r\nvarying vec4 v_MeshColor;\r\n#endif\r\n\r\nvoid main()\r\n{\r\n    vec4 color;\r\n#ifdef RENDERMODE_MESH\r\n    color = v_MeshColor;\r\n#else\r\n    color = vec4(1.0);\r\n#endif\r\n\r\n#ifdef DIFFUSEMAP\r\n    vec4 colorT = texture2D(u_texture, v_TextureCoordinate);\r\n    #ifdef Gamma_u_texture\r\n    colorT = gammaToLinear(colorT);\r\n    #endif // Gamma_u_SpecularTexture\r\n    #ifdef TINTCOLOR\r\n    color *= colorT * u_Tintcolor * c_ColorSpace * v_Color;\r\n    #else\r\n    color *= colorT * v_Color;\r\n    #endif // TINTCOLORd\r\n#else\r\n    #ifdef TINTCOLOR\r\n    color *= u_Tintcolor * c_ColorSpace * v_Color;\r\n    #else\r\n    color *= v_Color;\r\n    #endif // TINTCOLOR\r\n#endif\r\n\r\n#ifdef ALPHATEST\r\n    if (color.a < u_AlphaTestValue)\r\n\t{\r\n\t    discard;\r\n\t}\r\n#endif // ALPHATEST\r\n\r\n\r\n#ifdef FOG\r\n    color.rgb = scenUnlitFog(color.rgb);\r\n#endif // FOG\r\n    gl_FragColor = color;\r\n\r\n    gl_FragColor = outputTransform(gl_FragColor);\r\n}')}}class gr{static init(){let r={a_Position:[t.VertexMesh.MESH_POSITION0,e.ShaderDataType.Vector4]},n={u_SunSize:e.ShaderDataType.Float,u_SunSizeConvergence:e.ShaderDataType.Float,u_AtmosphereThickness:e.ShaderDataType.Float,u_SkyTint:e.ShaderDataType.Color,u_GroundTint:e.ShaderDataType.Color,u_Exposure:e.ShaderDataType.Float},a={u_SunSize:.04,u_SunSizeConvergence:5,u_AtmosphereThickness:1,u_SkyTint:new t.Color(.5,.5,.5,1),u_GroundTint:new t.Color(.369,.349,.341,1),u_Exposure:1.3},i=t.Shader3D.add("SkyProcedural");i.shaderType=t.ShaderFeatureType.Sky;let s=new t.SubShader(r,n,a);i.addSubShader(s);let o=s.addShaderPass("#define SHADER_NAME SkyProceduralVS\r\n\r\n#include \"SkyCommon.glsl\";\r\n\r\n\r\n#define OUTER_RADIUS 1.025\r\n#define RAYLEIGH (mix(0.0, 0.0025, pow(u_AtmosphereThickness,2.5)))// Rayleigh constant Rayleigh为夜空光和极光亮度单位\r\n#define MIE 0.0010             // Mie constant 米氏散射\r\n#define SUN_BRIGHTNESS 20.0    // Sun brightness\r\n#define MAX_SCATTER 50.0 // Maximum scattering value, to prevent math overflows on Adrenos\r\n\r\nconst float SKY_GROUND_THRESHOLD = 0.02;\r\nconst float outerRadius = OUTER_RADIUS;\r\nconst float outerRadius2 = OUTER_RADIUS*OUTER_RADIUS;\r\nconst float innerRadius = 1.0;\r\nconst float innerRadius2 = 1.0;\r\nconst float cameraHeight = 0.0001;\r\n\r\nconst float HDSundiskIntensityFactor = 15.0;\r\nconst float simpleSundiskIntensityFactor = 27.0;\r\n\r\nconst float sunScale = 400.0 * SUN_BRIGHTNESS;\r\nconst float kmESun = MIE * SUN_BRIGHTNESS;\r\nconst float km4PI = MIE * 4.0 * 3.14159265;\r\nconst float scale = 1.0 / (OUTER_RADIUS - 1.0);\r\nconst float scaleDepth = 0.25;\r\nconst float scaleOverScaleDepth = (1.0 / (OUTER_RADIUS - 1.0)) / 0.25;\r\nconst float samples = 2.0; // THIS IS UNROLLED MANUALLY, DON'T TOUCH\r\n\r\n// RGB wavelengths        .35 (.62=158), .43 (.68=174), .525 (.75=190)\r\nconst vec3 c_DefaultScatteringWavelength = vec3(0.65, 0.57, 0.475);//默认散射波长\r\nconst vec3 c_VariableRangeForScatteringWavelength = vec3(0.15, 0.15, 0.15);//散射播放的可变范围\r\n\r\nvarying vec3 v_GroundColor;\r\nvarying vec3 v_SkyColor;\r\n\r\n#ifdef SUN_HIGH_QUALITY\r\n\tvarying vec3 v_Vertex;\r\n#elif defined(SUN_SIMPLE)\r\n\tvarying vec3 v_RayDir;\r\n#else\r\n\tvarying float v_SkyGroundFactor;\r\n#endif\r\n\r\n#if defined(SUN_HIGH_QUALITY)||defined(SUN_SIMPLE)\r\n\tvarying vec3 v_SunColor;\r\n#endif\r\n\r\n// Calculates the Rayleigh phase function\r\nfloat getRayleighPhase(vec3 light, vec3 ray) \r\n{\r\n\tfloat eyeCos = dot(light, ray);\r\n\treturn 0.75 + 0.75*eyeCos*eyeCos;\r\n}\r\n\r\nfloat scaleAngle(float inCos)\r\n{\r\n\tfloat x = 1.0 - inCos;\r\n\treturn 0.25 * exp(-0.00287 + x*(0.459 + x*(3.83 + x*(-6.80 + x*5.25))));\r\n}\r\n\r\n\r\nvoid main(){\r\n    gl_Position = u_SkyProjectionViewMat*a_Position;\r\n\r\n    vec3 skyTintInGammaSpace = pow(u_SkyTint.xyz,vec3(0.45));//u_SkyTint.xyz;//支持非GAMMA空间后要调整\r\n\tvec3 scatteringWavelength = mix(c_DefaultScatteringWavelength-c_VariableRangeForScatteringWavelength,c_DefaultScatteringWavelength+c_VariableRangeForScatteringWavelength,vec3(1.0) - skyTintInGammaSpace); // using Tint in sRGB+ gamma allows for more visually linear interpolation and to keep (0.5) at (128, gray in sRGB) point\r\n\tvec3 invWavelength = 1.0 / pow(scatteringWavelength, vec3(4.0));\r\n\r\n\tfloat krESun = RAYLEIGH * SUN_BRIGHTNESS;\r\n\tfloat kr4PI = RAYLEIGH * 4.0 * 3.14159265;\r\n\r\n\tvec3 cameraPos = vec3(0.0,innerRadius + cameraHeight,0.0); // The camera's current position\r\n\r\n\t// Get the ray from the camera to the vertex and its length (which is the far point of the ray passing through the atmosphere)\r\n\tvec3 eyeRay = normalize(a_Position.xyz);\r\n\r\n\tfloat far = 0.0;\r\n\tvec3 cIn, cOut;\r\n\tif (eyeRay.y >= 0.0) {// Sky\r\n\t\t// Calculate the length of the \"atmosphere\"\r\n\t\tfar = sqrt(outerRadius2 + innerRadius2 * eyeRay.y * eyeRay.y - innerRadius2) - innerRadius * eyeRay.y;\r\n\r\n\t\t// Calculate the ray's starting position, then calculate its scattering offset\r\n\t\tfloat height = innerRadius + cameraHeight;\r\n\t\tfloat depth = exp(scaleOverScaleDepth * -cameraHeight);\r\n\t\tfloat startAngle = dot(eyeRay, cameraPos) / height;\r\n\t\tfloat startOffset = depth*scaleAngle(startAngle);\r\n\r\n\t\t// Initialize the scattering loop variables\r\n\t\tfloat sampleLength = far / samples;\r\n\t\tfloat scaledLength = sampleLength * scale;\r\n\t\tvec3 sampleRay = eyeRay * sampleLength;\r\n\t\tvec3 samplePoint = cameraPos + sampleRay * 0.5;\r\n\r\n\t\tvec3 frontColor = vec3(0.0);\r\n\t\t//unrolling this manually to avoid some platform for loop slow\r\n\t\t{\r\n\t\t\tfloat height = length(samplePoint);\r\n\t\t\tfloat depth = exp(scaleOverScaleDepth * (innerRadius - height));\r\n\t\t\tfloat lightAngle = dot(-u_SunLight_direction, samplePoint) / height;\r\n\t\t\tfloat cameraAngle = dot(eyeRay, samplePoint) / height;\r\n\t\t\tfloat scatter = (startOffset + depth*(scaleAngle(lightAngle) - scaleAngle(cameraAngle)));\r\n\t\t\tvec3 attenuate = exp(-clamp(scatter, 0.0, MAX_SCATTER) * (invWavelength * kr4PI + km4PI));\r\n\r\n\t\t\tfrontColor += attenuate * (depth * scaledLength);\r\n\t\t\tsamplePoint += sampleRay;\r\n\t\t}\r\n\t\t{\r\n\t\t\tfloat height = length(samplePoint);\r\n\t\t\tfloat depth = exp(scaleOverScaleDepth * (innerRadius - height));\r\n\t\t\tfloat lightAngle = dot(-u_SunLight_direction, samplePoint) / height;\r\n\t\t\tfloat cameraAngle = dot(eyeRay, samplePoint) / height;\r\n\t\t\tfloat scatter = (startOffset + depth*(scaleAngle(lightAngle) - scaleAngle(cameraAngle)));\r\n\t\t\tvec3 attenuate = exp(-clamp(scatter, 0.0, MAX_SCATTER) * (invWavelength * kr4PI + km4PI));\r\n\r\n\t\t\tfrontColor += attenuate * (depth * scaledLength);\r\n\t\t\tsamplePoint += sampleRay;\r\n\t\t}\r\n\r\n\t\t// Finally, scale the Mie and Rayleigh colors and set up the varying variables for the pixel shader\r\n\t\tcIn = frontColor * (invWavelength * krESun);\r\n\t\tcOut = frontColor * kmESun;\r\n\t} else {// Ground\r\n\t\tfar = (-cameraHeight) / (min(-0.001, eyeRay.y));\r\n\t\tvec3 pos = cameraPos + far * eyeRay;\r\n\r\n\t\t// Calculate the ray's starting position, then calculate its scattering offset\r\n\t\tfloat depth = exp((-cameraHeight) * (1.0/scaleDepth));\r\n\t\tfloat cameraAngle = dot(-eyeRay, pos);\r\n\t\tfloat lightAngle = dot(-u_SunLight_direction, pos);\r\n\t\tfloat cameraScale = scaleAngle(cameraAngle);\r\n\t\tfloat lightScale = scaleAngle(lightAngle);\r\n\t\tfloat cameraOffset = depth*cameraScale;\r\n\t\tfloat temp = lightScale + cameraScale;\r\n\r\n\t\t// Initialize the scattering loop variables\r\n\t\tfloat sampleLength = far / samples;\r\n\t\tfloat scaledLength = sampleLength * scale;\r\n\t\tvec3 sampleRay = eyeRay * sampleLength;\r\n\t\tvec3 samplePoint = cameraPos + sampleRay * 0.5;\r\n\r\n\t\t// Now loop through the sample rays\r\n\t\tvec3 frontColor = vec3(0.0, 0.0, 0.0);\r\n\t\tvec3 attenuate;\r\n\r\n\t\t// Loop removed because we kept hitting SM2.0 temp variable limits. Doesn't affect the image too much.\r\n\t\t{\r\n\t\t\tfloat height = length(samplePoint);\r\n\t\t\tfloat depth = exp(scaleOverScaleDepth * (innerRadius - height));\r\n\t\t\tfloat scatter = depth*temp - cameraOffset;\r\n\t\t\tattenuate = exp(-clamp(scatter, 0.0, MAX_SCATTER) * (invWavelength * kr4PI + km4PI));\r\n\t\t\tfrontColor += attenuate * (depth * scaledLength);\r\n\t\t\tsamplePoint += sampleRay;\r\n\t\t}\r\n\r\n\t\tcIn = frontColor * (invWavelength * krESun + kmESun);\r\n\t\tcOut = clamp(attenuate, 0.0, 1.0);\r\n\t}\r\n\r\n\t#ifdef SUN_HIGH_QUALITY\r\n\t\tv_Vertex = -a_Position.xyz;\r\n\t#elif defined(SUN_SIMPLE) \r\n\t\tv_RayDir = -eyeRay;\r\n\t#else\r\n\t\tv_SkyGroundFactor = -eyeRay.y / SKY_GROUND_THRESHOLD;\r\n\t#endif\r\n\r\n\t// if we want to calculate color in vprog:\r\n\t// in case of linear: multiply by _Exposure in here (even in case of lerp it will be common multiplier, so we can skip mul in fshader)\r\n\tv_GroundColor = u_Exposure * (cIn + u_GroundTint.xyz * cOut);//u_GroundColor*u_GroundColor is gamma space convert to linear space\r\n\tv_SkyColor    = u_Exposure * (cIn * getRayleighPhase(-u_SunLight_direction, -eyeRay));\r\n\r\n\t\r\n\t// The sun should have a stable intensity in its course in the sky. Moreover it should match the highlight of a purely specular material.\r\n\t// This matching was done using the Unity3D standard shader BRDF1 on the 5/31/2017\r\n\t// Finally we want the sun to be always bright even in LDR thus the normalization of the lightColor for low intensity.\r\n\tfloat lightColorIntensity = clamp(length(u_SunLight_color.xyz), 0.25, 1.0);\r\n\r\n\t#ifdef SUN_HIGH_QUALITY \r\n\t\tv_SunColor = HDSundiskIntensityFactor * clamp(cOut,0.0,1.0) * u_SunLight_color.xyz / lightColorIntensity;\r\n\t#elif defined(SUN_SIMPLE) \r\n\t\tv_SunColor = simpleSundiskIntensityFactor * clamp(cOut * sunScale,0.0,1.0) * u_SunLight_color.xyz / lightColorIntensity;\r\n\t#endif\r\n\tgl_Position= remapSkyPositionZ(gl_Position);\r\n}",'#define SHADER_NAME SkyProceduralFS\r\n\r\n#include "Color.glsl";\r\n\r\nconst float MIE_G = -0.990;\r\nconst float MIE_G2 = 0.9801;\r\nconst float SKY_GROUND_THRESHOLD = 0.02;\r\n\r\n// uniform float u_SunSize;\r\n// uniform float u_SunSizeConvergence;\r\n\r\nuniform vec3 u_SunLight_direction;\r\n\r\nvarying vec3 v_GroundColor;\r\nvarying vec3 v_SkyColor;\r\n\r\n#ifdef SUN_HIGH_QUALITY\r\nvarying vec3 v_Vertex;\r\n#elif defined(SUN_SIMPLE)\r\nvarying vec3 v_RayDir;\r\n#else\r\nvarying float v_SkyGroundFactor;\r\n#endif\r\n\r\n#if defined(SUN_HIGH_QUALITY) || defined(SUN_SIMPLE)\r\nvarying vec3 v_SunColor;\r\n#endif\r\n\r\n// Calculates the Mie phase function\r\nfloat getMiePhase(float eyeCos, float eyeCos2)\r\n{\r\n    float temp = 1.0 + MIE_G2 - 2.0 * MIE_G * eyeCos;\r\n    temp = pow(temp, pow(u_SunSize, 0.65) * 10.0);\r\n    temp = max(temp, 1.0e-4); // prevent division by zero, esp. in half precision\r\n    temp = 1.5 * ((1.0 - MIE_G2) / (2.0 + MIE_G2)) * (1.0 + eyeCos2) / temp;\r\n    return temp;\r\n}\r\n\r\n// Calculates the sun shape\r\nfloat calcSunAttenuation(vec3 lightPos, vec3 ray)\r\n{\r\n#ifdef SUN_HIGH_QUALITY\r\n    float focusedEyeCos = pow(clamp(dot(lightPos, ray), 0.0, 1.0), u_SunSizeConvergence);\r\n    return getMiePhase(-focusedEyeCos, focusedEyeCos * focusedEyeCos);\r\n#else // SUN_SIMPLE\r\n    vec3 delta = lightPos - ray;\r\n    float dist = length(delta);\r\n    float spot = 1.0 - smoothstep(0.0, u_SunSize, dist);\r\n    return spot * spot;\r\n#endif\r\n}\r\n\r\nvoid main()\r\n{\r\n    // if y > 1 [eyeRay.y < -SKY_GROUND_THRESHOLD] - ground\r\n    // if y >= 0 and < 1 [eyeRay.y <= 0 and > -SKY_GROUND_THRESHOLD] - horizon\r\n    // if y < 0 [eyeRay.y > 0] - sky\r\n    vec3 col = vec3(0.0, 0.0, 0.0);\r\n\r\n#ifdef SUN_HIGH_QUALITY\r\n    vec3 ray = normalize(v_Vertex);\r\n    float y = ray.y / SKY_GROUND_THRESHOLD;\r\n#elif defined(SUN_SIMPLE)\r\n    vec3 ray = v_RayDir;\r\n    float y = ray.y / SKY_GROUND_THRESHOLD;\r\n#else\r\n    float y = v_SkyGroundFactor;\r\n#endif\r\n\r\n    // if we did precalculate color in vprog: just do lerp between them\r\n    col = mix(v_SkyColor, v_GroundColor, clamp(y, 0.0, 1.0));\r\n\r\n#if defined(SUN_HIGH_QUALITY) || defined(SUN_SIMPLE)\r\n    if (y < 0.0)\r\n\tcol += v_SunColor * calcSunAttenuation(-u_SunLight_direction, -ray);\r\n#endif\r\n\r\n    // col = sqrt(col);//linear space convert to gamma space\r\n    gl_FragColor = vec4(col, 1.0);\r\n\r\n    gl_FragColor = outputTransform(gl_FragColor);\r\n}\r\n');o.renderState.depthTest=Ee.DEPTHTEST_LEQUAL,o.renderState.cull=t.CullMode.Back,o.renderState.depthWrite=!1,o.renderState.stencilWrite=!1,o.statefirst=!0}}class pr{static init(){let r={a_Position:[t.VertexMesh.MESH_POSITION0,e.ShaderDataType.Vector4]},n={u_TintColor:e.ShaderDataType.Color,u_Rotation:e.ShaderDataType.Float,u_Texture:e.ShaderDataType.Texture2D,u_Exposure:e.ShaderDataType.Float},a={u_TintColor:new t.Color(.5,.5,.5,1),u_Exposure:1.3,u_Rotation:0,u_Texture:t.Texture2D.grayTexture},i=t.Shader3D.add("SkyPanoramic");i.shaderType=t.ShaderFeatureType.Sky;let s=new t.SubShader(r,n,a);i.addSubShader(s);let o=s.addShaderPass('#define SHADER_NAME SkyPanoramicVS\r\n\r\n#include "SkyCommon.glsl";\r\n\r\n\r\nvarying vec3 v_Texcoord;\r\nvarying vec2 v_Image180ScaleAndCutoff;\r\nvarying vec4 v_Layout3DScaleAndOffset;\r\n\r\nvoid main()\r\n{\r\n\tvec4 position = rotateAroundYInDegrees(a_Position, u_Rotation);\r\n\t\r\n\r\n\tv_Texcoord=vec3(-a_Position.x,-a_Position.y,a_Position.z);// NOTE: -a_Position.x convert coords system\r\n\r\n\t// Calculate constant horizontal scale and cutoff for 180 (vs 360) image type\r\n\tv_Image180ScaleAndCutoff = vec2(1.0, 1.0);// 360 degree mode\r\n\r\n\t// Calculate constant scale and offset for 3D layouts\r\n\tv_Layout3DScaleAndOffset = vec4(0,0,1,1);\r\n\tgl_Position = u_SkyProjectionViewMat*position;\r\n\tgl_Position=remapSkyPositionZ(gl_Position);\r\n\r\n}\r\n','#define SHADER_NAME SkyPanoramicVS\r\n\r\n#include "Color.glsl";\r\n\r\nvarying vec3 v_Texcoord;\r\nvarying vec2 v_Image180ScaleAndCutoff;\r\nvarying vec4 v_Layout3DScaleAndOffset;\r\nconst vec4 c_ColorSpace = vec4(4.59479380, 4.59479380, 4.59479380, 2.0);\r\n\r\nvec2 ToRadialCoords(vec3 coords)\r\n{\r\n    vec3 normalizedCoords = normalize(coords);\r\n    float latitude = acos(normalizedCoords.y);\r\n    float longitude = atan(normalizedCoords.z, normalizedCoords.x);\r\n    vec2 sphereCoords = vec2(longitude, latitude) * vec2(0.5 / PI, 1.0 / PI);\r\n    return vec2(0.5, 1.0) - sphereCoords;\r\n}\r\n\r\nvoid main()\r\n{\r\n    vec2 tc = ToRadialCoords(v_Texcoord);\r\n    if (tc.x > v_Image180ScaleAndCutoff.y)\r\n\tgl_FragColor = vec4(0, 0, 0, 1);\r\n    tc.x = mod(tc.x * v_Image180ScaleAndCutoff.x, 1.0);\r\n    tc = (tc + v_Layout3DScaleAndOffset.xy) * v_Layout3DScaleAndOffset.zw;\r\n\r\n    mediump vec4 tex = texture2D(u_Texture, tc);\r\n#ifdef Gamma_u_Texture\r\n    tex = gammaToLinear(tex);\r\n#endif // Gamma_u_Texture\r\n    mediump vec3 c = tex.xyz;\r\n    c = c * u_TintColor.rgb * c_ColorSpace.rgb;\r\n    c *= pow(u_Exposure, 2.2);\r\n    gl_FragColor = vec4(c, 1.0);\r\n\r\n    gl_FragColor = outputTransform(gl_FragColor);\r\n}\r\n');o.renderState.depthTest=Ee.DEPTHTEST_LEQUAL,o.renderState.cull=t.CullMode.Back,o.renderState.depthWrite=!1,o.renderState.stencilWrite=!1,o.statefirst=!0}}var Sr;class Tr{static init(){t.Shader3D.addInclude("ACES_UtillitiesColor.glsl","#if !defined(UtillitiesColor_lib)\r\n#define UtillitiesColor_lib\r\n\r\n// Transformations between CIE XYZ tristimulus values and CIE x,y\r\n// chromaticity coordinates\r\nvec3 XYZ_2_xyY(vec3 XYZ)\r\n{\r\n    vec3 xyY;\r\n    float divisor = max(XYZ.x + XYZ.y + XYZ.z, 1e-10);\r\n    xyY.x = XYZ.x / divisor;\r\n    xyY.y = XYZ.y / divisor;\r\n    xyY.z = XYZ.y;\r\n    return xyY;\r\n}\r\n\r\nvec3 xyY_2_XYZ(vec3 xyY)\r\n{\r\n    vec3 XYZ;\r\n    XYZ.x = xyY.x * xyY.z / max(xyY.y, 1e-10);\r\n    XYZ.y = xyY.z;\r\n    XYZ.z = (1.0 - xyY.x - xyY.y) * xyY.z / max(xyY.y, 1e-10);\r\n    return XYZ;\r\n}\r\n\r\nfloat rgb_2_yc(vec3 rgb, float ycRadiusWeight)\r\n{\r\n    float r = rgb.r;\r\n    float g = rgb.g;\r\n    float b = rgb.b;\r\n    float k = b * (b - g) + g * (g - r) + r * (r - b);\r\n    k = max(MEDIUMP_FLT_MIN, k);\r\n    float chroma = sqrt(k);\r\n    return (b + g + r + ycRadiusWeight * chroma) / 3.0;\r\n}\r\n\r\nfloat rgb_2_yc(vec3 rgb)\r\n{\r\n    return rgb_2_yc(rgb, 1.75);\r\n}\r\n\r\n// Transformations from RGB to other color representations\r\n\r\n// Returns a geometric hue angle in degrees (0-360) based on RGB values.\r\nfloat rgb_2_hue(vec3 rgb)\r\n{\r\n    float hue;\r\n    // For neutral colors, hue is undefined and the function will return a quiet NaN value.\r\n    // if (rgb.r == rgb.g && rgb.g == rgb.b) {\r\n    //     // hue = FLT_NAN;\r\n    //     // todo FLT_NAN\r\n    //     hue = 0.0;\r\n    // } else {\r\n    //     hue = (180.0 * INVERT_PI) * atan2(sqrt(3.0) * (rgb.g - rgb.b), 2.0 * rgb.r - rgb.g - rgb.b);\r\n    // }\r\n    if (rgb.x == rgb.y && rgb.y == rgb.z)\r\n        hue = 0.0; // RGB triplets where RGB are equal have an undefined hue\r\n    else\r\n        hue = (180.0 * INVERT_PI) * atan(sqrt(3.0) * (rgb.y - rgb.z), 2.0 * rgb.x - rgb.y - rgb.z);\r\n\r\n    if (hue < 0.0) {\r\n        hue = hue + 360.0;\r\n    }\r\n\r\n    return hue;\r\n}\r\n\r\n#endif // UtillitiesColor_lib"),t.Shader3D.addInclude("ACES_TransformCommon.glsl","#if !defined(TransformCommon_lib)\r\n    #define TransformCommon_lib\r\n\r\nconst float TINY = 1e-10;\r\n\r\n// sRGB D65 to AP0 D60\r\n// https://www.colour-science.org:8010/apps/rgb_colourspace_transformation_matrix CAT 02\r\nconst mat3 sRGB_to_AP0_MAT = mat3(\r\n    vec3(0.4395856442, 0.0895395735, 0.0173871832),\r\n    vec3(0.3839294030, 0.8147498351, 0.1087391143),\r\n    vec3(0.1765327364, 0.0956836061, 0.8738205876));\r\n\r\n// sRGB D65 to AP1 D60\r\n// https://www.colour-science.org:8010/apps/rgb_colourspace_transformation_matrix CAT 02\r\nconst mat3 sRGB_to_AP1_MAT = mat3(\r\n    vec3(0.6131178129, 0.0699340823, 0.0204629926),\r\n    vec3(0.3411819959, 0.9181030375, 0.1067686634),\r\n    vec3(0.0457873443, 0.0119327755, 0.8727159106));\r\n\r\nconst mat3 AP1_to_XYZ_MAT = mat3(\r\n    vec3(0.6624541811, 0.2722287168, -0.0055746495),\r\n    vec3(0.1340042065, 0.6740817658, 0.0040607335),\r\n    vec3(0.1561876870, 0.0536895174, 1.0103391003));\r\n\r\nconst mat3 AP0_to_AP1_MAT = mat3(\r\n    vec3(1.4514393161, -0.0765537734, 0.0083161484),\r\n    vec3(-0.2365107469, 1.1762296998, -0.0060324498),\r\n    vec3(-0.2149285693, -0.0996759264, 0.9977163014));\r\n\r\nconst mat3 AP1_to_AP0_MAT = mat3(\r\n    vec3(0.6954522414, 0.0447945634, -0.0055258826),\r\n    vec3(0.1406786965, 0.8596711185, 0.0040252103),\r\n    vec3(0.1638690622, 0.0955343182, 1.0015006723));\r\n\r\nconst mat3 XYZ_to_AP1_MAT = mat3(\r\n    vec3(1.6410233797, -0.6636628587, 0.0117218943),\r\n    vec3(-0.3248032942, 1.6153315917, -0.0082844420),\r\n    vec3(-0.2364246952, 0.0167563477, 0.9883948585));\r\n\r\nconst vec3 AP1_RGB2Y = vec3(0.2722287168, 0.6740817658, 0.0536895174);\r\n\r\nfloat ACES_to_ACEScc(float x)\r\n{\r\n    // if (x <= 0.0)\r\n    // return -0.35828683;\r\n    // else if (x < pow(2.0, -15.0))\r\n    // return (log2(pow(2.0, -16.0) + x * 0.5) + 9.72) / 17.52;\r\n    // else\r\n    // return (log2(x) + 9.72) / 17.52;\r\n\r\n    return (x < 0.00003051757) ? (log2(0.00001525878 + x * 0.5) + 9.72) / 17.52 : (log2(x) + 9.72) / 17.52;\r\n}\r\n\r\nvec3 ACES_to_ACEScc(vec3 x)\r\n{\r\n    x = clamp(x, vec3(0.0), vec3(MEDIUMP_FLT_MAX));\r\n    x.x = ACES_to_ACEScc(x.x);\r\n    x.y = ACES_to_ACEScc(x.y);\r\n    x.z = ACES_to_ACEScc(x.z);\r\n\r\n    return x;\r\n}\r\n\r\nfloat ACEScc_to_ACES(float x)\r\n{\r\n    if (x < -0.3013698630)\r\n\treturn (pow(2.0, x * 17.52 - 9.72) - pow(2.0, -16.0)) * 2.0;\r\n    else if (x < (log2(MEDIUMP_FLT_MAX) + 9.72) / 17.52)\r\n\treturn pow(2.0, x * 17.52 - 9.72);\r\n    else\r\n\treturn MEDIUMP_FLT_MAX;\r\n}\r\n\r\nvec3 ACEScc_to_ACES(vec3 x)\r\n{\r\n    x.x = ACEScc_to_ACES(x.x);\r\n    x.y = ACEScc_to_ACES(x.y);\r\n    x.z = ACEScc_to_ACES(x.z);\r\n    return x;\r\n}\r\n\r\nfloat rgb_2_saturation(vec3 rgb)\r\n{\r\n    float rgbmax = vecmax(rgb);\r\n    float rgbmin = vecmin(rgb);\r\n    return (max(rgbmax, TINY) - max(rgbmin, TINY)) / max(rgbmax, 1e-2);\r\n}\r\n\r\n#endif // TransformCommon_lib"),t.Shader3D.addInclude("ACES_Tonescales.glsl","#if !defined(Tonescales_lib)\r\n#define Tonescales_lib\r\n\r\nconst mat3 M = mat3(\r\n    vec3(0.5, -1.0, 0.5),\r\n    vec3(-1.0, 1.0, 0.5),\r\n    vec3(0.5, 0.0, 0.0));\r\n\r\nfloat segmented_spline_c5_fwd(float x)\r\n{\r\n#ifdef GRAPHICS_API_GLES3\r\n    const float coefsLow[6] = float[6](-4.0000000000, -4.0000000000, -3.1573765773, -0.4852499958, 1.8477324706, 1.8477324706);\r\n    const float coefsHigh[6] = float[6](-0.7185482425, 2.0810307172, 3.6681241237, 4.0000000000, 4.0000000000, 4.0000000000);\r\n#else\r\n    const float coefsLow_0 = -4.0000000000;\r\n    const float coefsLow_1 = -4.0000000000;\r\n    const float coefsLow_2 = -3.1573765773;\r\n    const float coefsLow_3 = -0.4852499958;\r\n    const float coefsLow_4 = 1.8477324706;\r\n    const float coefsLow_5 = 1.8477324706;\r\n\r\n    const float coefsHigh_0 = -0.7185482425;\r\n    const float coefsHigh_1 = 2.0810307172;\r\n    const float coefsHigh_2 = 3.6681241237;\r\n    const float coefsHigh_3 = 4.0000000000;\r\n    const float coefsHigh_4 = 4.0000000000;\r\n    const float coefsHigh_5 = 4.0000000000;\r\n#endif // GRAPHICS_API_GLES3\r\n\r\n    const vec2 minPoint = vec2(0.0000054931640625, 0.0001);\r\n    const vec2 midPoint = vec2(0.18, 4.8);\r\n    const vec2 maxPoint = vec2(47185.92, 10000.);\r\n    const float slopeLow = 0.0;\r\n    const float slopeHigh = 0.0;\r\n\r\n    const int N_KNOTS_LOW = 4;\r\n    const int N_KNOTS_HIGH = 4;\r\n\r\n    float logx = log10(max(x, MEDIUMP_FLT_MIN));\r\n    float logy;\r\n\r\n    if (logx <= log10(minPoint.x)) {\r\n        logy = logx * slopeLow + (log10(minPoint.y) - slopeLow * log10(minPoint.x));\r\n    } else if ((logx > log10(minPoint.x)) && (logx < log10(midPoint.x))) {\r\n        float knot_coord = float(N_KNOTS_LOW - 1) * (logx - log10(minPoint.x)) / (log10(midPoint.x) - log10(minPoint.x));\r\n        int j = int(knot_coord);\r\n        float t = knot_coord - float(j);\r\n        vec3 cf;\r\n#ifdef GRAPHICS_API_GLES3\r\n        cf = vec3(coefsLow[j], coefsLow[j + 1], coefsLow[j + 2]);\r\n#else\r\n        if (j <= 0) {\r\n            cf = vec3(coefsLow_0, coefsLow_1, coefsLow_2);\r\n        } else if (j == 1) {\r\n            cf = vec3(coefsLow_1, coefsLow_2, coefsLow_3);\r\n        } else if (j == 2) {\r\n            cf = vec3(coefsLow_2, coefsLow_3, coefsLow_4);\r\n        } else { // if (j == 3)\r\n            cf = vec3(coefsLow_3, coefsLow_4, coefsLow_5);\r\n        }\r\n#endif // GRAPHICS_API_GLES3\r\n\r\n        vec3 monomials = vec3(t * t, t, 1.);\r\n        logy = dot(monomials, M * cf);\r\n    } else if ((logx >= log10(midPoint.x)) && (logx < log10(maxPoint.x))) {\r\n        float knot_coord = float(N_KNOTS_HIGH - 1) * (logx - log10(midPoint.x)) / (log10(maxPoint.x) - log10(midPoint.x));\r\n        int j = int(knot_coord);\r\n        float t = knot_coord - float(j);\r\n        vec3 cf;\r\n#ifdef GRAPHICS_API_GLES3\r\n        cf = vec3(coefsHigh[j], coefsHigh[j + 1], coefsHigh[j + 2]);\r\n#else\r\n        if (j <= 0) {\r\n            cf = vec3(coefsHigh_0, coefsHigh_1, coefsHigh_2);\r\n        } else if (j == 1) {\r\n            cf = vec3(coefsHigh_1, coefsHigh_2, coefsHigh_3);\r\n        } else if (j == 2) {\r\n            cf = vec3(coefsHigh_2, coefsHigh_3, coefsHigh_4);\r\n        } else { // if (j == 3)\r\n            cf = vec3(coefsHigh_3, coefsHigh_4, coefsHigh_5);\r\n        }\r\n#endif // #ifdef GRAPHICS_API_GLES3\r\n        vec3 monomials = vec3(t * t, t, 1.);\r\n        logy = dot(monomials, M * cf);\r\n    } else {\r\n        logy = logx * slopeHigh + (log10(maxPoint.y) - slopeHigh * log10(maxPoint.x));\r\n    }\r\n    return pow(10.0, logy);\r\n}\r\n\r\nfloat segmented_spline_c9_fwd(float x)\r\n{\r\n// ODT_48nits\r\n#ifdef GRAPHICS_API_GLES3\r\n    const float coefsLow[10] = float[10](-1.6989700043, -1.6989700043, -1.4779000000, -1.2291000000, -0.8648000000, -0.4480000000, 0.0051800000, 0.4511080334, 0.9113744414, 0.9113744414);\r\n    const float coefsHigh[10] = float[10](0.5154386965, 0.8470437783, 1.1358000000, 1.3802000000, 1.5197000000, 1.5985000000, 1.6467000000, 1.6746091357, 1.6878733390, 1.6878733390);\r\n#else\r\n    const float coefsLow_0 = -1.6989700043;\r\n    const float coefsLow_1 = -1.6989700043;\r\n    const float coefsLow_2 = -1.4779000000;\r\n    const float coefsLow_3 = -1.2291000000;\r\n    const float coefsLow_4 = -0.8648000000;\r\n    const float coefsLow_5 = -0.4480000000;\r\n    const float coefsLow_6 = 0.0051800000;\r\n    const float coefsLow_7 = 0.4511080334;\r\n    const float coefsLow_8 = 0.9113744414;\r\n    const float coefsLow_9 = 0.9113744414;\r\n\r\n    const float coefsHigh_0 = 0.5154386965;\r\n    const float coefsHigh_1 = 0.8470437783;\r\n    const float coefsHigh_2 = 1.1358000000;\r\n    const float coefsHigh_3 = 1.3802000000;\r\n    const float coefsHigh_4 = 1.5197000000;\r\n    const float coefsHigh_5 = 1.5985000000;\r\n    const float coefsHigh_6 = 1.6467000000;\r\n    const float coefsHigh_7 = 1.6746091357;\r\n    const float coefsHigh_8 = 1.6878733390;\r\n    const float coefsHigh_9 = 1.6878733390;\r\n#endif // GRAPHICS_API_GLES3\r\n\r\n    // todo const\r\n    vec2 minPoint = vec2(segmented_spline_c5_fwd(0.18 * pow(2.0, -6.5)), 0.02);\r\n    vec2 midPoint = vec2(segmented_spline_c5_fwd(0.18), 4.8);\r\n    vec2 maxPoint = vec2(segmented_spline_c5_fwd(0.18 * pow(2., 6.5)), 48.0);\r\n\r\n    const float slopeLow = 0.0;\r\n    const float slopeHigh = 0.04;\r\n\r\n    const int N_KNOTS_LOW = 8;\r\n    const int N_KNOTS_HIGH = 8;\r\n\r\n    float logx = log10(max(x, MEDIUMP_FLT_MIN));\r\n    float logy;\r\n\r\n    if (logx <= log10(minPoint.x)) {\r\n        logy = logx * slopeLow + (log10(minPoint.y) - slopeLow * log10(minPoint.x));\r\n    } else if ((logx > log10(minPoint.x)) && (logx < log10(midPoint.x))) {\r\n        float knot_coord = float(N_KNOTS_LOW - 1) * (logx - log10(minPoint.x)) / (log10(midPoint.x) - log10(minPoint.x));\r\n        int j = int(knot_coord);\r\n        float t = knot_coord - float(j);\r\n        vec3 cf;\r\n#ifdef GRAPHICS_API_GLES3\r\n        cf = vec3(coefsLow[j], coefsLow[j + 1], coefsLow[j + 2]);\r\n#else\r\n        if (j <= 0) {\r\n            cf = vec3(coefsLow_0, coefsLow_1, coefsLow_2);\r\n        } else if (j == 1) {\r\n            cf = vec3(coefsLow_1, coefsLow_2, coefsLow_3);\r\n        } else if (j == 2) {\r\n            cf = vec3(coefsLow_2, coefsLow_3, coefsLow_4);\r\n        } else if (j == 3) {\r\n            cf = vec3(coefsLow_3, coefsLow_4, coefsLow_5);\r\n        } else if (j == 4) {\r\n            cf = vec3(coefsLow_4, coefsLow_5, coefsLow_6);\r\n        } else if (j == 5) {\r\n            cf = vec3(coefsLow_5, coefsLow_6, coefsLow_7);\r\n        } else if (j == 6) {\r\n            cf = vec3(coefsLow_6, coefsLow_7, coefsLow_8);\r\n        } else { // if (j == 7)\r\n            cf = vec3(coefsLow_7, coefsLow_8, coefsLow_9);\r\n        }\r\n#endif // GRAPHICS_API_GLES3\r\n        vec3 monomials = vec3(t * t, t, 1.0);\r\n        logy = dot(monomials, M * cf);\r\n    } else if ((logx >= log10(midPoint.x)) && (logx < log10(maxPoint.x))) {\r\n        float knot_coord = float(N_KNOTS_HIGH - 1) * (logx - log10(midPoint.x)) / (log10(maxPoint.x) - log10(midPoint.x));\r\n        int j = int(knot_coord);\r\n        float t = knot_coord - float(j);\r\n        vec3 cf;\r\n#ifdef GRAPHICS_API_GLES3\r\n        cf = vec3(coefsHigh[j], coefsHigh[j + 1], coefsHigh[j + 2]);\r\n#else\r\n        if (j <= 0) {\r\n            cf = vec3(coefsHigh_0, coefsHigh_1, coefsHigh_2);\r\n        } else if (j == 1) {\r\n            cf = vec3(coefsHigh_1, coefsHigh_2, coefsHigh_3);\r\n        } else if (j == 2) {\r\n            cf = vec3(coefsHigh_2, coefsHigh_3, coefsHigh_4);\r\n        } else if (j == 3) {\r\n            cf = vec3(coefsHigh_3, coefsHigh_4, coefsHigh_5);\r\n        } else if (j == 4) {\r\n            cf = vec3(coefsHigh_4, coefsHigh_5, coefsHigh_6);\r\n        } else if (j == 5) {\r\n            cf = vec3(coefsHigh_5, coefsHigh_6, coefsHigh_7);\r\n        } else if (j == 6) {\r\n            cf = vec3(coefsHigh_6, coefsHigh_7, coefsHigh_8);\r\n        } else { // if (j == 7)\r\n            cf = vec3(coefsHigh_7, coefsHigh_8, coefsHigh_9);\r\n        }\r\n#endif // GRAPHICS_API_GLES3\r\n        vec3 monomials = vec3(t * t, t, 1.0);\r\n        logy = dot(monomials, M * cf);\r\n    } else {\r\n        logy = logx * slopeHigh + (log10(maxPoint.y) - slopeHigh * log10(maxPoint.x));\r\n    }\r\n\r\n    return pow(10.0, logy);\r\n}\r\n\r\n#endif // Tonescales_lib"),t.Shader3D.addInclude("ACES_RRTCommon.glsl",'#if !defined(RRTCommon_lib)\r\n#define RRTCommon_lib\r\n\r\n// "Glow" module constants\r\nconst float RRT_GLOW_GAIN = 0.05;\r\nconst float RRT_GLOW_MID = 0.08;\r\n\r\n// Red modifier constants\r\nconst float RRT_RED_SCALE = 0.82;\r\nconst float RRT_RED_PIVOT = 0.03;\r\nconst float RRT_RED_HUE = 0.;\r\nconst float RRT_RED_WIDTH = 135.;\r\n\r\n// Desaturation contants\r\nconst float RRT_SAT_FACTOR = 0.96;\r\n\r\n// ------- Glow module functions\r\n\r\nfloat glow_fwd(float ycIn, float glowGainIn, float glowMid)\r\n{\r\n    float glowGainOut;\r\n    if (ycIn <= 2.0 / 3.0 * glowMid) {\r\n        glowGainOut = glowGainIn;\r\n    } else if (ycIn >= 2.0 * glowMid) {\r\n        glowGainOut = 0.0;\r\n    } else {\r\n        glowGainOut = glowGainIn * (glowMid / ycIn - 0.5);\r\n    }\r\n    return glowGainOut;\r\n}\r\n\r\n// Sigmoid function in the range 0 to 1 spanning -2 to +2.\r\nfloat sigmoid_shaper(float x)\r\n{\r\n    float t = max(1.0 - abs(x * 0.5), 0.0);\r\n    float y = 1.0 + sign(x) * (1.0 - t * t);\r\n\r\n    return y * 0.5;\r\n}\r\n\r\n// ------- Red modifier functions\r\nfloat center_hue(float hue, float centerH)\r\n{\r\n    float hueCentered = hue - centerH;\r\n    if (hueCentered < -180.0) {\r\n        hueCentered = hueCentered + 360.0;\r\n    } else if (hueCentered > 180.0) {\r\n        hueCentered -= 360.0;\r\n    }\r\n    return hueCentered;\r\n}\r\n\r\n#endif // RRTCommon_lib'),t.Shader3D.addInclude("ACES_ODTCommon.glsl","#if !defined(ODTCommon_lib)\r\n#define ODTCommon_lib\r\n\r\nconst float CINEMA_WHITE = 48.0;\r\nconst float CINEMA_BLACK = 0.02; // CINEMA_WHITE / 2400.\r\n\r\n// Gamma compensation factor\r\nconst float DIM_SURROUND_GAMMA = 0.9811;\r\n\r\n// Saturation compensation factor\r\nconst float ODT_SAT_FACTOR = 0.93;\r\n\r\n// white point D60 to D65\r\n// ACES white point D60\r\nconst mat3 D60_to_D65_MAT = mat3(\r\n    vec3(0.987224, -0.00759836, 0.00307257),\r\n    vec3(-0.00611327, 1.00186, -0.00509595),\r\n    vec3(0.0159533, 0.00533002, 1.08168));\r\n\r\nfloat Y_2_linCV(float Y, float Ymax, float Ymin)\r\n{\r\n    return (Y - Ymin) / (Ymax - Ymin);\r\n}\r\n\r\nvec3 darkSurround_to_dimSurround(vec3 linearCV)\r\n{\r\n    vec3 XYZ = linearCV * AP1_to_XYZ_MAT;\r\n    vec3 xyY = XYZ_2_xyY(XYZ);\r\n    xyY.z = clamp(xyY.z, 0.0, MEDIUMP_FLT_MAX);\r\n    xyY.z = pow(xyY.z, DIM_SURROUND_GAMMA);\r\n    XYZ = xyY_2_XYZ(xyY);\r\n\r\n    return XYZ * XYZ_to_AP1_MAT;\r\n}\r\n\r\n#endif // ODTCommon_lib"),t.Shader3D.addInclude("ACES_RRT.glsl",'#if !defined(RRT_lib)\r\n#define RRT_lib\r\n\r\n#include "ACES_RRTCommon.glsl";\r\n\r\n/**\r\n * @param ACES AP0\r\n * @returns OCES\r\n */\r\nvec3 RRT(vec3 aces)\r\n{\r\n    // --- Glow module --- //\r\n    float saturation = rgb_2_saturation(aces);\r\n    float ycIn = rgb_2_yc(aces);\r\n    float s = sigmoid_shaper((saturation - 0.4) / 0.2);\r\n    float addedGlow = 1.0 + glow_fwd(ycIn, RRT_GLOW_GAIN * s, RRT_GLOW_MID);\r\n\r\n    aces *= addedGlow;\r\n\r\n    // --- Red modifier --- //\r\n    float hue = rgb_2_hue(aces);\r\n    float centeredHue = center_hue(hue, RRT_RED_HUE);\r\n\r\n    float hueWeight = smoothstep(0.0, 1.0, 1.0 - abs(2.0 * centeredHue / RRT_RED_WIDTH));\r\n    hueWeight *= hueWeight;\r\n\r\n    aces.r += hueWeight * saturation * (RRT_RED_PIVOT - aces.r) * (1. - RRT_RED_SCALE);\r\n\r\n    // --- ACES to RGB rendering space --- //\r\n    vec3 rgbPre = AP0_to_AP1_MAT * aces;\r\n    rgbPre = clamp(rgbPre, 0.0, MEDIUMP_FLT_MAX);\r\n\r\n    // --- Global desaturation --- //\r\n    rgbPre = mix(vec3(dot(rgbPre, AP1_RGB2Y)), rgbPre, RRT_SAT_FACTOR);\r\n\r\n    // --- Apply the tonescale independently in rendering-space RGB --- //\r\n    vec3 rgbPost;\r\n    rgbPost.x = segmented_spline_c5_fwd(rgbPre.x);\r\n    rgbPost.y = segmented_spline_c5_fwd(rgbPre.y);\r\n    rgbPost.z = segmented_spline_c5_fwd(rgbPre.z);\r\n\r\n    // --- RGB rendering space to OCES --- //\r\n    vec3 rgbOces = AP1_to_AP0_MAT * rgbPost;\r\n\r\n    return rgbOces;\r\n}\r\n\r\n#endif // RRT_lib'),t.Shader3D.addInclude("ACES_ODT_sRGB_100nits.glsl",'#if !defined(ODT_sRGB_100nits_lib)\r\n#define ODT_sRGB_100nits_lib\r\n\r\n#include "ACES_ODTCommon.glsl";\r\n\r\n// CIE XYZ to REC.709\r\nconst mat3 XYZ_to_REC709_MAT = mat3(\r\n    vec3(3.2409699419, -0.9692436363, 0.0556300797),\r\n    vec3(-1.5373831776, 1.8759675015, -0.2039769589),\r\n    vec3(-0.498610760, 0.0415550574, 1.0569715142));\r\n\r\nconst float DISPGAMMA = 2.4;\r\nconst float OFFSET = 0.055;\r\n\r\nvec3 ODT_sRGB_100nits(vec3 oces)\r\n{\r\n    // OCES to RGB rendering space\r\n    vec3 rgbPre = AP0_to_AP1_MAT * oces;\r\n\r\n    // Apply the tonescale independently in rendering-space RGB\r\n    vec3 rgbPost;\r\n    rgbPost.r = segmented_spline_c9_fwd(rgbPre.r);\r\n    rgbPost.g = segmented_spline_c9_fwd(rgbPre.g);\r\n    rgbPost.b = segmented_spline_c9_fwd(rgbPre.b);\r\n\r\n    // Scale luminance to linear code value\r\n    vec3 linearCV;\r\n    linearCV.r = Y_2_linCV(rgbPost.r, CINEMA_WHITE, CINEMA_BLACK);\r\n    linearCV.g = Y_2_linCV(rgbPost.g, CINEMA_WHITE, CINEMA_BLACK);\r\n    linearCV.b = Y_2_linCV(rgbPost.b, CINEMA_WHITE, CINEMA_BLACK);\r\n\r\n    // Apply gamma adjustment to compensate for dim surround\r\n    linearCV = darkSurround_to_dimSurround(linearCV);\r\n\r\n    // Convert to display primary encoding\r\n    // Rendering space RGB to XYZ\r\n    vec3 XYZ = AP1_to_XYZ_MAT * linearCV;\r\n\r\n    // Apply CAT from ACES white point to assumed observer adapted white point\r\n    XYZ = D60_to_D65_MAT * XYZ;\r\n\r\n    // CIE XYZ to display primaries\r\n    linearCV = XYZ_to_REC709_MAT * XYZ;\r\n\r\n    linearCV = clamp(linearCV, vec3(0.0), vec3(1.0));\r\n    return linearCV;\r\n}\r\n\r\n#endif // ODT_sRGB_100nits_lib'),t.Shader3D.addInclude("ACES.glsl",'// Academy Color Encoding System (ACES) software and tools are provided by the\r\n// Academy under the following terms and conditions: A worldwide, royalty-free,\r\n// non-exclusive right to copy, modify, create derivatives, and use, in source\r\n// and binary forms, is hereby granted, subject to acceptance of this license.\r\n\r\n// Copyright 2019 Academy of Motion Picture Arts and Sciences (A.M.P.A.S.).\r\n// Portions contributed by others as indicated. All rights reserved.\r\n\r\n// Performance of any of the aforementioned acts indicates acceptance to be\r\n// bound by the following terms and conditions:\r\n\r\n// Copies of source code, in whole or in part, must retain the above copyright\r\n// notice, this list of conditions and the Disclaimer of Warranty.\r\n\r\n// Use in binary form must retain the above copyright notice, this list of\r\n// conditions and the Disclaimer of Warranty in the documentation and/or other\r\n// materials provided with the distribution.\r\n\r\n// Nothing in this license shall be deemed to grant any rights to trademarks,\r\n// copyrights, patents, trade secrets or any other intellectual property of\r\n// A.M.P.A.S. or any contributors, except as expressly stated herein.\r\n\r\n// Neither the name "A.M.P.A.S." nor the name of any other contributors to this\r\n// software may be used to endorse or promote products derivative of or based on\r\n// this software without express prior written permission of A.M.P.A.S. or the\r\n// contributors, as appropriate.\r\n\r\n// This license shall be construed pursuant to the laws of the State of\r\n// California, and any disputes related thereto shall be subject to the\r\n// jurisdiction of the courts therein.\r\n\r\n// Disclaimer of Warranty: THIS SOFTWARE IS PROVIDED BY A.M.P.A.S. AND\r\n// CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT\r\n// NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n// PARTICULAR PURPOSE, AND NON-INFRINGEMENT ARE DISCLAIMED. IN NO EVENT SHALL\r\n// A.M.P.A.S., OR ANY CONTRIBUTORS OR DISTRIBUTORS, BE LIABLE FOR ANY DIRECT,\r\n// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, RESITUTIONARY, OR CONSEQUENTIAL\r\n// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\r\n// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\r\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n\r\n// WITHOUT LIMITING THE GENERALITY OF THE FOREGOING, THE ACADEMY SPECIFICALLY\r\n// DISCLAIMS ANY REPRESENTATIONS OR WARRANTIES WHATSOEVER RELATED TO PATENT OR\r\n// OTHER INTELLECTUAL PROPERTY RIGHTS IN THE ACADEMY COLOR ENCODING SYSTEM, OR\r\n// APPLICATIONS THEREOF, HELD BY PARTIES OTHER THAN A.M.P.A.S.,WHETHER DISCLOSED\r\n// OR UNDISCLOSED.\r\n\r\n#if !defined(ACES_lib)\r\n#define ACES_lib\r\n\r\n#include "ACES_TransformCommon.glsl";\r\n#include "ACES_UtillitiesColor.glsl";\r\n#include "ACES_Tonescales.glsl";\r\n\r\n#include "ACES_RRT.glsl";\r\n#include "ACES_ODT_sRGB_100nits.glsl";\r\n\r\n// idt\r\n\r\n// linear D65 sRGB to D60 ACES AP0\r\nvec3 sRGB_to_AP0(vec3 sRGB)\r\n{\r\n    return sRGB_to_AP0_MAT * sRGB;\r\n}\r\n\r\n// linear D65 sRGB to D60 ACES AP1\r\nvec3 sRGB_to_AP1(vec3 sRGB)\r\n{\r\n    return sRGB_to_AP1_MAT * sRGB;\r\n}\r\n\r\n// lmt\r\n// todo\r\n\r\n#endif // ACES_lib')}}class Er{static __init__(){t.Shader3D.addInclude("Utils.glsl","#if !defined(Utils_lib)\r\n    #define Utils_lib\r\n\r\n#endif // Utils_lib"),t.Shader3D.addInclude("Color.glsl",'#if !defined(Color_lib)\r\n    #define Color_lib\r\n\r\n    #include "Math.glsl";\r\n\r\nvec3 linearToGamma(in vec3 value)\r\n{\r\n    // return vec3(mix(pow(value.rgb, vec3(0.41666)) * 1.055 - vec3(0.055), value.rgb * 12.92, vec3(lessThanEqual(value.rgb, vec3(0.0031308)))));\r\n    return pow(value, vec3(1.0 / 2.2));\r\n}\r\n\r\nvec4 linearToGamma(in vec4 value)\r\n{\r\n    return vec4(linearToGamma(value.rgb), value.a);\r\n}\r\n\r\nvec3 gammaToLinear(in vec3 value)\r\n{\r\n    // return pow((value + 0.055) / 1.055, vec3(2.4));\r\n    return pow(value, vec3(2.2));\r\n}\r\n\r\nvec4 gammaToLinear(in vec4 value)\r\n{\r\n    return vec4(gammaToLinear(value.rgb), value.a);\r\n}\r\n\r\nconst float c_RGBDMaxRange = 255.0;\r\n\r\n// float color to rgbd\r\nvec4 encodeRGBD(in vec3 color)\r\n{\r\n    float maxRGB = max(vecmax(color), FLT_EPS);\r\n    float d = max(1.0, c_RGBDMaxRange / maxRGB);\r\n    d = saturate(d / 255.0);\r\n\r\n    vec3 rgb = color.rgb * d;\r\n    rgb = saturate(rgb);\r\n    return vec4(rgb, d);\r\n}\r\n\r\n// rgbd to float color\r\nvec3 decodeRGBD(in vec4 rgbd)\r\n{\r\n    vec3 color = rgbd.rgb * (1.0 / rgbd.a);\r\n    return color;\r\n}\r\n\r\n// float color to rgbm\r\nvec4 encodeRGBM(in vec3 color, float range)\r\n{\r\n    color *= 1.0 / range;\r\n    float maxRGB = max(vecmax(color), FLT_EPS);\r\n    float m = ceil(maxRGB * 255.0) / 255.0;\r\n    vec3 rgb = color.rgb * 1.0 / m;\r\n\r\n    vec4 rgbm = vec4(rgb, m);\r\n    return rgbm;\r\n}\r\n\r\n// rgbm to float color\r\nvec3 decodeRGBM(in vec4 rgbm, float range)\r\n{\r\n    return range * rgbm.rgb * rgbm.a;\r\n}\r\n\r\n    #include "OutputTransform.glsl";\r\n\r\n#endif // Color_lib'),t.Shader3D.addInclude("Math.glsl",'#if !defined(Math_lib)\r\n    #define Math_lib\r\n\r\n    #ifndef GRAPHICS_API_GLES3\r\nmat2 inverse(mat2 m)\r\n{\r\n    return mat2(m[1][1], -m[0][1], -m[1][0], m[0][0]) / (m[0][0] * m[1][1] - m[0][1] * m[1][0]);\r\n}\r\nmat3 inverse(mat3 m)\r\n{\r\n    float a00 = m[0][0], a01 = m[0][1], a02 = m[0][2];\r\n    float a10 = m[1][0], a11 = m[1][1], a12 = m[1][2];\r\n    float a20 = m[2][0], a21 = m[2][1], a22 = m[2][2];\r\n\r\n    float b01 = a22 * a11 - a12 * a21;\r\n    float b11 = -a22 * a10 + a12 * a20;\r\n    float b21 = a21 * a10 - a11 * a20;\r\n\r\n    float det = a00 * b01 + a01 * b11 + a02 * b21;\r\n\r\n    return mat3(b01, (-a22 * a01 + a02 * a21), (a12 * a01 - a02 * a11), b11, (a22 * a00 - a02 * a20),\r\n\t       (-a12 * a00 + a02 * a10), b21, (-a21 * a00 + a01 * a20), (a11 * a00 - a01 * a10))\r\n\t/ det;\r\n}\r\n\r\nmat4 inverse(mat4 m)\r\n{\r\n    float a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3], a10 = m[1][0], a11 = m[1][1], a12 = m[1][2],\r\n\t  a13 = m[1][3], a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3], a30 = m[3][0], a31 = m[3][1],\r\n\t  a32 = m[3][2], a33 = m[3][3],\r\n\r\n\t  b00 = a00 * a11 - a01 * a10, b01 = a00 * a12 - a02 * a10, b02 = a00 * a13 - a03 * a10,\r\n\t  b03 = a01 * a12 - a02 * a11, b04 = a01 * a13 - a03 * a11, b05 = a02 * a13 - a03 * a12,\r\n\t  b06 = a20 * a31 - a21 * a30, b07 = a20 * a32 - a22 * a30, b08 = a20 * a33 - a23 * a30,\r\n\t  b09 = a21 * a32 - a22 * a31, b10 = a21 * a33 - a23 * a31, b11 = a22 * a33 - a23 * a32,\r\n\r\n\t  det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n    return mat4(a11 * b11 - a12 * b10 + a13 * b09, a02 * b10 - a01 * b11 - a03 * b09, a31 * b05 - a32 * b04 + a33 * b03,\r\n\t       a22 * b04 - a21 * b05 - a23 * b03, a12 * b08 - a10 * b11 - a13 * b07, a00 * b11 - a02 * b08 + a03 * b07,\r\n\t       a32 * b02 - a30 * b05 - a33 * b01, a20 * b05 - a22 * b02 + a23 * b01, a10 * b10 - a11 * b08 + a13 * b06,\r\n\t       a01 * b08 - a00 * b10 - a03 * b06, a30 * b04 - a31 * b02 + a33 * b00, a21 * b02 - a20 * b04 - a23 * b00,\r\n\t       a11 * b07 - a10 * b09 - a12 * b06, a00 * b09 - a01 * b07 + a02 * b06, a31 * b01 - a30 * b03 - a32 * b00,\r\n\t       a20 * b03 - a21 * b01 + a22 * b00)\r\n\t/ det;\r\n}\r\n\r\nmat4 transpose(mat4 m)\r\n{\r\n    return mat4(m[0][0], m[1][0], m[2][0], m[3][0],\r\n\tm[0][1], m[1][1], m[2][1], m[3][1],\r\n\tm[0][2], m[1][2], m[2][2], m[3][2],\r\n\tm[0][3], m[1][3], m[2][3], m[3][3]);\r\n}\r\nmat3 transpose(mat3 m)\r\n{\r\n    return mat3(m[0][0], m[1][0], m[2][0],\r\n\tm[0][1], m[1][1], m[2][1],\r\n\tm[0][2], m[1][2], m[2][2]);\r\n}\r\n    #endif // GRAPHICS_API_GLES3\r\n\r\n    #define PI 3.14159265359\r\n\r\n    #define INVERT_PI 0.31830988618\r\n\r\n    #define HALF_PI 1.570796327\r\n\r\n    #define MEDIUMP_FLT_MAX 65504.0\r\n    #define MEDIUMP_FLT_MIN 0.00006103515625\r\n\r\n    #if defined(GL_FRAGMENT_PRECISION_HIGH)\r\n\t#define FLT_EPS\t\t   1e-5\r\n\t#define saturateMediump(x) x\r\n    #else\r\n\t#define FLT_EPS\t\t   MEDIUMP_FLT_MIN\r\n\t#define saturateMediump(x) min(x, MEDIUMP_FLT_MAX)\r\n    #endif // GL_FRAGMENT_PRECISION_HIGH\r\n\r\n    #define saturate(x) clamp(x, 0.0, 1.0)\r\n\r\nfloat pow2(float x)\r\n{\r\n    return x * x;\r\n}\r\n\r\nvec3 pow2(vec3 x)\r\n{\r\n    return x * x;\r\n}\r\n\r\nfloat pow5(float x)\r\n{\r\n    float x2 = x * x;\r\n    return x2 * x2 * x;\r\n}\r\n\r\nconst float INVERT_LOG10 = 0.43429448190325176;\r\n\r\nfloat log10(float x)\r\n{\r\n    return log(x) * INVERT_LOG10;\r\n}\r\n\r\nfloat vecmax(const vec2 v)\r\n{\r\n    return max(v.x, v.y);\r\n}\r\n\r\nfloat vecmax(const vec3 v)\r\n{\r\n    return max(v.x, max(v.y, v.z));\r\n}\r\n\r\nfloat vecmax(const vec4 v)\r\n{\r\n    return max(max(v.x, v.y), max(v.z, v.w));\r\n}\r\n\r\nfloat vecmin(const vec2 v)\r\n{\r\n    return min(v.x, v.y);\r\n}\r\n\r\nfloat vecmin(const vec3 v)\r\n{\r\n    return min(v.x, min(v.y, v.z));\r\n}\r\n\r\nfloat vecmin(const vec4 v)\r\n{\r\n    return min(min(v.x, v.y), min(v.z, v.w));\r\n}\r\n\r\nvec3 SafeNormalize(in vec3 inVec)\r\n{\r\n    float dp3 = max(0.001, dot(inVec, inVec));\r\n    return inVec * inversesqrt(dp3);\r\n}\r\n\r\nvec3 normalScale(in vec3 normal, in float scale)\r\n{\r\n    normal *= vec3(scale, scale, 1.0);\r\n    return normalize(normal);\r\n}\r\n\r\n/**\r\n * Approximates acos(x) with a max absolute error of 9.0x10^-3.\r\n * Valid in the range -1..1.\r\n */\r\nfloat acosFast(float x)\r\n{\r\n    // Lagarde 2014, "Inverse trigonometric functions GPU optimization for AMD GCN architecture"\r\n    // This is the approximation of degree 1, with a max absolute error of 9.0x10^-3\r\n    float y = abs(x);\r\n    float p = -0.1565827 * y + 1.570796;\r\n    p *= sqrt(1.0 - y);\r\n    return x >= 0.0 ? p : PI - p;\r\n}\r\n\r\n/**\r\n * Approximates acos(x) with a max absolute error of 9.0x10^-3.\r\n * Valid only in the range 0..1.\r\n */\r\nfloat acosFastPositive(float x)\r\n{\r\n    float p = -0.1565827 * x + 1.570796;\r\n    return p * sqrt(1.0 - x);\r\n}\r\n\r\n/*\r\n * Random number between 0 and 1, using interleaved gradient noise.\r\n * w must not be normalized (e.g. window coordinates)\r\n */\r\nfloat interleavedGradientNoise(const highp vec2 w)\r\n{\r\n    const vec3 m = vec3(0.06711056, 0.00583715, 52.9829189);\r\n    return fract(m.z * fract(dot(w, m.xy)));\r\n}\r\n\r\n/*\r\n * vertex rotate by Euler\r\n */\r\nvec3 rotationByEuler(in vec3 vector, in vec3 rot)\r\n{\r\n    float halfRoll = rot.z * 0.5;\r\n    float halfPitch = rot.x * 0.5;\r\n    float halfYaw = rot.y * 0.5;\r\n\r\n    float sinRoll = sin(halfRoll);\r\n    float cosRoll = cos(halfRoll);\r\n    float sinPitch = sin(halfPitch);\r\n    float cosPitch = cos(halfPitch);\r\n    float sinYaw = sin(halfYaw);\r\n    float cosYaw = cos(halfYaw);\r\n\r\n    float quaX = (cosYaw * sinPitch * cosRoll) + (sinYaw * cosPitch * sinRoll);\r\n    float quaY = (sinYaw * cosPitch * cosRoll) - (cosYaw * sinPitch * sinRoll);\r\n    float quaZ = (cosYaw * cosPitch * sinRoll) - (sinYaw * sinPitch * cosRoll);\r\n    float quaW = (cosYaw * cosPitch * cosRoll) + (sinYaw * sinPitch * sinRoll);\r\n\r\n    // vec4 q=vec4(quaX,quaY,quaZ,quaW);\r\n    // vec3 temp = cross(q.xyz, vector) + q.w * vector;\r\n    // return (cross(temp, -q.xyz) + dot(q.xyz,vector) * q.xyz + q.w * temp);\r\n\r\n    float x = quaX + quaX;\r\n    float y = quaY + quaY;\r\n    float z = quaZ + quaZ;\r\n    float wx = quaW * x;\r\n    float wy = quaW * y;\r\n    float wz = quaW * z;\r\n    float xx = quaX * x;\r\n    float xy = quaX * y;\r\n    float xz = quaX * z;\r\n    float yy = quaY * y;\r\n    float yz = quaY * z;\r\n    float zz = quaZ * z;\r\n\r\n    return vec3(((vector.x * ((1.0 - yy) - zz)) + (vector.y * (xy - wz))) + (vector.z * (xz + wy)),\r\n\t((vector.x * (xy + wz)) + (vector.y * ((1.0 - xx) - zz))) + (vector.z * (yz - wx)),\r\n\t((vector.x * (xz - wy)) + (vector.y * (yz + wx))) + (vector.z * ((1.0 - xx) - yy)));\r\n}\r\n\r\n/*\r\n * Assume that axis has been normalized\r\n * point rotate by one axis\r\n */\r\nvec3 rotationByAxis(in vec3 vector, in vec3 axis, in float angle)\r\n{\r\n    float halfAngle = angle * 0.5;\r\n    float sinf = sin(halfAngle);\r\n\r\n    float quaX = axis.x * sinf;\r\n    float quaY = axis.y * sinf;\r\n    float quaZ = axis.z * sinf;\r\n    float quaW = cos(halfAngle);\r\n\r\n    // vec4 q=vec4(quaX,quaY,quaZ,quaW);\r\n    // vec3 temp = cross(q.xyz, vector) + q.w * vector;\r\n    // return (cross(temp, -q.xyz) + dot(q.xyz,vector) * q.xyz + q.w * temp);\r\n\r\n    float x = quaX + quaX;\r\n    float y = quaY + quaY;\r\n    float z = quaZ + quaZ;\r\n    float wx = quaW * x;\r\n    float wy = quaW * y;\r\n    float wz = quaW * z;\r\n    float xx = quaX * x;\r\n    float xy = quaX * y;\r\n    float xz = quaX * z;\r\n    float yy = quaY * y;\r\n    float yz = quaY * z;\r\n    float zz = quaZ * z;\r\n\r\n    return vec3(((vector.x * ((1.0 - yy) - zz)) + (vector.y * (xy - wz))) + (vector.z * (xz + wy)),\r\n\t((vector.x * (xy + wz)) + (vector.y * ((1.0 - xx) - zz))) + (vector.z * (yz - wx)),\r\n\t((vector.x * (xz - wy)) + (vector.y * (yz + wx))) + (vector.z * ((1.0 - xx) - yy)));\r\n}\r\n\r\n/*\r\n *rotate by quaternions\r\n */\r\nvec3 rotationByQuaternions(in vec3 v, in vec4 q)\r\n{\r\n    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);\r\n}\r\n\r\n#endif // Math_lib'),t.Shader3D.addInclude("BakedBoneMatrixSampler.glsl","#if !defined(BakeBoneAnimSampler_lib)\r\n    #define BakeBoneAnimSampler_lib\r\n\r\nmat4 loadBakedMatMatrix(float FramePos, float boneIndices, float offset)\r\n{\r\n    vec2 uv;\r\n    float PixelPos = FramePos + boneIndices * 4.0;\r\n    float halfOffset = offset * 0.5;\r\n    float uvoffset = PixelPos / u_SimpleAnimatorTextureSize;\r\n    uv.y = floor(uvoffset) * offset + halfOffset;\r\n    uv.x = mod(float(PixelPos), u_SimpleAnimatorTextureSize) * offset + halfOffset;\r\n    vec4 mat0row = texture2D(u_SimpleAnimatorTexture, uv);\r\n    uv.x += offset;\r\n    vec4 mat1row = texture2D(u_SimpleAnimatorTexture, uv);\r\n    uv.x += offset;\r\n    vec4 mat2row = texture2D(u_SimpleAnimatorTexture, uv);\r\n    uv.x += offset;\r\n    vec4 mat3row = texture2D(u_SimpleAnimatorTexture, uv);\r\n    mat4 m = mat4(mat0row.x, mat0row.y, mat0row.z, mat0row.w,\r\n\tmat1row.x, mat1row.y, mat1row.z, mat1row.w,\r\n\tmat2row.x, mat2row.y, mat2row.z, mat2row.w,\r\n\tmat3row.x, mat3row.y, mat3row.z, mat3row.w);\r\n    return m;\r\n}\r\n\r\n#endif // BakeBoneAnimSampler_lib"),t.Shader3D.addInclude("MorphTarget.glsl","#if !defined(MorphTarget_lib)\r\n    #define MorphTarget_lib\r\n\r\n    #ifdef GRAPHICS_API_GLES3\r\n\r\n/// static mesh property\r\nuniform sampler2DArray u_MorphTargetsTex;\r\n// xy: tex size, z: attribute count\r\nuniform vec4 u_MorphParams;\r\nuniform vec4 u_MorphAttrOffset;\r\n\r\n\t#define Morph_TexWidth\t   u_MorphParams.x\r\n\t#define Morph_TexHeight\t   u_MorphParams.y\r\n\t#define Morph_AttributeNum u_MorphParams.z\r\n\t#define Morph_TargetNum\t   u_MorphParams.w\r\n\r\n\t#define Morph_PositionOffset u_MorphAttrOffset.x\r\n\t#define Morph_NormalOffset   u_MorphAttrOffset.y\r\n\t#define Morph_TangentOffset  u_MorphAttrOffset.z\r\n\r\n//#define MORPH_MAX_COUNT 32 //兼容WGSL\r\n\r\n/// dynamic params\r\n//uniform float u_MorphActiveTargets[MORPH_MAX_COUNT];\r\n//uniform float u_MorphTargetWeights[MORPH_MAX_COUNT];\r\nuniform vec4 u_MorphActiveTargets[MORPH_MAX_COUNT];\r\nuniform int u_MorphTargetActiveCount;\r\n\r\n\t#define MORPH_ACTIVE_COUNT u_MorphTargetActiveCount\r\n\r\nvec4 sampleMorphTargets(in int vertexID, in float targetID)\r\n{\r\n    int v = vertexID / int(Morph_TexWidth);\r\n    int u = vertexID - v * int(Morph_TexWidth);\r\n\r\n    vec3 uvw = vec3((float(u) + 0.5) / Morph_TexWidth, (float(v) + 0.5) / Morph_TexHeight, targetID);\r\n\r\n    return texture(u_MorphTargetsTex, uvw);\r\n}\r\n\r\nvec3 positionMorph(in vec3 position)\r\n{\r\n    int vertexID = gl_VertexID * int(Morph_AttributeNum) + int(Morph_PositionOffset);\r\n\r\n    for (int i = 0; i < MORPH_ACTIVE_COUNT; i++)\r\n\t{\r\n\t    float index = u_MorphActiveTargets[i].x;\r\n\t\tfloat weight = u_MorphActiveTargets[i].y;\r\n\r\n\t    position += sampleMorphTargets(vertexID, index).xyz * weight;\r\n\t}\r\n\r\n    return position;\r\n}\r\n\r\nvec3 normalMorph(in vec3 normal)\r\n{\r\n    int vertexID = gl_VertexID * int(Morph_AttributeNum) + int(Morph_NormalOffset);\r\n    for (int i = 0; i < MORPH_ACTIVE_COUNT; i++)\r\n\t{\r\n\t    float index = u_MorphActiveTargets[i].x;\r\n\t\tfloat weight = u_MorphActiveTargets[i].y;\r\n\r\n\t    normal += sampleMorphTargets(vertexID, index).xyz * weight;\r\n\t}\r\n\r\n    return normal;\r\n}\r\n\r\nvec4 tangentMorph(in vec4 tangent)\r\n{\r\n    int vertexID = gl_VertexID * int(Morph_AttributeNum) + int(Morph_TangentOffset);\r\n    for (int i = 0; i < MORPH_ACTIVE_COUNT; i++)\r\n\t{\r\n\t    float index = u_MorphActiveTargets[i].x;\r\n\t\tfloat weight = u_MorphActiveTargets[i].y;\r\n\r\n\t    vec4 sampleTangent = sampleMorphTargets(vertexID, index);\r\n\r\n\t    tangent.xyz += sampleTangent.xyz * weight * tangent.w * sampleTangent.w;\r\n\t}\r\n\r\n    return tangent;\r\n}\r\n\r\n    #endif // GRAPHICS_API_GLES3\r\n\r\n#endif // MorphTarget_lib"),t.Shader3D.addInclude("VertexCommon.glsl",'#if !defined(VertexCommon_lib)\r\n    #define VertexCommon_lib\r\n\r\n    #ifdef MORPHTARGETS\r\n\t#include "MorphTarget.glsl";\r\n    #endif // MORPHTARGETS\r\n\r\nstruct Vertex {\r\n\r\n    vec3 positionOS;\r\n\r\n    vec3 normalOS;\r\n\r\n    #ifdef TANGENT\r\n    vec4 tangentOS;\r\n    #endif // TANGENT\r\n\r\n    // todo  uv define ?\r\n    #ifdef UV\r\n    vec2 texCoord0;\r\n    #endif // UV\r\n\r\n    #ifdef UV1\r\n    vec2 texCoord1;\r\n    #endif // UV1\r\n\r\n    #ifdef COLOR\r\n    vec4 vertexColor;\r\n    #endif // COLOR\r\n\r\n    #ifdef LIGHTMAP\r\n    vec4 lightmapScaleOffset;\r\n\t#endif LIGHTMAP\r\n};\r\n\r\n/**\r\n * vertex position\r\n */\r\nvec4 getVertexPosition()\r\n{\r\n    vec4 position = a_Position;\r\n\r\n    #ifdef MORPHTARGETS\r\n\t#ifdef MORPHTARGETS_POSITION\r\n    #ifdef GRAPHICS_API_GLES3\r\n    position.xyz = positionMorph(position.xyz);\r\n    #endif // GRAPHICS_API_GLES3\r\n\t#endif // MORPHTARGETS_POSITION\r\n    #endif // MORPHTARGETS\r\n\r\n    return position;\r\n}\r\n\r\nvec3 getVertexNormal()\r\n{\r\n    vec3 normal = a_Normal.xyz;\r\n    #ifdef MORPHTARGETS\r\n\t#ifdef MORPHTARGETS_NORMAL\r\n    #ifdef GRAPHICS_API_GLES3\r\n    normal.xyz = normalMorph(normal);\r\n    #endif // GRAPHICS_API_GLES3\r\n\t#endif // MORPHTARGETS_NORMAL\r\n    #endif // MORPHTARGETS\r\n\r\n    return normal;\r\n}\r\n\r\n    #ifdef TANGENT\r\nvec4 getVertexTangent()\r\n{\r\n    vec4 tangent = a_Tangent0;\r\n\r\n\t#ifdef MORPHTARGETS\r\n\t#ifdef MORPHTARGETS_TANGENT\r\n    #ifdef GRAPHICS_API_GLES3\r\n    tangent = tangentMorph(tangent);\r\n    #endif // GRAPHICS_API_GLES3\r\n\t#endif // MORPHTARGETS_TANGENT\r\n\t#endif // MORPHTARGETS\r\n\r\n    return tangent;\r\n}\r\n    #endif // TANGENT\r\n\r\n    #ifdef LIGHTMAP\r\n#ifndef GPU_INSTANCE\r\n    uniform vec4 u_LightmapScaleOffset;\r\n#endif // GPU_INSTANCE\r\n\r\nvec4 getLightmapScaleOffset(){\r\n    \r\n    #ifdef GPU_INSTANCE\r\n        return a_LightmapScaleOffset;\r\n    #else\r\n        return u_LightmapScaleOffset;\r\n    #endif // GPU_INSTANCE\r\n}\r\n    #endif // LIGHTMAP\r\n\r\nvoid getVertexParams(inout Vertex vertex)\r\n{\r\n    vertex.positionOS = getVertexPosition().xyz;\r\n\r\n    vertex.normalOS = getVertexNormal();\r\n\r\n    #ifdef TANGENT\r\n    vertex.tangentOS = getVertexTangent();\r\n    #endif // TANGENT\r\n\r\n    #ifdef UV\r\n    vertex.texCoord0 = a_Texcoord0;\r\n    #endif // UV\r\n\r\n    #ifdef UV1\r\n    vertex.texCoord1 = a_Texcoord1;\r\n    #endif // UV1\r\n\r\n    #ifdef COLOR\r\n    // consider vertexColor is gamma\r\n    vertex.vertexColor = vec4(pow(a_Color.rgb, vec3(2.2)), a_Color.a);\r\n    #endif // COLOR\r\n\r\n    #ifdef LIGHTMAP\r\n    vertex.lightmapScaleOffset = getLightmapScaleOffset();\r\n\t#endif LIGHTMAP\r\n}\r\n\r\n#endif // VertexCommon_lib'),t.Shader3D.addInclude("ShadingCommon.glsl","#if !defined(ShadingCommon_lib)\r\n    #define ShadingCommon_lib\r\n\r\n// varying\r\nvarying vec3 v_PositionWS;\r\n// todo\r\nvarying vec3 v_NormalWS;\r\nvarying vec3 v_TangentWS;\r\nvarying vec3 v_BiNormalWS;\r\n\r\n    #ifdef UV\r\nvarying vec2 v_Texcoord0;\r\n    #endif // UV\r\n\r\n    #ifdef UV1\r\n\t#ifdef LIGHTMAP\r\nvarying vec2 v_Texcoord1;\r\n\t#endif // LIGHTMAP\r\n    #endif // UV1\r\n\r\n    #ifdef COLOR\r\nvarying vec4 v_VertexColor;\r\n    #endif // COLOR\r\n\r\n// 记录顶点信息, 用于由vs向fs传递数据\r\nstruct PixelParams {\r\n    vec3 positionWS;\r\n\r\n    // todo\r\n    vec3 normalWS;\r\n    vec3 tangentWS;\r\n    vec3 biNormalWS;\r\n    mat3 TBN;\r\n\r\n    #ifdef UV\r\n    vec2 uv0;\r\n    #endif // UV\r\n\r\n    #ifdef UV1\r\n\t#ifdef LIGHTMAP\r\n    vec2 uv1;\r\n\t#endif // LIGHTMAP\r\n    #endif // UV1\r\n\r\n    #ifdef COLOR\r\n    vec4 vertexColor;\r\n    #endif // COLOR\r\n};\r\n\r\n#endif // ShadingCommon_lib"),t.Shader3D.addInclude("ShadingVertex.glsl",'#if !defined(ShadingVertex_lib)\r\n    #define ShadingVertex_lib\r\n\r\n    #include "ShadingCommon.glsl";\r\n\r\nvoid sharePixelParams(const in PixelParams params)\r\n{\r\n    v_PositionWS = params.positionWS;\r\n\r\n    v_NormalWS = params.normalWS;\r\n    v_TangentWS = params.tangentWS;\r\n    v_BiNormalWS = params.biNormalWS;\r\n\r\n    #ifdef UV\r\n    v_Texcoord0 = params.uv0;\r\n    #endif // UV\r\n\r\n    #ifdef UV1\r\n\t#ifdef LIGHTMAP\r\n    v_Texcoord1 = params.uv1;\r\n\t#endif LIGHTMAP\r\n    #endif // UV1\r\n\r\n    #ifdef COLOR\r\n    v_VertexColor = params.vertexColor;\r\n    #endif // COLOR\r\n}\r\n\r\nvoid shadingPixelParams(inout PixelParams params, in Vertex vertex)\r\n{\r\n    mat4 worldMat = getWorldMatrix();\r\n    vec4 pos = (worldMat * vec4(vertex.positionOS, 1.0));\r\n    params.positionWS = pos.xyz / pos.w;\r\n\r\n    mat3 normalMat = transpose(inverse(mat3(worldMat)));\r\n    params.normalWS = normalize((normalMat * vertex.normalOS).xyz);\r\n\r\n    #ifdef TANGENT\r\n    params.tangentWS = normalize((normalMat * vertex.tangentOS.xyz).xyz);\r\n    params.tangentWS *= u_WroldInvertFront.x;\r\n    params.biNormalWS = normalize(cross(params.normalWS, params.tangentWS) * sign(vertex.tangentOS.w));\r\n    #else // TANGENT\r\n    params.tangentWS = vec3(1.0, 0.0, 0.0);\r\n    params.tangentWS *= u_WroldInvertFront.x;\r\n    params.biNormalWS = normalize(cross(params.normalWS, params.tangentWS));\r\n    #endif // TANGENT\r\n\r\n    #ifdef UV\r\n    params.uv0 = vertex.texCoord0;\r\n    #endif // UV\r\n\r\n    #ifdef UV1\r\n\t#ifdef LIGHTMAP\r\n    params.uv1 = tranformLightMapUV(vertex.texCoord1, vertex.lightmapScaleOffset);\r\n\t#endif LIGHTMAP\r\n    #endif // UV1\r\n\r\n    #ifdef COLOR\r\n    params.vertexColor = vertex.vertexColor;\r\n    #endif // COLOR\r\n}\r\n\r\n#endif // ShadingVertex_lib'),t.Shader3D.addInclude("ShadingFrag.glsl",'#if !defined(ShadingFrag_lib)\r\n    #define ShadingFrag_lib\r\n\r\n    #include "ShadingCommon.glsl";\r\n\r\n    #define _InvertNormal (float(gl_FrontFacing) * 2.0 - 1.0);\r\n\r\nvoid getPixelParams(inout PixelParams params)\r\n{\r\n    params.positionWS = v_PositionWS;\r\n\r\n    float invertN = _InvertNormal;\r\n\r\n    params.normalWS = normalize(v_NormalWS * invertN);\r\n    params.tangentWS = normalize(v_TangentWS * invertN);\r\n    params.biNormalWS = normalize(v_BiNormalWS * invertN);\r\n\r\n    params.TBN = mat3(params.tangentWS, params.biNormalWS, params.normalWS);\r\n\r\n    #ifdef UV\r\n    params.uv0 = v_Texcoord0;\r\n    #endif // UV\r\n\r\n    #ifdef UV1\r\n\t#ifdef LIGHTMAP\r\n    params.uv1 = v_Texcoord1;\r\n\t#endif // LIGHTMAP\r\n    #endif // UV1\r\n\r\n    #ifdef COLOR\r\n    params.vertexColor = v_VertexColor;\r\n    #endif // COLOR\r\n}\r\n\r\n#endif // ShadingFrag_lib'),t.Shader3D.addInclude("OutputTransform.glsl","#if !defined(OutputTransform_lib)\r\n    #define OutputTransform_lib\r\n\r\nvec3 gammaCorrect(in vec3 color, float gammaValue)\r\n{\r\n    return pow(color, vec3(gammaValue));\r\n}\r\n\r\nvec4 gammaCorrect(in vec4 color)\r\n{\r\n    // todo color gamut gamma value\r\n    // default sRGB\r\n    float gammaValue = 1.0 / 2.2;\r\n    return vec4(gammaCorrect(color.rgb, gammaValue), color.a);\r\n}\r\n\r\nvec4 outputTransform(in vec4 color)\r\n{\r\n    #ifdef GAMMACORRECT\r\n    // render in linear, output gamma\r\n    return gammaCorrect(color);\r\n    #else // GAMMACORRECT\r\n    return color;\r\n    #endif // GAMMACORRECT\r\n}\r\n\r\n#endif // OutputTransform_lib\r\n"),t.Shader3D.addInclude("Scene.glsl","#if !defined(SceneCommon_lib)\r\n    #define SceneCommon_lib\r\n\r\n    #ifdef ENUNIFORMBLOCK\r\nuniform SceneUniformBlock\r\n{\r\n    // time\r\n    float u_Time;\r\n    vec4 u_FogParams;// x start,y range,z Density\r\n    vec4 u_FogColor;\r\n};\r\n    #else // ENUNIFORMBLOCK\r\n// time\r\nuniform float u_Time;\r\nuniform vec4 u_FogParams;//x start,y range,z Density\r\nuniform vec4 u_FogColor;\r\n    #endif // ENUNIFORMBLOCK\r\n    //rotate SH IBL\r\nuniform float u_GIRotate;\r\n\r\n#endif // SceneCommon_lib"),t.Shader3D.addInclude("Camera.glsl","#if !defined(CameraCommon_lib)\r\n    #define CameraCommon_lib\r\n\r\n    #ifdef ENUNIFORMBLOCK\r\n\r\nuniform CameraUniformBlock\r\n{\r\n    mat4 u_View;\r\n    mat4 u_Projection;\r\n    mat4 u_ViewProjection;\r\n    vec4 u_ProjectionParams; // x: near, y: far, z: invert, w: 1/far\r\n    vec4 u_Viewport; // x,y,width,height\r\n    vec3 u_CameraDirection;\r\n    vec3 u_CameraUp;\r\n    vec3 u_CameraPos;\r\n};\r\n    #else\r\nuniform mat4 u_View;\r\nuniform mat4 u_Projection;\r\nuniform mat4 u_ViewProjection;\r\nuniform vec4 u_ProjectionParams; // x: near, y: far, z: invert, w: 1/far\r\nuniform vec4 u_Viewport; // x, y, width, height\r\nuniform vec3 u_CameraDirection;\r\nuniform vec3 u_CameraUp;\r\nuniform vec3 u_CameraPos;\r\n    #endif // ENUNIFORMBLOCK\r\n\r\n/*Depth or DepthNormal Uniform*/\r\nuniform highp sampler2D u_CameraDepthTexture;\r\nuniform vec4 u_ZBufferParams; //(1.0 - far / near, far / near, (near - far) / (near * far), 1 / near)\r\nuniform mediump sampler2D u_CameraDepthNormalsTexture;\r\nuniform mediump sampler2D u_CameraOpaqueTexture;\r\nuniform vec4 u_OpaqueTextureParams;\r\n\r\nvec4 getPositionCS(in vec3 positionWS)\r\n{\r\n    return u_ViewProjection * vec4(positionWS, 1.0);\r\n}\r\n\r\nvec3 getViewDirection(in vec3 positionWS)\r\n{\r\n    return normalize(u_CameraPos - positionWS);\r\n}\r\n\r\n// 根据投影矩阵重映射深度\r\nvec4 remapPositionZ(vec4 position)\r\n{\r\n    #ifdef BLITSCREEN_INVERTY\r\n    position.y = -position.y;\r\n    #endif\r\n\r\n    #ifdef REMAP_Z\r\n    position.z = position.z * 2.0 - position.w;\r\n    #endif\r\n    return position;\r\n}\r\n\r\n#endif // CameraCommon_lib"),t.Shader3D.addInclude("SkyCommon.glsl","#if !defined(SkyCommon_lib)\r\n    #define SkyCommon_lib\r\n\r\nuniform vec3 u_SunLight_direction;\r\nuniform vec4 u_SunLight_color;\r\nuniform mat4 u_SkyViewMat;\r\nuniform mat4 u_SkyProjectionMat;\r\nuniform mat4 u_SkyProjectionViewMat;\r\n\r\nvec4 remapSkyPositionZ(in vec4 position)\r\n{\r\n    position.z = position.w;\r\n    #ifdef BLITSCREEN_INVERTY\r\n    position.y = -position.y;\r\n    #endif\r\n    return position;\r\n}\r\n\r\nconst float c_deg2ang = 3.141593 / 180.0;\r\nvec4 rotateAroundYInDegrees(vec4 vertex, float deg)\r\n{\r\n    float angle = deg * c_deg2ang;\r\n    float sina = sin(angle);\r\n    float cosa = cos(angle);\r\n    mat2 m = mat2(cosa, -sina, sina, cosa);\r\n    return vec4(m * vertex.xz, vertex.yw).xzyw;\r\n}\r\n\r\n\r\n#endif // SkyCommon_lib"),t.Shader3D.addInclude("Sprite3DCommon.glsl","#if !defined(Sprite3DCommon_lib)\r\n    #define Sprite3DCommon_lib\r\n\r\nuniform mat4 u_WorldMat;\r\n\r\nuniform vec4 u_WroldInvertFront; // x: invert front face\r\n\r\n    \r\n\r\n\r\nvec2 tranformLightMapUV(in vec2 texcoord, in vec4 tilingOffset)\r\n{\r\n    vec2 lightMapUV = vec2(texcoord.x, 1.0 - texcoord.y) * tilingOffset.xy + tilingOffset.zw;\r\n    lightMapUV.y = 1.0 - lightMapUV.y;\r\n    return lightMapUV;\r\n}\r\n\r\nvec2 transformUV(in vec2 texcoord, in vec4 tilingOffset)\r\n{\r\n    vec2 uv = texcoord * tilingOffset.xy + tilingOffset.zw * vec2(1.0, -1.0) + vec2(0.0, 1.0 - tilingOffset.y);\r\n    return uv;\r\n}\r\n\r\n#endif // Sprite3DCommon_lib"),t.Shader3D.addInclude("Sprite3DVertex.glsl",'#if !defined(Sprite3DVertex_lib)\r\n    #define Sprite3DVertex_lib\r\n\r\n    #include "Sprite3DCommon.glsl";\r\n\r\n    #ifdef BONE\r\n// todo const int c_MaxBoneCount = 24\r\nuniform mat4 u_Bones[24];\r\n\r\n\t#ifdef SIMPLEBONE\r\nuniform vec4 u_SimpleAnimatorParams;\r\nuniform sampler2D u_SimpleAnimatorTexture;\r\nuniform float u_SimpleAnimatorTextureSize;\r\n\t    #include "BakedBoneMatrixSampler.glsl";\r\n\r\n\t#endif // SIMPLEBONE\r\n\r\n    #endif // BONE\r\n\r\n/**\r\n * world matrix\r\n */\r\nmat4 getWorldMatrix()\r\n{\r\n    #ifdef GPU_INSTANCE\r\n    mat4 worldMat = a_WorldMat;\r\n    #else\r\n    mat4 worldMat = u_WorldMat;\r\n    #endif // GPU_INSTANCE\r\n\r\n    #ifdef BONE\r\n\r\n\t#ifdef SIMPLEBONE\r\n\r\n\t    #ifdef GPU_INSTANCE\r\n    float currentPixelPos = a_SimpleTextureParams.x + a_SimpleTextureParams.y;\r\n\t    #else // GPU_INSTANCE\r\n    float currentPixelPos = u_SimpleAnimatorParams.x + u_SimpleAnimatorParams.y;\r\n\t    #endif // GPU_INSTANCE\r\n\r\n    float offset = 1.0 / u_SimpleAnimatorTextureSize;\r\n    mat4 skinTrans = loadBakedMatMatrix(currentPixelPos, a_BoneIndices.x, offset) * a_BoneWeights.x;\r\n    skinTrans += loadBakedMatMatrix(currentPixelPos, a_BoneIndices.y, offset) * a_BoneWeights.y;\r\n    skinTrans += loadBakedMatMatrix(currentPixelPos, a_BoneIndices.z, offset) * a_BoneWeights.z;\r\n    skinTrans += loadBakedMatMatrix(currentPixelPos, a_BoneIndices.w, offset) * a_BoneWeights.w;\r\n    worldMat = worldMat * skinTrans;\r\n\r\n\t#else // SIMPLEBONE\r\n\r\n    ivec4 boneIndex = ivec4(a_BoneIndices);\r\n    mat4 skinTrans = u_Bones[boneIndex.x] * a_BoneWeights.x;\r\n    skinTrans += u_Bones[boneIndex.y] * a_BoneWeights.y;\r\n    skinTrans += u_Bones[boneIndex.z] * a_BoneWeights.z;\r\n    skinTrans += u_Bones[boneIndex.w] * a_BoneWeights.w;\r\n    worldMat = worldMat * skinTrans;\r\n\r\n\t#endif // SIMPLEBONE\r\n\r\n    #endif // BONE\r\n\r\n    return worldMat;\r\n}\r\n\r\nvec2 getSimpleBoneCustomData(){\r\n    vec2 custom;\r\n   #ifdef BONE\r\n    #ifdef SIMPLEBONE\r\n    #ifdef GPU_INSTANCE\r\n    custom=a_SimpleTextureParams.zw;\r\n    #else// GPU_INSTANCE\r\n    custom=u_SimpleAnimatorParams.zw;\r\n    #endif// GPU_INSTANCE\r\n    #endif// SIMPLEBONE\r\n  #endif // BONE\r\n    return custom;\r\n}\r\n\r\n#endif // Sprite3DVertex_lib'),t.Shader3D.addInclude("Sprite3DFrag.glsl",'#if !defined(Sprite3DFrag_lib)\r\n    #define Sprite3DFrag_lib\r\n\r\n    #include "Sprite3DCommon.glsl";\r\n\r\n#endif // Sprite3DFrag_lib'),t.Shader3D.addInclude("DepthVertex.glsl",'#if !defined(DepthVertex_lib)\r\n    #define DepthVertex_lib\r\n    #include "Math.glsl";\r\n    #include "Scene.glsl";\r\n    #include "Camera.glsl";\r\n    #include "Sprite3DVertex.glsl";\r\n\r\n    #include "VertexCommon.glsl";\r\n\r\n    #if defined(SHADOW) || defined(SHADOW_SPOT)\r\n\r\n\t#ifndef DEPTHPASS\r\n\t    #ifdef ENUNIFORMBLOCK\r\nuniform ShadowUniformBlock\r\n{\r\n    vec4 u_ShadowBias; // x: depth bias, y: normal bias\r\n    vec3 u_ShadowLightDirection;\r\n};\r\n\t    #else // ENUNIFORMBLOCK\r\nuniform vec4 u_ShadowBias; // x: depth bias, y: normal bias\r\n\t\t#ifdef SHADOW\r\nuniform vec3 u_ShadowLightDirection;\r\n\t\t#endif // SHADOW\r\n\t    #endif // ENUNIFORMBLOCK\r\n\r\nvec3 applyShadowBias(vec3 positionWS, vec3 normalWS, vec3 lightDirection)\r\n{\r\n    float invNdotL = 1.0 - clamp(dot(-lightDirection, normalWS), 0.0, 1.0);\r\n    float scale = invNdotL * u_ShadowBias.y;\r\n\r\n    // normal bias is negative since we want to apply an inset normal offset\r\n    positionWS += -lightDirection * u_ShadowBias.xxx;\r\n    positionWS += normalWS * vec3(scale);\r\n    return positionWS;\r\n}\r\n\t#endif // DEPTHPASS\r\n    #endif // SHADOW || SHADOW_SPOT\r\n\r\n    #ifdef DEPTHPASS\r\n\t#include "Camera.glsl";\r\n    #endif // DEPTHPASS\r\n\r\nvec4 DepthPositionCS(in vec3 positionWS, in vec3 normalWS)\r\n{\r\n    #ifdef DEPTHPASS\r\n    vec4 positionCS = u_ViewProjection * vec4(positionWS, 1.0);\r\n    #endif // DEPTHPASS\r\n\r\n    #ifdef SHADOW\r\n\t#ifndef DEPTHPASS\r\n    positionWS = applyShadowBias(positionWS, normalWS, u_ShadowLightDirection);\r\n    vec4 positionCS = u_ViewProjection * vec4(positionWS, 1.0);\r\n    positionCS.z = max(positionCS.z, 0.0); // min ndc z is 0.0\r\n\t#endif // DEPTHPASS\r\n    #endif // SHADOW\r\n\r\n    #ifdef SHADOW_SPOT\r\n\t#ifndef DEPTHPASS\r\n    vec4 positionCS = u_ViewProjection * vec4(positionWS, 1.0);\r\n    positionCS.z = positionCS.z - u_ShadowBias.x / positionCS.w;\r\n    positionCS.z = max(positionCS.z, 0.0); // min ndc z is 0.0\r\n\t#endif // DEPTHPASS\r\n    #endif // SHADOW_SPOT\r\n\r\n    return positionCS;\r\n}\r\n\r\n#endif // DepthVertex_lib'),t.Shader3D.addInclude("DepthFrag.glsl","#if !defined(DepthFrag_lib)\r\n    #define DepthFrag_lib\r\n\r\nvec4 getDepthColor()\r\n{\r\n    return vec4(0.0);\r\n}\r\n\r\n#endif // DepthFrag_lib"),t.Shader3D.addInclude("DepthNormalUtil.glsl","#define SAMPLE_DEPTH_TEXTURE(textureName, coord2) (texture2D(textureName, coord2).r)\r\n//此方法库用来压缩解析深度贴图，法线深度贴图\r\n\r\n// Encoding/decoding view space normals into 2D 0..1 vector\r\nvec2 EncodeViewNormalStereo(vec3 n)\r\n{\r\n    n.z = abs(n.z);\r\n    float kScale = 1.7777;\r\n    vec2 enc;\r\n    enc = n.xy / (n.z + 1.0);\r\n    enc /= kScale;\r\n    enc = enc * 0.5 + 0.5;\r\n    return enc;\r\n}\r\n\r\nvec3 DecodeViewNormalStereo(vec4 enc4)\r\n{\r\n    float kScale = 1.7777;\r\n    vec3 nn = enc4.xyz * vec3(2.0 * kScale, 2.0 * kScale, 0.0) + vec3(-kScale, -kScale, 1.0);\r\n    float g = 2.0 / dot(nn.xyz, nn.xyz);\r\n    vec3 n;\r\n    n.xy = g * nn.xy;\r\n    n.z = g - 1.0;\r\n    return n;\r\n}\r\n\r\n// Encoding/decoding [0..1) floats into 8 bit/channel RG. Note that 1.0 will not be encoded properly.\r\nvec2 EncodeFloatRG(float v)\r\n{\r\n    vec2 kEncodeMul = vec2(1.0, 255.0);\r\n    float kEncodeBit = 1.0 / 255.0;\r\n    vec2 enc = kEncodeMul * v;\r\n    enc = fract(enc);\r\n    enc.x -= enc.y * kEncodeBit;\r\n    return enc;\r\n}\r\n\r\nfloat DecodeFloatRG(vec2 enc)\r\n{\r\n    vec2 kDecodeDot = vec2(1.0, 1.0 / 255.0);\r\n    return dot(enc, kDecodeDot);\r\n}\r\n\r\nvec4 EncodeDepthNormal(float depth, vec3 normals)\r\n{\r\n    vec4 encode;\r\n    encode.xy = EncodeViewNormalStereo(normals);\r\n    encode.zw = EncodeFloatRG(depth);\r\n    return encode;\r\n}\r\n\r\nvoid DecodeDepthNormal(vec4 enc, out float depth, out vec3 normal)\r\n{\r\n    depth = DecodeFloatRG(enc.zw);\r\n    normal = DecodeViewNormalStereo(enc);\r\n}\r\n\r\nvec4 depthNormalsFragment(vec4 depthNormal)\r\n{\r\n    return EncodeDepthNormal(depthNormal.w, depthNormal.xyz);\r\n}\r\n\r\n// Z buffer to linear 0..1 depth\r\nfloat Linear01Depth(float z, vec4 zbufferParams)\r\n{\r\n    return 1.0 / (zbufferParams.x * z + zbufferParams.y);\r\n}\r\n// Z buffer to linear depth\r\nfloat LinearEyeDepth(float z, vec4 zbufferParams)\r\n{\r\n    return 1.0 / (zbufferParams.z * z + zbufferParams.w);\r\n}\r\n"),t.Shader3D.addInclude("DepthNormalFrag.glsl",'#if !defined(DepthNormalFrag_lib)\r\n    #define DepthNormalFrag_lib\r\n\r\n    #include "DepthNormalUtil.glsl";\r\n\r\nvec4 encodeDepthNormal(const in vec4 positionCS, const in vec3 normalWS)\r\n{\r\n    float depth = (positionCS.z * 2.0 - positionCS.w) * u_ProjectionParams.w;\r\n\r\n    vec3 normalVS = mat3(u_View) * normalWS;\r\n\r\n    return EncodeDepthNormal(depth, normalVS);\r\n}\r\n\r\n#endif // DepthNormalFrag_lib'),t.Shader3D.addInclude("SceneFog.glsl","#if !defined(SceneFog_lib)\r\n    #define SceneFog_lib\r\n\r\n    #ifdef FOG\r\nvarying float v_fogFactor;\r\nfloat getFogFactor()\r\n{\r\n    return v_fogFactor;\r\n}\r\n\r\nvec3 scenUnlitFog(in vec3 color)\r\n{\r\n    float lerpFact = getFogFactor();\r\n\t#ifdef ADDTIVEFOG\r\n    lerpFact = clamp(lerpFact, 0.0, 1.0);\r\n    return mix(vec3(0.0), color, lerpFact);\r\n\t#else\r\n    lerpFact = clamp(lerpFact, 0.0, 1.0);\r\n    return mix(u_FogColor.rgb, color, lerpFact);\r\n\t#endif // ADDTIVEFOG\r\n}\r\n\r\nvec3 sceneLitFog(in vec3 color)\r\n{\r\n    float lerpFact = getFogFactor();\r\n    lerpFact = clamp(lerpFact, 0.0, 1.0);\r\n    return mix(u_FogColor.rgb, color, lerpFact);\r\n}\r\n\r\n    #endif\r\n#endif // SceneFog_lib"),t.Shader3D.addInclude("SceneFogInput.glsl","#if !defined(SceneFog_lib)\r\n    #define SceneFog_lib\r\n\r\n    #ifdef FOG\r\nvarying float v_fogFactor;\r\nvoid FogHandle(in float fact)\r\n{\r\n    float lerpFact = 0.0;\r\n\t#ifdef FOG_EXP\r\n    lerpFact = fact * (u_FogParams.z / log(2.0));\r\n    lerpFact = exp2(-lerpFact);\r\n\t#elif defined(FOG_EXP2)\r\n    lerpFact = fact * (u_FogParams.z / sqrt(log(2.0)));\r\n    lerpFact = exp2(-lerpFact);\r\n\t#else // default FOG_LINEAR\r\n    lerpFact = (-1.0 * fact / (u_FogParams.y - u_FogParams.x) + u_FogParams.y / (u_FogParams.y - u_FogParams.x));\r\n\t#endif\r\n    v_fogFactor = lerpFact;\r\n}\r\n    #endif\r\n#endif // SceneFog_lib"),t.Shader3D.addInclude("ShadowSampleTent.glsl",'// ------------------------------------------------------------------\r\n//  PCF Filtering Tent Functions\r\n// ------------------------------------------------------------------\r\n\r\n// Assuming a isoceles right angled triangle of height "triangleHeight" (as drawn below).\r\n// This function return the area of the triangle above the first texel(in Y the first texel).\r\n//\r\n// |\\      <-- 45 degree slop isosceles right angled triangle\r\n// | \\\r\n// ----    <-- length of this side is "triangleHeight"\r\n// _ _ _ _ <-- texels\r\nfloat sampleShadowGetIRTriangleTexelArea(float triangleHeight)\r\n{\r\n    return triangleHeight - 0.5;\r\n}\r\n\r\n// Assuming a isoceles triangle of 1.5 texels height and 3 texels wide lying on 4 texels.\r\n// This function return the area of the triangle above each of those texels.\r\n//    |    <-- offset from -0.5 to 0.5, 0 meaning triangle is exactly in the center\r\n//   / \\   <-- 45 degree slop isosceles triangle (ie tent projected in 2D)\r\n//  /   \\\r\n// _ _ _ _ <-- texels\r\n// X Y Z W <-- result indices (in computedArea.xyzw and computedAreaUncut.xyzw)\r\n// Top point at (right,top) in a texel,left bottom point at (middle,middle) in a texel,right bottom point at (middle,middle) in a texel.\r\nvoid sampleShadowGetTexelAreasTent3x3(float offset, out vec4 computedArea, out vec4 computedAreaUncut)\r\n{\r\n    // Compute the exterior areas,a and h is same.\r\n    float a = offset + 0.5;\r\n    float offsetSquaredHalved = a * a * 0.5;\r\n    computedAreaUncut.x = computedArea.x = offsetSquaredHalved - offset;\r\n    computedAreaUncut.w = computedArea.w = offsetSquaredHalved;\r\n\r\n    // Compute the middle areas\r\n    // For Y : We find the area in Y of as if the left section of the isoceles triangle would\r\n    // intersect the axis between Y and Z (ie where offset = 0).\r\n    computedAreaUncut.y = sampleShadowGetIRTriangleTexelArea(1.5 - offset);\r\n    // This area is superior to the one we are looking for if (offset < 0) thus we need to\r\n    // subtract the area of the triangle defined by (0,1.5-offset), (0,1.5+offset), (-offset,1.5).\r\n    float clampedOffsetLeft = min(offset,0.0);\r\n    float areaOfSmallLeftTriangle = clampedOffsetLeft * clampedOffsetLeft;\r\n    computedArea.y = computedAreaUncut.y - areaOfSmallLeftTriangle;\r\n\r\n    // We do the same for the Z but with the right part of the isoceles triangle\r\n    computedAreaUncut.z = sampleShadowGetIRTriangleTexelArea(1.5 + offset);\r\n    float clampedOffsetRight = max(offset,0.0);\r\n    float areaOfSmallRightTriangle = clampedOffsetRight * clampedOffsetRight;\r\n    computedArea.z = computedAreaUncut.z - areaOfSmallRightTriangle;\r\n}\r\n\r\n// Assuming a isoceles triangle of 2.5 texel height and 5 texels wide lying on 6 texels.\r\n// This function return the weight of each texels area relative to the full triangle area.\r\n//  /       \\\r\n// _ _ _ _ _ _ <-- texels\r\n// 0 1 2 3 4 5 <-- computed area indices (in texelsWeights[])\r\n// Top point at (right,top) in a texel,left bottom point at (middle,middle) in a texel,right bottom point at (middle,middle) in a texel.\r\nvoid sampleShadowGetTexelWeightsTent5x5(float offset, out vec3 texelsWeightsA, out vec3 texelsWeightsB)\r\n{\r\n    vec4 areaFrom3texelTriangle;\r\n    vec4 areaUncutFrom3texelTriangle;\r\n    sampleShadowGetTexelAreasTent3x3(offset, areaFrom3texelTriangle, areaUncutFrom3texelTriangle);\r\n\r\n    // Triangle slope is 45 degree thus we can almost reuse the result of the 3 texel wide computation.\r\n    // the 5 texel wide triangle can be seen as the 3 texel wide one but shifted up by one unit/texel.\r\n    // 0.16 is 1/(the triangle area)\r\n    texelsWeightsA.x = 0.16 * (areaFrom3texelTriangle.x);\r\n    texelsWeightsA.y = 0.16 * (areaUncutFrom3texelTriangle.y);\r\n    texelsWeightsA.z = 0.16 * (areaFrom3texelTriangle.y + 1.0);\r\n    texelsWeightsB.x = 0.16 * (areaFrom3texelTriangle.z + 1.0);\r\n    texelsWeightsB.y = 0.16 * (areaUncutFrom3texelTriangle.z);\r\n    texelsWeightsB.z = 0.16 * (areaFrom3texelTriangle.w);\r\n}\r\n\r\n// 5x5 Tent filter (45 degree sloped triangles in U and V)\r\nvoid sampleShadowComputeSamplesTent5x5(vec4 shadowMapTextureTexelSize, vec2 coord, out float fetchesWeights[9], out vec2 fetchesUV[9])\r\n{\r\n    // tent base is 5x5 base thus covering from 25 to 36 texels, thus we need 9 bilinear PCF fetches\r\n    vec2 tentCenterInTexelSpace = coord.xy * shadowMapTextureTexelSize.zw;\r\n    vec2 centerOfFetchesInTexelSpace = floor(tentCenterInTexelSpace + 0.5);\r\n    vec2 offsetFromTentCenterToCenterOfFetches = tentCenterInTexelSpace - centerOfFetchesInTexelSpace;\r\n\r\n    // find the weight of each texel based on the area of a 45 degree slop tent above each of them.\r\n    vec3 texelsWeightsUA, texelsWeightsUB;\r\n    vec3 texelsWeightsVA, texelsWeightsVB;\r\n    sampleShadowGetTexelWeightsTent5x5(offsetFromTentCenterToCenterOfFetches.x, texelsWeightsUA, texelsWeightsUB);\r\n    sampleShadowGetTexelWeightsTent5x5(offsetFromTentCenterToCenterOfFetches.y, texelsWeightsVA, texelsWeightsVB);\r\n\r\n    // each fetch will cover a group of 2x2 texels, the weight of each group is the sum of the weights of the texels\r\n    vec3 fetchesWeightsU = vec3(texelsWeightsUA.xz, texelsWeightsUB.y) + vec3(texelsWeightsUA.y, texelsWeightsUB.xz);\r\n    vec3 fetchesWeightsV = vec3(texelsWeightsVA.xz, texelsWeightsVB.y) + vec3(texelsWeightsVA.y, texelsWeightsVB.xz);\r\n\r\n    // move the PCF bilinear fetches to respect texels weights\r\n    vec3 fetchesOffsetsU = vec3(texelsWeightsUA.y, texelsWeightsUB.xz) / fetchesWeightsU.xyz + vec3(-2.5,-0.5,1.5);\r\n    vec3 fetchesOffsetsV = vec3(texelsWeightsVA.y, texelsWeightsVB.xz) / fetchesWeightsV.xyz + vec3(-2.5,-0.5,1.5);\r\n    fetchesOffsetsU *= shadowMapTextureTexelSize.xxx;\r\n    fetchesOffsetsV *= shadowMapTextureTexelSize.yyy;\r\n\r\n    vec2 bilinearFetchOrigin = centerOfFetchesInTexelSpace * shadowMapTextureTexelSize.xy;\r\n    fetchesUV[0] = bilinearFetchOrigin + vec2(fetchesOffsetsU.x, fetchesOffsetsV.x);\r\n    fetchesUV[1] = bilinearFetchOrigin + vec2(fetchesOffsetsU.y, fetchesOffsetsV.x);\r\n    fetchesUV[2] = bilinearFetchOrigin + vec2(fetchesOffsetsU.z, fetchesOffsetsV.x);\r\n    fetchesUV[3] = bilinearFetchOrigin + vec2(fetchesOffsetsU.x, fetchesOffsetsV.y);\r\n    fetchesUV[4] = bilinearFetchOrigin + vec2(fetchesOffsetsU.y, fetchesOffsetsV.y);\r\n    fetchesUV[5] = bilinearFetchOrigin + vec2(fetchesOffsetsU.z, fetchesOffsetsV.y);\r\n    fetchesUV[6] = bilinearFetchOrigin + vec2(fetchesOffsetsU.x, fetchesOffsetsV.z);\r\n    fetchesUV[7] = bilinearFetchOrigin + vec2(fetchesOffsetsU.y, fetchesOffsetsV.z);\r\n    fetchesUV[8] = bilinearFetchOrigin + vec2(fetchesOffsetsU.z, fetchesOffsetsV.z);\r\n\r\n    fetchesWeights[0] = fetchesWeightsU.x * fetchesWeightsV.x;\r\n    fetchesWeights[1] = fetchesWeightsU.y * fetchesWeightsV.x;\r\n    fetchesWeights[2] = fetchesWeightsU.z * fetchesWeightsV.x;\r\n    fetchesWeights[3] = fetchesWeightsU.x * fetchesWeightsV.y;\r\n    fetchesWeights[4] = fetchesWeightsU.y * fetchesWeightsV.y;\r\n    fetchesWeights[5] = fetchesWeightsU.z * fetchesWeightsV.y;\r\n    fetchesWeights[6] = fetchesWeightsU.x * fetchesWeightsV.z;\r\n    fetchesWeights[7] = fetchesWeightsU.y * fetchesWeightsV.z;\r\n    fetchesWeights[8] = fetchesWeightsU.z * fetchesWeightsV.z;\r\n}'),t.Shader3D.addInclude("ShadowSampler.glsl",'//兼容WGSL\r\n#if !defined(ShadowSampler_lib)\r\n    #define ShadowSampler_lib\r\n\r\n    #ifndef GRAPHICS_API_GLES3\r\n\t#define NO_NATIVE_SHADOWMAP\r\n    #endif // GRAPHICS_API_GLES3\r\n\r\n    #if defined(NO_NATIVE_SHADOWMAP)\r\n\t#define TEXTURE2D_SHADOW(textureName)\t\t     uniform mediump sampler2D textureName\r\n    #define SAMPLE_TEXTURE2D_SHADOW(textureName, coord3) (texture2D(textureName, coord3.xy).r < coord3.z ? 0.0 : 1.0)\r\n\t#define TEXTURE2D_SHADOW_PARAM(shadowMap)\t     mediump sampler2D shadowMap\r\n    #else // NO_NATIVE_SHADOWMAP\r\n\t#define TEXTURE2D_SHADOW(textureName)\t\t     uniform mediump sampler2DShadow textureName\r\n\t#define SAMPLE_TEXTURE2D_SHADOW(textureName, coord3) textureLod(textureName, coord3, 0.0)\r\n\t#define TEXTURE2D_SHADOW_PARAM(shadowMap)\t     mediump sampler2DShadow shadowMap\r\n    #endif // NO_NATIVE_SHADOWMAP\r\n\r\n    // 计算阴影\r\n    #ifdef RECEIVESHADOW\r\n\r\n\t#include "ShadowSampleTent.glsl";\r\n\r\nuniform vec4 u_ShadowParams;\r\n\r\n\t#define ShadowStrength\t   u_ShadowParams.x\r\n\t#define SpotShadowStrength u_ShadowParams.y\r\n\r\n    // 平行光阴影\r\n\t#ifdef SHADOW\r\n\t    #define CALCULATE_SHADOWS\r\nvarying vec4 v_ShadowCoord;\r\nTEXTURE2D_SHADOW(u_ShadowMap);\r\nuniform vec4 u_ShadowMapSize;\r\n\r\n// #ifdef SHADOW_CASCADE\r\n// const int c_MaxCascadeCount = 4;\r\n// #else //SHADOW_CASCADE\r\n// const int c_MaxCascadeCount = 1;\r\n// #endif//SHADOW_CASCADE\r\n// uniform mat4 u_ShadowMatrices[c_MaxCascadeCount];\r\n// uniform vec4 u_ShadowSplitSpheres[c_MaxCascadeCount];\r\n\r\nuniform mat4 u_ShadowMatrices[4];\r\nuniform vec4 u_ShadowSplitSpheres[4];\r\n\t#endif // SHADOW\r\n\r\n\t// 聚光灯阴影\r\n\t#ifdef SHADOW_SPOT\r\n\t    #define CALCULATE_SPOTSHADOWS\r\nvarying vec4 v_SpotShadowCoord;\r\nTEXTURE2D_SHADOW(u_SpotShadowMap);\r\nuniform vec4 u_SpotShadowMapSize;\r\nuniform mat4 u_SpotViewProjectMatrix;\r\n\t#endif // SHADOW_SPOT\r\n\r\nfloat sampleShdowMapFiltered4(TEXTURE2D_SHADOW_PARAM(shadowMap), vec3 shadowCoord, vec4 shadowMapSize)\r\n{\r\n    float attenuation;\r\n    vec4 attenuation4;\r\n    vec2 offset = shadowMapSize.xy / 2.0;\r\n    vec3 shadowCoord0 = shadowCoord + vec3(-offset, 0.0);\r\n    vec3 shadowCoord1 = shadowCoord + vec3(offset.x, -offset.y, 0.0);\r\n    vec3 shadowCoord2 = shadowCoord + vec3(-offset.x, offset.y, 0.0);\r\n    vec3 shadowCoord3 = shadowCoord + vec3(offset, 0.0);\r\n    attenuation4.x = SAMPLE_TEXTURE2D_SHADOW(shadowMap, shadowCoord0);\r\n    attenuation4.y = SAMPLE_TEXTURE2D_SHADOW(shadowMap, shadowCoord1);\r\n    attenuation4.z = SAMPLE_TEXTURE2D_SHADOW(shadowMap, shadowCoord2);\r\n    attenuation4.w = SAMPLE_TEXTURE2D_SHADOW(shadowMap, shadowCoord3);\r\n    attenuation = dot(attenuation4, vec4(0.25));\r\n    return attenuation;\r\n}\r\n\r\nfloat sampleShdowMapFiltered9(TEXTURE2D_SHADOW_PARAM(shadowMap), vec3 shadowCoord, vec4 shadowmapSize)\r\n{\r\n    float attenuation;\r\n    float fetchesWeights[9];\r\n    vec2 fetchesUV[9];\r\n    sampleShadowComputeSamplesTent5x5(shadowmapSize, shadowCoord.xy, fetchesWeights, fetchesUV);\r\n    attenuation = fetchesWeights[0] * SAMPLE_TEXTURE2D_SHADOW(shadowMap, vec3(fetchesUV[0].xy, shadowCoord.z));\r\n    attenuation += fetchesWeights[1] * SAMPLE_TEXTURE2D_SHADOW(shadowMap, vec3(fetchesUV[1].xy, shadowCoord.z));\r\n    attenuation += fetchesWeights[2] * SAMPLE_TEXTURE2D_SHADOW(shadowMap, vec3(fetchesUV[2].xy, shadowCoord.z));\r\n    attenuation += fetchesWeights[3] * SAMPLE_TEXTURE2D_SHADOW(shadowMap, vec3(fetchesUV[3].xy, shadowCoord.z));\r\n    attenuation += fetchesWeights[4] * SAMPLE_TEXTURE2D_SHADOW(shadowMap, vec3(fetchesUV[4].xy, shadowCoord.z));\r\n    attenuation += fetchesWeights[5] * SAMPLE_TEXTURE2D_SHADOW(shadowMap, vec3(fetchesUV[5].xy, shadowCoord.z));\r\n    attenuation += fetchesWeights[6] * SAMPLE_TEXTURE2D_SHADOW(shadowMap, vec3(fetchesUV[6].xy, shadowCoord.z));\r\n    attenuation += fetchesWeights[7] * SAMPLE_TEXTURE2D_SHADOW(shadowMap, vec3(fetchesUV[7].xy, shadowCoord.z));\r\n    attenuation += fetchesWeights[8] * SAMPLE_TEXTURE2D_SHADOW(shadowMap, vec3(fetchesUV[8].xy, shadowCoord.z));\r\n    return attenuation;\r\n}\r\n    #endif // RECEIVESHADOW\r\n\r\n    // 计算平行光阴影\r\n    #if defined(CALCULATE_SHADOWS)\r\n\r\n#ifdef SHADOW_CASCADE\r\n// 平行光阴影级联索引\r\nmediump int computeCascadeIndex(in vec3 positionWS)\r\n{\r\n    vec3 fromCenter0 = positionWS - u_ShadowSplitSpheres[0].xyz;\r\n    vec3 fromCenter1 = positionWS - u_ShadowSplitSpheres[1].xyz;\r\n    vec3 fromCenter2 = positionWS - u_ShadowSplitSpheres[2].xyz;\r\n    vec3 fromCenter3 = positionWS - u_ShadowSplitSpheres[3].xyz;\r\n\r\n    mediump vec4 comparison = vec4(dot(fromCenter0, fromCenter0) < u_ShadowSplitSpheres[0].w,\r\n\tdot(fromCenter1, fromCenter1) < u_ShadowSplitSpheres[1].w,\r\n\tdot(fromCenter2, fromCenter2) < u_ShadowSplitSpheres[2].w,\r\n\tdot(fromCenter3, fromCenter3) < u_ShadowSplitSpheres[3].w);\r\n\r\n    comparison.yzw = clamp(comparison.yzw - comparison.xyz, 0.0, 1.0); // keep the nearest\r\n    mediump vec4 indexCoefficient = vec4(4.0, 3.0, 2.0, 1.0);\r\n    mediump int index = 4 - int(dot(comparison, indexCoefficient));\r\n    return index;\r\n}\r\n#endif\r\n\r\n// 平行光阴影坐标\r\nvec4 getShadowCoord(in vec3 positionWS)\r\n{\r\n\t#ifdef SHADOW_CASCADE\r\n    mediump int cascadeIndex = computeCascadeIndex(positionWS);\r\n\t    #ifdef GRAPHICS_API_GLES3\r\n    mat4 shadowMat = u_ShadowMatrices[cascadeIndex];\r\n\t    #else // GRAPHICS_API_GLES3\r\n    mat4 shadowMat;\r\n    if (cascadeIndex == 0)\r\n\t{\r\n\t    shadowMat = u_ShadowMatrices[0];\r\n\t}\r\n    else if (cascadeIndex == 1)\r\n\t{\r\n\t    shadowMat = u_ShadowMatrices[1];\r\n\t}\r\n    else if (cascadeIndex == 2)\r\n\t{\r\n\t    shadowMat = u_ShadowMatrices[2];\r\n\t}\r\n    else\r\n\t{\r\n\t    shadowMat = u_ShadowMatrices[3];\r\n\t}\r\n\t    #endif // GRAPHICS_API_GLES3\r\n\r\n    return shadowMat * vec4(positionWS, 1.0);\r\n\r\n\t#else // SHADOW_CASCADE\r\n\r\n    return u_ShadowMatrices[0] * vec4(positionWS, 1.0);\r\n\r\n\t#endif // SHADOW_CASCADE\r\n}\r\n\r\n// 采样平行光阴影\r\nfloat sampleShadowmap(in vec4 shadowCoord)\r\n{\r\n    float attenuation = 1.0;\r\n\r\n    vec3 coord = shadowCoord.xyz / shadowCoord.w;\r\n\r\n    vec4 shadowmapSize = u_ShadowMapSize;\r\n\r\n    //if (coord.z > 0.0 && coord.z < 1.0)\r\n\t{\r\n\t#if defined(SHADOW_SOFT_SHADOW_HIGH)\r\n\t    attenuation = sampleShdowMapFiltered9(u_ShadowMap, coord, shadowmapSize);\r\n\t#elif defined(SHADOW_SOFT_SHADOW_LOW)\r\n\t    attenuation = sampleShdowMapFiltered4(u_ShadowMap, coord, shadowmapSize);\r\n\t#else // hard\r\n\t    attenuation = SAMPLE_TEXTURE2D_SHADOW(u_ShadowMap, coord);\r\n\t#endif // SHADOW_SOFT_SHADOW_HIGH\r\n\t    attenuation = mix(1.0, attenuation, ShadowStrength);\r\n\t}\r\n\r\n    if (coord.z > 0.0 && coord.z < 1.0)\r\n        return attenuation;\r\n    return 1.0;\r\n}\r\n\r\n    #endif // CALCULATE_SHADOWS\r\n\r\n    // 计算 聚光灯 阴影\r\n    #if defined(CALCULATE_SPOTSHADOWS)\r\n\r\n// 聚光灯阴影坐标\r\nvec4 getSpotShadowCoord(in vec3 positionWS)\r\n{\r\n    vec4 coordinate = u_SpotViewProjectMatrix * vec4(positionWS, 1.0);\r\n\r\n    return coordinate;\r\n}\r\n\r\n// 采样聚光灯阴影\r\nfloat sampleSpotShadowmap(vec4 shadowCoord)\r\n{\r\n    float attenuation = 1.0;\r\n\r\n    vec3 coord = shadowCoord.xyz / shadowCoord.w;\r\n    coord.xy = coord.xy * 0.5 + 0.5;\r\n\r\n    vec4 shadowmapSize = u_SpotShadowMapSize;\r\n    // todo\r\n    //if (coord.z > 0.0 && coord.z < 1.0)\r\n\t//{\r\n\t#if defined(SHADOW_SPOT_SOFT_SHADOW_HIGH)\r\n\t    attenuation = sampleShdowMapFiltered9(u_SpotShadowMap, coord, shadowmapSize);\r\n\t#elif defined(SHADOW_SPOT_SOFT_SHADOW_LOW)\r\n\t    attenuation = sampleShdowMapFiltered4(u_SpotShadowMap, coord, shadowmapSize);\r\n\t#else // hard\r\n\t    attenuation = SAMPLE_TEXTURE2D_SHADOW(u_SpotShadowMap, coord);\r\n\t#endif\r\n\t    attenuation = mix(1.0, attenuation, SpotShadowStrength);\r\n\t//}\r\n\r\n    if (coord.z > 0.0 && coord.z < 1.0)\r\n        return attenuation;\r\n    return 1.0;\r\n}\r\n\r\n    #endif // CALCULATE_SPOTSHADOWS\r\n\r\n#endif // ShadowSampler_lib'),t.Shader3D.addInclude("Lighting.glsl",'#if !defined(Lighting_lib)\r\n    #define Lighting_lib\r\n\r\n    #include "ShadowSampler.glsl";\r\n\r\nstruct Light {\r\n    vec3 color;\r\n    vec3 dir;\r\n    float attenuation;\r\n};\r\n\r\nstruct DirectionLight {\r\n    vec3 color;\r\n    vec3 direction;\r\n    float attenuation;\r\n    int lightMode;\r\n};\r\n\r\nstruct PointLight {\r\n    vec3 color;\r\n    vec3 position;\r\n    float range;\r\n    float attenuation;\r\n    int lightMode;\r\n};\r\n\r\nstruct SpotLight {\r\n    vec3 color;\r\n    vec3 position;\r\n    float range;\r\n    vec3 direction;\r\n    float spot;\r\n    float attenuation;\r\n    int lightMode;\r\n};\r\n\r\n    #define LightMode_Mix      0\r\n    #define LightMode_RealTime 1\r\n\r\nint getAttenuationByMode(float lightMapMode)\r\n{\r\n    #ifdef LIGHTMAP // mix 0 realtime 1\r\n    return int(lightMapMode);\r\n    #else // LIGHTMAP\r\n\r\n\t#ifdef VOLUMETRICGI\r\n    return int(lightMapMode);\r\n\t#endif // VOLUMETRICGI\r\n\r\n    #endif // LIGHTMAP\r\n    return LightMode_RealTime;\r\n}\r\n\r\n    #if defined(DIRECTIONLIGHT) || defined(POINTLIGHT) || defined(SPOTLIGHT)\r\n\r\n\t#define LIGHTING\r\n\r\n// 灯光衰减函数\r\nfloat attenuation(in vec3 L, in float invLightRadius)\r\n{\r\n    float fRatio = clamp(length(L) * invLightRadius, 0.0, 1.0);\r\n    fRatio *= fRatio;\r\n    return 1.0 / (1.0 + 25.0 * fRatio) * clamp(4.0 * (1.0 - fRatio), 0.0, 1.0);\r\n}\r\n\r\n// 平行光\r\nLight getLight(in DirectionLight directionLight)\r\n{\r\n    Light light;\r\n    light.color = directionLight.color;\r\n    light.dir = directionLight.direction;\r\n    light.attenuation = directionLight.attenuation;\r\n    return light;\r\n}\r\n\r\n// 点光\r\nLight getLight(in PointLight pointLight, in vec3 normalWS, in vec3 positionWS)\r\n{\r\n    vec3 lightDirection = positionWS - pointLight.position;\r\n    float rangeAttenuate = attenuation(lightDirection, 1.0 / pointLight.range);\r\n\r\n    Light light;\r\n    light.color = pointLight.color * rangeAttenuate;\r\n    light.dir = normalize(lightDirection);\r\n    light.attenuation = pointLight.attenuation;\r\n    return light;\r\n}\r\n\r\n// 聚光灯\r\nLight getLight(in SpotLight spotLight, in vec3 normalWS, in vec3 positionWS)\r\n{\r\n    vec3 lightDirection = positionWS - spotLight.position;\r\n    vec3 normalizeLightDir = normalize(lightDirection);\r\n\r\n    vec2 cosAngles = cos(vec2(spotLight.spot, spotLight.spot * 0.5) * 0.5);\r\n    float dirAttenuate = dot(spotLight.direction, normalizeLightDir);\r\n    dirAttenuate *= smoothstep(cosAngles.x, cosAngles.y, dirAttenuate);\r\n\r\n    float rangeAttenuate = attenuation(lightDirection, 1.0 / spotLight.range);\r\n\r\n    Light light;\r\n    light.color = spotLight.color * rangeAttenuate * dirAttenuate;\r\n    light.dir = normalizeLightDir;\r\n    light.attenuation = spotLight.attenuation;\r\n    return light;\r\n}\r\n\r\n\t#ifdef LEGACYSINGLELIGHTING\r\n\t    #define CalculateLightCount 1\r\n\t    #define DirectionCount\t1\r\n\r\n\t    #ifdef DIRECTIONLIGHT\r\nuniform vec3 u_DirLightColor;\r\nuniform vec3 u_DirLightDirection;\r\nuniform int u_DirLightMode;\r\n\t    #endif // DIRECTIONLIGHT\r\n\r\n\t    #ifdef POINTLIGHT\r\n// uniform PointLight u_PointLight;\r\nuniform vec3 u_PointLightColor;\r\nuniform vec3 u_PointLightPos;\r\nuniform float u_PointLightRange;\r\nuniform int u_PointLightMode;\r\n\t    #endif // POINTLIGHT\r\n\r\n\t    #ifdef SPOTLIGHT\r\n// uniform SpotLight u_SpotLight;\r\nuniform vec3 u_SpotLightPos;\r\nuniform vec3 u_SpotLightColor;\r\nuniform vec3 u_SpotLightDirection;\r\nuniform float u_SpotLightRange;\r\nuniform float u_SpotLightSpot;\r\nuniform int u_SpotLightMode;\r\n\t    #endif // SPOTLIGHT\r\n\r\n\t#else // LEGACYSINGLELIGHTING\r\n\t    #define CalculateLightCount MAX_LIGHT_COUNT\r\n\t    #define DirectionCount\tu_DirationLightCount\r\n\r\nuniform sampler2D u_LightBuffer;\r\n\r\n\t    #ifdef DIRECTIONLIGHT\r\nuniform mediump int u_DirationLightCount;\r\n\t    #endif\r\n\r\n\t    #if defined(POINTLIGHT) || defined(SPOTLIGHT)\r\nconst int c_ClusterBufferWidth = CLUSTER_X_COUNT * CLUSTER_Y_COUNT;\r\nint c_ClusterBufferHeight = CLUSTER_Z_COUNT * (1 + int(ceil(float(MAX_LIGHT_COUNT_PER_CLUSTER) / 4.0))); //兼容WGSL\r\nconst int c_ClusterBufferFloatWidth = c_ClusterBufferWidth * 4;\r\nuniform sampler2D u_LightClusterBuffer;\r\n\r\nint getLightIndex(in int offset, in int index)\r\n{\r\n    int totalOffset = offset + index;\r\n    int row = totalOffset / c_ClusterBufferFloatWidth;\r\n    int lastRowFloat = totalOffset - row * c_ClusterBufferFloatWidth;\r\n    int col = lastRowFloat / 4;\r\n    vec2 uv = vec2((float(col) + 0.5) / float(c_ClusterBufferWidth), (float(row) + 0.5) / float(c_ClusterBufferHeight));\r\n    vec4 texPixel = texture2D(u_LightClusterBuffer, uv);\r\n    int pixelComponent = lastRowFloat - col * 4;\r\n\r\n\t\t#ifdef GRAPHICS_API_GLES3\r\n    return int(texPixel[pixelComponent]);\r\n\t\t#else\r\n    if (pixelComponent == 0)\r\n\treturn int(texPixel.x);\r\n    else if (pixelComponent == 1)\r\n\treturn int(texPixel.y);\r\n    else if (pixelComponent == 2)\r\n\treturn int(texPixel.z);\r\n    else\r\n\treturn int(texPixel.w);\r\n\t\t#endif\r\n}\r\n\t    #endif // POINTLIGHT || SPOTLIGHT\r\n\r\n\t#endif // LEGACYSINGLELIGHTING\r\n\r\n\t#ifdef DIRECTIONLIGHT\r\nDirectionLight getDirectionLight(in int index, in vec3 positionWS)\r\n{\r\n    DirectionLight light;\r\n\t    #ifdef LEGACYSINGLELIGHTING\r\n    light.color = u_DirLightColor;\r\n    light.direction = u_DirLightDirection;\r\n    light.attenuation = 1.0;\r\n    light.lightMode = getAttenuationByMode(float(u_DirLightMode));\r\n\t    #else // LEGACYSINGLELIGHTING\r\n    float v = (float(index) + 0.5) / float(CalculateLightCount);\r\n    vec4 p1 = texture2D(u_LightBuffer, vec2(0.125, v));\r\n    vec4 p2 = texture2D(u_LightBuffer, vec2(0.375, v));\r\n    light.color = p1.rgb;\r\n    light.direction = p2.rgb;\r\n    light.attenuation = 1.0;\r\n    light.lightMode = getAttenuationByMode(p1.a);\r\n\t    #endif // LEGACYSINGLELIGHTING\r\n\r\n\t    #if defined(CALCULATE_SHADOWS)\r\n    if (index == 0)\r\n\t{\r\n\t    vec4 shadowCoord = getShadowCoord(positionWS);\r\n\t    float shadowAttenuation = sampleShadowmap(shadowCoord);\r\n\t    light.attenuation = shadowAttenuation;\r\n\t}\r\n\t    #endif // CALCULATE_SHADOWS\r\n\r\n    return light;\r\n}\r\n\t#endif // DIRECTIONLIGHT\r\n\r\n\t#if defined(POINTLIGHT) || defined(SPOTLIGHT)\r\nivec4 getClusterInfo(mat4 viewMatrix, vec4 viewport, vec3 positionWS, vec4 fragCoord, vec4 projectParams)\r\n{\r\n\t    #ifdef LEGACYSINGLELIGHTING\r\n    return ivec4(1, 1, 0, 0);\r\n\t    #else // LEGACYSINGLELIGHTING\r\n    // todo  这个地方 用 positionVS 替换?\r\n    vec3 viewPos = vec3(viewMatrix * vec4(positionWS, 1.0));\r\n    int clusterXIndex = int(floor(fragCoord.x / (float(viewport.z) / float(CLUSTER_X_COUNT))));\r\n    int clusterYIndex = int(floor((viewport.w * (projectParams.z < 0.0 ? 0.0 : 1.0) - fragCoord.y * projectParams.z) / (float(viewport.w) / float(CLUSTER_Y_COUNT))));\r\n    float zSliceParam = float(CLUSTER_Z_COUNT) / log2(projectParams.y / projectParams.x);\r\n    int clusterZIndex = int(floor(log2(-viewPos.z) * zSliceParam - log2(projectParams.x) * zSliceParam));\r\n    // todo 化简\r\n    vec2 uv = vec2((float(clusterXIndex + clusterYIndex * CLUSTER_X_COUNT) + 0.5) / float(c_ClusterBufferWidth), (float(clusterZIndex) + 0.5) / float(c_ClusterBufferHeight));\r\n    vec4 clusterPixel = texture2D(u_LightClusterBuffer, uv);\r\n    return ivec4(clusterPixel); // X:Point Count Y:Spot Count Z、W:Light Offset\r\n\t    #endif // LEGACYSINGLELIGHTING\r\n}\r\n\t#endif // POINTLIGHT || SPOTLIGHT\r\n\r\n\t#ifdef POINTLIGHT\r\nPointLight getPointLight(in int index, in ivec4 clusterInfo, in vec3 positionWS)\r\n{\r\n\r\n    PointLight light;\r\n\t    #ifdef LEGACYSINGLELIGHTING\r\n    light.color = u_PointLightColor;\r\n    light.position = u_PointLightPos;\r\n    light.range = u_PointLightRange;\r\n    light.attenuation = 1.0;\r\n    light.lightMode = getAttenuationByMode(float(u_PointLightMode));\r\n\t    #else // LEGACYSINGLELIGHTING\r\n    // todo  重复计算\r\n    int indexOffset = clusterInfo.z * c_ClusterBufferFloatWidth + clusterInfo.w;\r\n    int pointIndex = getLightIndex(indexOffset, index);\r\n    float v = (float(pointIndex) + 0.5) / float(CalculateLightCount);\r\n    vec4 p1 = texture2D(u_LightBuffer, vec2(0.125, v));\r\n    vec4 p2 = texture2D(u_LightBuffer, vec2(0.375, v));\r\n    light.color = p1.rgb;\r\n    light.range = p1.a;\r\n    light.position = p2.rgb;\r\n    light.attenuation = 1.0;\r\n    light.lightMode = getAttenuationByMode(p2.a);\r\n\t    #endif // LEGACYSINGLELIGHTING\r\n    return light;\r\n}\r\n\t#endif // POINTLIGHT\r\n\r\n\t#ifdef SPOTLIGHT\r\nSpotLight getSpotLight(in int index, in ivec4 clusterInfo, in vec3 positionWS)\r\n{\r\n    SpotLight light;\r\n\r\n\t    #ifdef LEGACYSINGLELIGHTING\r\n    light.color = u_SpotLightColor;\r\n    light.position = u_SpotLightPos;\r\n    light.range = u_SpotLightRange;\r\n    light.direction = u_SpotLightDirection;\r\n    light.spot = u_SpotLightSpot;\r\n    light.attenuation = 1.0;\r\n    light.lightMode = getAttenuationByMode(float(u_SpotLightMode));\r\n\t    #else // LEGACYSINGLELIGHTING\r\n    // todo  重复计算\r\n    int indexOffset = clusterInfo.z * c_ClusterBufferFloatWidth + clusterInfo.w;\r\n    int spotIndex = getLightIndex(indexOffset, index + clusterInfo.x);\r\n    float v = (float(spotIndex) + 0.5) / float(CalculateLightCount);\r\n    vec4 p1 = texture2D(u_LightBuffer, vec2(0.125, v));\r\n    vec4 p2 = texture2D(u_LightBuffer, vec2(0.375, v));\r\n    vec4 p3 = texture2D(u_LightBuffer, vec2(0.625, v));\r\n    light.color = p1.rgb;\r\n    light.range = p1.a;\r\n    light.position = p2.rgb;\r\n    light.spot = p2.a;\r\n    light.direction = p3.rgb;\r\n    light.attenuation = 1.0;\r\n    light.lightMode = getAttenuationByMode(p3.a);\r\n\t    #endif // LEGACYSINGLELIGHTING\r\n\r\n\t    #if defined(CALCULATE_SPOTSHADOWS)\r\n    if (index == 0)\r\n\t{\r\n\t    vec4 shadowCoord = getSpotShadowCoord(positionWS);\r\n\t    float shadowAttenuation = sampleSpotShadowmap(shadowCoord);\r\n\t    light.attenuation = shadowAttenuation;\r\n\t}\r\n\t    #endif // CALCULATE_SPOTSHADOWS\r\n\r\n    return light;\r\n}\r\n\t#endif // SPOTLIGHT\r\n\r\n    #endif // DIRECTIONLIGHT || POINTLIGHT || SPOTLIGHT\r\n\r\n#endif // Lighting_lib'),t.Shader3D.addInclude("globalIllumination.glsl",'#if !defined(globalIllumination_lib)\r\n    #define globalIllumination_lib\r\n\r\n    #ifdef VOLUMETRICGI\r\n\t#include "VolumetricGI.glsl";\r\n    #endif // VOLUMETRICGI\r\n\r\nvec3 rotateByYAixs(in vec3 normal)\r\n{\r\n    float co = cos(u_GIRotate);\r\n    float si = sin(u_GIRotate);\r\n    float x = normal.x * co - normal.z * si;\r\n    float z = normal.x * si + normal.z * co;\r\n    return vec3(x, normal.y, z);\r\n}\r\n\r\nvec4 rotateByYAixs(in vec4 normal)\r\n{\r\n    float co = cos(u_GIRotate);\r\n    float si = sin(u_GIRotate);\r\n    float x = normal.x * co - normal.z * si;\r\n    float z = normal.x * si + normal.z * co;\r\n    return vec4(x, normal.y, z, normal.w);\r\n}\r\nuniform float u_AmbientIntensity;\r\nuniform float u_ReflectionIntensity;\r\n\r\n    #ifdef GI_IBL\r\n\r\nuniform vec3 u_IblSH[9];\r\n\r\nuniform samplerCube u_IBLTex;\r\nuniform float u_IBLRoughnessLevel;\r\n\r\n//#define IBL_ROUGHNESS_LEVEL u_IBLRoughnessLevel //兼容WGSL\r\n\r\n// todo 格式\r\nvec3 diffuseIrradiance(in vec3 normalWS)\r\n{\r\n    // todo cmeng 生成的数据问题， 临时转换下\r\n    vec3 n = normalWS * vec3(-1.0, 1.0, 1.0);\r\n    n = rotateByYAixs(n);\r\n    return max(\r\n\t       u_IblSH[0]\r\n\t\t   + u_IblSH[1] * n.y\r\n\t\t   + u_IblSH[2] * n.z\r\n\t\t   + u_IblSH[3] * n.x\r\n\t\t   + u_IblSH[4] * (n.y * n.x)\r\n\t\t   + u_IblSH[5] * (n.y * n.z)\r\n\t\t   + u_IblSH[6] * (3.0 * n.z * n.z - 1.0)\r\n\t\t   + u_IblSH[7] * (n.z * n.x)\r\n\t\t   + u_IblSH[8] * (n.x * n.x - n.y * n.y),\r\n\t       0.0)\r\n\t* u_AmbientIntensity;\r\n}\r\n\r\nvec3 diffuseIrradiance(in vec3 normalWS, in vec3 positionWS, in vec3 viewDir)\r\n{\r\n\t#ifdef VOLUMETRICGI\r\n    vec3 surfaceBias = VolumetricGISurfaceBias(normalWS, viewDir);\r\n    return VolumetricGIVolumeIrradiance(positionWS, surfaceBias, normalWS) * u_AmbientIntensity;\r\n\t#else // VOLUMETRICGI\r\n    return diffuseIrradiance(normalWS);\r\n\t#endif // VOLUMETRICGI\r\n}\r\n\r\nvec3 specularRadiance(in vec3 r, in float perceptualRoughness)\r\n{\r\n    float lod = u_IBLRoughnessLevel * perceptualRoughness * (2.0 - perceptualRoughness); //兼容WGSL\r\n\r\n    // todo 临时转换\r\n    vec3 reflectDir = r * vec3(-1.0, 1.0, 1.0);\r\n\r\n    // todo rotateY SceneConfig\r\n    reflectDir = rotateByYAixs(reflectDir);\r\n\r\n    // todo float 编码 ?\r\n    #ifdef LOD_TEXTURE_SAMPLE\r\n    vec4 reflectSampler = textureCubeLodEXT(u_IBLTex, reflectDir, lod);\r\n    #else\r\n    vec4 reflectSampler = textureLod(u_IBLTex, reflectDir, lod); //兼容WGSL\r\n    #endif\r\n\r\n\t#ifdef IBL_RGBD\r\n    return decodeRGBD(reflectSampler) * u_ReflectionIntensity;\r\n\t#else // IBL_RGBD\r\n    return reflectSampler.rgb * u_ReflectionIntensity;\r\n\t#endif // IBL_RGBD\r\n}\r\n\r\n    #endif // GI_IBL\r\n\r\n    #ifdef GI_LEGACYIBL\r\n\r\nuniform vec4 u_AmbientSHAr;\r\nuniform vec4 u_AmbientSHAg;\r\nuniform vec4 u_AmbientSHAb;\r\nuniform vec4 u_AmbientSHBr;\r\nuniform vec4 u_AmbientSHBg;\r\nuniform vec4 u_AmbientSHBb;\r\nuniform vec4 u_AmbientSHC;\r\n\r\n\t#define LAYA_SPECCUBE_LOD_STEPS 6.0\r\nuniform samplerCube u_ReflectTexture;\r\nuniform vec4 u_ReflectCubeHDRParams;\r\n\r\nvec3 shEvalLinearL0L1(in vec4 normal)\r\n{\r\n    vec3 x;\r\n    x.r = dot(u_AmbientSHAr, normal);\r\n    x.g = dot(u_AmbientSHAg, normal);\r\n    x.b = dot(u_AmbientSHAb, normal);\r\n    return x;\r\n}\r\n\r\nvec3 shEvalLinearL2(in vec4 normal)\r\n{\r\n    vec3 x1, x2;\r\n    // 4 of the quadratic (L2) polynomials\r\n    vec4 vB = normal.xyzz * normal.yzzx;\r\n    x1.r = dot(u_AmbientSHBr, vB);\r\n    x1.g = dot(u_AmbientSHBg, vB);\r\n    x1.b = dot(u_AmbientSHBb, vB);\r\n\r\n    // Final (5th) quadratic (L2) polynomial\r\n    float vC = normal.x * normal.x - normal.y * normal.y;\r\n    x2 = u_AmbientSHC.rgb * vC;\r\n\r\n    return x1 + x2;\r\n}\r\n\r\nvec3 diffuseIrradiance(in vec3 normalWS)\r\n{\r\n    // todo -x 坐标转换\r\n    vec4 normal = vec4(-normalWS.x, normalWS.yz, 1.0);\r\n\r\n    // TODO rotate y SceneConfig\r\n\r\n    normal = rotateByYAixs(normal);\r\n\r\n    vec3 ambientContrib = shEvalLinearL0L1(normal);\r\n    ambientContrib += shEvalLinearL2(normal);\r\n    vec3 ambient = max(vec3(0.0), ambientContrib);\r\n\r\n    return ambient * u_AmbientIntensity;\r\n}\r\n\r\nvec3 diffuseIrradiance(in vec3 normalWS, in vec3 positionWS, in vec3 viewDir)\r\n{\r\n\t#ifdef VOLUMETRICGI\r\n    vec3 surfaceBias = VolumetricGISurfaceBias(normalWS, viewDir);\r\n    return VolumetricGIVolumeIrradiance(positionWS, surfaceBias, normalWS) * u_AmbientIntensity;\r\n\t#else // VOLUMETRICGI\r\n    return diffuseIrradiance(normalWS);\r\n\t#endif // VOLUMETRICGI\r\n}\r\n\r\nvec3 specularRadiance(in vec3 r, in float perceptualRoughness)\r\n{\r\n    float roughness = perceptualRoughness * (1.7 - 0.7 * perceptualRoughness);\r\n    // todo 临时转换\r\n    r *= vec3(-1.0, 1.0, 1.0);\r\n    r = rotateByYAixs(r);\r\n\r\n    float lod = roughness * LAYA_SPECCUBE_LOD_STEPS;\r\n    vec4 rgbm = textureCubeLodEXT(u_ReflectTexture, r, lod);\r\n    float range = u_ReflectCubeHDRParams.x;\r\n    vec3 color = decodeRGBM(rgbm, range);\r\n    color = gammaToLinear(color);\r\n    return color * u_ReflectionIntensity;\r\n}\r\n\r\n    #endif // GI_LEGACYIBL\r\n\r\n    #ifndef GI_IBL\r\n\t#ifndef GI_LEGACYIBL\r\n\r\nuniform vec4 u_AmbientColor;\r\n\r\nvec3 diffuseIrradiance(in vec3 normalWS)\r\n{\r\n    return u_AmbientColor.rgb * u_AmbientIntensity;\r\n}\r\n\r\nvec3 diffuseIrradiance(in vec3 normalWS, in vec3 positionWS, in vec3 viewDir)\r\n{\r\n    return diffuseIrradiance(normalWS);\r\n}\r\n\r\nvec3 specularRadiance(in vec3 r, in float perceptualRoughness)\r\n{\r\n    // todo\r\n    return u_AmbientColor.rgb * u_ReflectionIntensity;\r\n}\r\n\r\n\t#endif // GI_LEGACYIBL\r\n    #endif // GI_IBL\r\n\r\n    #ifdef LIGHTMAP\r\n\r\n\t#ifdef UV1\r\n\t    #define USELIGHTMAP\r\n\t#endif // UV1\r\n\r\nuniform sampler2D u_LightMap;\r\n\r\n\t#ifdef LIGHTMAP_DIRECTIONAL\r\n\r\nuniform sampler2D u_LightMapDirection;\r\n\r\nvec3 DecodeDirectionalLightmap(in vec2 lightmapUV, in vec3 bakeColor, in vec3 normalWS)\r\n{\r\n    vec4 dirLightmap = texture2D(u_LightMapDirection, lightmapUV);\r\n    vec3 lightdir = normalize(dirLightmap.xyz - vec3(0.5)); // 0-1  => -0.5-0.5\r\n    //根据法线计算半兰伯特\r\n    float halfLambert = clamp(dot(normalWS, lightdir), 0.0, 1.0) * 0.5 + 0.5;\r\n    return bakeColor * halfLambert / max(dirLightmap.w, 0.001);\r\n}\r\n\r\n\t#endif // LIGHTMAP_DIRECTIONAL\r\n\r\nvec3 getBakedLightmapColor(in vec2 lightmapUV, in vec3 normalWS)\r\n{\r\n    vec4 lightmapSampler = texture2D(u_LightMap, lightmapUV);\r\n\t// todo lightmap rgbm encode color space\r\n    lightmapSampler.rgb =  decodeRGBM(lightmapSampler,5.0);\r\n\r\n\t//#ifdef Gamma_u_LightMap\r\n    lightmapSampler = gammaToLinear(lightmapSampler);\r\n\t//#endif // Gamma_u_LightMap\r\n\r\n\t#ifdef LIGHTMAP_DIRECTIONAL\r\n    lightmapSampler.rgb = DecodeDirectionalLightmap(lightmapUV, lightmapSampler.rgb, normalWS);\r\n\t#endif // LIGHTMAP_DIRECTIONAL\r\n\r\n    return lightmapSampler.rgb;\r\n}\r\n\r\n    #endif // LIGHTMAP\r\n\r\n    #ifdef SPECCUBE_BOX_PROJECTION\r\n\r\nuniform vec3 u_SpecCubeProbePosition;\r\nuniform vec3 u_SpecCubeBoxMax;\r\nuniform vec3 u_SpecCubeBoxMin;\r\n\r\nvec3 getBoxProjectionReflectedVector(vec3 r, vec3 positionWS)\r\n{\r\n    vec3 boxCenter = u_SpecCubeProbePosition;\r\n    vec3 boxMin = u_SpecCubeBoxMin;\r\n    vec3 boxMax = u_SpecCubeBoxMax;\r\n\r\n    vec3 nr = normalize(r);\r\n    vec3 rbmax = boxMax - positionWS;\r\n    vec3 rbmin = boxMin - positionWS;\r\n    vec3 select = step(vec3(0.0), r);\r\n    vec3 rbminmax = mix(rbmin, rbmax, select) / nr;\r\n    float scalar = vecmin(rbminmax);\r\n    vec3 boxr = nr * scalar + positionWS - boxCenter;\r\n    return boxr;\r\n}\r\n\r\n    #endif // SPECCUBE_BOX_PROJECTION\r\n\r\n#endif // globalIllumination_lib'),t.Shader3D.addInclude("Oct.glsl","#if !defined(Oct_lib)\r\n    #define Oct_lib\r\n\r\nfloat signNotZero(in float k) { return k >= 0.0 ? 1.0 : -1.0; }\r\n\r\nvec2 signNotZero(in vec2 v) { return vec2(signNotZero(v.x), signNotZero(v.y)); }\r\n\r\n/**\r\n * v: normalized sample dir\r\n * @return: oct encode uv [-1, 1]\r\n */\r\nvec2 octEncode(in vec3 v)\r\n{\r\n    float l1norm = abs(v.x) + abs(v.y) + abs(v.z);\r\n    vec2 result = v.xy * (1.0 / l1norm);\r\n    if (v.z < 0.0)\r\n\t{\r\n\t    result = (1.0 - abs(result.yx)) * signNotZero(result.xy);\r\n\t}\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * x: u [-1, 1]\r\n * y: v [-1, 1]\r\n * @return: normalized sample dir\r\n */\r\nvec3 finalDecode(float x, float y)\r\n{\r\n    vec3 v = vec3(x, y, 1.0 - abs(x) - abs(y));\r\n    if (v.z < 0.0)\r\n\t{\r\n\t    v.xy = (1.0 - abs(v.yx)) * signNotZero(v.xy);\r\n\t}\r\n    return normalize(v);\r\n}\r\n\r\n/**\r\n * dir: cubemap sample dir\r\n * outsize: probe size with border (x: probe x, y: probe y, z: 1 / probe x, w: 1\r\n * / probe y) gridsize: probe grid size (x: probe x index, y: probe y index, z:\r\n * grid x size, w: grid y size)\r\n * @return texture coord [0, 1]\r\n */\r\nvec2 textureCoordFromDirection(in vec3 dir, vec4 outSize, vec4 gridSize)\r\n{\r\n    vec2 uv = (octEncode(normalize(dir))) * 0.5 + 0.5;\r\n    uv = uv * (outSize.xy - vec2(2.0, 2.0)) * outSize.zw + outSize.zw;\r\n    uv = gridSize.xy * (1.0 / gridSize.zw) + uv * (1.0 / gridSize.zw);\r\n    return uv;\r\n}\r\n\r\n#endif // Oct_lib"),t.Shader3D.addInclude("GridHelpers.glsl","#if !defined(GridHelpers_lib)\r\n    #define GridHelpers_lib\r\n\r\nint imod(int x, int y)\r\n{\r\n    #ifdef GRAPHICS_API_GLES3\r\n    return x % y;\r\n    #else // GRAPHICS_API_GLES3\r\n    return x - (x / y) * y;\r\n    #endif // GRAPHICS_API_GLES3\r\n}\r\n\r\nint gridCoordToProbeIndex(in ivec3 probeCoords, const in ivec3 probeCounts)\r\n{\r\n    return probeCoords.x + probeCoords.y * probeCounts.x + probeCoords.z * probeCounts.x * probeCounts.y;\r\n}\r\n\r\nivec3 probeIndexToGridcoord(in int probeIndex, const in ivec3 probeCounts)\r\n{\r\n    ivec3 iPos;\r\n    iPos.x = imod(probeIndex, probeCounts.x);\r\n    iPos.y = imod(probeIndex, (probeCounts.x * probeCounts.y)) / probeCounts.x;\r\n    iPos.z = probeIndex / (probeCounts.x * probeCounts.y);\r\n    return iPos;\r\n\r\n    //   ivec3 iPos;\r\n    //   iPos.x = probeIndex & (probeCounts.x - 1);\r\n    //   iPos.y = (probeIndex & ((probeCounts.x * probeCounts.y) - 1)) >>\r\n    //            findMSB(probeCounts.x);\r\n    //   iPos.z = probeIndex >> findMSB(probeCounts.x * probeCounts.y);\r\n    //   return iPos;\r\n}\r\n\r\nvec3 gridCoordToPosition(in ivec3 coord, const in vec3 probeStep,\r\n    const in vec3 probeStartPosition)\r\n{\r\n    return (vec3(coord) + 0.5) * probeStep + probeStartPosition;\r\n}\r\n\r\nivec3 baseGridCoord(in vec3 position, in vec3 probeStep,\r\n    in vec3 probeStartPosition, in ivec3 probeCounts)\r\n{\r\n    probeStartPosition += 0.5 * probeStep;\r\n    return ivec3(clamp(vec3((position - probeStartPosition) / probeStep),\r\n\tvec3(0, 0, 0), vec3(probeCounts) - vec3(1, 1, 1)));\r\n}\r\n\r\n#endif // GridHelpers_lib"),t.Shader3D.addInclude("VolumetricGI.glsl",'// https://jcgt.org/published/0008/02/01/\r\n\r\n#if !defined(VolumetricGI_lib)\r\n    #define VolumetricGI_lib\r\n\r\n    #include "Oct.glsl";\r\n    #include "GridHelpers.glsl";\r\n\r\nuniform vec3 u_VolGIProbeCounts;\r\nuniform vec3 u_VolGIProbeStep;\r\nuniform vec3 u_VolGIProbeStartPosition;\r\nuniform vec4 u_VolGIProbeParams;\r\n\r\nstruct VolumetricGI {\r\n    vec3 probeCounts;\r\n    vec3 probeStep;\r\n    vec3 probeStartPosition;\r\n    vec4 probeParams; // x: irradianceTexels, y: distanceTexels, z: normalBias, w: viewBias\r\n};\r\n\r\nuniform sampler2D u_ProbeIrradiance;\r\nuniform sampler2D u_ProbeDistance;\r\n\r\nvec2 porbeGridCoordToTextureGridCoord(in ivec3 porbeGridCoord,\r\n    in ivec3 probeCounts,\r\n    in vec2 textureGridSize)\r\n{\r\n    int probeIndex = gridCoordToProbeIndex(porbeGridCoord, probeCounts);\r\n    ivec2 index;\r\n    index.x = imod(probeIndex, (probeCounts.x * probeCounts.y));\r\n    index.y = probeIndex / (probeCounts.x * probeCounts.y);\r\n\r\n    vec2 textureGridCoord = vec2(index);\r\n    textureGridCoord.y = textureGridCoord.y;\r\n    return textureGridCoord;\r\n}\r\n\r\nvec3 VolumetricGISurfaceBias(in vec3 surfaceNormal, in vec3 cameraDirection)\r\n{\r\n    return surfaceNormal * u_VolGIProbeParams.z + cameraDirection * u_VolGIProbeParams.w;\r\n}\r\n\r\nvec3 VolumetricGIVolumeIrradiance(in vec3 worldPosition, in vec3 surfaceBias,\r\n    in vec3 direction)\r\n{\r\n    // direction *= vec3(-1.0, 1.0, 1.0);\r\n    ivec3 porbeCounts = ivec3(u_VolGIProbeCounts);\r\n    vec3 probeStep = u_VolGIProbeStep;\r\n    vec3 probeStartPosition = u_VolGIProbeStartPosition;\r\n    vec2 volumeCounts = vec2(porbeCounts.x * porbeCounts.y, porbeCounts.z);\r\n    vec4 irradianceTexels = vec4(u_VolGIProbeParams.x, u_VolGIProbeParams.x, 1.0 / u_VolGIProbeParams.x, 1.0 / u_VolGIProbeParams.x);\r\n    vec4 distanceTexels = vec4(u_VolGIProbeParams.y, u_VolGIProbeParams.y, 1.0 / u_VolGIProbeParams.y, 1.0 / u_VolGIProbeParams.y);\r\n\r\n    ivec3 maxGridCoord = porbeCounts - ivec3(1);\r\n\r\n    vec3 irradiance = vec3(0.0);\r\n    float accumulatedWeights = 0.0;\r\n\r\n    // Bias the world space position\r\n    vec3 biasedWorldPosition = worldPosition + surfaceBias;\r\n\r\n    // Get the 3D grid coordinates of the probe nearest the biased world position\r\n    // (i.e. the "base" probe)\r\n    ivec3 baseProbeCoords = baseGridCoord(biasedWorldPosition, probeStep,\r\n\tprobeStartPosition, porbeCounts);\r\n\r\n    // Get the world-space position of the base probe (ignore relocation)\r\n    vec3 baseProbeWorldPosition = gridCoordToPosition(baseProbeCoords, probeStep, probeStartPosition);\r\n\r\n    // Clamp the distance (in grid space) between the given point and the base\r\n    // probe\'s world position (on each axis) to [0, 1]\r\n    vec3 gridSpaceDistance = biasedWorldPosition - baseProbeWorldPosition;\r\n\r\n    vec3 alpha = clamp(gridSpaceDistance / probeStep, vec3(0.0), vec3(1.0));\r\n\r\n    // Iterate over the 8 closest probes and accumulate their contributions\r\n    for (int probeIndex = 0; probeIndex < 8; probeIndex++)\r\n\t{\r\n\t    // Compute the offset to the adjacent probe in grid coordinates by sourcing\r\n\t    // the offsets from the bits of the loop index: x = bit 0, y = bit 1, z =\r\n\t    // bit 2\r\n\t    // ivec3 adjacentProbeOffset = ivec3(probeIndex, probeIndex >> 1, probeIndex >> 2) & ivec3(1, 1, 1);\r\n\t\tivec3 adjacentProbeOffset = ivec3(imod(probeIndex, 2), imod((probeIndex / 2), 2),imod( (probeIndex / 4), 2));\r\n\r\n\t    // Get the 3D grid coordinates of the adjacent probe by adding the offset to\r\n\t    // the base probe and clamping to the grid boundaries\r\n\t    ivec3 adjacentProbeCoords = ivec3(clamp(vec3(baseProbeCoords + adjacentProbeOffset), vec3(0), vec3(maxGridCoord)));\r\n\r\n\t    // Get the adjacent probe\'s world position\r\n\t    vec3 adjacentProbeWorldPosition = gridCoordToPosition(adjacentProbeCoords, probeStep, probeStartPosition);\r\n\r\n\t    // Compute the distance and direction from the (biased and non-biased)\r\n\t    // shading point and the adjacent probe\r\n\t    vec3 worldPosToAdjProbe = normalize(adjacentProbeWorldPosition - worldPosition);\r\n\t    vec3 biasedPosToAdjProbe = normalize(adjacentProbeWorldPosition - biasedWorldPosition);\r\n\t    float biasedPosToAdjProbeDist = distance(adjacentProbeWorldPosition, biasedWorldPosition);\r\n\r\n\t    // Compute trilinear weights based on the distance to each adjacent probe to\r\n\t    // smoothly transition between probes. adjacentProbeOffset is binary, so\r\n\t    // we\'re using a 1-alpha when adjacentProbeOffset = 0 and alpha when\r\n\t    // adjacentProbeOffset = 1.\r\n\t    vec3 trilinear = max(vec3(0.001), mix(1.0 - alpha, alpha, vec3(adjacentProbeOffset)));\r\n\t    float trilinearWeight = trilinear.x * trilinear.y * trilinear.z;\r\n\t    float weight = 1.0;\r\n\r\n\t    // A naive soft backface weight would ignore a probe when\r\n\t    // it is behind the surface. That\'s good for walls, but for\r\n\t    // small details inside of a room, the normals on the details\r\n\t    // might rule out all of the probes that have mutual visibility\r\n\t    // to the point. We instead use a "wrap shading" test. The small\r\n\t    // offset at the end reduces the "going to zero" impact.\r\n\t    float warpShading = (dot(worldPosToAdjProbe, direction) + 1.0) * 0.5;\r\n\t    weight *= (warpShading * warpShading) * 0.2;\r\n\r\n\t    vec2 textureGridCoord = porbeGridCoordToTextureGridCoord(\r\n\t\tadjacentProbeCoords, porbeCounts, volumeCounts);\r\n\t    // compute the octahedral coordinates of the adjacent probe\r\n\t    vec2 probeTextureUV = textureCoordFromDirection(-biasedPosToAdjProbe, distanceTexels,\r\n\t\tvec4(textureGridCoord, volumeCounts));\r\n\t    // Sample the probe\'s distance texture to get the mean distance to nearby\r\n\t    // surfaces\r\n\t    vec3 filteredDistance = texture2D(u_ProbeDistance, probeTextureUV).xyz;\r\n\t    // Find the variance of the mean distance\r\n\t    float variance = abs(filteredDistance.x * filteredDistance.x - filteredDistance.y);\r\n\r\n\t    // Occlusion test\r\n\t    float chebyshevWeight = 1.0;\r\n\t    if (biasedPosToAdjProbeDist > filteredDistance.x)\r\n\t\t{\r\n\t\t    float v = biasedPosToAdjProbeDist - filteredDistance.x;\r\n\t\t    // v must be greater than 0, which is guaranteed by the if condition\r\n\t\t    // above.\r\n\t\t    chebyshevWeight = variance / (variance + (v * v));\r\n\r\n\t\t    // Increase the contrast in the weight\r\n\t\t    chebyshevWeight = max(chebyshevWeight * chebyshevWeight * chebyshevWeight, 0.0);\r\n\t\t}\r\n\r\n\t    if (filteredDistance.z < 1.0)\r\n\t\t{\r\n\t\t    chebyshevWeight = 1.0;\r\n\t\t}\r\n\r\n\t    // Avoid visibility weights ever going all the way to zero because\r\n\t    // when *no* probe has visibility we need a fallback value\r\n\t    weight *= max(0.05, chebyshevWeight);\r\n\r\n\t    // Avoid a weight of zero\r\n\t    weight = max(0.000001, weight);\r\n\r\n\t    // A small amount of light is visible due to logarithmic perception, so\r\n\t    // crush tiny weights but keep the curve continuous\r\n\t    const float crushThreshold = 0.2;\r\n\t    if (weight < crushThreshold)\r\n\t\t{\r\n\t\t    weight *= (weight * weight) * (1.0 / (crushThreshold * crushThreshold));\r\n\t\t}\r\n\r\n\t    // Apply the trilinear weights\r\n\t    weight *= trilinearWeight;\r\n\r\n\t    probeTextureUV = textureCoordFromDirection(\r\n\t\tdirection, irradianceTexels, vec4(textureGridCoord, volumeCounts));\r\n\r\n\t    // Sample the probe\'s irradiance\r\n\t    vec3 probeIrradiance = linearToGamma(texture2D(u_ProbeIrradiance, probeTextureUV).rgb);\r\n\r\n\t    irradiance += (probeIrradiance * weight);\r\n\t    accumulatedWeights += weight;\r\n\t}\r\n\r\n    if (accumulatedWeights == 0.0)\r\n\t{\r\n\t    return vec3(0.0);\r\n\t}\r\n\r\n    irradiance *= (1.0 / accumulatedWeights); // Normalize by the accumulated weights\r\n\r\n    irradiance = gammaToLinear(irradiance);\r\n\r\n    return irradiance;\r\n}\r\n\r\n#endif // VolumetricGI_lib'),t.Shader3D.addInclude("BlinnPhongLighting.glsl",'#if !defined(BlinnPhongLighting_lib)\r\n    #define BlinnPhongLighting_lib\r\n\r\n    #include "Lighting.glsl";\r\n    #include "globalIllumination.glsl";\r\n\r\nstruct PixelInfo {\r\n    vec3 positionWS;\r\n\r\n    vec3 vertexNormalWS;\r\n    vec3 normalWS;\r\n\r\n    vec3 viewDir;\r\n\r\n    #ifdef LIGHTMAP\r\n\t#ifdef UV1\r\n    vec2 lightmapUV;\r\n\t#endif // UV1\r\n    #endif // LIGHTMAP\r\n};\r\n\r\nstruct Surface {\r\n    vec3 diffuseColor;\r\n    vec3 specularColor;\r\n    float shininess;\r\n    vec3 gloss;\r\n\r\n    vec3 normalTS;\r\n\r\n    float alpha;\r\n    float alphaClip;\r\n};\r\n\r\nvec3 BlinnPhongLighting(in Surface surface, in Light light, in PixelInfo pixel)\r\n{\r\n    vec3 l = normalize(-light.dir);\r\n    vec3 v = pixel.viewDir;\r\n\r\n    vec3 normalWS = pixel.normalWS;\r\n\r\n    vec3 diffuseColor = surface.diffuseColor;\r\n    float shininess = surface.shininess;\r\n    vec3 specularColor = surface.specularColor;\r\n    vec3 gloss = surface.gloss;\r\n\r\n    // difffuse\r\n    float ndl = max(0.0, dot(normalWS, l));\r\n    vec3 lightDiffuse = light.color * diffuseColor * ndl;\r\n\r\n    // specular\r\n    mediump vec3 h = normalize(v + l);\r\n    lowp float ndh = max(0.0, dot(h, normalWS));\r\n    float specularIntensity = pow(ndh, shininess * 128.0);\r\n    vec3 lightSpecular = light.color * specularColor * specularIntensity * gloss;\r\n\r\n    return lightDiffuse + lightSpecular;\r\n}\r\n\r\nvec3 BlinnPhongGI(const in Surface surface, const in PixelInfo info)\r\n{\r\n    vec3 indirect = vec3(0.0);\r\n\r\n    #ifdef LIGHTMAP\r\n\t#ifdef UV1\r\n\r\n    vec2 lightmapUV = info.lightmapUV;\r\n    vec3 bakedColor = getBakedLightmapColor(lightmapUV, info.normalWS);\r\n\r\n    // todo  surface.diffuseColor ？\r\n    indirect = bakedColor * surface.diffuseColor;\r\n\r\n\t#endif // UV1\r\n\r\n    #else // LIGHTMAP\r\n\r\n    vec3 n = info.normalWS;\r\n    indirect = diffuseIrradiance(n) * surface.diffuseColor;\r\n\r\n    #endif // LIGHTMAP\r\n\r\n    return indirect;\r\n}\r\n\r\n#endif // BlinnPhongLighting_lib'),t.Shader3D.addInclude("PBRLighting.glsl",'#if !defined(PBRLighting_lib)\r\n    #define PBRLighting_lib\r\n\r\n    #include "Lighting.glsl";\r\n\r\n    // 精度\r\n    #if !defined(GL_FRAGMENT_PRECISION_HIGH)\r\n\t#define MIN_PERCEPTUAL_ROUGHNESS 0.089\r\n\t#define MIN_ROUGHNESS\t\t 0.007921\r\n    #else\r\n\t#define MIN_PERCEPTUAL_ROUGHNESS 0.045\r\n\t#define MIN_ROUGHNESS\t\t 0.002025\r\n    #endif\r\n\r\n    #define MIN_N_DOT_V 1e-4\r\n\r\n    #include "BRDF.glsl";\r\n\r\nstruct PixelInfo {\r\n    vec3 positionWS;\r\n\r\n    vec3 vertexNormalWS;\r\n    vec3 normalWS;\r\n    vec3 tangentWS;\r\n    vec3 biNormalWS;\r\n\r\n    vec3 viewDir;\r\n    float NoV;\r\n\r\n    vec3 dfg;\r\n    vec3 energyCompensation;\r\n\r\n    #ifdef IRIDESCENCE\r\n    vec3 iridescenceFresnel;\r\n    #endif // IRIDESCENCE\r\n\r\n    #ifdef CLEARCOAT\r\n    vec3 clearCoatNormal;\r\n    float clearCoatNoV;\r\n    #endif // CLEARCOAT\r\n\r\n    #ifdef SHEEN\r\n    float sheenScaling;\r\n    float sheenDfg;\r\n    #endif // SHEEN\r\n\r\n    #ifdef ANISOTROPIC\r\n    vec3 anisotropicT;\r\n    vec3 anisotropicB;\r\n    float ToV;\r\n    float BoV;\r\n    float at;\r\n    float ab;\r\n    #endif // ANISOTROPIC\r\n\r\n    #ifdef THICKNESS\r\n    vec4 worldScale;\r\n    #endif // THICKNESS\r\n\r\n    #ifdef LIGHTMAP\r\n\t#ifdef UV1\r\n    vec2 lightmapUV;\r\n\t#endif // UV1\r\n    #endif // LIGHTMAP\r\n};\r\n\r\nstruct Surface {\r\n    vec3 diffuseColor;\r\n    float alpha;\r\n    vec3 f0;\r\n    vec3 f90;\r\n    float roughness;\r\n    float perceptualRoughness;\r\n    float occlusion;\r\n\r\n    #ifdef EMISSION\r\n    vec3 emissionColor;\r\n    #endif // EMISSION\r\n\r\n    vec3 normalTS;\r\n\r\n    float ior;\r\n\r\n    #ifdef CLEARCOAT\r\n    float clearCoat;\r\n    float clearCoatRoughness;\r\n    float clearCoatPerceptualRoughness;\r\n\t#ifdef CLEARCOAT_NORMAL\r\n    vec3 clearCoatNormalTS;\r\n\t#endif // CLEARCOAT_NORMAL\r\n    #endif // CLEARCOAT\r\n\r\n    #ifdef ANISOTROPIC\r\n    float anisotropy;\r\n    vec2 anisotropyDirection;\r\n    #endif // ANISOTROPIC\r\n\r\n    #ifdef IRIDESCENCE\r\n    float iridescence;\r\n    float iridescenceIor;\r\n    float iridescenceThickness;\r\n    #endif // IRIDESCENCE\r\n\r\n    #ifdef SHEEN\r\n    vec3 sheenColor;\r\n    float sheenRoughness;\r\n    float sheenPerceptualRoughness;\r\n    #endif // SHEEN\r\n\r\n    #ifdef TRANSMISSION\r\n    float transmission;\r\n    #endif // TRANSMISSION\r\n\r\n    #ifdef THICKNESS\r\n    float thickness;\r\n    vec3 attenuationColor;\r\n    float attenuationDistance;\r\n    #endif // THICKNESS\r\n};\r\n\r\nstruct LightParams {\r\n    vec3 l;\r\n    vec3 h;\r\n    float NoL;\r\n    float NoH;\r\n    float LoH;\r\n    float VoH;\r\n\r\n    #ifdef CLEARCOAT\r\n    float clearCoatNoH;\r\n    float clearCoatNoL;\r\n    #endif // CLEARCOAT\r\n\r\n    #ifdef ANISOTROPIC\r\n    float ToL;\r\n    float BoL;\r\n    #endif // ANISOTROPIC\r\n};\r\n\r\nvoid initLightParams(inout LightParams params, const in PixelInfo pixel, const in Light light)\r\n{\r\n    vec3 v = pixel.viewDir;\r\n    vec3 n = pixel.normalWS;\r\n\r\n    vec3 l = normalize(-light.dir);\r\n    params.l = l;\r\n\r\n    vec3 h = SafeNormalize(v + l);\r\n    params.h = h;\r\n    params.NoL = saturate(dot(n, l));\r\n    params.NoH = saturate(dot(n, h));\r\n    params.LoH = saturate(dot(l, h));\r\n    params.VoH = saturate(dot(v, h));\r\n\r\n    #ifdef CLEARCOAT\r\n    params.clearCoatNoL = saturate(dot(pixel.clearCoatNormal, l));\r\n    params.clearCoatNoH = saturate(dot(pixel.clearCoatNormal, h));\r\n    #endif // CLEARCOAT\r\n\r\n    #ifdef ANISOTROPIC\r\n    vec3 t = pixel.anisotropicT;\r\n    vec3 b = pixel.anisotropicB;\r\n    params.ToL = dot(t, l);\r\n    params.BoL = dot(b, l);\r\n    #endif // ANISOTROPIC\r\n}\r\n\r\nvec3 prefilteredDFG_LUT(float roughness, float NoV)\r\n{\r\n    vec2 samplePoint = clamp(vec2(NoV, roughness), vec2(0.0, 0.0), vec2(1.0, 1.0));\r\n    samplePoint.y = 1.0 - samplePoint.y;\r\n    #if defined(FLOATTEXTURE) && defined(FLOATTEXTURE_FIL_LINEAR)\r\n    return (texture2D(u_IBLDFG, samplePoint)).rgb;\r\n    #else\r\n    return decodeRGBD(texture2D(u_IBLDFG, samplePoint));\r\n    #endif\r\n}\r\n\r\n// todo remove\r\nvec2 EnvBRDFApproxLazarov(float roughness, float NoV)\r\n{\r\n    vec4 c0 = vec4(-1, -0.0275, -0.572, 0.022);\r\n    vec4 c1 = vec4(1, 0.0425, 1.04, -0.04);\r\n    vec4 r = roughness * c0 + c1;\r\n    float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\r\n    vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\r\n    return AB;\r\n}\r\n\r\nfloat dielectricSpecularToF0(float specular)\r\n{\r\n    return 0.08 * specular;\r\n}\r\n\r\nfloat dielectricF0ToIor(float f0)\r\n{\r\n    return 2.0 / (1.0 - sqrt(min(f0, 0.99))) - 1.0;\r\n}\r\n\r\nfloat dielectricIorToF0(float ior)\r\n{\r\n    return pow2((ior - 1.0) / (ior + 1.0));\r\n}\r\n\r\n// input dielectric f0, output surface f0\r\nvec3 computeF0(vec3 f0, vec3 baseColor, float metallic)\r\n{\r\n    return mix(f0, baseColor, metallic);\r\n}\r\n\r\n// input surface f0, output surface f90\r\nvec3 computeF90(vec3 f0)\r\n{\r\n    return vec3(saturate(dot(f0, vec3(50.0 * 0.33))));\r\n}\r\n\r\nvec3 computeDiffuse(vec3 baseColor, float metallic)\r\n{\r\n    return (1.0 - metallic) * baseColor;\r\n}\r\n\r\nfloat specularAA(float roughness, in vec3 normalWS)\r\n{\r\n\r\n    #if !defined(GRAPHICS_API_GLES3) && !defined(GL_OES_standard_derivatives)\r\n\r\n    return roughness;\r\n\r\n    #else // !GRAPHICS_API_GLES3 && !GL_OES_standard_derivatives\r\n\r\n    vec3 du = dFdx(normalWS);\r\n    vec3 dv = dFdy(normalWS);\r\n\r\n    float specularAAVariance = 0.15;\r\n    float specularAAThreshold = 0.04;\r\n\r\n    float variance = specularAAVariance * (dot(du, du) + dot(dv, dv));\r\n    float kernelRoughness = min(2.0 * variance, specularAAThreshold);\r\n\r\n    float squareRoughness = saturate(roughness * roughness + kernelRoughness);\r\n\r\n    return sqrt(squareRoughness);\r\n\r\n    #endif // !GRAPHICS_API_GLES3 && !GL_OES_standard_derivatives\r\n}\r\n\r\nvec3 diffuseLobe(in Surface surface, const in PixelInfo pixel, const in LightParams lightParams)\r\n{\r\n    return surface.diffuseColor * Fd_Lambert();\r\n    // return surface.diffuseColor * Fd_Burley(surface.roughness, pixel.NoV, lightParams.NoL, lightParams.LoH);\r\n}\r\n\r\nvec3 specularLobe(const in Surface surface, const in PixelInfo pixel, const in LightParams lightParams)\r\n{\r\n    float roughness = surface.roughness;\r\n\r\n    float D = distribution(roughness, lightParams.NoH, lightParams.h, pixel.normalWS);\r\n    float V = visibility(roughness, pixel.NoV, lightParams.NoL);\r\n    vec3 F = fresnel(surface.f0, surface.f90, lightParams.LoH);\r\n\r\n    return (D * V) * F;\r\n}\r\n\r\n    #ifdef IRIDESCENCE\r\nvec3 iridescenceDiffuseLobe(in Surface surface, const in PixelInfo pixel, const in LightParams lightParams)\r\n{\r\n    vec3 f0 = surface.f0;\r\n    vec3 f90 = vec3(1.0);\r\n    vec3 iridescenceFresnel = pixel.iridescenceFresnel;\r\n    float iridescence = surface.iridescence;\r\n    float VoH = lightParams.VoH;\r\n    return surface.diffuseColor * Fd_IridescenceLambert(f0, f90, iridescenceFresnel, iridescence, VoH);\r\n}\r\n\r\nvec3 iridescenceSpecularLobe(const in Surface surface, const in PixelInfo pixel, const in LightParams lightParams)\r\n{\r\n    float roughness = surface.roughness;\r\n    float D = distribution(roughness, lightParams.NoH, lightParams.h, pixel.normalWS);\r\n    float V = visibility(roughness, pixel.NoV, lightParams.NoL);\r\n\r\n    float iridescenceFactor = surface.iridescence;\r\n    vec3 iridescenceFresnel = pixel.iridescenceFresnel;\r\n    vec3 F = mix(fresnel(surface.f0, lightParams.LoH), iridescenceFresnel, vec3(iridescenceFactor));\r\n\r\n    return (D * V) * F;\r\n}\r\n    #endif // IRIDESCENCE\r\n\r\n    #ifdef CLEARCOAT\r\nfloat clearCoatLobe(const in Surface surface, const in PixelInfo pixel, const in LightParams lightParams)\r\n{\r\n    float roughness = surface.clearCoatRoughness;\r\n    float clearCoat = surface.clearCoat;\r\n    vec3 n = pixel.clearCoatNormal;\r\n    vec3 h = lightParams.h;\r\n    float LoH = lightParams.LoH;\r\n\r\n    float clearCoatNoH = lightParams.clearCoatNoH;\r\n\r\n    float D = distribution(roughness, clearCoatNoH, h, n);\r\n    float V = V_kelemen(LoH);\r\n\r\n    return D * V;\r\n}\r\n    #endif // CLEARCOAT\r\n\r\n    #ifdef SHEEN\r\nvec3 sheenLobe(const in Surface surface, const in PixelInfo pixel, const in LightParams lightParams)\r\n{\r\n    float roughness = surface.sheenRoughness;\r\n    float NoV = pixel.NoV;\r\n    float NoH = lightParams.NoH;\r\n    float NoL = lightParams.NoL;\r\n\r\n    float D = D_Charlie(roughness, NoH);\r\n    float V = V_Neubelt(NoV, NoL);\r\n    // F = 1.0\r\n    return D * V * surface.sheenColor;\r\n}\r\n    #endif // SHEEN\r\n\r\n    #ifdef ANISOTROPIC\r\nvec3 anisotropyLobe(const in Surface surface, const in PixelInfo pixel, const in LightParams lightParams)\r\n{\r\n    float anisotropy = surface.anisotropy;\r\n    float at = pixel.at;\r\n    float ab = pixel.ab;\r\n    vec3 anisotropicT = pixel.anisotropicT;\r\n    vec3 anisotropicB = pixel.anisotropicB;\r\n\r\n    float NoV = pixel.NoV;\r\n    float ToV = pixel.ToV;\r\n    float BoV = pixel.BoV;\r\n\r\n    vec3 h = lightParams.h;\r\n    float NoL = lightParams.NoL;\r\n    float NoH = lightParams.NoH;\r\n    float VoH = lightParams.VoH;\r\n    float ToL = lightParams.ToL;\r\n    float BoL = lightParams.BoL;\r\n\r\n    float V = V_SmithGGXCorrelated_Anisotropic(at, ab, ToV, BoV, ToL, BoL, NoV, NoL);\r\n    float D = D_GGX_Anisotropic(NoH, h, anisotropicT, anisotropicB, at, ab);\r\n    vec3 F = fresnel(surface.f0, surface.f90, lightParams.LoH);\r\n    return V * D * F;\r\n}\r\n    #endif // ANISOTROPIC\r\n\r\nvec3 PBRLighting(const in Surface surface, const in PixelInfo pixel, const in Light light)\r\n{\r\n    LightParams lightParams;\r\n    initLightParams(lightParams, pixel, light);\r\n\r\n    float NoL = lightParams.NoL;\r\n\r\n    #ifdef IRIDESCENCE\r\n    vec3 Fd = iridescenceDiffuseLobe(surface, pixel, lightParams);\r\n    vec3 Fr = iridescenceSpecularLobe(surface, pixel, lightParams);\r\n    #elif defined(ANISOTROPIC)\r\n    vec3 Fd = diffuseLobe(surface, pixel, lightParams);\r\n    vec3 Fr = anisotropyLobe(surface, pixel, lightParams);\r\n    #else\r\n    vec3 Fd = diffuseLobe(surface, pixel, lightParams);\r\n    vec3 Fr = specularLobe(surface, pixel, lightParams);\r\n    #endif\r\n\r\n    #ifdef TRANSMISSION\r\n    Fd *= 1.0 - surface.transmission;\r\n    #endif // TRANSMISSION\r\n\r\n    vec3 shading = (Fd + Fr * pixel.energyCompensation);\r\n\r\n    #ifdef SHEEN\r\n    vec3 fSheen = sheenLobe(surface, pixel, lightParams);\r\n    shading *= pixel.sheenScaling;\r\n    shading += fSheen;\r\n    #endif // SHEEN\r\n\r\n    #ifdef CLEARCOAT\r\n    float clearCoatNoL = lightParams.clearCoatNoL;\r\n    float LoH = lightParams.LoH;\r\n    // default IOR 1.5\r\n    float FccClearCoat = F_Schlick(0.04, 1.0, LoH) * surface.clearCoat;\r\n    float attenuation = 1.0 - FccClearCoat;\r\n    shading *= attenuation * NoL;\r\n\r\n    float clearcoat = clearCoatLobe(surface, pixel, lightParams) * FccClearCoat;\r\n    shading += clearcoat * clearCoatNoL;\r\n    // NoL has alread multiply\r\n    NoL = 1.0;\r\n    #endif // CLEARCOAT\r\n\r\n    return shading * light.color * NoL;\r\n}\r\n\r\n    // gi\r\n    #include "PBRGI.glsl";\r\n\r\n#endif // PBRLighting_lib'),$e.init(),Tr.init(),or.init(),dr.init(),_r.init(),cr.init(),ur.init(),fr.init(),mr.init(),gr.init(),pr.init(),t.Shader3D.SHADERDEFINE_LEGACYSINGALLIGHTING=t.Shader3D.getDefineByName("LEGACYSINGLELIGHTING"),t.Shader3D.SHADERDEFINE_ENUNIFORMBLOCK=t.Shader3D.getDefineByName("ENUNIFORMBLOCK"),t.Shader3D.SHADERDEFINE_FLOATTEXTURE=t.Shader3D.getDefineByName("FLOATTEXTURE"),t.Shader3D.SHADERDEFINE_FLOATTEXTURE_FIL_LINEAR=t.Shader3D.getDefineByName("FLOATTEXTURE_FIL_LINEAR"),t.Shader3D.SHADERDEFINE_BLITSCREEN_INVERTY=t.Shader3D.getDefineByName("BLITSCREEN_INVERTY"),t.Shader3D.SHADERDEFINE_REMAP_POSITIONZ=t.Shader3D.getDefineByName("REMAP_Z"),t.Shader3D.SHADERDEFINE_LOD_TEXTURE_SAMPLE=t.Shader3D.getDefineByName("LOD_TEXTURE_SAMPLE")}}class xr extends jt{get simpleAnimatorTexture(){return this._simpleAnimatorTexture}set simpleAnimatorTexture(e){this._simpleAnimatorTexture=e,this._simpleAnimatorTextureSize=e.width,this._baseRenderNode.shaderData.setTexture(Ar.SIMPLE_SIMPLEANIMATORTEXTURE,e),e._addReference(),this._baseRenderNode.shaderData.setNumber(Ar.SIMPLE_SIMPLEANIMATORTEXTURESIZE,this._simpleAnimatorTextureSize)}get simpleAnimatorOffset(){return this._simpleAnimatorOffset}set simpleAnimatorOffset(e){e.cloneTo(this._simpleAnimatorOffset)}_isISkinRenderNode(){return null}constructor(){super(),this._simpleAnimatorParams=new t.Vector4,this._simpleAnimatorOffset=new t.Vector2,this._baseRenderNode.shaderData.addDefine(Qt.SHADERDEFINE_SIMPLEBONE),this._baseRenderNode.shaderData.addDefine(Qt.SHADERDEFINE_BONE),this._baseRenderNode.renderNodeType=e.BaseRenderType.SimpleSkinRender,this._baseRenderNode.shaderData.setVector(Ar.SIMPLE_SIMPLEANIMATORPARAMS,new t.Vector4)}_createBaseRenderNode(){return this._ownerSimpleRenderNode=A.Render3DModuleDataFactory.createSimpleSkinRenderNode(),this._ownerSimpleRenderNode}_getcommonUniformMap(){return["Sprite3D","SimpleSkinnedMesh"]}_computeSkinnedData(){this._computeAnimatorParamsData()}renderUpdate(e){super.renderUpdate(e),this._computeSkinnedData()}_createRenderElement(){return new Ae}_computeAnimatorParamsData(){this._cacheMesh&&(this._simpleAnimatorParams.x=this._simpleAnimatorOffset.x,this._simpleAnimatorParams.y=Math.round(this._simpleAnimatorOffset.y)*this._bonesNums*4,this._ownerSimpleRenderNode.setSimpleAnimatorParams(this._simpleAnimatorParams))}setCustomData(e,t=0){this._simpleAnimatorParams.z=e,this._simpleAnimatorParams.w=t,this._ownerSimpleRenderNode.setSimpleAnimatorParams(this._simpleAnimatorParams)}_onMeshChange(e){this._onSkinMeshChange(e),e&&(this._cacheMesh=e,this._setRenderElements())}_cloneTo(e){let t=e;t.simpleAnimatorOffset=this.simpleAnimatorOffset,t.simpleAnimatorTexture=this.simpleAnimatorTexture,t._bonesNums=this._bonesNums,super._cloneTo(e)}_onDestroy(){this._cacheRootBone&&!this._cacheRootBone._destroyed&&this._cacheRootBone.transform.off(t.Event.TRANSFORM_CHANGED,this,this._onWorldMatNeedChange),this._simpleAnimatorTexture&&this._simpleAnimatorTexture._removeReference(),this._simpleAnimatorTexture=null,super._onDestroy()}}class Ar extends U{static __init__(){Ar.SIMPLE_SIMPLEANIMATORTEXTURE=t.Shader3D.propertyNameToID("u_SimpleAnimatorTexture"),Ar.SIMPLE_SIMPLEANIMATORPARAMS=t.Shader3D.propertyNameToID("u_SimpleAnimatorParams"),Ar.SIMPLE_SIMPLEANIMATORTEXTURESIZE=t.Shader3D.propertyNameToID("u_SimpleAnimatorTextureSize");const r=t.LayaGL.renderDeviceFactory.createGlobalUniformMap("SimpleSkinnedMesh");r.addShaderUniform(Ar.SIMPLE_SIMPLEANIMATORTEXTURE,"u_SimpleAnimatorTexture",e.ShaderDataType.Texture2D),r.addShaderUniform(Ar.SIMPLE_SIMPLEANIMATORPARAMS,"u_SimpleAnimatorParams",e.ShaderDataType.Vector4),r.addShaderUniform(Ar.SIMPLE_SIMPLEANIMATORTEXTURESIZE,"u_SimpleAnimatorTextureSize",e.ShaderDataType.Float)}get meshFilter(){return this._meshFilter}get simpleSkinnedMeshRenderer(){return this._render}constructor(e=null,t=null){super(t),this._meshFilter=this.addComponent(Te),this._render=this.addComponent(xr),e&&(this._meshFilter.sharedMesh=e)}_parse(e,r){super._parse(e,r);var n=this.simpleSkinnedMeshRenderer,a=e.lightmapIndex;null!=a&&(n.lightmapIndex=a);var i=e.lightmapScaleOffset;i&&(n.lightmapScaleOffset=new t.Vector4(i[0],i[1],i[2],i[3])),null!=e.enableRender&&(n.enabled=e.enableRender),null!=e.receiveShadows&&(n.receiveShadow=e.receiveShadows),null!=e.castShadow&&(n.castShadow=e.castShadow);let s=e.meshPath;if(s){let e=t.Loader.getRes(s);e&&(this.meshFilter.sharedMesh=e)}var o=e.materials;if(o){let e=n.sharedMaterials,r=o.length;e.length=r;for(let n=0;n<r;n++)e[n]=t.Loader.getRes(o[n].path);n.sharedMaterials=e}var l=e.boundBox,h=l.min,d=l.max;if(n.localBounds.setMin(new t.Vector3(h[0],h[1],h[2])),n.localBounds.setMax(new t.Vector3(d[0],d[1],d[2])),n.localBounds=n.localBounds,r){let t=e.rootBone;n.rootBone=r[t];let a=e.bones;for(let e=0,t=a.length;e<t;e++)n.bones.push(r[a[e]]);n.bones=n.bones,n._bonesNums=e.bonesNums?e.bonesNums:n.bones.length}var c=e.animatorTexture;if(c){let e=t.Loader.getRes(c,t.Loader.TEXTURE2D);n.simpleAnimatorTexture=e}}_cloneTo(e,t,r){super._cloneTo(e,t,r)}destroy(e=!0){this._destroyed||(super.destroy(e),this._meshFilter.destroy())}_create(){return new B}}Ar._tempArray0=[];class Dr{}Dr.Stretch=0,Dr.Tile=1,e.TrailAlignment=void 0,(Sr=e.TrailAlignment||(e.TrailAlignment={}))[Sr.View=0]="View",Sr[Sr.TransformZ=1]="TransformZ";class Rr extends Z{constructor(e){super(t.MeshTopology.TriangleStrip,t.DrawType.DrawArray),this._floatCountPerVertices1=8,this._floatCountPerVertices2=5,this._increaseSegementCount=16,this._activeIndex=0,this._endIndex=0,this._needAddFirstVertex=!1,this._isTempEndVertex=!1,this._vertices1=null,this._vertices2=null,this._lastFixedVertexPosition=new t.Vector3,this.tmpColor=new t.Color,this._disappearBoundsMode=!1,this._owner=e,this.bufferState=new t.BufferState,this._segementCount=this._increaseSegementCount,this._resizeData(this._segementCount,this.bufferState)}_resizeData(e,r){this._subBirthTime=new Float32Array(e),this._subDistance=new Float64Array(e);var n=2*e,a=qt.vertexDeclaration1,i=qt.vertexDeclaration2,s=[],o=n*a.vertexStride,l=n*i.vertexStride,h=o+l;this._vertices1=new Float32Array(n*this._floatCountPerVertices1),this._vertices2=new Float32Array(n*this._floatCountPerVertices2),this._vertexBuffer1=A.renderOBJCreate.createVertexBuffer3D(o,t.BufferUsage.Dynamic,!1),this._vertexBuffer1.vertexDeclaration=a,this._vertexBuffer2=A.renderOBJCreate.createVertexBuffer3D(l,t.BufferUsage.Dynamic,!1),this._vertexBuffer2.vertexDeclaration=i,s.push(this._vertexBuffer1),s.push(this._vertexBuffer2),r.applyState(s,null),t.Resource._addMemory(h,h)}_resetData(){var e=this._endIndex-this._activeIndex,r=new Float32Array(this._vertices1.buffer,2*this._floatCountPerVertices1*this._activeIndex*4,2*this._floatCountPerVertices1*e),n=new Float32Array(this._vertices2.buffer,2*this._floatCountPerVertices2*this._activeIndex*4,2*this._floatCountPerVertices2*e),a=new Float64Array(this._subDistance.buffer,8*this._activeIndex,e),i=new Float32Array(this._subBirthTime.buffer,4*this._activeIndex,e);if(e===this._segementCount){var s=this._vertexBuffer1._byteLength+this._vertexBuffer2._byteLength;t.Resource._addMemory(-s,-s),this._vertexBuffer1.destroy(),this._vertexBuffer2.destroy(),this._segementCount+=this._increaseSegementCount,this._resizeData(this._segementCount,this.bufferState)}this._vertices1.set(r,0),this._vertices2.set(n,0),this._subDistance.set(a,0),this._subBirthTime.set(i,0),this._endIndex=e,this._activeIndex=0,this._vertexBuffer1.setData(this._vertices1.buffer,0,2*this._floatCountPerVertices1*this._activeIndex*4,2*this._floatCountPerVertices1*e*4),this._vertexBuffer2.setData(this._vertices2.buffer,0,2*this._floatCountPerVertices2*this._activeIndex*4,2*this._floatCountPerVertices2*e*4)}_updateTrail(e,r,n){t.Vector3.equals(r,n)||(this._endIndex-this._activeIndex==0?this._addTrailByFirstPosition(e,n):this._addTrailByNextPosition(e,n))}_addTrailByFirstPosition(e,t){this._endIndex===this._segementCount&&this._resetData(),this._subDistance[this._endIndex]=0,this._subBirthTime[this._endIndex]=this._owner._curtime,this._endIndex++,t.cloneTo(this._lastFixedVertexPosition),this._needAddFirstVertex=!0}_addTrailByNextPosition(r,n){var a=Rr._tempVector30,i=Rr._tempVector31;switch(this._owner.alignment){case e.TrailAlignment.View:var s=r.viewMatrix;t.Vector3.transformCoordinate(n,s,Rr._tempVector33),t.Vector3.transformCoordinate(this._lastFixedVertexPosition,s,Rr._tempVector34),t.Vector3.subtract(Rr._tempVector33,Rr._tempVector34,a),t.Vector3.cross(Rr._tempVector33,a,i);break;case e.TrailAlignment.TransformZ:t.Vector3.subtract(n,this._lastFixedVertexPosition,a);var o=Rr._tempVector32;this._owner._ownerRender.owner.transform.getForward(o),t.Vector3.cross(a,o,i)}t.Vector3.normalize(i,i),t.Vector3.scale(i,this._owner.widthMultiplier/2,i);var l,h,d=t.Vector3.scalarLength(a);this._needAddFirstVertex&&(this._updateVerticesByPositionData(n,i,this._endIndex-1),this._needAddFirstVertex=!1),d-this._owner.minVertexDistance>=t.MathUtils3D.zeroTolerance?(this._isTempEndVertex?(l=this._endIndex-1,h=d-this._subDistance[l],this._updateVerticesByPosition(n,i,d,l),this._owner._totalLength+=h):(this._endIndex===this._segementCount&&this._resetData(),this._updateVerticesByPosition(n,i,d,this._endIndex),this._owner._totalLength+=d,this._endIndex++),n.cloneTo(this._lastFixedVertexPosition),this._isTempEndVertex=!1):(this._isTempEndVertex?(l=this._endIndex-1,h=d-this._subDistance[l],this._updateVerticesByPosition(n,i,d,l),this._owner._totalLength+=h):(this._endIndex===this._segementCount&&this._resetData(),this._updateVerticesByPosition(n,i,d,this._endIndex),this._owner._totalLength+=d,this._endIndex++),this._isTempEndVertex=!0)}_updateVerticesByPositionData(e,r,n){var a=2*this._floatCountPerVertices1*n,i=this._owner._curtime;this._vertices1[a]=e.x,this._vertices1[a+1]=e.y,this._vertices1[a+2]=e.z,this._vertices1[a+3]=-r.x,this._vertices1[a+4]=-r.y,this._vertices1[a+5]=-r.z,this._vertices1[a+6]=i,this._vertices1[a+7]=1,this._vertices1[a+8]=e.x,this._vertices1[a+9]=e.y,this._vertices1[a+10]=e.z,this._vertices1[a+11]=r.x,this._vertices1[a+12]=r.y,this._vertices1[a+13]=r.z,this._vertices1[a+14]=i,this._vertices1[a+15]=0;var s=this._owner._ownerRender.bounds,o=s.getMin(),l=s.getMax(),h=Rr._tempVector35,d=Rr._tempVector36,c=Rr._tempVector32;t.Vector3.add(e,r,h),t.Vector3.subtract(e,r,d),t.Vector3.min(d,h,c),t.Vector3.min(o,c,o),s.setMin(o),t.Vector3.max(h,d,c),t.Vector3.max(l,c,l),s.setMax(l);var u=2*this._floatCountPerVertices1;this._vertexBuffer1.setData(this._vertices1.buffer,4*a,4*a,4*u)}_updateVerticesByPosition(e,t,r,n){this._updateVerticesByPositionData(e,t,n),this._subDistance[n]=r,this._subBirthTime[n]=this._owner._curtime}_updateVertexBufferUV(){var e,r,n;if(this._disappearBoundsMode){e=this._owner._ownerRender.bounds;var a=this._owner._ownerRender.owner.transform.position;e.setMin(a),e.setMax(a),r=e.getMin(),n=e.getMax()}for(var i=this._endIndex,s=0,o=this._owner.colorGradient,l=o.colorAlphaKeysCount-1,h=o.colorRGBKeysCount-1,d=this._owner._totalLength,c=2*this._floatCountPerVertices2,u=this._activeIndex;u<i;u++){var _,m;u!==this._activeIndex&&(s+=this._subDistance[u]),this._owner.textureMode==Dr.Stretch?m=_=1-s/d:(m=1-s/d,_=1-(d-s)),h=o.evaluateColorRGB(m,this.tmpColor,h,!0),l=o.evaluateColorAlpha(m,this.tmpColor,l,!0);var f=u*c;if(this._vertices2[f+0]=_,this._vertices2[f+1]=this.tmpColor.r,this._vertices2[f+2]=this.tmpColor.g,this._vertices2[f+3]=this.tmpColor.b,this._vertices2[f+4]=this.tmpColor.a,this._vertices2[f+5]=_,this._vertices2[f+6]=this.tmpColor.r,this._vertices2[f+7]=this.tmpColor.g,this._vertices2[f+8]=this.tmpColor.b,this._vertices2[f+9]=this.tmpColor.a,this._disappearBoundsMode){var g=2*this._floatCountPerVertices1*u,p=Rr._tempVector32,S=Rr._tempVector33,T=Rr._tempVector34;p.setValue(this._vertices1[g+0],this._vertices1[g+1],this._vertices1[g+2]),S.setValue(this._vertices1[g+3],this._vertices1[g+4],this._vertices1[g+5]),t.Vector3.add(p,S,T),t.Vector3.min(T,r,r),t.Vector3.max(T,n,n),t.Vector3.subtract(p,S,T),t.Vector3.min(T,r,r),t.Vector3.max(T,n,n)}}this._disappearBoundsMode&&(e.setMin(r),e.setMax(n),this._disappearBoundsMode=!1);var E=this._activeIndex*c;this._vertexBuffer2.setData(this._vertices2.buffer,4*E,4*E,4*(i*c-E))}_updateDisappear(){for(var e=this._endIndex,r=this._activeIndex;r<e&&this._owner._curtime-this._subBirthTime[r]>=this._owner.time+t.MathUtils3D.zeroTolerance;r++){var n=r+1;if(n!==e&&(this._owner._totalLength-=this._subDistance[n]),this._isTempEndVertex&&n===e-1){var a=this._lastFixedVertexPosition;a.x=this._vertices1[0],a.y=this._vertices1[1],a.z=this._vertices1[2],this._isTempEndVertex=!1}this._activeIndex++,this._disappearBoundsMode=!0}}_getType(){return Rr._type}_prepareRender(e){return this._endIndex-this._activeIndex>1}_updateRenderParams(e){this.clearRenderParams();var t=2*this._activeIndex,r=2*this._endIndex-t;this.setDrawArrayParams(t,r)}destroy(){super.destroy();var e=this._vertexBuffer1._byteLength+this._vertexBuffer2._byteLength;t.Resource._addMemory(-e,-e),this.bufferState.destroy(),this._vertexBuffer1.destroy(),this._vertexBuffer2.destroy(),this._bufferState=null,this._vertices1=null,this._vertexBuffer1=null,this._vertices2=null,this._vertexBuffer2=null,this._subBirthTime=null,this._subDistance=null,this._lastFixedVertexPosition=null,this._disappearBoundsMode=!1}clear(){this._activeIndex=0,this._endIndex=0,this._disappearBoundsMode=!1,this._subBirthTime.fill(0),this._subDistance.fill(0),this._segementCount=0,this._isTempEndVertex=!1,this._needAddFirstVertex=!1,this._lastFixedVertexPosition.setValue(0,0,0)}}Rr.ALIGNMENT_VIEW=0,Rr.ALIGNMENT_TRANSFORM_Z=1,Rr._tempVector30=new t.Vector3,Rr._tempVector31=new t.Vector3,Rr._tempVector32=new t.Vector3,Rr._tempVector33=new t.Vector3,Rr._tempVector34=new t.Vector3,Rr._tempVector35=new t.Vector3,Rr._tempVector36=new t.Vector3,Rr._type=Z._typeCounter++;class Mr{static __init__(){Mr.CURTIME=t.Shader3D.propertyNameToID("u_CurTime"),Mr.LIFETIME=t.Shader3D.propertyNameToID("u_LifeTime"),Mr.WIDTHCURVE=t.Shader3D.propertyNameToID("u_WidthCurve"),Mr.WIDTHCURVEKEYLENGTH=t.Shader3D.propertyNameToID("u_WidthCurveKeyLength");const r=t.LayaGL.renderDeviceFactory.createGlobalUniformMap("TrailRender");r.addShaderUniform(Mr.CURTIME,"u_CurTime",e.ShaderDataType.Float),r.addShaderUniform(Mr.LIFETIME,"u_LifeTime",e.ShaderDataType.Float),r.addShaderUniform(Mr.WIDTHCURVE,"u_WidthCurve",e.ShaderDataType.Buffer),r.addShaderUniform(Mr.WIDTHCURVEKEYLENGTH,"u_WidthCurveKeyLength",e.ShaderDataType.Int)}get time(){return this._time}set time(e){this._time=e,this._ownerRender._baseRenderNode.shaderData.setNumber(Mr.LIFETIME,e)}get minVertexDistance(){return this._minVertexDistance}set minVertexDistance(e){this._minVertexDistance=e}get widthMultiplier(){return this._widthMultiplier}set widthMultiplier(e){this._widthMultiplier=e}get widthCurve(){return this._widthCurve}set widthCurve(e){this._widthCurve=e;var t,r,n=new Float32Array(4*e.length),a=0;for(t=0,r=e.length;t<r;t++)n[a++]=e[t].time,n[a++]=e[t].inTangent,n[a++]=e[t].outTangent,n[a++]=e[t].value;this._ownerRender._baseRenderNode.shaderData.setBuffer(Mr.WIDTHCURVE,n),this._ownerRender._baseRenderNode.shaderData.setInt(Mr.WIDTHCURVEKEYLENGTH,e.length)}get colorGradient(){return this._colorGradient}set colorGradient(e){this._colorGradient=e}get textureMode(){return this._textureMode}set textureMode(e){this._textureMode=e}constructor(r){this._textureMode=Dr.Stretch,this._totalLength=0,this._lastPosition=new t.Vector3,this._curtime=0,this.alignment=e.TrailAlignment.View,this._ownerRender=r,this._initDefaultData(),this.addRenderElement()}addRenderElement(){var e=this._ownerRender,t=e._renderElements,r=e.sharedMaterials[0];r||(r=Jt.defaultMaterial);var n=new te;n.setTransform(this._ownerRender.owner._transform),n.render=e,n.material=r,this._trialGeometry=new Rr(this),n.setGeometry(this._trialGeometry),t.push(n)}_update(e){var t=this._ownerRender;const r=this._ownerRender.owner.scene;if(r){this._curtime+=r.timer._delta/1e3,t._baseRenderNode.shaderData.setNumber(Mr.CURTIME,this._curtime);var n=this._ownerRender.owner.transform.position,a=t._renderElements[0]._geometry;a._updateDisappear(),a._updateTrail(e.camera,this._lastPosition,n),a._updateVertexBufferUV(),n.cloneTo(this._lastPosition)}}_initDefaultData(){this.time=5,this.minVertexDistance=.1,this.widthMultiplier=1,this.textureMode=Dr.Stretch;var e=[],r=new h;r.time=0,r.inTangent=0,r.outTangent=0,r.value=1,e.push(r);var n=new h;n.time=1,n.inTangent=0,n.outTangent=0,n.value=1,e.push(n),this.widthCurve=e;var a=new ct;a.setMaxKeyCount(2,2),a.mode=dt.Blend,a.addColorRGB(0,t.Color.WHITE),a.addColorRGB(1,t.Color.WHITE),a.addColorAlpha(0,1),a.addColorAlpha(1,1),this.colorGradient=a}destroy(){this._trialGeometry.destroy(),this._trialGeometry=null,this._widthCurve=null,this._colorGradient=null}clear(){this._trialGeometry.clear(),this._lastPosition.setValue(0,0,0),this._curtime=0,this._totalLength=0}}class Cr extends t.Material{static __init__(){Cr.TINTCOLOR=t.Shader3D.propertyNameToID("u_TintColor"),Cr.EXPOSURE=t.Shader3D.propertyNameToID("u_Exposure"),Cr.ROTATION=t.Shader3D.propertyNameToID("u_Rotation"),Cr.TEXTURE=t.Shader3D.propertyNameToID("u_Texture"),Cr.TEXTURE_HDR_PARAMS=t.Shader3D.propertyNameToID("u_Texture_HDR_params")}get tintColor(){return this.getColorByIndex(Cr.TINTCOLOR)}set tintColor(e){this.setColorByIndex(Cr.TINTCOLOR,e)}get exposure(){return this.getFloatByIndex(Cr.EXPOSURE)}set exposure(e){this.setFloatByIndex(Cr.EXPOSURE,e)}get rotation(){return this.getFloatByIndex(Cr.ROTATION)}set rotation(e){this.setFloatByIndex(Cr.ROTATION,e)}get panoramicTexture(){return this.getTextureByIndex(Cr.TEXTURE)}set panoramicTexture(e){this.setTextureByIndex(Cr.TEXTURE,e)}constructor(){super(),this._textureHDRParams=new t.Vector4(1,0,0,1),this.setShaderName("SkyPanoramic"),this.setColorByIndex(Cr.TINTCOLOR,new t.Color(.5,.5,.5,.5)),this.setFloatByIndex(Cr.ROTATION,0),this.setVector4ByIndex(Cr.TEXTURE_HDR_PARAMS,this._textureHDRParams),this.exposure=1.3}}var vr="#define SHADER_NAME BloomVS\r\n\r\nvarying vec2 v_Texcoord0;\r\nvec4 remapPositionZ(vec4 position)\r\n{\r\n    #ifdef BLITSCREEN_INVERTY //兼容WGSL\r\n    position.y = -position.y;\r\n    #endif\r\n    return position;\r\n}\r\nvoid main()\r\n{\r\n    gl_Position = vec4(a_PositionTexcoord.xy, 0.0, 1.0);\r\n    v_Texcoord0 = a_PositionTexcoord.zw;\r\n    gl_Position = remapPositionZ(gl_Position);\r\n}";class yr extends Xe{static init(){t.Shader3D.addInclude("StdLib.glsl","#define HALF_MAX       65504.0 // (2 - 2^-10) * 2^15\r\n\r\n#define FLT_EPSILON    1.192092896e-07 // Smallest positive number, such that 1.0 + FLT_EPSILON != 1.0\r\n\r\nmediump vec4 safeHDR(mediump vec4 c)\r\n{\r\n    return min(c, HALF_MAX);\r\n}\r\n\r\nfloat max3(float a, float b, float c)\r\n{\r\n    return max(max(a, b), c);\r\n}\r\n\r\nvec3 positivePow(vec3 base, vec3 power)\r\n{\r\n    return pow(max(abs(base), vec3(FLT_EPSILON, FLT_EPSILON, FLT_EPSILON)), power);\r\n}"),t.Shader3D.addInclude("Colors.glsl",'#include "StdLib.glsl";\r\n\r\n#define EPSILON 1.0e-4\r\n\r\n// Quadratic color thresholding\r\n// curve = (threshold - knee, knee * 2, 0.25 / knee)\r\nmediump vec4 quadraticThreshold(mediump vec4 color, mediump float threshold, mediump vec3 curve) {\r\n\t// Pixel brightness\r\n\tmediump float br = max3(color.r, color.g, color.b);\r\n\r\n\t// Under-threshold part: quadratic curve\r\n\tmediump float rq = clamp(br - curve.x, 0.0, curve.y);\r\n\trq = curve.z * rq * rq;\r\n\r\n\t// Combine and apply the brightness response curve.\r\n\tcolor *= max(rq, br - threshold) / max(br, EPSILON);\r\n\r\n\treturn color;\r\n}\r\n\r\n\r\n\r\n//\r\n// sRGB transfer functions\r\n// Fast path ref: http://chilliant.blogspot.com.au/2012/08/srgb-approximations-for-hlsl.html?m=1\r\n//\r\n// mediump vec3 sRGBToLinear(mediump vec3 c) {\r\n// \t#ifdef USE_VERY_FAST_SRGB\r\n// \t\treturn c * c;\r\n// \t#elif defined(USE_FAST_SRGB)\r\n// \t\treturn c * (c * (c * 0.305306011 + 0.682171111) + 0.012522878);\r\n// \t#else\r\n// \t\tmediump vec3 linearRGBLo = c / 12.92;\r\n// \t\tmediump vec3 power=vec3(2.4, 2.4, 2.4);\r\n// \t\tmediump vec3 linearRGBHi = positivePow((c + 0.055) / 1.055, power);\r\n// \t\tmediump vec3 linearRGB =vec3((c.r<=0.04045) ? linearRGBLo.r : linearRGBHi.r,(c.g<=0.04045) ? linearRGBLo.g : linearRGBHi.g,(c.b<=0.04045) ? linearRGBLo.b : linearRGBHi.b);\r\n// \t\treturn linearRGB;\r\n// \t#endif\r\n// }\r\n\r\n// mediump vec4 sRGBToLinear(mediump vec4 c){\r\n//     return vec4(sRGBToLinear(c.rgb), c.a);\r\n// }\r\n\r\n\r\n\r\n// mediump vec3 linearToSRGB(mediump vec3 c) {\r\n// \t#ifdef USE_VERY_FAST_SRGB\r\n// \t\treturn sqrt(c);\r\n// \t#elif defined(USE_FAST_SRGB)\r\n// \t\treturn max(1.055 * PositivePow(c, 0.416666667) - 0.055, 0.0);\r\n// \t#else\r\n// \t\tmediump vec3 sRGBLo = c * 12.92;\r\n// \t\tmediump vec3 power=vec3(1.0 / 2.4, 1.0 / 2.4, 1.0 / 2.4);\r\n// \t\tmediump vec3 sRGBHi = (positivePow(c, power) * 1.055) - 0.055;\r\n// \t\tmediump vec3 sRGB =vec3((c.r<=0.0031308) ? sRGBLo.r : sRGBHi.r,(c.g<=0.0031308) ? sRGBLo.g : sRGBHi.g,(c.b<=0.0031308) ? sRGBLo.b : sRGBHi.b);\r\n// \t\treturn sRGB;\r\n// \t#endif\r\n// }\r\n\r\n// mediump vec4 linearToSRGB(mediump vec4 c){\r\n//     return vec4(linearToSRGB(c.rgb), c.a);\r\n// }'),t.Shader3D.addInclude("Sampling.glsl","\r\n// todo only sampler u_MainTex\r\nvec4 samplerTex(sampler2D tex, vec2 uv)\r\n{\r\n    vec4 mainSampler = texture2D(tex, uv);\r\n#ifdef Gamma_u_MainTex\r\n    mainSampler = gammaToLinear(mainSampler);\r\n#endif // Gamma_u_MainTex\r\n\r\n    return mainSampler;\r\n}\r\n\r\n// Better, temporally stable box filtering\r\n// [Jimenez14] http://goo.gl/eomGso\r\n// . . . . . . .\r\n// . A . B . C .\r\n// . . D . E . .\r\n// . F . G . H .\r\n// . . I . J . .\r\n// . K . L . M .\r\n// . . . . . . .\r\nmediump vec4 downsampleBox13Tap(sampler2D tex, vec2 uv, vec2 texelSize)\r\n{\r\n    mediump vec4 A = samplerTex(tex, uv + texelSize * vec2(-1.0, -1.0));\r\n    mediump vec4 B = samplerTex(tex, uv + texelSize * vec2(0.0, -1.0));\r\n    mediump vec4 C = samplerTex(tex, uv + texelSize * vec2(1.0, -1.0));\r\n    mediump vec4 D = samplerTex(tex, uv + texelSize * vec2(-0.5, -0.5));\r\n    mediump vec4 E = samplerTex(tex, uv + texelSize * vec2(0.5, -0.5));\r\n    mediump vec4 F = samplerTex(tex, uv + texelSize * vec2(-1.0, 0.0));\r\n    mediump vec4 G = samplerTex(tex, uv);\r\n    mediump vec4 H = samplerTex(tex, uv + texelSize * vec2(1.0, 0.0));\r\n    mediump vec4 I = samplerTex(tex, uv + texelSize * vec2(-0.5, 0.5));\r\n    mediump vec4 J = samplerTex(tex, uv + texelSize * vec2(0.5, 0.5));\r\n    mediump vec4 K = samplerTex(tex, uv + texelSize * vec2(-1.0, 1.0));\r\n    mediump vec4 L = samplerTex(tex, uv + texelSize * vec2(0.0, 1.0));\r\n    mediump vec4 M = samplerTex(tex, uv + texelSize * vec2(1.0, 1.0));\r\n\r\n    mediump vec2 scale = vec2(0.5, 0.125);\r\n    mediump vec2 div = (1.0 / 4.0) * scale;\r\n\r\n    mediump vec4 o = (D + E + I + J) * div.x;\r\n    o += (A + B + G + F) * div.y;\r\n    o += (B + C + H + G) * div.y;\r\n    o += (F + G + L + K) * div.y;\r\n    o += (G + H + M + L) * div.y;\r\n\r\n    return o;\r\n}\r\n\r\n// Standard box filtering\r\nmediump vec4 downsampleBox4Tap(sampler2D tex, vec2 uv, vec2 texelSize)\r\n{\r\n    vec4 d = texelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);\r\n\r\n    mediump vec4 s = samplerTex(tex, uv + d.xy);\r\n    s += samplerTex(tex, uv + d.zy);\r\n    s += samplerTex(tex, uv + d.xw);\r\n    s += samplerTex(tex, uv + d.zw);\r\n\r\n    return s * (1.0 / 4.0);\r\n}\r\n\r\n// 9-tap bilinear upsampler (tent filter)\r\n// . . . . . . .\r\n// . 1 . 2 . 1 .\r\n// . . . . . . .\r\n// . 2 . 4 . 2 .\r\n// . . . . . . .\r\n// . 1 . 2 . 1 .\r\n// . . . . . . .\r\nmediump vec4 upsampleTent(sampler2D tex, vec2 uv, vec2 texelSize, vec4 sampleScale)\r\n{\r\n    vec4 d = texelSize.xyxy * vec4(1.0, 1.0, -1.0, 0.0) * sampleScale;\r\n\r\n    mediump vec4 s = samplerTex(tex, uv - d.xy);\r\n    s += samplerTex(tex, uv - d.wy) * 2.0;\r\n    s += samplerTex(tex, uv - d.zy);\r\n\r\n    s += samplerTex(tex, uv + d.zw) * 2.0;\r\n    s += samplerTex(tex, uv) * 4.0;\r\n    s += samplerTex(tex, uv + d.xw) * 2.0;\r\n\r\n    s += samplerTex(tex, uv + d.zy);\r\n    s += samplerTex(tex, uv + d.wy) * 2.0;\r\n    s += samplerTex(tex, uv + d.xy);\r\n\r\n    return s * (1.0 / 16.0);\r\n}\r\n\r\n// Standard box filtering\r\nmediump vec4 upsampleBox(sampler2D tex, vec2 uv, vec2 texelSize, vec4 sampleScale)\r\n{\r\n    vec4 d = texelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0) * 0.5 * sampleScale;\r\n\r\n    mediump vec4 s = samplerTex(tex, uv + d.xy);\r\n    s += samplerTex(tex, uv + d.zy);\r\n    s += samplerTex(tex, uv + d.xw);\r\n    s += samplerTex(tex, uv + d.zw);\r\n\r\n    return s * (1.0 / 4.0);\r\n}");var r={a_PositionTexcoord:[t.VertexMesh.MESH_POSITION0,e.ShaderDataType.Vector4]},n={u_MainTex:e.ShaderDataType.Texture2D,u_MainTex_TexelSize:e.ShaderDataType.Vector4,u_AutoExposureTex:e.ShaderDataType.Texture2D,u_Threshold:e.ShaderDataType.Vector4,u_Params:e.ShaderDataType.Vector4,u_BloomTex:e.ShaderDataType.Texture2D,u_SampleScale:e.ShaderDataType.Float},a=t.Shader3D.add("PostProcessBloom");a.shaderType=t.ShaderFeatureType.PostProcess;var i=new t.SubShader(r,n);a.addSubShader(i);var s=i.addShaderPass(vr,'#define SHADER_NAME BloomPreFilter13FS\r\n\r\n#include "Color.glsl";\r\n#include "Colors.glsl";\r\n#include "Sampling.glsl";\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\nmediump vec4 prefilter(mediump vec4 color, vec2 uv)\r\n{\r\n    vec4 autoExposureSampler = texture2D(u_AutoExposureTex, uv);\r\n#ifdef Gamma_u_AutoExposureTex\r\n    autoExposureSampler = gammaToLinear(autoExposureSampler);\r\n#endif // Gamma_u_AutoExposureTex\r\n\r\n    mediump float autoExposure = autoExposureSampler.r;\r\n    color *= autoExposure;\r\n    color = min(vec4(u_Params.x), color); // clamp to max\r\n    color = quadraticThreshold(color, u_Threshold.x, u_Threshold.yzw);\r\n    return color;\r\n}\r\n\r\nvoid fragPrefilter13()\r\n{\r\n    mediump vec4 color = downsampleBox13Tap(u_MainTex, v_Texcoord0, u_MainTex_TexelSize.xy);\r\n    gl_FragColor = prefilter(safeHDR(color), v_Texcoord0);\r\n}\r\n\r\nvoid main()\r\n{\r\n    fragPrefilter13();\r\n\r\n    gl_FragColor = outputTransform(gl_FragColor);\r\n}'),o=s.renderState;(o=s.renderState).depthTest=Ee.DEPTHTEST_ALWAYS,o.depthWrite=!1,o.cull=Ee.CULL_NONE,o.blend=Ee.BLEND_DISABLE,i=new t.SubShader(r,n),a.addSubShader(i),(o=(s=i.addShaderPass(vr,'#define SHADER_NAME BloomPreFilter4FS\r\n\r\n#include "Color.glsl";\r\n#include "Colors.glsl";\r\n#include "Sampling.glsl";\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\nmediump vec4 prefilter(mediump vec4 color, vec2 uv)\r\n{\r\n    vec4 autoExposureSampler = texture2D(u_AutoExposureTex, uv);\r\n#ifdef Gamma_u_AutoExposureTex\r\n    autoExposureSampler = gammaToLinear(autoExposureSampler);\r\n#endif // Gamma_u_AutoExposureTex\r\n\r\n    mediump float autoExposure = autoExposureSampler.r;\r\n    color *= autoExposure;\r\n    color = min(vec4(u_Params.x), color); // clamp to max\r\n    color = quadraticThreshold(color, u_Threshold.x, u_Threshold.yzw);\r\n    return color;\r\n}\r\n\r\nvoid fragPrefilter4()\r\n{\r\n    mediump vec4 color = downsampleBox4Tap(u_MainTex, v_Texcoord0, u_MainTex_TexelSize.xy);\r\n    gl_FragColor = prefilter(safeHDR(color), v_Texcoord0);\r\n}\r\n\r\nvoid main()\r\n{\r\n    fragPrefilter4();\r\n\r\n    gl_FragColor = outputTransform(gl_FragColor);\r\n}')).renderState).depthTest=Ee.DEPTHTEST_ALWAYS,o.depthWrite=!1,o.cull=Ee.CULL_NONE,o.blend=Ee.BLEND_DISABLE,i=new t.SubShader(r,n),a.addSubShader(i),(o=(s=i.addShaderPass(vr,'#define SHADER_NAME BloomDownSample13FS\r\n\r\n#include "Color.glsl";\r\n#include "Colors.glsl";\r\n#include "Sampling.glsl";\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\nvoid fragDownsample13()\r\n{\r\n    mediump vec4 color = downsampleBox13Tap(u_MainTex, v_Texcoord0, u_MainTex_TexelSize.xy);\r\n    gl_FragColor = color;\r\n}\r\n\r\nvoid main()\r\n{\r\n    fragDownsample13();\r\n\r\n    gl_FragColor = outputTransform(gl_FragColor);\r\n}')).renderState).depthTest=Ee.DEPTHTEST_ALWAYS,o.depthWrite=!1,o.cull=Ee.CULL_NONE,o.blend=Ee.BLEND_DISABLE,i=new t.SubShader(r,n),a.addSubShader(i),(o=(s=i.addShaderPass(vr,'#define SHADER_NAME BloomDownSample4FS\r\n\r\n#include "Color.glsl";\r\n#include "Colors.glsl";\r\n#include "Sampling.glsl";\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\nvoid fragDownsample4()\r\n{\r\n    mediump vec4 color = downsampleBox4Tap(u_MainTex, v_Texcoord0, u_MainTex_TexelSize.xy);\r\n    gl_FragColor = color;\r\n}\r\n\r\nvoid main()\r\n{\r\n    fragDownsample4();\r\n\r\n    gl_FragColor = outputTransform(gl_FragColor);\r\n}')).renderState).depthTest=Ee.DEPTHTEST_ALWAYS,o.depthWrite=!1,o.cull=Ee.CULL_NONE,o.blend=Ee.BLEND_DISABLE,i=new t.SubShader(r,n),a.addSubShader(i),(o=(s=i.addShaderPass(vr,'#define SHADER_NAME BloomUpSampleTentFS\r\n\r\n#include "Color.glsl";\r\n#include "Colors.glsl";\r\n#include "Sampling.glsl";\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\nmediump vec4 combine(mediump vec4 bloom, vec2 uv)\r\n{\r\n    mediump vec4 color = texture2D(u_BloomTex, uv);\r\n#ifdef Gamma_u_BloomTex\r\n    color = gammaToLinear(color);\r\n#endif // Gamma_u_BloomTex\r\n    return bloom + color;\r\n}\r\n\r\nvoid fragUpsampleTent()\r\n{\r\n    mediump vec4 bloom = upsampleTent(u_MainTex, v_Texcoord0, u_MainTex_TexelSize.xy, vec4(u_SampleScale));\r\n    gl_FragColor = combine(bloom, v_Texcoord0);\r\n}\r\n\r\nvoid main()\r\n{\r\n    fragUpsampleTent();\r\n\r\n    gl_FragColor = outputTransform(gl_FragColor);\r\n}')).renderState).depthTest=Ee.DEPTHTEST_ALWAYS,o.depthWrite=!1,o.cull=Ee.CULL_NONE,o.blend=Ee.BLEND_DISABLE,i=new t.SubShader(r,n),a.addSubShader(i),(o=(s=i.addShaderPass(vr,'#define SHADER_NAME BloomUpSampleBoxFS\r\n\r\n#include "Color.glsl";\r\n#include "Colors.glsl";\r\n#include "Sampling.glsl";\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\nmediump vec4 combine(mediump vec4 bloom, vec2 uv)\r\n{\r\n    mediump vec4 color = texture2D(u_BloomTex, uv);\r\n#ifdef Gamma_u_BloomTex\r\n    color = gammaToLinear(color);\r\n#endif // Gamma_u_BloomTex\r\n    return bloom + color;\r\n}\r\n\r\nvoid fragUpsampleBox()\r\n{\r\n    mediump vec4 bloom = upsampleBox(u_MainTex, v_Texcoord0, u_MainTex_TexelSize.xy, vec4(u_SampleScale));\r\n    gl_FragColor = combine(bloom, v_Texcoord0);\r\n}\r\n\r\nvoid main()\r\n{\r\n    fragUpsampleBox();\r\n\r\n    gl_FragColor = outputTransform(gl_FragColor);\r\n}')).renderState).depthTest=Ee.DEPTHTEST_ALWAYS,o.depthWrite=!1,o.cull=Ee.CULL_NONE,o.blend=Ee.BLEND_DISABLE,yr.CompositeInit(),yr.__initDefine__()}static CompositeInit(){let r={a_PositionTexcoord:[t.VertexMesh.MESH_POSITION0,e.ShaderDataType.Vector4]},n={u_MainTex:e.ShaderDataType.Texture2D,u_BloomTex:e.ShaderDataType.Texture2D,u_AutoExposureTex:e.ShaderDataType.Texture2D,u_Bloom_DirtTex:e.ShaderDataType.Texture2D,u_BloomTex_TexelSize:e.ShaderDataType.Vector4,u_Bloom_DirtTileOffset:e.ShaderDataType.Vector4,u_Bloom_Settings:e.ShaderDataType.Vector4,u_Bloom_Color:e.ShaderDataType.Color},a=t.Shader3D.add("PostProcessComposite");a.shaderType=t.ShaderFeatureType.PostProcess;let i=new t.SubShader(r,n);a.addSubShader(i);let s=i.addShaderPass("#define SHADER_NAME CompositeVS\r\nvarying vec2 v_Texcoord0;\r\nvec4 remapPositionZ(vec4 position)\r\n{\r\n    #ifdef BLITSCREEN_INVERTY\r\n    position.y = -position.y;\r\n    #endif\r\n    return position;\r\n}\r\nvoid main() {\r\n\tgl_Position = vec4(a_PositionTexcoord.xy, 0.0, 1.0);\r\n\tv_Texcoord0 = a_PositionTexcoord.zw;\r\n\tgl_Position = remapPositionZ(gl_Position);\r\n}",'#define SHADER_NAME CompositeFS\r\n\r\n#include "Color.glsl";\r\n#include "Colors.glsl";\r\n#include "Sampling.glsl";\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\nvoid main()\r\n{\r\n    vec4 autoExposureSampler = texture2D(u_AutoExposureTex, v_Texcoord0);\r\n#ifdef Gamma_u_AutoExposureTex\r\n    autoExposureSampler = gammaToLinear(autoExposureSampler);\r\n#endif // Gamma_u_AutoExposureTex\r\n    mediump float autoExposure = autoExposureSampler.r;\r\n\r\n    mediump vec4 color = vec4(0.0);\r\n    color = texture2D(u_MainTex, v_Texcoord0);\r\n#ifdef Gamma_u_MainTex\r\n    color = gammaToLinear(color);\r\n#endif // Gamma_u_MainTex\r\n\r\n    color.rgb *= autoExposure;\r\n\r\n#if defined(BLOOM) || defined(BLOOM_LOW)\r\n    #ifdef BLOOM\r\n    mediump vec4 bloom = upsampleTent(u_BloomTex, v_Texcoord0, u_BloomTex_TexelSize.xy, vec4(u_Bloom_Settings.x));\r\n    #else\r\n    mediump vec4 bloom = upsampleBox(u_BloomTex, v_Texcoord0, u_BloomTex_TexelSize.xy, vec4(u_Bloom_Settings.x));\r\n    #endif\r\n\r\n    // UVs should be Distort(uv * u_Bloom_DirtTileOffset.xy + u_Bloom_DirtTileOffset.zw)\r\n    // but considering we use a cover-style scale on the dirt texture the difference\r\n    // isn\'t massive so we chose to save a few ALUs here instead in case lens distortion\r\n    // is active\r\n    mediump vec4 dirt = vec4(texture2D(u_Bloom_DirtTex, v_Texcoord0 * u_Bloom_DirtTileOffset.xy + u_Bloom_DirtTileOffset.zw).rgb, 0.0);\r\n    #ifdef Gamma_u_Bloom_DirtTex\r\n    dirt = gammaToLinear(dirt);\r\n    #endif // Gamma_u_Bloom_DirtTex\r\n\r\n    // Additive bloom (artist friendly)\r\n    bloom *= u_Bloom_Settings.y;\r\n    dirt *= u_Bloom_Settings.z;\r\n    mediump vec4 bloomColor = u_Bloom_Color;\r\n    color += bloom * bloomColor;\r\n    color += dirt * bloom;\r\n#endif\r\n\r\n    mediump vec4 finalColor = color;\r\n    // finalColor = linearToSRGB(finalColor);\r\n    // finalColor.rgb = Dither(finalColor.rgb, v_Texcoord0);//TODO:抖动\r\n    gl_FragColor = finalColor;\r\n\r\n    gl_FragColor = outputTransform(gl_FragColor);\r\n}').renderState;s.depthTest=Ee.DEPTHTEST_ALWAYS,s.depthWrite=!1,s.cull=Ee.CULL_NONE,s.blend=Ee.BLEND_DISABLE}static __initDefine__(){yr.SHADERVALUE_MAINTEX=t.Shader3D.propertyNameToID("u_MainTex"),yr.SHADERVALUE_AUTOEXPOSURETEX=t.Shader3D.propertyNameToID("u_AutoExposureTex"),yr.SHADERVALUE_SAMPLESCALE=t.Shader3D.propertyNameToID("u_SampleScale"),yr.SHADERVALUE_THRESHOLD=t.Shader3D.propertyNameToID("u_Threshold"),yr.SHADERVALUE_PARAMS=t.Shader3D.propertyNameToID("u_Params"),yr.SHADERVALUE_BLOOMTEX=t.Shader3D.propertyNameToID("u_BloomTex")}get clamp(){return this._clamp}set clamp(e){this._clamp=e}get color(){return this._color}set color(e){this._color=e}get fastMode(){return this._fastMode}set fastMode(e){this._fastMode=e}get dirtTexture(){return this._dirtTexture}set dirtTexture(e){this._dirtTexture&&this._dirtTexture._removeReference(1),this._dirtTexture=e,this._dirtTexture&&this._dirtTexture._addReference(1)}get intensity(){return this._intensity}set intensity(e){this._intensity=Math.max(e,0)}get threshold(){return this._threshold}set threshold(e){this._threshold=Math.max(e,0)}get softKnee(){return this._softKnee}set softKnee(e){this._softKnee=Math.min(Math.max(e,0),1)}get diffusion(){return this._diffusion}set diffusion(e){this._diffusion=Math.min(Math.max(e,1),10)}get anamorphicRatio(){return this._anamorphicRatio}set anamorphicRatio(e){this._anamorphicRatio=Math.min(Math.max(e,-1),1)}get dirtIntensity(){return this._dirtIntensity}set dirtIntensity(e){this._dirtIntensity=Math.max(e,0)}constructor(){super(),this._shader=null,this._shaderData=t.LayaGL.renderDeviceFactory.createShaderData(null),this._linearColor=new t.Color,this._bloomTextureTexelSize=new t.Vector4,this._shaderThreshold=new t.Vector4,this._shaderParams=new t.Vector4,this._pyramid=null,this._intensity=0,this._threshold=1,this._softKnee=.5,this._diffusion=7,this._anamorphicRatio=0,this._dirtIntensity=0,this._shaderSetting=new t.Vector4,this._dirtTileOffset=new t.Vector4,this._fastMode=!1,this._dirtTexture=null,this.singleton=!0,this.active=!0,this.intensity=1,this.threshold=1,this.softKnee=.5,this.clamp=65472,this.diffusion=7,this.anamorphicRatio=0,this.color=new t.Color(1,1,1,1)}effectInit(e){super.effectInit(e),this._shader=t.Shader3D.find("PostProcessBloom"),this._pyramid=new Array(2*yr.MAXPYRAMIDSIZE)}getCameraDepthTextureModeFlag(){return 0}release(e){super.release(e),this._shader=null,this._pyramid=[]}render(e){var r=e.command,n=e.camera.viewport;this._shaderData.setTexture(yr.SHADERVALUE_AUTOEXPOSURETEX,t.Texture2D.whiteTexture);var a,i=this._anamorphicRatio,s=i<0?-i:0,o=i>0?i:0,l=Math.floor(n.width/(2-s)),h=Math.floor(n.height/(2-o)),d=Math.max(l,h);a=Math.log2(d)+this._diffusion-10;var c=Math.floor(a),u=Math.min(Math.max(c,1),yr.MAXPYRAMIDSIZE),_=.5+a-c;this._shaderData.setNumber(yr.SHADERVALUE_SAMPLESCALE,_);var m=t.Color.gammaToLinearSpace(this.threshold),f=m*this._softKnee+1e-5;this._shaderThreshold.setValue(m,m-f,2*f,.25/f),this._shaderData.setVector(yr.SHADERVALUE_THRESHOLD,this._shaderThreshold);var g=t.Color.gammaToLinearSpace(this.clamp);this._shaderParams.setValue(g,0,0,0),this._shaderData.setVector(yr.SHADERVALUE_PARAMS,this._shaderParams);for(var p=this.fastMode?1:0,S=e.indirectTarget,T=0;T<u;T++){var E=2*T,x=E+1,A=0==T?yr.SUBSHADER_PREFILTER13+p:yr.SUBSHADER_DOWNSAMPLE13+p,D=t.RenderTexture.createFromPool(l,h,t.RenderTargetFormat.R8G8B8A8,t.RenderTargetFormat.None,!1,1,!1,!0);if(D.filterMode=t.FilterMode.Bilinear,this._pyramid[E]=D,T!==u-1){var R=t.RenderTexture.createFromPool(l,h,t.RenderTargetFormat.R8G8B8A8,t.RenderTargetFormat.None,!1,1,!1,!0);R.filterMode=t.FilterMode.Bilinear,this._pyramid[x]=R}r.blitScreenTriangle(S,D,null,this._shader,this._shaderData,A),S=D,l=Math.max(Math.floor(l/2),1),h=Math.max(Math.floor(h/2),1)}var M=this._pyramid[2*(u-1)];for(T=u-2;T>=0;T--)x=(E=2*T)+1,D=this._pyramid[E],R=this._pyramid[x],r.setShaderDataTexture(this._shaderData,yr.SHADERVALUE_BLOOMTEX,D),r.blitScreenTriangle(M,R,null,this._shader,this._shaderData,yr.SUBSHADER_UPSAMPLETENT+p),M=R;var C=this._linearColor;this.color.toLinear(C);var v=Math.pow(2,this._intensity/10)-1,y=this._shaderSetting;this._shaderSetting.setValue(_,v,this._dirtIntensity,u);var I=this._dirtTexture?this._dirtTexture:t.Texture2D.blackTexture,L=I.width/I.height,B=n.width/n.height,O=this._dirtTileOffset;L>B?O.setValue(B/L,1,.5*(1-O.x),0):L<B&&O.setValue(1,L/B,0,.5*(1-O.y));var w=e.compositeShaderData;this.fastMode?w.addDefine(Je.SHADERDEFINE_BLOOM_LOW):w.addDefine(Je.SHADERDEFINE_BLOOM),this._bloomTextureTexelSize.setValue(1/M.width,1/M.height,M.width,M.height),w.setVector(Je.SHADERVALUE_BLOOM_DIRTTILEOFFSET,O),w.setVector(Je.SHADERVALUE_BLOOM_SETTINGS,y),w.setColor(Je.SHADERVALUE_BLOOM_COLOR,C),w.setTexture(Je.SHADERVALUE_BLOOM_DIRTTEX,I),w.setTexture(Je.SHADERVALUE_BLOOMTEX,M),w.setVector(Je.SHADERVALUE_BLOOMTEX_TEXELSIZE,this._bloomTextureTexelSize);let P=t.Shader3D.find("PostProcessComposite");for(r.blitScreenTriangle(e.indirectTarget,e.destination,e.camera._screenOffsetScale,P,w,0),T=0;T<u;T++)x=(E=2*T)+1,t.RenderTexture.recoverToPool(this._pyramid[E]),0!==T&&T!==u-1&&t.RenderTexture.recoverToPool(this._pyramid[x]);e.deferredReleaseTextures.push(M)}}yr.SUBSHADER_PREFILTER13=0,yr.SUBSHADER_PREFILTER4=1,yr.SUBSHADER_DOWNSAMPLE13=2,yr.SUBSHADER_DOWNSAMPLE4=3,yr.SUBSHADER_UPSAMPLETENT=4,yr.SUBSHADER_UPSAMPLEBOX=5,yr.MAXPYRAMIDSIZE=16;var Ir;e.AOQUALITY=void 0,(Ir=e.AOQUALITY||(e.AOQUALITY={}))[Ir.High=0]="High",Ir[Ir.MEDIUM=1]="MEDIUM",Ir[Ir.LOWEST=2]="LOWEST";class Lr extends Xe{static init(){Lr.BlurDelty=t.Shader3D.propertyNameToID("u_Delty"),Lr.AOColor=t.Shader3D.propertyNameToID("u_AOColor"),Lr.aoTexture=t.Shader3D.propertyNameToID("u_compositionAoTexture"),Lr.AOParams=t.Shader3D.propertyNameToID("u_AOParams"),Lr.SourceTex=t.Shader3D.propertyNameToID("u_SourceTex"),Lr.SHADERDEFINE_AOHigh=t.Shader3D.getDefineByName("AO_High"),Lr.SHADERDEFINE_AOMEDIUM=t.Shader3D.getDefineByName("AO_MEDIUM"),Lr.SHADERDEFINE_LOWEST=t.Shader3D.getDefineByName("AO_LOWEST"),t.Shader3D.addInclude("AmbientOcclusion.glsl",'#include "Camera.glsl";\r\n// const \r\n#define TWO_PI 6.2831852\r\n\r\n#define EPSILON         1.0e-4\r\n#define FLT_EPSILON     1.192092896e-07 // Smallest positive number, such that 1.0 + FLT_EPSILON != 1.0\r\n\r\nconst float kContrast = 0.6;\r\nconst float kGeometryCoeff = 0.8;\r\nconst float kBeta = 0.002;\r\n\r\n\r\n// varying\r\nvarying vec2 v_Texcoord0;\r\n\r\n#if defined(AO_High)\r\n\t#define SAMPLE_COUNT 12\r\n#elif defined(AO_MEDIUM)\r\n\t#define SAMPLE_COUNT 8\r\n#else\r\n\t#define SAMPLE_COUNT 4\r\n#endif\r\n\r\n#ifdef AOLOWEST\r\n#define SAMPLE_COUNT 8\r\n#endif\r\n\r\n#ifdef AOLOWEST\r\n#define SAMPLE_COUNT 8\r\n#endif\r\n\r\n\r\n#define INTENSITY u_AOParams.x\r\n#define RADIUS u_AOParams.y\r\n#define DOWNSAMPLE u_AOParams.z\r\n\r\nfloat PositivePow(float base, float power)\r\n{\r\n    return pow(max(abs(base), float(FLT_EPSILON)), power);\r\n}\r\n\r\n\r\n// Boundary check for depth sampler\r\n// (returns a very large value if it lies out of bounds)\r\nfloat CheckBounds(vec2 uv, float d) \r\n{\r\n    float ob = 0.0;\r\n    // todo\r\n    if (uv.x < 0.0 || uv.x > 1.0 || uv.y < 0.0 || uv.y > 1.0) \r\n    {\r\n        ob = 1.0;\r\n    }\r\n    if (d <= 0.00001) {\r\n        ob += 1.0;\r\n    }\r\n\r\n    return ob * 1e8;\r\n}\r\n\r\nfloat SampleDepth(vec2 uv) \r\n{\r\n    float depthTex_Depth = SAMPLE_DEPTH_TEXTURE(u_CameraDepthTexture, uv);\r\n    float depthTex_Linear01Depth = Linear01Depth(depthTex_Depth, u_ZBufferParams);\r\n    return  depthTex_Linear01Depth * u_ProjectionParams.y + CheckBounds(uv, depthTex_Linear01Depth);\r\n}\r\n\r\nvec3 SampleNormal(vec2 uv) \r\n{\r\n    vec4 col = texture2D(u_CameraDepthNormalsTexture, uv);\r\n    vec3 depthNormal_Normal = DecodeViewNormalStereo(col);\r\n    return depthNormal_Normal * vec3(1.0, 1.0, -1.0);\r\n}\r\n\r\nfloat SampleDepthNormal(vec2 uv, out vec3 normal) \r\n{\r\n    normal = SampleNormal(uv);\r\n    return SampleDepth(uv);\r\n}\r\n\r\n// Normal vector comparer (for geometry-aware weighting)\r\nfloat CompareNormal(vec3 d1, vec3 d2)\r\n{\r\n    return smoothstep(kGeometryCoeff, 1.0, dot(d1, d2));\r\n}\r\n\r\n// Accessors for packed AO/normal buffer\r\nvec4 PackAONormal(float ao, vec3 n) \r\n{\r\n    return vec4(ao, n * 0.5 + 0.5);\r\n}\r\n\r\nvec3 GetPackedNormal(vec4 p)\r\n{\r\n    return p.gba * 2.0 - 1.0;\r\n}\r\n\r\nfloat GetPackAO(vec4 p)\r\n{\r\n    return p.r;\r\n}\r\n\r\n\r\n');let r={a_PositionTexcoord:[t.VertexMesh.MESH_POSITION0,e.ShaderDataType.Vector4]},n={u_OffsetScale:e.ShaderDataType.Vector4,u_MainTex:e.ShaderDataType.Texture2D,u_MainTex_TexelSize:e.ShaderDataType.Vector4,u_Delty:e.ShaderDataType.Vector2,u_PlugTime:e.ShaderDataType.Vector4,u_AOParams:e.ShaderDataType.Vector3,u_BlurVector:e.ShaderDataType.Vector2,u_AOColor:e.ShaderDataType.Color,u_compositionAoTexture:e.ShaderDataType.Texture2D},a=t.Shader3D.add("ScalableAO");a.shaderType=t.ShaderFeatureType.PostProcess;let i=new t.SubShader(r,n);a.addSubShader(i);let s=i.addShaderPass(je,'#define SHADER_NAME OcclusionEstimationFS\r\n\r\n#include "DepthNormalUtil.glsl";\r\n\r\n#include "AmbientOcclusion.glsl";\r\n\r\n#define FIX_SAMPLING_PATTERN\r\n\r\n// Check if the camera is perspective.\r\n// (returns 1.0 when orthographic)\r\nfloat CheckPerspective(float x)\r\n{\r\n    // todo ortho\r\n    return mix(x, 1.0, 0.0);\r\n}\r\n\r\nvec3 ReconstructViewPos(vec2 uv, float depth, vec2 p11_22, vec2 p13_31)\r\n{\r\n    return vec3((uv * 2.0 - 1.0 - p13_31) / p11_22 * CheckPerspective(depth), depth);\r\n}\r\n\r\n// Pseudo random number generator with 2D coordinates\r\n// https://stackoverflow.com/questions/12964279/whats-the-origin-of-this-glsl-rand-one-liner\r\nfloat UVRandom(float u, float v)\r\n{\r\n    float f = dot(vec2(12.9898, 78.233), vec2(u, v));\r\n    return fract(43758.5453 * sin(f));\r\n}\r\n\r\nvec2 CosSin(float theta)\r\n{\r\n    // float sn, cs;\r\n    // sincos(theta, sn, cs);\r\n    float sn = sin(theta);\r\n    float cs = cos(theta);\r\n    return vec2(cs, sn);\r\n}\r\n\r\nfloat GradientNoise(vec2 uv)\r\n{\r\n    uv = floor(uv * u_MainTex_TexelSize.zw);\r\n    float f = dot(vec2(0.06711056, 0.00583715), uv);\r\n    return fract(52.9829189 * fract(f));\r\n}\r\n\r\n// Sample point picker\r\nvec3 PickSamplePoint(vec2 uv, float index)\r\n{\r\n#if defined(FIX_SAMPLING_PATTERN)\r\n    float gn = GradientNoise(uv * DOWNSAMPLE);\r\n    float u = fract(UVRandom(0.0, index + uv.x * 1e-10) + gn) * 2.0 - 1.0;\r\n    float theta = (UVRandom(1.0, index + uv.x * 1e-10) + gn) * TWO_PI;\r\n#else\r\n    float u = UVRandom(uv.x + u_PlugTime.x, uv.y + index) * 2.0 - 1.0;\r\n    float theta = UVRandom(-uv.x - u_PlugTime.x, uv.y + index) * TWO_PI;\r\n#endif\r\n\r\n    vec3 v = vec3(CosSin(theta) * sqrt(1.0 - u * u), u);\r\n    float l = sqrt((index + 1.0) / float(SAMPLE_COUNT)) * RADIUS;\r\n    return v * l;\r\n}\r\n\r\nvoid main()\r\n{\r\n    vec2 uv = v_Texcoord0;\r\n\r\n    mat3 proj = mat3(u_Projection);\r\n    vec2 p11_22 = vec2(u_Projection[0][0], u_Projection[1][1]);\r\n    vec2 p13_31 = vec2(u_Projection[2][0], u_Projection[2][1]);\r\n\r\n    vec3 norm_o;\r\n    float depth_o = SampleDepthNormal(uv, norm_o);\r\n\r\n    // Reconstruct the view-space position.\r\n    vec3 vpos_o = ReconstructViewPos(uv, depth_o, p11_22, p13_31);\r\n\r\n    float ao = 0.0;\r\n\r\n    for (int s = 0; s < int(SAMPLE_COUNT); s++)\r\n\t{\r\n\t    float s_float = float(s);\r\n\t    vec3 v_s1 = PickSamplePoint(uv, s_float);\r\n\r\n\t    v_s1 = faceforward(v_s1, -norm_o, v_s1);\r\n\t    vec3 vpos_s1 = vpos_o + v_s1;\r\n\r\n\t    // Reproject the sample point\r\n\t    vec3 spos_s1 = proj * vpos_s1;\r\n\t    vec2 uv_s1_01 = (spos_s1.xy / CheckPerspective(vpos_s1.z) + 1.0) * 0.5;\r\n\r\n\t    float depth_s1 = SampleDepth(uv_s1_01);\r\n\r\n\t    vec3 vpos_s2 = ReconstructViewPos(uv_s1_01, depth_s1, p11_22, p13_31);\r\n\t    vec3 v_s2 = vpos_s2 - vpos_o;\r\n\r\n\t    float a1 = max(dot(v_s2, norm_o) - kBeta * depth_o, 0.0);\r\n\t    float a2 = dot(v_s2, v_s2) + EPSILON;\r\n\r\n\t    ao += a1 / a2;\r\n\t}\r\n\r\n    ao *= RADIUS;\r\n\r\n    ao = PositivePow(ao * INTENSITY / float(SAMPLE_COUNT), kContrast);\r\n\r\n    gl_FragColor = PackAONormal(ao, norm_o);\r\n}\r\n\r\n/**\r\n    0.8741,     0,          0,          0,\r\n    0,          1.7320,     0,          0,\r\n    0,          0,          -1.0152,    -1,\r\n    0,          0,          -0.3046,    0\r\n**/');s.statefirst=!0,s.renderState.cull=Ee.CULL_NONE,a=t.Shader3D.add("AOBlurHorizontal"),a.shaderType=t.ShaderFeatureType.PostProcess,i=new t.SubShader(r,n),a.addSubShader(i);let o=i.addShaderPass(je,"#define SHADER_NAME AOBlurHorizontal\r\n//质量\r\n#define BLUR_HIGH_QUALITY 0\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\n// uniform vec2 u_Delty;\r\n\r\nvec3 GetPackedNormal(vec4 p)\r\n{\r\n    return p.gba * 2.0 - 1.0;\r\n}\r\n\r\nfloat CompareNormal(vec3 d1, vec3 d2)\r\n{\r\n    return smoothstep(0.8, 1.0, dot(d1, d2));\r\n}\r\n\r\nfloat GetPackedAO(vec4 p)\r\n{\r\n    return p.r;\r\n}\r\n\r\nvec4 PackAONormal(float ao, vec3 normal)\r\n{\r\n    return vec4(ao, normal * 0.5 + 0.5);\r\n}\r\n\r\nvoid main()\r\n{\r\n    vec2 delta = vec2(u_MainTex_TexelSize.x * 2.0 * u_Delty.x, u_Delty.y * u_MainTex_TexelSize.y * 2.0);\r\n    vec2 uv = v_Texcoord0;\r\n\r\n// #if defined(BLUR_HIGH_QUALITY) //兼容WGSL\r\n\r\n    // High quality 7-tap Gaussian with adaptive sampling\r\n    vec2 uvtran = uv;\r\n    vec4 p0 = texture2D(u_MainTex, uv);\r\n    uvtran = uv - delta;\r\n    vec4 p1a = texture2D(u_MainTex, uvtran);\r\n    uvtran = uv + delta;\r\n    vec4 p1b = texture2D(u_MainTex, uvtran);\r\n    uvtran = uv - delta * 2.0;\r\n    vec4 p2a = texture2D(u_MainTex, uvtran);\r\n    uvtran = uv + delta * 2.0;\r\n    vec4 p2b = texture2D(u_MainTex, uvtran);\r\n    uvtran = uv - delta * 3.2307692308;\r\n    vec4 p3a = texture2D(u_MainTex, uvtran);\r\n    ;\r\n    uvtran = uv + delta * 3.2307692308;\r\n    vec4 p3b = texture2D(u_MainTex, uvtran);\r\n    ;\r\n\r\n    vec3 n0 = GetPackedNormal(p0);\r\n\r\n    float w0 = 0.37004405286;\r\n    float w1a = CompareNormal(n0, GetPackedNormal(p1a)) * 0.31718061674;\r\n    float w1b = CompareNormal(n0, GetPackedNormal(p1b)) * 0.31718061674;\r\n    float w2a = CompareNormal(n0, GetPackedNormal(p2a)) * 0.19823788546;\r\n    float w2b = CompareNormal(n0, GetPackedNormal(p2b)) * 0.19823788546;\r\n    float w3a = CompareNormal(n0, GetPackedNormal(p3a)) * 0.11453744493;\r\n    float w3b = CompareNormal(n0, GetPackedNormal(p3b)) * 0.11453744493;\r\n\r\n    float s;\r\n    s = GetPackedAO(p0) * w0;\r\n    s += GetPackedAO(p1a) * w1a;\r\n    s += GetPackedAO(p1b) * w1b;\r\n    s += GetPackedAO(p2a) * w2a;\r\n    s += GetPackedAO(p2b) * w2b;\r\n    s += GetPackedAO(p3a) * w3a;\r\n    s += GetPackedAO(p3b) * w3b;\r\n\r\n    s /= w0 + w1a + w1b + w2a + w2b + w3a + w3b;\r\n\r\n// #else\r\n\r\n//     // Fater 5-tap Gaussian with linear sampling\r\n//     vec4 p0 = texture2D(u_MainTex, sampler_MainTex, i.texcoordStereo);\r\n//     vec4 p1a = SAMPLE_TEXTURE2D(_MainTex, sampler_MainTex, UnityStereoTransformScreenSpaceTex(i.texcoord - delta * 1.3846153846));\r\n//     vec4 p1b = SAMPLE_TEXTURE2D(_MainTex, sampler_MainTex, UnityStereoTransformScreenSpaceTex(i.texcoord + delta * 1.3846153846));\r\n//     vec4 p2a = SAMPLE_TEXTURE2D(_MainTex, sampler_MainTex, UnityStereoTransformScreenSpaceTex(i.texcoord - delta * 3.2307692308));\r\n//     vec4 p2b = SAMPLE_TEXTURE2D(_MainTex, sampler_MainTex, UnityStereoTransformScreenSpaceTex(i.texcoord + delta * 3.2307692308));\r\n\r\n//     vec2 uvtran = uv;\r\n//     vec4 p0 = texture2D(u_MainTex, uv);\r\n//     uvtran = uv - delta * 1.3846153846;\r\n//     vec4 p1a = texture2D(u_MainTex, uvtran);\r\n//     uvtran = uv + delta * 1.3846153846;\r\n//     vec4 p1b = texture2D(u_MainTex, uvtran);\r\n//     uvtran = uv - delta * 3.2307692308;\r\n//     vec4 p2a = texture2D(u_MainTex, uvtran);\r\n//     uvtran = uv + delta * 3.2307692308;\r\n//     vec4 p2b = texture2D(u_MainTex, uvtran);\r\n\r\n//     vec3 n0 = GetPackedNormal(p0);\r\n\r\n//     float w0 = 0.2270270270;\r\n//     float w1a = CompareNormal(n0, GetPackedNormal(p1a)) * 0.3162162162;\r\n//     float w1b = CompareNormal(n0, GetPackedNormal(p1b)) * 0.3162162162;\r\n//     float w2a = CompareNormal(n0, GetPackedNormal(p2a)) * 0.0702702703;\r\n//     float w2b = CompareNormal(n0, GetPackedNormal(p2b)) * 0.0702702703;\r\n\r\n//     float s;\r\n//     s = GetPackedAO(p0) * w0;\r\n//     s += GetPackedAO(p1a) * w1a;\r\n//     s += GetPackedAO(p1b) * w1b;\r\n//     s += GetPackedAO(p2a) * w2a;\r\n//     s += GetPackedAO(p2b) * w2b;\r\n\r\n//     s /= w0 + w1a + w1b + w2a + w2b;\r\n\r\n// #endif\r\n\r\n    gl_FragColor = PackAONormal(s, n0);\r\n}");o.statefirst=!0,o.renderState.cull=Ee.CULL_NONE,a=t.Shader3D.add("AOComposition"),a.shaderType=t.ShaderFeatureType.PostProcess,i=new t.SubShader(r,n),a.addSubShader(i);let l=i.addShaderPass(je,'#define SHADER_NAME AOComposition\r\n\r\n#include "Color.glsl";\r\n\r\n#define BLUR_HIGH_QUALITY 0\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\nvec3 GetPackedNormal(vec4 p)\r\n{\r\n    return p.gba * 2.0 - 1.0;\r\n}\r\nfloat CompareNormal(vec3 d1, vec3 d2)\r\n{\r\n    return smoothstep(0.8, 1.0, dot(d1, d2));\r\n}\r\nfloat GetPackedAO(vec4 p)\r\n{\r\n    return p.r;\r\n}\r\n\r\n// Geometry-aware bilateral filter (single pass/small kernel)\r\nfloat BlurSmall(sampler2D tex, vec2 uv, vec2 delta)\r\n{\r\n    vec4 p0 = texture2D(tex, uv);\r\n    vec2 uvtran = uv + vec2(-delta.x, -delta.y);\r\n    vec4 p1 = texture2D(tex, uvtran);\r\n    uvtran = uv + vec2(delta.x, -delta.y);\r\n    vec4 p2 = texture2D(tex, uvtran);\r\n    uvtran = uv + vec2(-delta.x, delta.y);\r\n    vec4 p3 = texture2D(tex, uvtran);\r\n    uvtran = uv + delta;\r\n    vec4 p4 = texture2D(tex, uvtran);\r\n\r\n    vec3 n0 = GetPackedNormal(p0);\r\n\r\n    float w0 = 1.0;\r\n    float w1 = CompareNormal(n0, GetPackedNormal(p1));\r\n    float w2 = CompareNormal(n0, GetPackedNormal(p2));\r\n    float w3 = CompareNormal(n0, GetPackedNormal(p3));\r\n    float w4 = CompareNormal(n0, GetPackedNormal(p4));\r\n\r\n    float s;\r\n    s = GetPackedAO(p0) * w0;\r\n    s += GetPackedAO(p1) * w1;\r\n    s += GetPackedAO(p2) * w2;\r\n    s += GetPackedAO(p3) * w3;\r\n    s += GetPackedAO(p4) * w4;\r\n\r\n    return s / (w0 + w1 + w2 + w3 + w4);\r\n}\r\n\r\nvoid main()\r\n{\r\n    vec2 uv = v_Texcoord0;\r\n    vec2 delty = u_MainTex_TexelSize.xy;\r\n    float ao = BlurSmall(u_compositionAoTexture, uv, delty);\r\n    vec4 albedo = texture2D(u_MainTex, uv);\r\n#ifdef Gamma_u_MainTex\r\n    albedo = gammaToLinear(albedo);\r\n#endif // Gamma_u_MainTex\r\n    vec4 aocolor = vec4(ao * u_AOColor.rgb, ao);\r\n    albedo.rgb = albedo.rgb * (1.0 - ao) + ao * u_AOColor.rgb * ao;\r\n    gl_FragColor = albedo;\r\n\r\n    gl_FragColor = outputTransform(gl_FragColor);\r\n}');l.statefirst=!0,l.renderState.cull=Ee.CULL_NONE}constructor(){super(),this._aoParams=new t.Vector3,this._aoQuality=e.AOQUALITY.MEDIUM,this._shader=t.Shader3D.find("ScalableAO"),this._shaderData=t.LayaGL.renderDeviceFactory.createShaderData(null),this._aoParams=new t.Vector3(.12,.15,1),this._shaderData.setVector3(Lr.AOParams,this._aoParams),this._shaderData.setVector(ae.DEPTHZBUFFERPARAMS,new t.Vector4),this._aoBlurHorizontalShader=t.Shader3D.find("AOBlurHorizontal"),this._aoComposition=t.Shader3D.find("AOComposition"),this.aoQuality=e.AOQUALITY.MEDIUM}get aoColor(){return this._shaderData.getColor(Lr.AOColor)}set aoColor(e){this._shaderData.setColor(Lr.AOColor,e)}get intensity(){return this._aoParams.x}set intensity(e){this._aoParams.x=e,this._shaderData.setVector3(Lr.AOParams,this._aoParams)}get radius(){return this._aoParams.y}set radius(e){this._aoParams.y=e,this._shaderData.setVector3(Lr.AOParams,this._aoParams)}get aoQuality(){return this._aoQuality}set aoQuality(t){switch(this._aoQuality=t,t){case e.AOQUALITY.High:this._shaderData.addDefine(Lr.SHADERDEFINE_AOHigh),this._shaderData.removeDefine(Lr.SHADERDEFINE_AOMEDIUM),this._shaderData.removeDefine(Lr.SHADERDEFINE_LOWEST);break;case e.AOQUALITY.MEDIUM:this._shaderData.addDefine(Lr.SHADERDEFINE_AOMEDIUM),this._shaderData.removeDefine(Lr.SHADERDEFINE_AOHigh),this._shaderData.removeDefine(Lr.SHADERDEFINE_LOWEST);break;case e.AOQUALITY.LOWEST:this._shaderData.addDefine(Lr.SHADERDEFINE_LOWEST),this._shaderData.removeDefine(Lr.SHADERDEFINE_AOHigh),this._shaderData.removeDefine(Lr.SHADERDEFINE_AOMEDIUM)}}getCameraDepthTextureModeFlag(){return t.DepthTextureMode.DepthAndDepthNormals}render(e){let r=e.command;e.camera.viewport;let n=e.camera;n.depthTextureMode|=t.DepthTextureMode.DepthNormals,n.depthTextureMode|=t.DepthTextureMode.Depth;let a=n.depthNormalTexture,i=n.depthTexture;if(!a||!i)return;a.wrapModeU=t.WrapMode.Clamp,a.wrapModeV=t.WrapMode.Clamp;let s=e.source,o=s.width,l=s.height,h=s.colorFormat,d=t.RenderTargetFormat.None,c=t.RenderTexture.createFromPool(o,l,h,d,!1,1),u=this._shader,_=this._shaderData;r.blitScreenTriangle(e.source,c,null,u,_,0);let m=t.RenderTexture.createFromPool(o,l,h,d,!1,1);r.blitScreenTriangle(c,m,null,this._aoBlurHorizontalShader,_,0),r.setShaderDataVector2(_,Lr.BlurDelty,Lr.deltyVector),r.blitScreenTriangle(m,c,null,this._aoBlurHorizontalShader,this._shaderData,0),r.setShaderDataTexture(_,Lr.aoTexture,c),r.blitScreenTriangle(e.source,e.destination,null,this._aoComposition,this._shaderData,0),e.deferredReleaseTextures.push(c),e.deferredReleaseTextures.push(m)}}Lr.deltyHorizontal=new t.Vector2(1,0),Lr.deltyVector=new t.Vector2(0,1);var Br="#define SHADER_NAME SCREENVS\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\nvec4 remapPositionZ(vec4 position)\r\n{\r\n    #ifdef BLITSCREEN_INVERTY //兼容WGSL\r\n    position.y = -position.y;\r\n    #endif\r\n    return position;\r\n}\r\n\r\nvoid main() {\t\r\n\tgl_Position = vec4(u_OffsetScale.x*2.0-1.0+(a_PositionTexcoord.x+1.0)*u_OffsetScale.z,(1.0-((u_OffsetScale.y*2.0-1.0+(-a_PositionTexcoord.y+1.0)*u_OffsetScale.w)+1.0)/2.0)*2.0-1.0, 0.0, 1.0);\t\r\n\tv_Texcoord0 = a_PositionTexcoord.zw;\r\n\tgl_Position = remapPositionZ(gl_Position);\r\n}";class Or extends Xe{static init(){Or.SOURCESIZE=t.Shader3D.propertyNameToID("u_SourceSize"),Or.ZBUFFERPARAMS=t.Shader3D.propertyNameToID("u_ZBufferParams"),Or.COCPARAMS=t.Shader3D.propertyNameToID("u_CoCParams"),Or.DEPTHTEXTURE=t.Shader3D.propertyNameToID("u_CameraDepthTexture"),Or.NORMALDEPTHTEXTURE=t.Shader3D.propertyNameToID("u_CameraDepthNormalTexture"),Or.FULLCOCTEXTURE=t.Shader3D.propertyNameToID("u_FullCoCTex"),Or.DOWNSAMPLESCALE=t.Shader3D.propertyNameToID("u_DownSampleScale"),Or.BLURCOCTEXTURE=t.Shader3D.propertyNameToID("u_BlurCoCTex"),Or.SHADERDEFINE_DEPTHNORMALTEXTURE=t.Shader3D.getDefineByName("CAMERA_NORMALDEPTH");let r={a_PositionTexcoord:[t.VertexMesh.MESH_POSITION0,e.ShaderDataType.Vector4]},n={u_MainTex:e.ShaderDataType.Texture2D,u_MainTex_TexelSize:e.ShaderDataType.Vector4,u_OffsetScale:e.ShaderDataType.Vector4,u_ZBufferParams:e.ShaderDataType.Vector4,u_CoCParams:e.ShaderDataType.Vector3,u_FullCoCTex:e.ShaderDataType.Texture2D,u_SourceSize:e.ShaderDataType.Vector4,u_DownSampleScale:e.ShaderDataType.Vector4,u_BlurCoCTex:e.ShaderDataType.Texture2D},a=t.Shader3D.add("GaussianDoF");a.shaderType=t.ShaderFeatureType.PostProcess;let i=new t.SubShader(r,n);a.addSubShader(i);let s=i.addShaderPass(Br,"#define SHADER_NAME COCFS\r\n\r\n#ifdef CAMERA_NORMALDEPTH\r\nuniform sampler2D u_CameraDepthNormalTexture;\r\n#else\r\nuniform sampler2D u_CameraDepthTexture;\r\n#endif\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\n// Z buffer to linear 0..1 depth\r\nfloat Linear01Depth(float z, vec4 zbufferParams)\r\n{\r\n    return 1.0 / (zbufferParams.x * z + zbufferParams.y);\r\n}\r\n\r\n// Z buffer to linear depth\r\nfloat LinearEyeDepth(float z, vec4 zbufferParams)\r\n{\r\n    return 1.0 / (zbufferParams.z * z + zbufferParams.w);\r\n}\r\n\r\nfloat DecodeFloatRG(vec2 enc)\r\n{\r\n    vec2 kDecodeDot = vec2(1.0, 1.0 / 255.0);\r\n    return dot(enc, kDecodeDot);\r\n}\r\n\r\nvoid DecodeDepthNormal(vec4 enc, out float depth)\r\n{\r\n    depth = DecodeFloatRG(enc.zw);\r\n}\r\n\r\nvoid main()\r\n{\r\n    vec2 uv = v_Texcoord0;\r\n\r\n#ifdef CAMERA_NORMALDEPTH\r\n    vec4 depthNormal = texture2D(u_CameraDepthNormalTexture, uv);\r\n    float depth = 0.0;\r\n    DecodeDepthNormal(depthNormal, depth);\r\n    depth = ((1.0 / depth) - u_ZBufferParams.y) * (1.0 / u_ZBufferParams.x);\r\n#else\r\n    float depth = texture2D(u_CameraDepthTexture, uv).x;\r\n#endif\r\n\r\n    depth = LinearEyeDepth(depth, u_ZBufferParams);\r\n    float farStart = u_CoCParams.x;\r\n    float farEnd = u_CoCParams.y;\r\n\r\n    float coc = (depth - farStart) / (farEnd - farStart);\r\n    coc = clamp(coc, 0.0, 1.0);\r\n    gl_FragColor = vec4(coc, coc, coc, 1.0);\r\n}\r\n");s.statefirst=!0,s.renderState.cull=Ee.CULL_NONE;let o=new t.SubShader(r,n);a.addSubShader(o);let l=o.addShaderPass(Br,'#define SHADER_NAME PrefilterFS\r\n\r\n#include "Color.glsl";\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\nconst int kCount = 5;\r\nvec2 kTaps[5];\r\n\r\nvoid main()\r\n{\r\n\r\n    kTaps[0] = vec2(0.0, 0.0);\r\n    kTaps[1] = vec2(0.9, -0.4);\r\n    kTaps[2] = vec2(-0.9, 0.4);\r\n    kTaps[3] = vec2(0.4, 0.9);\r\n    kTaps[4] = vec2(-0.4, -0.9);\r\n\r\n    vec3 colorAcc = vec3(0.0);\r\n    float farCoCAcc = 0.0;\r\n    for (int i = 0; i < kCount; i++)\r\n\t{\r\n\t    vec2 uv = u_MainTex_TexelSize.xy * kTaps[i] + v_Texcoord0;\r\n\t    vec3 tapColor = texture2D(u_MainTex, uv).rgb;\r\n#ifdef Gamma_u_MainTex\r\n\t    tapColor = gammaToLinear(tapColor);\r\n#endif // Gamma_u_MainTex\r\n\r\n\t    float coc = texture2D(u_FullCoCTex, uv).r;\r\n\r\n\t    colorAcc += tapColor * coc;\r\n\t    farCoCAcc += coc;\r\n\t}\r\n    vec3 color = colorAcc * (1.0 / float(kCount));\r\n    float farCoC = farCoCAcc * (1.0 / float(kCount));\r\n\r\n    // float farCoC = texture2D(u_FullCoCTex, v_Texcoord0).x;\r\n    // vec3 color = texture2D(u_MainTex, v_Texcoord0).rgb;\r\n    // color *= farCoC;\r\n\r\n    gl_FragColor = vec4(color, farCoC);\r\n\r\n    gl_FragColor = outputTransform(gl_FragColor);\r\n}');l.statefirst=!0,l.renderState.cull=Ee.CULL_NONE;let h=new t.SubShader(r,n);a.addSubShader(h);let d=h.addShaderPass(Br,'#define SHADER_NAME BlurHFS\r\n\r\n#include "Color.glsl";\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\nconst int kTapCount = 3;\r\nfloat kOffsets[3];\r\nfloat kCoeffs[3];\r\n\r\nvec4 Blur(vec2 dir, float premultiply)\r\n{\r\n\r\n    kOffsets[0] = -1.33333333;\r\n    kOffsets[1] = 0.00000000;\r\n    kOffsets[2] = 1.33333333;\r\n\r\n    kCoeffs[0] = 0.35294118;\r\n    kCoeffs[1] = 0.29411765;\r\n    kCoeffs[2] = 0.3529411;\r\n\r\n    vec2 uv = v_Texcoord0;\r\n    // ivec2 positionSS = ivec2(u_SourceSize.xy * uv);\r\n\r\n    vec4 halfColor = texture2D(u_MainTex, uv);\r\n#ifdef Gamma_u_MainTex\r\n    halfColor = gammaToLinear(halfColor);\r\n#endif // Gamma_u_MainTex\r\n    float samp0CoC = halfColor.a;\r\n\r\n    float maxRadius = u_CoCParams.z;\r\n    vec2 offset = u_SourceSize.zw * dir * samp0CoC * maxRadius;\r\n\r\n    vec4 acc = vec4(0.0);\r\n\r\n    for (int i = 0; i < kTapCount; i++)\r\n\t{\r\n\t    vec2 sampCoord = uv + kOffsets[i] * offset;\r\n\t    vec4 samp = texture2D(u_MainTex, sampCoord);\r\n#ifdef Gamma_u_MainTex\r\n\t    samp = gammaToLinear(samp);\r\n#endif // Gamma_u_MainTex\r\n\t    float sampCoC = samp.a;\r\n\t    vec3 sampColor = samp.rgb;\r\n\r\n\t    float weight = clamp(1.0 - (samp0CoC - sampCoC), 0.0, 1.0);\r\n\t    acc += vec4(sampColor, sampCoC) * kCoeffs[i] * weight;\r\n\t}\r\n\r\n    acc.xyz /= acc.w + 1e-4;\r\n    return vec4(acc.xyz, samp0CoC);\r\n}\r\n\r\nvoid main()\r\n{\r\n    gl_FragColor = Blur(vec2(1.0, 0.0), 1.0);\r\n\r\n    gl_FragColor = outputTransform(gl_FragColor);\r\n}');d.statefirst=!0,d.renderState.cull=Ee.CULL_NONE;let c=new t.SubShader(r,n);a.addSubShader(c);let u=c.addShaderPass(Br,'#define SHADER_NAME BlurVFS\r\n\r\n#include "Color.glsl";\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\n// todo 3 & 5\r\nconst int kTapCount = 3;\r\nfloat kOffsets[3];\r\nfloat kCoeffs[3];\r\n\r\nvec4 Blur(vec2 dir, float premultiply)\r\n{\r\n\r\n    kOffsets[0] = -1.33333333;\r\n    kOffsets[1] = 0.00000000;\r\n    kOffsets[2] = 1.33333333;\r\n\r\n    kCoeffs[0] = 0.35294118;\r\n    kCoeffs[1] = 0.29411765;\r\n    kCoeffs[2] = 0.3529411;\r\n\r\n    vec2 uv = v_Texcoord0;\r\n    // ivec2 positionSS = ivec2(u_SourceSize.xy * uv);\r\n\r\n    vec4 halfColor = texture2D(u_MainTex, uv);\r\n#ifdef Gamma_u_MainTex\r\n    halfColor = gammaToLinear(halfColor);\r\n#endif // Gamma_u_MainTex\r\n    float samp0CoC = halfColor.a;\r\n\r\n    float maxRadius = u_CoCParams.z;\r\n    vec2 offset = u_SourceSize.zw * dir * samp0CoC * maxRadius;\r\n\r\n    vec4 acc = vec4(0.0);\r\n\r\n    for (int i = 0; i < kTapCount; i++)\r\n\t{\r\n\t    vec2 sampCoord = uv + kOffsets[i] * offset;\r\n\t    vec4 samp = texture2D(u_MainTex, sampCoord);\r\n#ifdef Gamma_u_MainTex\r\n\t    samp = gammaToLinear(samp);\r\n#endif // Gamma_u_MainTex\r\n\t    float sampCoC = samp.w;\r\n\t    vec3 sampColor = samp.xyz;\r\n\r\n\t    float weight = clamp(1.0 - (samp0CoC - sampCoC), 0.0, 1.0);\r\n\t    acc += vec4(sampColor, 1.0) * kCoeffs[i] * weight;\r\n\t}\r\n\r\n    acc.xyz /= acc.w + 1e-4;\r\n    return vec4(acc.xyz, 1.0);\r\n}\r\n\r\nvoid main()\r\n{\r\n    gl_FragColor = Blur(vec2(0.0, 1.0), 0.0);\r\n\r\n    gl_FragColor = outputTransform(gl_FragColor);\r\n}\r\n');u.statefirst=!0,u.renderState.cull=Ee.CULL_NONE;let _=new t.SubShader(r,n);a.addSubShader(_);let m=_.addShaderPass(Br,'#define SHADER_NAME CompositeFS\r\n\r\n#include "Color.glsl";\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\nvoid main()\r\n{\r\n    vec2 uv = v_Texcoord0;\r\n#ifdef BLITSCREEN_INVERTY\r\n    uv.y = 1.0 - uv.y;\r\n#endif\r\n    vec3 baseColor = texture2D(u_MainTex, uv).rgb;\r\n#ifdef Gamma_u_MainTex\r\n    baseColor = gammaToLinear(baseColor);\r\n#endif // Gamma_u_MainTex\r\n\r\n    vec4 samplevalue = texture2D(u_BlurCoCTex, uv);\r\n    vec3 farColor = samplevalue.rgb;\r\n    float coc = texture2D(u_FullCoCTex, uv).r;\r\n\r\n    vec3 dstColor = vec3(0.0);\r\n    float dstAlpha = 1.0;\r\n\r\n    float blend = sqrt(coc * 3.14 * 2.0);\r\n    dstColor = farColor * clamp(blend, 0.0, 1.0);\r\n    dstAlpha = clamp(1.0 - blend, 0.0, 1.0);\r\n\r\n    gl_FragColor = vec4(baseColor * dstAlpha + dstColor, 1.0);\r\n\r\n    gl_FragColor = outputTransform(gl_FragColor);\r\n}');m.statefirst=!0,m.renderState.cull=Ee.CULL_NONE}constructor(){super(),this._shader=t.Shader3D.find("GaussianDoF"),this._shaderData=t.LayaGL.renderDeviceFactory.createShaderData(null),this._shaderData.setVector3(Or.COCPARAMS,new t.Vector3(10,30,1)),this._zBufferParams=new t.Vector4,this._sourceSize=new t.Vector4,this._dowmSampleScale=new t.Vector4}get farStart(){return this._shaderData.getVector3(Or.COCPARAMS).x}set farStart(e){let t=this._shaderData.getVector3(Or.COCPARAMS);t.x=e,this._shaderData.setVector3(Or.COCPARAMS,t)}get farEnd(){return this._shaderData.getVector3(Or.COCPARAMS).y}set farEnd(e){let t=this._shaderData.getVector3(Or.COCPARAMS);t.y=Math.max(t.x,e),this._shaderData.setVector3(Or.COCPARAMS,t)}get maxRadius(){return this._shaderData.getVector3(Or.COCPARAMS).z}set maxRadius(e){let t=this._shaderData.getVector3(Or.COCPARAMS);t.z=Math.min(e,2),this._shaderData.setVector3(Or.COCPARAMS,t)}_setupShaderValue(e){let t=e.camera;this._dowmSampleScale.setValue(.5,.5,2,2),this._shaderData.setVector(Or.DOWNSAMPLESCALE,this._dowmSampleScale);let r=t.farPlane,n=t.nearPlane;this._zBufferParams.setValue(1-r/n,r/n,(n-r)/(n*r),1/n),this._shaderData.setVector(Or.ZBUFFERPARAMS,this._zBufferParams)}getCameraDepthTextureModeFlag(){return t.DepthTextureMode.Depth}render(r){let n=r.command;this._setupShaderValue(r);let a=r.source,i=this._shader,s=this._shaderData,o=t.RenderTargetFormat.R16G16B16A16,l=t.RenderTexture.createFromPool(a.width,a.height,o,t.RenderTargetFormat.None,!1,1);n.blitScreenTriangle(a,l,null,i,s,0),l.filterMode=t.FilterMode.Bilinear,this._shaderData.setTexture(Or.FULLCOCTEXTURE,l);let h=t.RenderTexture.createFromPool(a.width/2,a.height/2,o,t.RenderTargetFormat.None,!1,1);n.blitScreenTriangle(a,h,null,i,s,1),h.filterMode=t.FilterMode.Bilinear,this._sourceSize.setValue(h.width,h.height,1/h.width,1/h.height),this._shaderData.setShaderData(Or.SOURCESIZE,e.ShaderDataType.Vector4,this._sourceSize);let d=t.RenderTexture.createFromPool(h.width,h.height,o,t.RenderTargetFormat.None,!1,1);n.blitScreenTriangle(h,d,null,this._shader,this._shaderData,2);let c=t.RenderTexture.createFromPool(h.width,h.height,o,t.RenderTargetFormat.None,!1,1);n.blitScreenTriangle(d,c,null,this._shader,this._shaderData,3),c.filterMode=t.FilterMode.Bilinear,c.anisoLevel=1,l.filterMode=t.FilterMode.Point,this._shaderData.setTexture(Or.BLURCOCTEXTURE,c);let u=t.RenderTexture.createFromPool(a.width,a.height,a.colorFormat,a.depthStencilFormat,!1,1);n.blitScreenTriangle(a,r.destination,null,this._shader,this._shaderData,4),t.RenderTexture.recoverToPool(l),t.RenderTexture.recoverToPool(h),t.RenderTexture.recoverToPool(d),t.RenderTexture.recoverToPool(c),r.deferredReleaseTextures.push(u)}}class wr extends Z{static init(){let e=.1;wr.lensQuadVertices=new Float32Array([e,e,1,1,-.1,e,0,1,-.1,-.1,0,0,e,-.1,1,0]),wr.lensQuadIndex=new Uint16Array([0,2,1,0,3,2]),wr.vertexDeclaration=new t.VertexDeclaration(16,[new t.VertexElement(0,t.VertexElementFormat.Vector4,0)]),wr.instanceVertexDeclaration=new t.VertexDeclaration(16,[new t.VertexElement(0,t.VertexElementFormat.Vector4,1)])}constructor(){super(t.MeshTopology.Triangles,t.DrawType.DrawElementInstance),this.indexFormat=t.IndexFormat.UInt16,this._createBuffer()}_createBuffer(){this._vertexBuffer=A.renderOBJCreate.createVertexBuffer3D(4*wr.lensQuadVertices.length,t.BufferUsage.Dynamic,!1),this._vertexBuffer.vertexDeclaration=wr.vertexDeclaration,this._vertexBuffer.setData(wr.lensQuadVertices.buffer),this._instanceVertexBuffer=A.renderOBJCreate.createVertexBuffer3D(4*wr.lensFlareElementMax*4,t.BufferUsage.Dynamic,!1),this._instanceVertexBuffer.instanceBuffer=!0,this._instanceVertexBuffer.vertexDeclaration=wr.instanceVertexDeclaration,this._indexBuffer=A.renderOBJCreate.createIndexBuffer3D(t.IndexFormat.UInt16,wr.lensQuadIndex.length,t.BufferUsage.Static,!1),this._indexBuffer.setData(wr.lensQuadIndex),this.bufferState=new t.BufferState,this.bufferState.applyState([this._vertexBuffer,this._instanceVertexBuffer],this._indexBuffer),this._updateRenderParams(null)}get instanceBuffer(){return this._instanceVertexBuffer}_getType(){return wr._type}_prepareRender(e){return!0}destroy(){super.destroy(),this._vertexBuffer.destroy(),this._instanceVertexBuffer.destroy(),this.bufferState.destroy(),this._indexBuffer.destroy()}_updateRenderParams(e){this.clearRenderParams(),this.setDrawElemenParams(wr.lensQuadIndex.length,0)}}wr.PositionUV=0,wr.PositionRotationScale=1,wr.lensFlareElementMax=20,wr._type=Z._typeCounter++;class Pr{get instanceCount(){return this._instanceCount}set instanceCount(e){this._instanceCount=e}constructor(){this._instanceCount=1,this._transform3D=A.Render3DModuleDataFactory.createTransform(null),this._renderElement=new te,this._renderElement._renderElementOBJ.isRender=!0,this._lensFlareGeometry=new wr,this._renderElement.setTransform(this._transform3D),this._renderElement.setGeometry(this._lensFlareGeometry),this._initMaterial()}_initMaterial(){this._materials=new t.Material,this._materials.lock=!0,this._materials.setShaderName("LensFlare"),this._materials.materialRenderMode=t.MaterialRenderMode.RENDERMODE_ADDTIVE,this._materials.depthTest=Ee.DEPTHTEST_ALWAYS,this._materials.cull=Ee.CULL_NONE,this._renderElement.material=this._materials,this._renderElement.subShaderIndex=0}set center(e){this._materials.setVector2("u_FlareCenter",e)}set rotate(e){this._materials.setFloat("u_rotate",e)}get lensFlareElement(){return this._lensFlareElementData}set lensFlareElement(e){this._lensFlareElementData=e,this.applyElementData()}applyElementData(){this._materials.setTexture("u_FlareTexture",this._lensFlareElementData.texture),this._materials.setColor("u_Tint",this._lensFlareElementData.tint),this._materials.setFloat("u_TintIntensity",this._lensFlareElementData.intensity),this._materials.setVector2("u_Postionoffset",this._lensFlareElementData.positionOffset),this._materials.setFloat("u_Angularoffset",this._lensFlareElementData.angularOffset),this._lensFlareElementData.autoRotate?this._materials.addDefine(kr.SHADERDEFINE_AUTOROTATE):this._materials.removeDefine(kr.SHADERDEFINE_AUTOROTATE),this._lensFlareGeometry.instanceCount=1;let e=new Float32Array([this._lensFlareElementData.startPosition,t.Utils.toAngle(this._lensFlareElementData.rotation),this._lensFlareElementData.scale.x,this._lensFlareElementData.scale.y]);this._lensFlareGeometry.instanceBuffer.setData(e.buffer,0,0,4*e.length)}run(e){var t=ie._instance;this._materials.setFloat("u_aspectRatio",t.camera.viewport.height/t.camera.viewport.width),e.drawRenderElement(this._renderElement)}recover(){}destroy(){this._materials.lock=!1,this._materials.destroy()}}var Nr,Vr,br,Fr,Ur;class Gr{static init(){let r={a_PositionTexcoord:[wr.PositionUV,e.ShaderDataType.Vector4],a_DistanceRotationScale:[wr.PositionRotationScale,e.ShaderDataType.Vector4]},n={u_Tint:e.ShaderDataType.Color,u_TintIntensity:e.ShaderDataType.Float,u_FlareTexture:e.ShaderDataType.Texture2D,u_FlareCenter:e.ShaderDataType.Vector2,u_aspectRatio:e.ShaderDataType.Float,u_rotate:e.ShaderDataType.Float,u_Postionoffset:e.ShaderDataType.Vector2,u_Angularoffset:e.ShaderDataType.Float},a={u_Tint:t.Color.WHITE,u_aspectRatio:1},i=t.Shader3D.add("LensFlare",!0,!1);i.shaderType=t.ShaderFeatureType.PostProcess;let s=new t.SubShader(r,n,a);i.addSubShader(s);let o=s.addShaderPass("#define SHADER_NAME LENSFLARESVS\r\n//attribute vec4 a_PositionTexcoord;\r\n// x: startPosition y: rotation zw: scale\r\n// attribute vec4 a_DistanceRotationScale;\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\nvec2 rotateVector(vec2 pos, vec2 center, float angle) {\r\n    float cosAngle = cos(angle);\r\n    float sinAngle = sin(angle);\r\n    vec2 offset = pos - center;\r\n    vec2 rotatedOffset = vec2(\r\n        offset.x * cosAngle - offset.y * sinAngle,\r\n        offset.x * sinAngle + offset.y * cosAngle\r\n    );\r\n    return center + rotatedOffset;\r\n}\r\n\r\nvec2 rotateVec2(float rad,vec2 pos){\r\n    float s = sin(rad);\r\n    float c = cos(rad);\r\n    float x = pos.x*c-pos.y*s;\r\n    float y = pos.x*s+c*pos.y;\r\n    return vec2(x,y);\r\n}\r\n\r\nvec2 scaleVec2(vec2 scale,vec2 pos){\r\n    float x = scale.x * pos.x;\r\n    float y = scale.y * pos.y;\r\n    return vec2(x,y);\r\n}\r\n\r\nvec2 transVec2(vec2 trans,vec2 pos){\r\n    float x = pos.x + trans.x;\r\n    float y = pos.y + trans.y;\r\n    return vec2(x,y);\r\n}\r\n\r\n\r\nvoid main(){\r\n    vec2 center = u_FlareCenter;\r\n    vec2 deltaPos = -2.0 * center;\r\n    vec2 lenFlarePosition = vec2(a_PositionTexcoord.x, a_PositionTexcoord.y);\r\n    // aspectRadio scale\r\n    vec2 aspectRadio = vec2(u_aspectRatio, 1.0);\r\n    //缩放\r\n    vec2 scale = vec2(a_DistanceRotationScale.z, a_DistanceRotationScale.w);\r\n    lenFlarePosition = scaleVec2(scale,lenFlarePosition);\r\n    //旋转\r\n    // float rad = acos(dot(normalize(center),vec2(0.0,1.0)));\r\n    // angular offset\r\n    #ifdef LENSFLAREAUTOROTATE\r\n        lenFlarePosition = rotateVec2(u_rotate, lenFlarePosition);\r\n        float texRotate = a_DistanceRotationScale.y;\r\n        lenFlarePosition = rotateVec2(texRotate, lenFlarePosition);\r\n    #endif\r\n    float angularoffset = u_Angularoffset;\r\n    lenFlarePosition = rotateVector(lenFlarePosition, center, angularoffset);\r\n    lenFlarePosition = scaleVec2(aspectRadio,lenFlarePosition);\r\n    //平移\r\n    lenFlarePosition = center + deltaPos * a_DistanceRotationScale.x + lenFlarePosition + u_Postionoffset;\r\n    gl_Position = vec4(lenFlarePosition.x, lenFlarePosition.y, 0.0, 1.0);\r\n    v_Texcoord0 = a_PositionTexcoord.zw;\r\n}\r\n","#define SHADER_NAME LENSFLARESFS\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\nvoid main(){\r\n      gl_FragColor = texture2D(u_FlareTexture, v_Texcoord0)* u_Tint * u_TintIntensity;\r\n}");o.statefirst=!0,o.renderState.cull=Ee.CULL_NONE}}class Hr{constructor(){this._active=!0,this._tint=new t.Color(1,1,1,1),this._intensity=1,this._texture=t.Texture2D.whiteTexture,this._positionOffset=new t.Vector2(0,0),this._scale=new t.Vector2(1,1),this._autoRotate=!1,this._rotation=0,this._startPosition=0,this._angularOffset=0,this._aspectRatio=!1,this._modulateByLightColor=!1,this._translationScale=new t.Vector2(1,1)}get active(){return this._active}set active(e){this._active=e}get tint(){return this._tint}set tint(e){this._tint=e}get intensity(){return this._intensity}set intensity(e){this._intensity=e}get texture(){return this._texture}set texture(e){this._texture=e}get positionOffset(){return this._positionOffset}set positionOffset(e){this._positionOffset=e}get scale(){return this._scale}set scale(e){this._scale=e}get autoRotate(){return this._autoRotate}set autoRotate(e){this._autoRotate=e}get rotation(){return this._rotation}set rotation(e){this._rotation=e}get startPosition(){return this._startPosition}set startPosition(e){this._startPosition=e}get angularOffset(){return this._angularOffset}set angularOffset(e){this._angularOffset=e}}class zr extends t.Resource{constructor(){super(!1),this.elements=[]}}class kr extends Xe{static __initDefine__(){kr.SHADERDEFINE_AUTOROTATE=t.Shader3D.getDefineByName("LENSFLAREAUTOROTATE")}static init(){wr.init(),Gr.init(),kr.__initDefine__()}get lensFlareData(){return this._lensFlareData}set lensFlareData(e){if(e){this._flareCMDS.length=0;for(let r=0;r<e.elements.length;r++){let n=e.elements[r];if(n.active){var t=new Pr;t.lensFlareElement=n,this._flareCMDS.push(t)}}this._lensFlareData=e,this._needUpdate=!0}}get bindLight(){return this._light}set bindLight(e){e&&(this._light=e,this._needUpdate=!0)}get effectIntensity(){return this._effectIntensity}set effectIntensity(e){this._effectIntensity=e,this._needUpdate=!0}get effectScale(){return this._effectScale}set effectScale(e){this._effectScale=e,this._needUpdate=!0}constructor(){super(),this._effectIntensity=1,this._effectScale=1,this._needUpdate=!1,this.singleton=!1,this._flareCMDS=[],this._flareCMDS.push(new Pr),this._center=new t.Vector2,this._tempV3=new t.Vector3,this._tempV4=new t.Vector4}_updateEffectData(e){if(0!=this._flareCMDS.length){for(let t=0;t<this._flareCMDS.length;t++){if(this._flareCMDS[t].center=this._center,this._flareCMDS[t].rotate=this._rotate,this._needUpdate){let e=this._flareCMDS[t].lensFlareElement;if(!e)continue;e.intensity*=this.effectIntensity;let r=e.scale;r.setValue(r.x*this.effectScale,r.y*this.effectScale),e.scale=r,this._flareCMDS[t].applyElementData()}this._flareCMDS[t].run(e)}this._needUpdate=!1}}caculateDirCenter(e){this._light.direction.cloneTo(this._tempV3),t.Vector3.scale(this._tempV3,-10,this._tempV3),t.Vector3.add(e.transform.position,this._tempV3,this._tempV3),t.Vector3.transformV3ToV4(this._tempV3,e.projectionViewMatrix,this._tempV4),this._center.setValue(this._tempV4.x/this._tempV4.w,this._tempV4.y/this._tempV4.w);var r=t.Utils.toAngle(Math.atan2(this._center.x,this._center.y));r=r<0?r+360:r,r=Math.round(r),this._rotate=2*Math.PI-Math.PI/180*r}caculatePointCenter(e){this._needUpdate=!0}caculateSpotCenter(e){this._needUpdate=!0}render(t){var r=t.command;let n=t.indirectTarget;if(r.setRenderTarget(n,!1,!1),this._light){switch(this._light.lightType){case e.LightType.Directional:this.caculateDirCenter(t.camera);case e.LightType.Point:case e.LightType.Spot:}Math.abs(this._center.x)>1||Math.abs(this._center.y)>1||(this._updateEffectData(r),r.blitScreenQuad(n,t.destination))}}release(e){this._needUpdate=!1}}class Wr extends t.Material{static __initDefine__(){Wr.COLOR=t.Shader3D.propertyNameToID("u_Color")}get color(){return this._shaderValues.getVector(Wr.COLOR)}set color(e){this._shaderValues.setVector(Wr.COLOR,e)}constructor(){super(),this.setShaderName("LineShader"),this._shaderValues.setVector(Wr.COLOR,new t.Vector4(1,1,1,1))}clone(){var e=new Wr;return this.cloneTo(e),e}}e.EPhysicsStatisticsInfo=void 0,(Nr=e.EPhysicsStatisticsInfo||(e.EPhysicsStatisticsInfo={}))[Nr.C_PhysicsEventCount=0]="C_PhysicsEventCount",Nr[Nr.FrameClearCount=1]="FrameClearCount",Nr[Nr.C_PhysicaDynamicRigidBody=2]="C_PhysicaDynamicRigidBody",Nr[Nr.C_PhysicaStaticRigidBody=3]="C_PhysicaStaticRigidBody",Nr[Nr.C_PhysicaKinematicRigidBody=4]="C_PhysicaKinematicRigidBody",Nr[Nr.C_PhysicaCharacterController=5]="C_PhysicaCharacterController",Nr[Nr.C_PhysicsJoint=6]="C_PhysicsJoint",Nr[Nr.Count=7]="Count";class Yr{static initStatisticsInfo(){for(let t=0;t<e.EPhysicsStatisticsInfo.Count;t++)this._PhysicsStatisticsInfo.set(t,0);Yr.enableStatistics&&Yr.autoFrameClear&&t.ILaya.timer.frameLoop(1,null,Yr.clearStatisticsInfo)}static addStatisticsInfo(e,t){Yr.enableStatistics&&Yr._PhysicsStatisticsInfo.set(e,Yr._PhysicsStatisticsInfo.get(e)+t)}static getStatisticsInfo(e){let t=0;return Yr.enableStatistics&&(t=Yr._PhysicsStatisticsInfo.get(e)),t}static clearStatisticsInfo(){if(Yr.enableStatistics)for(let t=0;t<e.EPhysicsStatisticsInfo.FrameClearCount;t++)Yr._PhysicsStatisticsInfo.set(t,0)}static stopAndClearAllStatisticsInfo(){for(let t=0;t<e.EPhysicsStatisticsInfo.Count;t++)this._PhysicsStatisticsInfo.set(t,0);Yr.enableStatistics&&Yr.autoFrameClear&&t.ILaya.timer.clear(null,Yr.clearStatisticsInfo)}}Yr._PhysicsStatisticsInfo=new Map,Yr.enableStatistics=!1,Yr.autoFrameClear=!1;class Xr{static get PhysicsCreateUtil(){return this._PhysicsCreateUtil}static set PhysicsCreateUtil(e){e&&!Xr._PhysicsCreateUtil&&(Xr._PhysicsCreateUtil=e,Xr._enablePhysics=!0)}static get enablePhysics(){return Xr._enablePhysics}static _changeWebGLSize(e,r){t.WebGL.onStageResize(e,r),ie.clientWidth=e,ie.clientHeight=r}static __init__(){t.Config3D._multiLighting=t.Config3D.enableMultiLight&&t.LayaGL.renderEngine.getCapable(t.RenderCapable.TextureFormat_R32G32B32A32),t.Config3D._uniformBlock=t.Config3D.enableUniformBufferObject&&t.LayaGL.renderEngine.getCapable(t.RenderCapable.UnifromBufferObject),t.Config3D.maxLightCount>2048&&(t.Config3D.maxLightCount=2048,console.warn("Config3D: maxLightCount must less equal 2048."));let e=t.Config3D.lightClusterCount;(e.x>128||e.y>128||e.z>128)&&(e.setValue(Math.min(e.x,128),Math.min(e.y,128),Math.min(e.z,128)),console.warn("Config3D: lightClusterCount X and Y、Z must less equal 128."));let r=4*Math.floor(2048/t.Config3D.lightClusterCount.z-1);r<t.Config3D.maxLightCount&&console.warn("Config3D: if the area light(PointLight、SpotLight) count is large than "+r+",maybe the far away culster will ingonre some light."),t.Config3D._maxAreaLightCountPerClusterAverage=Math.min(r,t.Config3D.maxLightCount),Q.Scene3D=Qr,Q.Laya3D=Xr,t.VertexMesh.__init__(),Nt.__init__(),Vt.__init__(),q.__init__(),qt.__init__(),er.__init__(),Xt.__init__(),$t.__init__(),Er.__init__(),Ut.__init__(),at.__init__(),it.__init__(),Cr.__init__(),yr.init(),Lr.init(),Or.init(),Ze.init(),kr.init(),ar.__init__(),ir.__init__(),B.__init__(),U.__init__(),ht.__init__(),n.__init__(),Zt.__init__(),Ar.__init__(),Mr.__init__(),Yt.__init__(),Je.__init__(),Qr.__init__(),He.__init__(),ae.__init__(),j.__init__(),De.__init__(),ee.__init__(),Kr.__init__(),Ge.init(),ie.__init__(),xe.__initDefine__(),ot.__initDefine__(),lt.__initDefine__(),Jt.__initDefine__(),kt.__initDefine__(),st.__initDefine__(),oe.__init__(),ze.__init__(),xe.defaultMaterial=new xe,xe.defaultMaterial.lock=!0,lt.defaultMaterial=new lt,lt.defaultMaterial.lock=!0;let a=new lt;a.lock=!0,a.enableVertexColor=!0,Wr.defaultMaterial=a,Jt.defaultMaterial=new Jt,Jt.defaultMaterial.lock=!0,t.Texture2D.__init__(),t.TextureCube.__init__(),t.Texture2DArray.__init__(),J.__init__(),$.__init__(),se.__init__(),t.HalfFloatUtils.__init__()}static __initPhysics__(){return Xr._PhysicsCreateUtil?(Xr._enablePhysics=!0,Yr.initStatisticsInfo(),t.PlayerConfig.physics3D&&Object.assign(Qr.physicsSettings,t.PlayerConfig.physics3D),Xr._PhysicsCreateUtil.initialize()):(Xr._enablePhysics=!1,Promise.resolve())}}Xr._enablePhysics=!1,window.Laya3D=Xr,t.Laya.addInitCallback((()=>Xr.__initPhysics__())),e.FogMode=void 0,(Vr=e.FogMode||(e.FogMode={}))[Vr.Linear=0]="Linear",Vr[Vr.EXP=1]="EXP",Vr[Vr.EXP2=2]="EXP2";class Qr extends t.Sprite{static get _updateMark(){return ie._instance._contextOBJ.cameraUpdateMask}static set _updateMark(e){ie._instance._contextOBJ.cameraUpdateMask=e}static regManager(e,t){Qr.componentManagerMap.set(e,t)}static shaderValueInit(){Fe.SHADERDEFINE_FOG=t.Shader3D.getDefineByName("FOG"),Fe.SHADERDEFINE_FOG_LINEAR=t.Shader3D.getDefineByName("FOG_LINEAR"),Fe.SHADERDEFINE_FOG_EXP=t.Shader3D.getDefineByName("FOG_EXP"),Fe.SHADERDEFINE_FOG_EXP2=t.Shader3D.getDefineByName("FOG_EXP2"),Fe.SHADERDEFINE_DIRECTIONLIGHT=t.Shader3D.getDefineByName("DIRECTIONLIGHT"),Fe.SHADERDEFINE_POINTLIGHT=t.Shader3D.getDefineByName("POINTLIGHT"),Fe.SHADERDEFINE_SPOTLIGHT=t.Shader3D.getDefineByName("SPOTLIGHT"),Fe.SHADERDEFINE_SHADOW=t.Shader3D.getDefineByName("SHADOW"),Fe.SHADERDEFINE_SHADOW_CASCADE=t.Shader3D.getDefineByName("SHADOW_CASCADE"),Fe.SHADERDEFINE_SHADOW_SOFT_SHADOW_LOW=t.Shader3D.getDefineByName("SHADOW_SOFT_SHADOW_LOW"),Fe.SHADERDEFINE_SHADOW_SOFT_SHADOW_HIGH=t.Shader3D.getDefineByName("SHADOW_SOFT_SHADOW_HIGH"),Fe.SHADERDEFINE_SHADOW_SPOT=t.Shader3D.getDefineByName("SHADOW_SPOT"),Fe.SHADERDEFINE_SHADOW_SPOT_SOFT_SHADOW_LOW=t.Shader3D.getDefineByName("SHADOW_SPOT_SOFT_SHADOW_LOW"),Fe.SHADERDEFINE_SHADOW_SPOT_SOFT_SHADOW_HIGH=t.Shader3D.getDefineByName("SHADOW_SPOT_SOFT_SHADOW_HIGH"),Qr.FOGCOLOR=t.Shader3D.propertyNameToID("u_FogColor"),Qr.FOGPARAMS=t.Shader3D.propertyNameToID("u_FogParams"),Qr.DIRECTIONLIGHTCOUNT=t.Shader3D.propertyNameToID("u_DirationLightCount"),Qr.LIGHTBUFFER=t.Shader3D.propertyNameToID("u_LightBuffer"),Qr.CLUSTERBUFFER=t.Shader3D.propertyNameToID("u_LightClusterBuffer"),Qr.TIME=t.Shader3D.propertyNameToID("u_Time"),Qr.GIRotate=t.Shader3D.propertyNameToID("u_GIRotate"),Qr.SCENEUNIFORMBLOCK=t.Shader3D.propertyNameToID(t.UniformBufferObject.UBONAME_SCENE);let r=Qr.sceneUniformMap=t.LayaGL.renderDeviceFactory.createGlobalUniformMap("Scene3D");t.Config3D._uniformBlock?r.addShaderBlockUniform(Qr.SCENEUNIFORMBLOCK,t.UniformBufferObject.UBONAME_SCENE,[{id:Qr.TIME,propertyName:"u_Time",uniformtype:e.ShaderDataType.Float},{id:Qr.FOGPARAMS,propertyName:"u_FogParams",uniformtype:e.ShaderDataType.Vector4},{id:Qr.FOGCOLOR,propertyName:"u_FogColor",uniformtype:e.ShaderDataType.Vector4}]):(r.addShaderUniform(Qr.FOGCOLOR,"u_FogColor",e.ShaderDataType.Color),r.addShaderUniform(Qr.FOGPARAMS,"u_FogParams",e.ShaderDataType.Vector4),r.addShaderUniform(Qr.TIME,"u_Time",e.ShaderDataType.Float)),r.addShaderUniform(Qr.DIRECTIONLIGHTCOUNT,"u_DirationLightCount",e.ShaderDataType.Int),r.addShaderUniform(Qr.LIGHTBUFFER,"u_LightBuffer",e.ShaderDataType.Texture2D),r.addShaderUniform(Qr.CLUSTERBUFFER,"u_LightClusterBuffer",e.ShaderDataType.Texture2D),r.addShaderUniform(Qr.GIRotate,"u_GIRotate",e.ShaderDataType.Float)}static legacyLightingValueInit(){Qr.LIGHTDIRECTION=t.Shader3D.propertyNameToID("u_DirLightDirection"),Qr.sceneUniformMap.addShaderUniform(Qr.LIGHTDIRECTION,"u_DirLightDirection",e.ShaderDataType.Vector3),Qr.LIGHTDIRCOLOR=t.Shader3D.propertyNameToID("u_DirLightColor"),Qr.sceneUniformMap.addShaderUniform(Qr.LIGHTDIRCOLOR,"u_DirLightColor",e.ShaderDataType.Vector3),Qr.LIGHTMODE=t.Shader3D.propertyNameToID("u_DirLightMode"),Qr.sceneUniformMap.addShaderUniform(Qr.LIGHTMODE,"u_DirLightMode",e.ShaderDataType.Int),Qr.POINTLIGHTPOS=t.Shader3D.propertyNameToID("u_PointLightPos"),Qr.sceneUniformMap.addShaderUniform(Qr.POINTLIGHTPOS,"u_PointLightPos",e.ShaderDataType.Vector3),Qr.POINTLIGHTRANGE=t.Shader3D.propertyNameToID("u_PointLightRange"),Qr.sceneUniformMap.addShaderUniform(Qr.POINTLIGHTRANGE,"u_PointLightRange",e.ShaderDataType.Float),Qr.POINTLIGHTCOLOR=t.Shader3D.propertyNameToID("u_PointLightColor"),Qr.sceneUniformMap.addShaderUniform(Qr.POINTLIGHTCOLOR,"u_PointLightColor",e.ShaderDataType.Vector3),Qr.POINTLIGHTMODE=t.Shader3D.propertyNameToID("u_PointLightMode"),Qr.sceneUniformMap.addShaderUniform(Qr.POINTLIGHTMODE,"u_PointLightMode",e.ShaderDataType.Int),Qr.SPOTLIGHTPOS=t.Shader3D.propertyNameToID("u_SpotLightPos"),Qr.sceneUniformMap.addShaderUniform(Qr.SPOTLIGHTPOS,"u_SpotLightPos",e.ShaderDataType.Vector3),Qr.SPOTLIGHTDIRECTION=t.Shader3D.propertyNameToID("u_SpotLightDirection"),Qr.sceneUniformMap.addShaderUniform(Qr.SPOTLIGHTDIRECTION,"u_SpotLightDirection",e.ShaderDataType.Vector3),Qr.SPOTLIGHTSPOTANGLE=t.Shader3D.propertyNameToID("u_SpotLightSpot"),Qr.sceneUniformMap.addShaderUniform(Qr.SPOTLIGHTSPOTANGLE,"u_SpotLightSpot",e.ShaderDataType.Float),Qr.SPOTLIGHTRANGE=t.Shader3D.propertyNameToID("u_SpotLightRange"),Qr.sceneUniformMap.addShaderUniform(Qr.SPOTLIGHTRANGE,"u_SpotLightRange",e.ShaderDataType.Float),Qr.SPOTLIGHTCOLOR=t.Shader3D.propertyNameToID("u_SpotLightColor"),Qr.sceneUniformMap.addShaderUniform(Qr.SPOTLIGHTCOLOR,"u_SpotLightColor",e.ShaderDataType.Vector3),Qr.SPOTLIGHTMODE=t.Shader3D.propertyNameToID("u_SpotLightMode"),Qr.sceneUniformMap.addShaderUniform(Qr.SPOTLIGHTMODE,"u_SpotLightMode",e.ShaderDataType.Int)}static createSceneUniformBlock(){let e=new Map;e.set("u_Time",t.UniformBufferParamsType.Number),e.set("u_FogParams",t.UniformBufferParamsType.Vector4),e.set("u_FogColor",t.UniformBufferParamsType.Vector4);let r=new Map;return e.forEach(((e,n)=>{r.set(t.Shader3D.propertyNameToID(n),e)})),new t.UnifromBufferData(r)}static __init__(){if(t.Config3D._multiLighting){const n=4;var e=t.Config3D.maxLightCount,r=t.Config3D.lightClusterCount;we.instance=new we(r.x,r.y,r.z,Math.min(t.Config3D.maxLightCount,t.Config3D._maxAreaLightCountPerClusterAverage)),Qr._lightTexture=T._createFloatTextureBuffer(n,e),Qr._lightTexture.lock=!0,Qr._lightPixles=new Float32Array(e*n*4)}Qr.shaderValueInit();var n=t.Shader3D._configDefineValues;t.Config3D._multiLighting||(n.add(t.Shader3D.SHADERDEFINE_LEGACYSINGALLIGHTING),Qr.legacyLightingValueInit()),Qr._shadowCasterPass=new He,t.Config3D._uniformBlock&&n.add(t.Shader3D.SHADERDEFINE_ENUNIFORMBLOCK),t.LayaGL.renderEngine.getCapable(t.RenderCapable.TextureFormat_R32G32B32A32)&&n.add(t.Shader3D.SHADERDEFINE_FLOATTEXTURE),t.LayaGL.renderEngine.getCapable(t.RenderCapable.Texture_FloatLinearFiltering)&&n.add(t.Shader3D.SHADERDEFINE_FLOATTEXTURE_FIL_LINEAR)}static load(e,r){t.ILaya.loader.load(e).then((e=>{if(r){let n;if(e){let r=e.create();n=r instanceof t.Scene?r._scene3D:r}r.runWith([n])}}))}get scene2D(){return this._scene2D}get sceneRenderableManager(){return this._sceneRenderManager}set sceneRenderableManager(e){e.list=this._sceneRenderManager.list,this._sceneRenderManager=e}get enableFog(){return this._enableFog}set enableFog(e){this._enableFog!==e&&(this._enableFog=e,e?this._shaderValues.addDefine(Fe.SHADERDEFINE_FOG):this._shaderValues.removeDefine(Fe.SHADERDEFINE_FOG))}get fogMode(){return this._fogMode}set fogMode(t){switch(this._fogMode=t,t){case e.FogMode.Linear:this._shaderValues.addDefine(Fe.SHADERDEFINE_FOG_LINEAR),this._shaderValues.removeDefine(Fe.SHADERDEFINE_FOG_EXP),this._shaderValues.removeDefine(Fe.SHADERDEFINE_FOG_EXP2);break;case e.FogMode.EXP:this._shaderValues.addDefine(Fe.SHADERDEFINE_FOG_EXP),this._shaderValues.removeDefine(Fe.SHADERDEFINE_FOG_LINEAR),this._shaderValues.removeDefine(Fe.SHADERDEFINE_FOG_EXP2);break;case e.FogMode.EXP2:this._shaderValues.addDefine(Fe.SHADERDEFINE_FOG_EXP2),this._shaderValues.removeDefine(Fe.SHADERDEFINE_FOG_LINEAR),this._shaderValues.removeDefine(Fe.SHADERDEFINE_FOG_EXP)}}get fogColor(){return this._shaderValues.getColor(Qr.FOGCOLOR)}set fogColor(e){this._shaderValues.setColor(Qr.FOGCOLOR,e)}get fogStart(){return this._fogParams.x}set fogStart(e){this._fogParams.x=e,this.fogParams=this._fogParams}get fogEnd(){return this._fogParams.y}set fogEnd(e){this._fogParams.y=e,this.fogParams=this._fogParams}get fogDensity(){return this._fogParams.z}set fogDensity(e){this._fogParams.z=e,this.fogParams=this._fogParams}get fogParams(){return this._shaderValues.getVector(Qr.FOGPARAMS)}set fogParams(e){this._shaderValues.setVector(Qr.FOGPARAMS,e)}get GIRotate(){return this._shaderValues.getNumber(Qr.GIRotate)}set GIRotate(e){this._shaderValues.setNumber(Qr.GIRotate,e)}get ambientMode(){return this._sceneReflectionProb.ambientMode}set ambientMode(e){this._sceneReflectionProb.ambientMode=e}get sceneReflectionProb(){return this._sceneReflectionProb}set sceneReflectionProb(e){this._sceneReflectionProb=e}get ambientColor(){return this._sceneReflectionProb.ambientColor}set ambientColor(e){this._sceneReflectionProb.ambientColor=e}get ambientIntensity(){return this._sceneReflectionProb.ambientIntensity}set ambientIntensity(e){this._sceneReflectionProb.ambientIntensity=e}get reflectionIntensity(){return this._sceneReflectionProb.reflectionIntensity}set reflectionIntensity(e){this._sceneReflectionProb.reflectionIntensity=e}get ambientSH(){return this._sceneReflectionProb.ambientSH}set ambientSH(e){this._sceneReflectionProb.ambientSH=e}get iblTex(){return this._sceneReflectionProb.iblTex}set iblTex(e){this._sceneReflectionProb.iblTex=e}get iblTexRGBD(){return this._sceneReflectionProb.iblTexRGBD}set iblTexRGBD(e){this._sceneReflectionProb.iblTexRGBD=e}get skyRenderer(){return this._skyRenderer}get physicsSimulation(){return this._physicsManager}get timer(){return this._timer}set timer(e){this._timer=e}get lightmaps(){return this._lightmaps.slice()}set lightmaps(e){var t=this._lightmaps;if(t)for(var r=0,n=t.length;r<n;r++){(i=t[r]).lightmapColor&&i.lightmapColor._removeReference(),i.lightmapDirection&&i.lightmapDirection._removeReference()}if(e){var a=e.length;for(t.length=a,r=0;r<a;r++){var i;(i=e[r]).lightmapColor&&i.lightmapColor._addReference(),i.lightmapDirection&&i.lightmapDirection._addReference(),t[r]=i}}else t.length=0;this._sceneModuleData.lightmapDirtyFlag=Qr._updateMark}get shadowMapFrequency(){return this._ShadowMapupdateFrequency}set shadowMapFrequency(e){this._ShadowMapupdateFrequency=e}constructor(){super(),this._reflectionsSource=0,this._reflectionsResolution="256",this._reflectionsIblSamples=128,this._lightCount=0,this._pointLights=new Ne,this._spotLights=new Ne,this._directionLights=new Ne,this._alternateLights=new Ve,this._lightmaps=[],this._skyRenderer=new ee,this._time=0,this._physicsStepTime=0,this._sunColor=new t.Color(1,1,1),this._sundir=new t.Vector3,this._id=Qr.sceneID++,this._collsionTestList=[],this._key=new t.SubmitKey,this._cameraPool=[],this._UI3DManager=new We,this.currentCreationLayer=Math.pow(2,0),this.enableLight=!0,this._ShadowMapupdateFrequency=1,this.componentElementMap=new Map,this._componentElementDatasMap={},this._is3D=!0,this._componentDriver=new t.ComponentDriver,this._timer=t.ILaya.timer,this._sceneModuleData=A.Render3DModuleDataFactory.createSceneModuleData(),t.LayaEnv.isConch&&2!=window.conchConfig.getGraphicsAPI()&&(this._nativeObj=new window.conchSubmitScene3D(this.renderSubmit.bind(this))),Xr.enablePhysics&&(this._physicsManager=Xr.PhysicsCreateUtil.createPhysicsManger(Qr.physicsSettings)),this._shaderValues=t.LayaGL.renderDeviceFactory.createShaderData(null),this._shaderValues.addDefines(t.Shader3D._configDefineValues),t.Config3D._uniformBlock&&(this._sceneUniformObj=t.UniformBufferObject.getBuffer(t.UniformBufferObject.UBONAME_SCENE,0),this._sceneUniformData=Qr.createSceneUniformBlock(),this._sceneUniformObj||(this._sceneUniformObj=t.UniformBufferObject.create(t.UniformBufferObject.UBONAME_SCENE,t.BufferUsage.Dynamic,this._sceneUniformData.getbyteLength(),!0)),this._shaderValues._addCheckUBO(t.UniformBufferObject.UBONAME_SCENE,this._sceneUniformObj,this._sceneUniformData),this._shaderValues.setUniformBuffer(Qr.SCENEUNIFORMBLOCK,this._sceneUniformObj),this._shaderValues._addCheckUBO(t.UniformBufferObject.UBONAME_SHADOW,Qr._shadowCasterPass._castDepthBufferOBJ,Qr._shadowCasterPass._castDepthBufferData),this._shaderValues.setUniformBuffer(t.Shader3D.propertyNameToID(t.UniformBufferObject.UBONAME_SHADOW),Qr._shadowCasterPass._castDepthBufferOBJ)),this._fogParams=new t.Vector4(300,1e3,.01,0),this.enableFog=!1,this.fogStart=300,this.fogEnd=1e3,this.fogDensity=.01,this.fogColor=new t.Color(.7,.7,.7),this.fogMode=e.FogMode.Linear,this.GIRotate=0,this._scene=this,this._sceneRenderManager=new ke,t.Config3D.debugFrustumCulling,this._volumeManager=new X,this._UI3DManager=new We,this.sceneReflectionProb=this._volumeManager.reflectionProbeManager.sceneReflectionProbe,this._sceneReflectionProb.reflectionIntensity=1,this.ambientColor=new t.Color(.212,.227,.259),Qr.componentManagerMap.forEach(((e,t)=>{let r=e;this.componentElementMap.set(t,new r)}))}get componentElementDatasMap(){return this._componentElementDatasMap}set componentElementDatasMap(e){this._componentElementDatasMap=e,this.componentElementMap.forEach(((e,t)=>{e.Init(this._componentElementDatasMap[t])}))}_update(){var e=this.timer._delta/1e3;if(this._time+=e,this._shaderValues.setNumber(Qr.TIME,this._time),t.LayaEnv.isPlaying&&(this._physicsStepTime+=e,this._physicsStepTime>Qr.physicsSettings.fixedTimeStep)){let e=this._physicsManager;Xr.enablePhysics&&t.Stat.enablePhysicsUpdate&&e.update(this._physicsStepTime),this._physicsStepTime=0}this._volumeManager.needreCaculateAllRenderObjects()?this._volumeManager.reCaculateAllRenderObjects(this._sceneRenderManager.list):this._volumeManager.handleMotionlist(),this.componentElementMap.forEach((t=>{t.update(e)})),this._componentDriver.callStart(),this._componentDriver.callUpdate(),this._componentDriver.callLateUpdate(),this._componentDriver.callDestroy(),this._sceneRenderManager.renderUpdate(),this.skyRenderer.renderUpdate(ie._instance),this._renderByEditor||this._UI3DManager.update()}_binarySearchIndexInCameraPool(e){for(var t,r=0,n=this._cameraPool.length-1;r<=n;){t=Math.floor((r+n)/2);var a=this._cameraPool[t]._renderingOrder;if(a==e._renderingOrder)return t;a>e._renderingOrder?n=t-1:r=t+1}return r}_getGroup(){return this._group}_setGroup(e){this._group=e}_onActive(){super._onActive(),t.ILaya.stage._scene3Ds.push(this)}_onInActive(){super._onInActive();var e=t.ILaya.stage._scene3Ds;e.splice(e.indexOf(this),1)}_prepareSceneToRender(){var e=this._shaderValues;if(t.Config3D._multiLighting&&t.Stat.enableMulLight){var r=Qr._lightTexture,n=Qr._lightPixles;const A=r.width,D=4*A;var a=0,i=t.Stat.enableLight?this._directionLights._length:0,s=this._directionLights._elements;if(i>0){var o=this._directionLights.getBrightestLight();this._mainDirectionLight=s[o],this._directionLights.normalLightOrdering(o);for(var l=0;l<i;l++,a++){var h=(E=s[l]).direction,d=D*a;(S=E._intensityColor).x=t.Color.gammaToLinearSpace(E.color.r),S.y=t.Color.gammaToLinearSpace(E.color.g),S.z=t.Color.gammaToLinearSpace(E.color.b),t.Vector3.scale(S,E._intensity,S),E.owner.transform.worldMatrix.getForward(h),t.Vector3.normalize(h,h),n[d]=S.x,n[d+1]=S.y,n[d+2]=S.z,n[d+3]=E._lightmapBakedType,n[d+4]=h.x,n[d+5]=h.y,n[d+6]=h.z,0==l&&(this._sunColor=E.color,this._sundir=h)}e.addDefine(Fe.SHADERDEFINE_DIRECTIONLIGHT)}else e.removeDefine(Fe.SHADERDEFINE_DIRECTIONLIGHT),this._mainDirectionLight=null;var c=t.Stat.enableLight?this._pointLights._length:0;if(c>0){var u=this._pointLights._elements,_=this._pointLights.getBrightestLight();this._mainPointLight=u[_],this._pointLights.normalLightOrdering(_);for(l=0;l<c;l++,a++){var m=(x=u[l]).owner.transform.position;d=D*a;(S=x._intensityColor).x=t.Color.gammaToLinearSpace(x.color.r),S.y=t.Color.gammaToLinearSpace(x.color.g),S.z=t.Color.gammaToLinearSpace(x.color.b),t.Vector3.scale(S,x._intensity,S),n[d]=S.x,n[d+1]=S.y,n[d+2]=S.z,n[d+3]=x.range,n[d+4]=m.x,n[d+5]=m.y,n[d+6]=m.z,n[d+7]=x._lightmapBakedType}e.addDefine(Fe.SHADERDEFINE_POINTLIGHT)}else e.removeDefine(Fe.SHADERDEFINE_POINTLIGHT),this._mainPointLight=null;var f=t.Stat.enableLight?this._spotLights._length:0;if(f>0){var g=this._spotLights._elements,p=this._spotLights.getBrightestLight();this._mainSpotLight=g[p],this._spotLights.normalLightOrdering(p);for(l=0;l<f;l++,a++){var S,T=g[l];h=T.direction,m=T.owner.transform.position,d=D*a;(S=T._intensityColor).x=t.Color.gammaToLinearSpace(T.color.r),S.y=t.Color.gammaToLinearSpace(T.color.g),S.z=t.Color.gammaToLinearSpace(T.color.b),t.Vector3.scale(S,T._intensity,S),T.owner.transform.worldMatrix.getForward(h),t.Vector3.normalize(h,h),n[d]=S.x,n[d+1]=S.y,n[d+2]=S.z,n[d+3]=T.range,n[d+4]=m.x,n[d+5]=m.y,n[d+6]=m.z,n[d+7]=T.spotAngle*Math.PI/180,n[d+8]=h.x,n[d+9]=h.y,n[d+10]=h.z,n[d+11]=T._lightmapBakedType}e.addDefine(Fe.SHADERDEFINE_SPOTLIGHT)}else e.removeDefine(Fe.SHADERDEFINE_SPOTLIGHT),this._mainSpotLight=null;a>0&&r.setSubPixelsData(0,0,A,a,n,0,!1,!1,!1),e.setTexture(Qr.LIGHTBUFFER,r),e.setInt(Qr.DIRECTIONLIGHTCOUNT,this._directionLights._length),e.setTexture(Qr.CLUSTERBUFFER,we.instance._clusterTexture)}else{if(Qr.LIGHTDIRECTION||Qr.legacyLightingValueInit(),this._directionLights._length>0&&t.Stat.enableLight){var E=this._directionLights._elements[0];this._mainDirectionLight=E,E._intensityColor.x=t.Color.gammaToLinearSpace(E.color.r),E._intensityColor.y=t.Color.gammaToLinearSpace(E.color.g),E._intensityColor.z=t.Color.gammaToLinearSpace(E.color.b),t.Vector3.scale(E._intensityColor,E._intensity,E._intensityColor),E.owner.transform.worldMatrix.getForward(E.direction),t.Vector3.normalize(E.direction,E.direction),e.setVector3(Qr.LIGHTDIRCOLOR,E._intensityColor),e.setVector3(Qr.LIGHTDIRECTION,E.direction),e.setInt(Qr.LIGHTMODE,E._lightmapBakedType),0==l&&(this._sunColor=E.color,this._sundir=E.direction),e.addDefine(Fe.SHADERDEFINE_DIRECTIONLIGHT)}else e.removeDefine(Fe.SHADERDEFINE_DIRECTIONLIGHT);if(this._pointLights._length>0&&t.Stat.enableLight){var x=this._pointLights._elements[0];this._mainPointLight=x,x._intensityColor.x=t.Color.gammaToLinearSpace(x.color.r),x._intensityColor.y=t.Color.gammaToLinearSpace(x.color.g),x._intensityColor.z=t.Color.gammaToLinearSpace(x.color.b),t.Vector3.scale(x._intensityColor,x._intensity,x._intensityColor),e.setVector3(Qr.POINTLIGHTCOLOR,x._intensityColor),e.setVector3(Qr.POINTLIGHTPOS,x.owner.transform.position),e.setNumber(Qr.POINTLIGHTRANGE,x.range),e.setInt(Qr.POINTLIGHTMODE,x._lightmapBakedType),e.addDefine(Fe.SHADERDEFINE_POINTLIGHT)}else e.removeDefine(Fe.SHADERDEFINE_POINTLIGHT);if(this._spotLights._length>0&&t.Stat.enableLight){var A=this._spotLights._elements[0];this._mainSpotLight=A,A._intensityColor.x=t.Color.gammaToLinearSpace(A.color.r),A._intensityColor.y=t.Color.gammaToLinearSpace(A.color.g),A._intensityColor.z=t.Color.gammaToLinearSpace(A.color.b),t.Vector3.scale(A._intensityColor,A._intensity,A._intensityColor),e.setVector3(Qr.SPOTLIGHTCOLOR,A._intensityColor),e.setVector3(Qr.SPOTLIGHTPOS,A.owner.transform.position),A.owner.transform.worldMatrix.getForward(A.direction),t.Vector3.normalize(A.direction,A.direction),e.setVector3(Qr.SPOTLIGHTDIRECTION,A.direction),e.setNumber(Qr.SPOTLIGHTRANGE,A.range),e.setNumber(Qr.SPOTLIGHTSPOTANGLE,A.spotAngle*Math.PI/180),e.setInt(Qr.SPOTLIGHTMODE,A._lightmapBakedType),e.addDefine(Fe.SHADERDEFINE_SPOTLIGHT)}else e.removeDefine(Fe.SHADERDEFINE_SPOTLIGHT)}}get cullInfoCamera(){return this._cullInfoCamera}_setCullCamera(e){this._cullInfoCamera=e}recaculateCullCamera(){this._cullInfoCamera=this._cameraPool[0],this._cameraPool.forEach((e=>{this.cullInfoCamera.maxlocalYDistance<e.maxlocalYDistance&&(this._cullInfoCamera=e)}))}_addCamera(e){for(var t=this._binarySearchIndexInCameraPool(e),r=e._renderingOrder,n=this._cameraPool.length;t<n&&this._cameraPool[t]._renderingOrder<=r;)t++;this._cameraPool.splice(t,0,e)}_removeCamera(e){this._cameraPool.splice(this._cameraPool.indexOf(e),1)}_addRenderObject(e){this._sceneRenderManager.addRenderObject(e),e._addReflectionProbeUpdate()}_removeRenderObject(e){this._sceneRenderManager.removeRenderObject(e)}destroy(e=!0){if(!this._destroyed){super.destroy(e),this._nativeObj=null,this._skyRenderer.destroy(),this._skyRenderer=null,this._directionLights=null,this._pointLights=null,this._spotLights=null,this._alternateLights=null,ie._instance.scene==this&&(ie._instance.scene=null),this._shaderValues.destroy(),this._sceneUniformData&&(this._sceneUniformData.destroy(),this._sceneUniformData=null),this._shaderValues=null,this.sceneRenderableManager.destroy(),this._sceneRenderManager=null,this._cameraPool=null,this._physicsManager&&this._physicsManager.destroy();var t=this._lightmaps;if(t)for(var r=0,n=t.length;r<n;r++){var a=t[r];a.lightmapColor&&a.lightmapColor._removeReference(),a.lightmapDirection&&a.lightmapDirection._removeReference()}this._lightmaps=null,this._volumeManager.destroy(),this._componentDriver.callDestroy()}}getComponentElementManager(e){return this.componentElementMap.get(e)}render(e){}renderSubmit(){if(!(this._children.length<=0||this._renderByEditor)){var e,r;for(this._prepareSceneToRender(),Qr._updateMark++,e=0,r=this._cameraPool.length;e<r;e++){var n=this._cameraPool[e];n.enableRender&&n.activeInHierarchy&&(n.renderTarget?n.enableBuiltInRenderTexture||(n.enableBuiltInRenderTexture=!1):n.enableBuiltInRenderTexture||(n.enableBuiltInRenderTexture=!0),n.render(this),n._offScreenRenderTexture||this.blitMainCanvans(n._internalRenderTexture,n.normalizedViewport,n),n._aftRenderMainPass())}t.Context.set2DRenderConfig(),t.RenderTexture.clearPool()}}blitMainCanvans(e,r,n){if(e){Qr.mainCavansViewPort.x=ie.clientWidth*r.x|0,Qr.mainCavansViewPort.y=ie.clientHeight*r.y|0,Qr.mainCavansViewPort.width=ie.clientWidth*r.width|0,Qr.mainCavansViewPort.height=ie.clientHeight*r.height|0,e.filterMode=t.FilterMode.Bilinear,n.fxaa&&ze.shaderdata.addDefine(ae.SHADERDEFINE_FXAA);var a=ze.create(e,null,Qr.mainCavansViewPort,null,null,ze.shaderdata);a.run(),a.recover(),t.RenderTexture2D._clear=!1,ze.shaderdata.removeDefine(ae.SHADERDEFINE_FXAA)}}reUse(e,t){return 0}setGlobalShaderValue(e,r,n){var a=t.Shader3D.propertyNameToID(e);this._shaderValues.setShaderData(a,r,n)}get fogRange(){return this._fogParams.y-this.fogParams.x}set fogRange(e){this._fogParams.y=e+this.fogParams.x,this.fogParams=this._fogParams}setlightmaps(e){for(var t=this._lightmaps,r=0,n=t.length;r<n;r++)t[r].lightmapColor._removeReference();if(!e)throw new Error("Scene3D: value value can't be null.");var a=e.length;for(t.length=a,r=0;r<a;r++){var i=e[r];i._addReference(),t[r]||(t[r]=new be),t[r].lightmapColor=i}}getlightmaps(){for(var e=new Array(this._lightmaps.length),t=0;t<this._lightmaps.length;t++)e[t]=this._lightmaps[t].lightmapColor;return e}}Qr.physicsSettings=new Pe,Qr.mainCavansViewPort=new t.Viewport(0,0,1,1),Qr.componentManagerMap=new Map,e.CameraClearFlags=void 0,(br=e.CameraClearFlags||(e.CameraClearFlags={}))[br.SolidColor=0]="SolidColor",br[br.Sky=1]="Sky",br[br.DepthOnly=2]="DepthOnly",br[br.Nothing=3]="Nothing",br[br.ColorOnly=4]="ColorOnly",e.CameraEventFlags=void 0,(Fr=e.CameraEventFlags||(e.CameraEventFlags={}))[Fr.BeforeForwardOpaque=0]="BeforeForwardOpaque",Fr[Fr.BeforeSkyBox=2]="BeforeSkyBox",Fr[Fr.BeforeTransparent=4]="BeforeTransparent",Fr[Fr.BeforeImageEffect=6]="BeforeImageEffect",Fr[Fr.AfterEveryThing=8]="AfterEveryThing";class Kr extends ae{static get _updateMark(){return ie._instance._contextOBJ.cameraUpdateMask}static set _updateMark(e){ie._instance._contextOBJ.cameraUpdateMask=e}static drawRenderTextureByScene(e,t,r){if(!r)return null;Qr._updateMark++,t.parent?(t.sceneRenderableManager.renderUpdate(),t.skyRenderer.renderUpdate(ie._instance)):t._update(),t._prepareSceneToRender(),t._setCullCamera(e);let n=e.renderTarget;e.renderTarget=r;let a=e.scene;return e._scene=t,e.render(t),e.renderTarget=n,t.recaculateCullCamera(),t._componentDriver.callPostRender(),e._aftRenderMainPass(),e._scene=a,r}static getTexturePixel(e){let r=e.filterMode;e.filterMode=t.FilterMode.Point;let n,a=t.RenderTargetFormat.R8G8B8,i=e.width*e.height;switch(e.format){case t.TextureFormat.R32G32B32A32:case t.TextureFormat.R16G16B16A16:a=t.RenderTargetFormat.R32G32B32A32,n=new Float32Array(4*i);break;case t.TextureFormat.R32G32B32:case t.TextureFormat.R16G16B16:a=t.RenderTargetFormat.R32G32B32,n=new Float32Array(3*i);break;case t.TextureFormat.R5G6B5:case t.TextureFormat.R8G8B8:a=t.RenderTargetFormat.R8G8B8,n=new Uint8Array(3*i);break;default:a=t.RenderTargetFormat.R8G8B8A8,n=new Uint8Array(4*i)}let s=t.RenderTexture.createFromPool(e.width,e.height,a,t.RenderTargetFormat.None,!1,0,!1),o=new Be;return o.blitScreenQuad(e,s),o.context=ie._instance,o._applyOne(),e.filterMode=r,s.getData(0,0,e.width,e.height,n),s.destroy(),n}static getTexturePixelAsync(e){let r=e.filterMode;e.filterMode=t.FilterMode.Point;let n,a=t.RenderTargetFormat.R8G8B8,i=e.width*e.height;switch(e.format){case t.TextureFormat.R32G32B32A32:case t.TextureFormat.R16G16B16A16:a=t.RenderTargetFormat.R32G32B32A32,n=new Float32Array(4*i);break;case t.TextureFormat.R32G32B32:case t.TextureFormat.R16G16B16:a=t.RenderTargetFormat.R32G32B32,n=new Float32Array(3*i);break;case t.TextureFormat.R5G6B5:case t.TextureFormat.R8G8B8:a=t.RenderTargetFormat.R8G8B8,n=new Uint8Array(3*i);break;default:a=t.RenderTargetFormat.R8G8B8A8,n=new Uint8Array(4*i)}let s=t.RenderTexture.createFromPool(e.width,e.height,a,t.RenderTargetFormat.None,!1,0,!1),o=new Be;o.blitScreenQuad(e,s),o.context=ie._instance,o._applyOne(),e.filterMode=r;const l=s.getDataAsync(0,0,e.width,e.height,n);return s.destroy(),l}static drawTextureCubePixelByScene(e,r,n,a,i){let s,o,l=t.RenderTargetFormat.R8G8B8,h=n*n;switch(a){case t.TextureFormat.R32G32B32A32:case t.TextureFormat.R16G16B16A16:l=t.RenderTargetFormat.R32G32B32A32,h*=4,o=4;break;case t.TextureFormat.R32G32B32:case t.TextureFormat.R16G16B16:l=t.RenderTargetFormat.R32G32B32,h*=3,o=4;break;case t.TextureFormat.R5G6B5:case t.TextureFormat.R8G8B8:l=t.RenderTargetFormat.R8G8B8,h*=3,o=1;break;case t.TextureFormat.R8G8B8A8:l=t.RenderTargetFormat.R8G8B8A8,s=new Uint8Array(4*h),h*=4,o=1;break;default:throw"Type is not supported"}let d=new t.RenderTexture(n,n,l,t.RenderTargetFormat.DEPTH_16,!1,0,!1,!1);e.fieldOfView=90,e.cullingMask=i;let c=[],u=[new t.Quaternion(0,1,0,0),new t.Quaternion(0,0,0,1),new t.Quaternion(0,.7071068,0,.7071068),new t.Quaternion(0,.7071068,0,-.7071068),new t.Quaternion(0,.7071068,-.7071068,0),new t.Quaternion(0,-.7071068,-.7071068,0)];for(var _=0;_<6;_++)e.transform.rotation=u[_],this.drawRenderTextureByScene(e,r,d),s=4==o?new Float32Array(h):new Uint8Array(h),c[_]=d.getData(0,0,n,n,s);return d.destroy(),c}static drawTextureCubeByScene(e,r,n,a,i,s=0){e.transform.position=r;let o=this.drawTextureCubePixelByScene(e,n,a,i,s);switch(i){case t.TextureFormat.R32G32B32A32:case t.TextureFormat.R16G16B16A16:t.TextureFormat.R32G32B32A32;break;case t.TextureFormat.R32G32B32:case t.TextureFormat.R16G16B16:t.TextureFormat.R32G32B32;break;case t.TextureFormat.R5G6B5:case t.TextureFormat.R8G8B8:t.TextureFormat.R8G8B8;break;case t.TextureFormat.R8G8B8A8:t.TextureFormat.R8G8B8A8;break;default:throw"Type is not supported"}let l=new t.TextureCube(a,i,!0,!1);return l.setPixelsData(o,!1,!1),l}static __init__(){Kr.depthPass=new n}set nearPlane(e){super.nearPlane=e,this._renderDataModule.nearplane=e}get nearPlane(){return this._nearPlane}set farPlane(e){super.farPlane=e,this._renderDataModule.farplane=e}get farPlane(){return this._farPlane}set fieldOfView(e){super.fieldOfView=e,this._renderDataModule.fieldOfView=e}get fieldOfView(){return this._fieldOfView}get aspectRatio(){if(0===this._aspectRatio){var e=this.viewport;return e.width/e.height}return this._aspectRatio}set aspectRatio(e){if(e<0)throw new Error("Camera: the aspect ratio has to be a positive real number.");this._aspectRatio=e,this._renderDataModule.aspectRatio=e,this._calculateProjectionMatrix()}get viewport(){return this._offScreenRenderTexture?this._calculationViewport(this._normalizedViewport,this._offScreenRenderTexture.width,this._offScreenRenderTexture.height):this._calculationViewport(this._normalizedViewport,this.clientWidth,this.clientHeight),this._viewport}set viewport(e){var t,r;this._offScreenRenderTexture?(t=this._offScreenRenderTexture.width,r=this._offScreenRenderTexture.height):(t=this.clientWidth,r=this.clientHeight),this._normalizedViewport.x=e.x/t,this._normalizedViewport.y=e.y/r,this._normalizedViewport.width=e.width/t,this._normalizedViewport.height=e.height/r,this._calculationViewport(this._normalizedViewport,t,r),this._calculateProjectionMatrix()}get clientWidth(){return t.ILaya.stage.needUpdateCanvasSize(),t.Config3D.customResolution?t.Config3D.pixelRatio*t.Config3D._resoluWidth|0:ie.clientWidth*t.Config3D.pixelRatio|0}get clientHeight(){return t.ILaya.stage.needUpdateCanvasSize(),t.Config3D.customResolution?t.Config3D.pixelRatio*t.Config3D._resoluHeight|0:ie.clientHeight*t.Config3D.pixelRatio|0}set msaa(e){t.LayaGL.renderEngine.getCapable(t.RenderCapable.MSAA)?this._msaa=e:this._msaa=!1}get msaa(){return this._msaa&&t.Stat.enablemsaa}set fxaa(e){this._fxaa=e}get fxaa(){return this._fxaa}get normalizedViewport(){return this._normalizedViewport}set normalizedViewport(e){var t,r;this._offScreenRenderTexture?(t=this._offScreenRenderTexture.width,r=this._offScreenRenderTexture.height):(t=this.clientWidth,r=this.clientHeight),this._normalizedViewport!==e&&e.cloneTo(this._normalizedViewport),this._calculationViewport(e,t,r),this._calculateProjectionMatrix()}get viewMatrix(){if(this._updateViewMatrix){var e=this.transform.getWorldLossyScale(),t=e.x,r=e.y,n=e.z,a=this._viewMatrix.elements;this.transform.worldMatrix.cloneTo(this._viewMatrix),a[0]/=t,a[1]/=t,a[2]/=t,a[4]/=r,a[5]/=r,a[6]/=r,a[8]/=n,a[9]/=n,a[10]/=n,this._viewMatrix.invert(this._viewMatrix),this._updateViewMatrix=!1,this.skyRenderElement._renderElementOBJ&&this.skyRenderElement.calculateViewMatrix(this._viewMatrix)}return this._viewMatrix}get projectionMatrix(){return this._projectionMatrix}set projectionMatrix(e){this._projectionMatrix=e,this._useUserProjectionMatrix=!0}get projectionViewMatrix(){return t.Matrix4x4.multiply(this.projectionMatrix,this.viewMatrix,this._projectionViewMatrix),this._renderDataModule.setProjectionViewMatrix(this._projectionViewMatrix),this._projectionViewMatrix}get boundFrustum(){return this._boundFrustum.matrix=this.projectionViewMatrix,this._boundFrustum}get renderTarget(){return this._offScreenRenderTexture}set renderTarget(e){var t=this._offScreenRenderTexture;t!==e&&(t&&(t._isCameraTarget=!1),e&&(e._isCameraTarget=!0),this._offScreenRenderTexture=e,this._calculateProjectionMatrix())}get postProcess(){return this._postProcess}set postProcess(e){this._postProcess=e}get enableHDR(){return this._enableHDR}set enableHDR(e){!e||t.LayaGL.renderEngine.getCapable(t.RenderCapable.RenderTextureFormat_R16G16B16A16)?this._enableHDR=e:console.warn("Camera:can't enable HDR in this device.")}get enableBuiltInRenderTexture(){return this._needBuiltInRenderTexture}set enableBuiltInRenderTexture(e){this._needBuiltInRenderTexture=e}get depthTextureMode(){return this._depthTextureMode}set depthTextureMode(e){this._depthTextureMode=e,t.LayaGL.renderEngine.getCapable(t.RenderCapable.RenderTextureFormat_Depth)||(this._depthTextureMode&=~t.DepthTextureMode.Depth)}set opaquePass(e){e!=this._opaquePass&&(e||(this._shaderValues.setTexture(ae.OPAQUETEXTURE,t.Texture2D.blackTexture),this._shaderValues.setVector(ae.OPAQUETEXTUREPARAMS,t.Vector4.ONE),this._opaqueTexture&&t.RenderTexture.recoverToPool(this._opaqueTexture),this._opaqueTexture=null),this._opaquePass=e)}get opaquePass(){return this._opaquePass}get depthTextureFormat(){return this._depthTextureFormat}set depthTextureFormat(e){this._depthTextureFormat=e}set enableBlitDepth(e){e!=this._canBlitDepth&&(this._canBlitDepth=e,this._cacheDepth=e,this._internalRenderTexture&&t.RenderTexture.recoverToPool(this._internalRenderTexture),this._internalRenderTexture=t.RenderTexture.createFromPool(this.viewport.width,this.viewport.height,this._getRenderTextureFormat(),this.depthTextureFormat,!1,this.msaa?4:1,this._canBlitDepth,this._needRenderGamma(this._getRenderTextureFormat())),e||this._cacheDepthTexture&&!this._cacheDepthTexture._inPool&&t.RenderTexture.recoverToPool(this._cacheDepthTexture))}get enableBlitDepth(){return this._canBlitDepth}get canblitDepth(){return this._canBlitDepth&&this._internalRenderTexture&&null!=this._internalRenderTexture.depthStencilFormat}constructor(r=0,n=.3,a=1e3){super(n,a),this._updateViewMatrix=!0,this._postProcess=null,this._enableHDR=!1,this._viewportParams=new t.Vector4,this._projectionParams=new t.Vector4,this._needBuiltInRenderTexture=!1,this._msaa=!1,this._fxaa=!1,this._offScreenRenderTexture=null,this._internalRenderTexture=null,this._canBlitDepth=!1,this._internalCommandBuffer=new Be,this._depthTextureFormat=t.RenderTargetFormat.DEPTH_32,this._cameraEventCommandBuffer={},this._shadowCasterCommanBuffer=[],this._clusterPlaneCacheFlag=new t.Vector2(-1,-1),this._screenOffsetScale=new t.Vector4,this.enableRender=!0,this.clearFlag=e.CameraClearFlags.SolidColor,this.opaqueTextureSize=512,this._renderDataModule=A.Render3DModuleDataFactory.createCameraModuleData(),this._Render3DProcess=A.Render3DPassFactory.createRender3DProcess(),this._renderDataModule.transform=this.transform,this._viewMatrix=new t.Matrix4x4,this._projectionMatrix=new t.Matrix4x4,this._projectionViewMatrix=new t.Matrix4x4,this._viewport=new t.Viewport(0,0,0,0),this._normalizedViewport=new t.Viewport(0,0,1,1),this._rayViewport=new t.Viewport(0,0,0,0),this._aspectRatio=r,this._boundFrustum=new V(new t.Matrix4x4),this.depthTextureMode=0,this.opaquePass=!1,this._calculateProjectionMatrix(),t.ILaya.stage.on(t.Event.RESIZE,this,this._onScreenSizeChanged),this.transform.on(t.Event.TRANSFORM_CHANGED,this,this._onTransformChanged),this.opaquePass=!1,this._internalCommandBuffer.context=ie._instance,this._renderDataModule.farplane=this.farPlane,this._renderDataModule.nearplane=this.nearPlane,this._renderDataModule.fieldOfView=this.fieldOfView,this._renderDataModule.aspectRatio=this.aspectRatio}_calculationViewport(e,t,r){var n=e.x*t,a=e.y*r,i=n+Math.max(e.width*t,0),s=a+Math.max(e.height*r,0),o=Math.ceil(n),l=Math.ceil(a),h=Math.floor(i),d=Math.floor(s),c=o-n>=.5?Math.floor(n):o,u=l-a>=.5?Math.floor(a):l,_=i-h>=.5?Math.ceil(i):h,m=s-d>=.5?Math.ceil(s):d;this._viewport.x=c,this._viewport.y=u,this._viewport.width=_-c,this._viewport.height=m-u}_calculateProjectionMatrix(){if(!this._useUserProjectionMatrix){if(this._orthographic){var e=.5*this.orthographicVerticalSize,r=e*this.aspectRatio;t.Matrix4x4.createOrthoOffCenter(-r,r,-e,e,this.nearPlane,this.farPlane,this._projectionMatrix)}else t.Matrix4x4.createPerspective(3.1416*this.fieldOfView/180,this.aspectRatio,this.nearPlane,this.farPlane,this._projectionMatrix);this.skyRenderElement._renderElementOBJ&&this.skyRenderElement.caluclateProjectionMatrix(this._projectionMatrix,this.aspectRatio,this.nearPlane,this.farPlane,this.fieldOfView,this.orthographic)}}_isLayerVisible(e){return 0!=(Math.pow(2,e)&this.cullingMask)}_onTransformChanged(e){(e&=F.TRANSFORM_WORLDMATRIX)&&(this._updateViewMatrix=!0)}_parse(e,r){super._parse(e,r);var n=e.clearFlag;void 0!==n&&(this.clearFlag=n);var a=e.viewport;this.normalizedViewport=new t.Viewport(a[0],a[1],a[2],a[3]);var i=e.enableHDR;void 0!==i&&(this.enableHDR=i)}clone(){let e=super.clone();return e.clearFlag=this.clearFlag,this.clearColor.cloneTo(e.clearColor),e.clearColor=e.clearColor,e.viewport=this.viewport,this.normalizedViewport.cloneTo(e.normalizedViewport),e.enableHDR=this.enableHDR,e.farPlane=this.farPlane,e.nearPlane=this.nearPlane,e.fieldOfView=this.fieldOfView,e.orthographic=this.orthographic,e.orthographicVerticalSize=this.orthographicVerticalSize,e.opaquePass=this.opaquePass,e._cameraEventCommandBuffer=this._cameraEventCommandBuffer,e.opaquePass=this.opaquePass,e}_getCanvasWidth(){return this._offScreenRenderTexture?this._offScreenRenderTexture.width:this.clientWidth}_getCanvasHeight(){return this._offScreenRenderTexture?this._offScreenRenderTexture.height:this.clientHeight}_getRenderTexture(){return this._internalRenderTexture||this._offScreenRenderTexture}_needRenderGamma(e){switch(e){case t.RenderTargetFormat.R8G8B8:case t.RenderTargetFormat.R8G8B8A8:return!0;default:return!1}}_needInternalRenderTexture(){let e=this.enableBuiltInRenderTexture;if(this.renderTarget){if(this.msaa&&(e=e||!(this.renderTarget.samples>1)),this.enableHDR)switch(this.renderTarget.format){case t.TextureFormat.R16G16B16A16:case t.TextureFormat.R16G16B16:case t.TextureFormat.R32G32B32A32:case t.TextureFormat.R32G32B32:break;default:e=!0}this.postProcess&&this.postProcess.enable&&this.postProcess.effects.length>0&&(e=!0),1==this.normalizedViewport.width&&1==this.normalizedViewport.height&&0==this.normalizedViewport.x&&0==this.normalizedViewport.y||(e=!0)}return e}_getRenderTextureFormat(){return this._enableHDR?t.RenderTargetFormat.R16G16B16A16:t.RenderTargetFormat.R8G8B8A8}_updateCameraRenderData(e){this._prepareCameraToRender(),this._applyViewProject(this.viewMatrix,this._projectionMatrix,e.invertY),this._contextApply(e)}_prepareCameraToRender(){super._prepareCameraToRender();var e=this.viewport;this._viewportParams.setValue(e.x,e.y,e.width,e.height);let r=t.LayaGL.renderEngine._screenInvertY?!ie._instance.invertY:ie._instance.invertY;this._projectionParams.setValue(this._nearPlane,this._farPlane,r?-1:1,1/this.farPlane),this._shaderValues.setVector(ae.VIEWPORT,this._viewportParams),this._shaderValues.setVector(ae.PROJECTION_PARAMS,this._projectionParams)}_contextApply(e){e.viewMatrix=this.viewMatrix,e.projectionMatrix=this.projectionMatrix,e.projectionViewMatrix=this.projectionViewMatrix}_applyViewProject(e,r,n){var a;n?(t.Matrix4x4.multiply(ae._invertYScaleMatrix,r,ae._invertYProjectionMatrix),t.Matrix4x4.multiply(ae._invertYProjectionMatrix,e,ae._invertYProjectionViewMatrix),r=ae._invertYProjectionMatrix,a=ae._invertYProjectionViewMatrix):(t.Matrix4x4.multiply(r,e,this._projectionViewMatrix),this._renderDataModule.setProjectionViewMatrix(this._projectionViewMatrix),a=this._projectionViewMatrix),this._shaderValues.setMatrix4x4(ae.VIEWMATRIX,e),this._shaderValues.setMatrix4x4(ae.PROJECTMATRIX,r),this._shaderValues.setMatrix4x4(ae.VIEWPROJECTMATRIX,a)}_updateClusterPlaneXY(){var e=this.fieldOfView,r=this.aspectRatio;if(this._clusterPlaneCacheFlag.x!==e||this._clusterPlaneCacheFlag.y!==r){var n=t.Config3D.lightClusterCount,a=n.x,i=n.y,s=a+1,o=i+1,l=this._clusterXPlanes,h=this._clusterYPlanes;if(!l){l=this._clusterXPlanes=new Array(s),h=this._clusterYPlanes=new Array(o);for(var d=0;d<s;d++)l[d]=new t.Vector3;for(d=0;d<o;d++)h[d]=new t.Vector3}var c=Math.tan(this.fieldOfView/2*Math.PI/180),u=this.aspectRatio*c,_=2*c/i,m=2*u/a;for(d=0;d<s;d++){var f=m*d-u,g=1/Math.sqrt(1+f*f);l[d].setValue(g,0,-f*g)}for(d=0;d<o;d++){f=c-_*d;var p=-1/Math.sqrt(1+f*f);h[d].setValue(0,p,-f*p)}this._clusterPlaneCacheFlag.x=e,this._clusterPlaneCacheFlag.y=r}}_addCasterShadowCommandBuffer(e){this._shadowCasterCommanBuffer.indexOf(e)<0&&this._shadowCasterCommanBuffer.push(e)}_removeCasterShadowCommandBuffer(e){var t=this._shadowCasterCommanBuffer.indexOf(e);-1!=t&&this._shadowCasterCommanBuffer.splice(t,1)}_preRenderMainPass(r,n,a,i){if(r.camera=this,r.cameraShaderValue=this._shaderValues,Kr._updateMark++,a&&!this._offScreenRenderTexture&&(this.clearFlag==e.CameraClearFlags.DepthOnly||this.clearFlag==e.CameraClearFlags.Nothing))if(t.RenderTexture.bindCanvasRender)t.RenderTexture.bindCanvasRender!=this._internalRenderTexture&&(this._internalCommandBuffer.clear(),this._internalCommandBuffer.blitScreenQuad(t.RenderTexture.bindCanvasRender,this._internalRenderTexture),this._internalCommandBuffer._applyOne());else if(this._enableHDR){var s=t.RenderTexture.createFromPool(i.width,i.height,t.RenderTargetFormat.R8G8B8,t.RenderTargetFormat.DEPTH_16,!1,1);s.filterMode=t.FilterMode.Bilinear,this._renderEngine.copySubFrameBuffertoTex(s._texture,0,0,0,i.x,ie.clientHeight-(i.y+i.height),i.width,i.height),this._internalCommandBuffer.clear(),this._internalCommandBuffer.blitScreenQuad(s,this._internalRenderTexture),this._internalCommandBuffer._apply(!0),t.RenderTexture.recoverToPool(s)}}get depthTexture(){return this._depthTexture}set depthTexture(e){this._depthTexture=e}get depthNormalTexture(){return this._depthNormalsTexture}set depthNormalTexture(e){this._depthNormalsTexture=e}_aftRenderMainPass(){this._cacheDepth&&this._internalRenderTexture?(this._cacheDepthTexture&&!this._cacheDepthTexture._inPool&&t.RenderTexture.recoverToPool(this._cacheDepthTexture),this._cacheDepthTexture=this._internalRenderTexture):this._internalRenderTexture&&t.RenderTexture.recoverToPool(this._internalRenderTexture)}_createOpaqueTexture(){if(!this._opaqueTexture){let e=this._getRenderTexture(),r=this.opaqueTextureSize;this._opaqueTexture=t.RenderTexture.createFromPool(r,r,e.colorFormat,t.RenderTargetFormat.None,!0,1,!1,!0),this._opaqueTexture.filterMode=t.FilterMode.Bilinear,this._opaqueTexture.wrapModeU=t.WrapMode.Clamp,this._opaqueTexture.wrapModeV=t.WrapMode.Clamp,this._shaderValues.setTexture(ae.OPAQUETEXTURE,this._opaqueTexture);let n=new t.Vector4;n.x=this._opaqueTexture.width,n.y=this._opaqueTexture.height,n.z=this._opaqueTexture.maxMipmapLevel,this._shaderValues.setVector(ae.OPAQUETEXTUREPARAMS,n)}}render(r){let n=ie._instance;n.scene=r,n.camera=this,r._setCullCamera(this);let a=this.viewport,i=this._needInternalRenderTexture();if(i){let e=this.msaa?4:1,r=this._getRenderTextureFormat(),n=this.depthTextureFormat,i=this._needRenderGamma(r),s=t.RenderTexture.createFromPool(a.width,a.height,r,n,!1,e,this.canblitDepth,i);s.filterMode=t.FilterMode.Bilinear,this._internalRenderTexture=s}else this._internalRenderTexture=null;this.opaquePass&&!this._opaqueTexture&&this._createOpaqueTexture(),n.invertY=!1;let s=this._getRenderTexture();s&&(n.invertY=!!s._isCameraTarget&&!t.LayaGL.renderEngine._screenInvertY),this._prepareCameraToRender(),this._applyViewProject(this.viewMatrix,this.projectionMatrix,n.invertY),this._contextApply(n),this._cameraUniformData&&this._cameraUniformUBO&&this._cameraUniformUBO.setDataByUniformBufferData(this._cameraUniformData),this.clearFlag==e.CameraClearFlags.Sky&&(r.skyRenderer.setRenderElement(this.skyRenderElement),this.skyRenderElement.renderpre(n)),r._componentDriver.callPreRender(),this._preRenderMainPass(n,r,i,a),t.Config3D._multiLighting&&we.instance.update(this,r);var o=performance.now();this._Render3DProcess.fowardRender(n._contextOBJ,this),t.Stat.renderPassStatArray[t.RenderPassStatisticsInfo.T_CameraRender]+=performance.now()-o,r._componentDriver.callPostRender()}viewportPointToRay(e,r){this._rayViewport.x=this.viewport.x,this._rayViewport.y=this.viewport.y,this._rayViewport.width=t.ILaya.stage._width,this._rayViewport.height=t.ILaya.stage._height,b.calculateCursorRay(e,this._rayViewport,this._projectionMatrix,this.viewMatrix,null,r)}normalizedViewportPointToRay(e,r){var n=Kr._tempVector20,a=this.normalizedViewport;e.x=e.x*t.Config3D.pixelRatio,e.y=e.y*t.Config3D.pixelRatio,n.x=e.x*a.width,n.y=e.y*a.height,b.calculateCursorRay(n,this.viewport,this._projectionMatrix,this.viewMatrix,null,r)}worldToViewportPoint(e,r){t.Matrix4x4.multiply(this._projectionMatrix,this._viewMatrix,this._projectionViewMatrix),this.viewport.project(e,this._projectionViewMatrix,r);var n=t.Config3D.pixelRatio;let a=(r.x-this.viewport.x)/n,i=(r.y-this.viewport.y)/n;r.x=a+this.viewport.x,r.y=i+this.viewport.y,r.x=r.x/t.ILaya.stage.clientScaleX|0,r.y=r.y/t.ILaya.stage.clientScaleY|0}worldToNormalizedViewportPoint(e,r){this.worldToViewportPoint(e,r),r.x=r.x/t.ILaya.stage.width,r.y=r.y/t.ILaya.stage.height}convertScreenCoordToOrthographicCoord(e,r){if(this._orthographic){var n=this.clientWidth,a=this.clientHeight,i=this.orthographicVerticalSize*this.aspectRatio/n,s=this.orthographicVerticalSize/a;return r.x=(-n/2+e.x*t.ILaya.stage.clientScaleX)*i,r.y=(a/2-e.y*t.ILaya.stage.clientScaleY)*s,r.z=(this.nearPlane-this.farPlane)*(e.z+1)/2-this.nearPlane,t.Vector3.transformCoordinate(r,this.transform.worldMatrix,r),!0}return!1}destroy(e=!0){this._shaderValues.destroy(),this._internalRenderTexture&&!this._internalRenderTexture._inPool&&t.RenderTexture.recoverToPool(this._internalRenderTexture),this._offScreenRenderTexture=null,this._opaqueTexture&&t.RenderTexture.recoverToPool(this._opaqueTexture),this.transform.off(t.Event.TRANSFORM_CHANGED,this,this._onTransformChanged),t.ILaya.stage.off(t.Event.RESIZE,this,this._onScreenSizeChanged),this._cameraEventCommandBuffer={},ie._instance.camera==this&&(ie._instance.cameraShaderValue=null,ie._instance.camera=null),super.destroy(e)}addCommandBuffer(e,t){var r=this._cameraEventCommandBuffer[e];r||(r=this._cameraEventCommandBuffer[e]=[]),r.indexOf(t)<0&&r.push(t),t._camera=this,t.casterShadow&&this._addCasterShadowCommandBuffer(t)}removeCommandBuffer(e,t){var r=this._cameraEventCommandBuffer[e];if(!r)throw"Camera:unknown event.";var n=r.indexOf(t);-1!=n&&r.splice(n,1),t.casterShadow&&this._removeCasterShadowCommandBuffer(t)}removeCommandBuffers(e){this._cameraEventCommandBuffer[e]&&(this._cameraEventCommandBuffer[e].length=0)}_create(){return new Kr}}Kr._tempVector20=new t.Vector2,Kr._context3DViewPortCatch=new t.Viewport(0,0,0,0),Kr._contextScissorPortCatch=new t.Vector4(0,0,0,0);class jr extends B{get color(){return this._light.color}set color(e){this._light.color=e}get mode(){return this._light.lightmapBakedType}set mode(e){this._light.lightmapBakedType=e}get intensity(){return this._light.intensity}set intensity(e){this._light.intensity=e}get shadowMode(){return this._light.shadowMode}set shadowMode(e){this._light.shadowMode=e}get shadowDistance(){return this._light.shadowDistance}set shadowDistance(e){this._light.shadowDistance=e}get shadowResolution(){return this._light.shadowResolution}set shadowResolution(e){this._light.shadowResolution=e}get shadowDepthBias(){return this._light.shadowDepthBias}set shadowDepthBias(e){this._light.shadowDepthBias=e}get shadowNormalBias(){return this._light.shadowNormalBias}set shadowNormalBias(e){this._light.shadowNormalBias=e}get shadowStrength(){return this._light.shadowStrength}set shadowStrength(e){this._light.shadowStrength=e}get shadowNearPlane(){return this._light.shadowNearPlane}set shadowNearPlane(e){this._light.shadowNearPlane=e}get lightmapBakedType(){return this._light.lightmapBakedType}set lightmapBakedType(e){this._light.lightmapBakedType=e}get lightWorldMatrix(){return this._light.lightWorldMatrix}constructor(){super()}_parse(e,t){super._parse(e,t);var r=e.color;this.color.r=r[0],this.color.g=r[1],this.color.b=r[2],this.intensity=e.intensity,this.lightmapBakedType=e.lightmapBakedType}_cloneTo(e,t,r){super._cloneTo(e,t,r);var n=e;n.color=this.color.clone(),n.intensity=this.intensity,n.lightmapBakedType=this.lightmapBakedType}_addToLightQueue(){}_removeFromLightQueue(){}_create(){return new B}}class Zr extends t.Material{get color(){return this.getColorByIndex(lt.ALBEDOCOLOR)}set color(e){this.setColorByIndex(lt.ALBEDOCOLOR,e)}get texture(){return this.getTextureByIndex(lt.ALBEDOTEXTURE)}set texture(e){e?this.addDefine(lt.SHADERDEFINE_ALBEDOTEXTURE):this.removeDefine(lt.SHADERDEFINE_ALBEDOTEXTURE),this.setTextureByIndex(lt.ALBEDOTEXTURE,e)}get tilingOffset(){return this.getVector4ByIndex(lt.TILINGOFFSET)}set tilingOffset(e){e?this.setVector4ByIndex(lt.TILINGOFFSET,e):this.getVector4ByIndex(lt.TILINGOFFSET).setValue(1,1,0,0)}constructor(){super(),this.setShaderName("Unlit"),this.setVector4ByIndex(lt.TILINGOFFSET,new t.Vector4(1,1,0,0)),this.setColorByIndex(lt.ALBEDOCOLOR,new t.Color(1,1,1,1)),this.renderMode=Zr.RENDERMODE_ADDTIVE}clone(){var e=new Zr;return this.cloneTo(e),e}set renderMode(e){switch(e){case Zr.RENDERMODE_ADDTIVE:this.renderQueue=t.Material.RENDERQUEUE_TRANSPARENT,this.alphaTest=!1,this.depthWrite=!1,this.cull=Ee.CULL_NONE,this.blend=Ee.BLEND_ENABLE_ALL,this.blendSrc=Ee.BLENDPARAM_SRC_ALPHA,this.blendDst=Ee.BLENDPARAM_ONE,this.depthTest=Ee.DEPTHTEST_LEQUAL,this.addDefine(t.Material.SHADERDEFINE_ADDTIVEFOG);break;case Zr.RENDERMODE_ALPHABLENDED:this.renderQueue=t.Material.RENDERQUEUE_TRANSPARENT,this.alphaTest=!1,this.depthWrite=!1,this.cull=Ee.CULL_NONE,this.blend=Ee.BLEND_ENABLE_ALL,this.blendSrc=Ee.BLENDPARAM_SRC_ALPHA,this.blendDst=Ee.BLENDPARAM_ONE_MINUS_SRC_ALPHA,this.depthTest=Ee.DEPTHTEST_LEQUAL,this.removeDefine(t.Material.SHADERDEFINE_ADDTIVEFOG);break;default:throw new Error("MeshEffectMaterial : renderMode value error.")}}}Zr.RENDERMODE_ADDTIVE=0,Zr.RENDERMODE_ALPHABLENDED=1;class Jr extends t.Material{static __initDefine__(){Jr.SHADERDEFINE_DETAIL_NUM1=t.Shader3D.getDefineByName("ExtendTerrain_DETAIL_NUM1"),Jr.SHADERDEFINE_DETAIL_NUM2=t.Shader3D.getDefineByName("ExtendTerrain_DETAIL_NUM2"),Jr.SHADERDEFINE_DETAIL_NUM3=t.Shader3D.getDefineByName("ExtendTerrain_DETAIL_NUM3"),Jr.SHADERDEFINE_DETAIL_NUM4=t.Shader3D.getDefineByName("ExtendTerrain_DETAIL_NUM4"),Jr.SHADERDEFINE_DETAIL_NUM5=t.Shader3D.getDefineByName("ExtendTerrain_DETAIL_NUM5"),Jr.SPLATALPHATEXTURE=t.Shader3D.propertyNameToID("u_SplatAlphaTexture"),Jr.DIFFUSETEXTURE1=t.Shader3D.propertyNameToID("u_DiffuseTexture1"),Jr.DIFFUSETEXTURE2=t.Shader3D.propertyNameToID("u_DiffuseTexture2"),Jr.DIFFUSETEXTURE3=t.Shader3D.propertyNameToID("u_DiffuseTexture3"),Jr.DIFFUSETEXTURE4=t.Shader3D.propertyNameToID("u_DiffuseTexture4"),Jr.DIFFUSETEXTURE5=t.Shader3D.propertyNameToID("u_DiffuseTexture5"),Jr.DIFFUSESCALEOFFSET1=t.Shader3D.propertyNameToID("u_DiffuseScaleOffset1"),Jr.DIFFUSESCALEOFFSET2=t.Shader3D.propertyNameToID("u_DiffuseScaleOffset2"),Jr.DIFFUSESCALEOFFSET3=t.Shader3D.propertyNameToID("u_DiffuseScaleOffset3"),Jr.DIFFUSESCALEOFFSET4=t.Shader3D.propertyNameToID("u_DiffuseScaleOffset4"),Jr.DIFFUSESCALEOFFSET5=t.Shader3D.propertyNameToID("u_DiffuseScaleOffset5")}get splatAlphaTexture(){return this._shaderValues.getTexture(Jr.SPLATALPHATEXTURE)}set splatAlphaTexture(e){this._shaderValues.setTexture(Jr.SPLATALPHATEXTURE,e)}get diffuseTexture1(){return this._shaderValues.getTexture(Jr.DIFFUSETEXTURE1)}set diffuseTexture1(e){this._shaderValues.setTexture(Jr.DIFFUSETEXTURE1,e),this._setDetailNum(1)}get diffuseTexture2(){return this._shaderValues.getTexture(Jr.DIFFUSETEXTURE2)}set diffuseTexture2(e){this._shaderValues.setTexture(Jr.DIFFUSETEXTURE2,e),this._setDetailNum(2)}get diffuseTexture3(){return this._shaderValues.getTexture(Jr.DIFFUSETEXTURE3)}set diffuseTexture3(e){this._shaderValues.setTexture(Jr.DIFFUSETEXTURE3,e),this._setDetailNum(3)}get diffuseTexture4(){return this._shaderValues.getTexture(Jr.DIFFUSETEXTURE4)}set diffuseTexture4(e){this._shaderValues.setTexture(Jr.DIFFUSETEXTURE4,e),this._setDetailNum(4)}get diffuseTexture5(){return this._shaderValues.getTexture(Jr.DIFFUSETEXTURE5)}set diffuseTexture5(e){this._shaderValues.setTexture(Jr.DIFFUSETEXTURE5,e),this._setDetailNum(5)}set diffuseScaleOffset1(e){this._shaderValues.setVector(Jr.DIFFUSESCALEOFFSET1,e)}set diffuseScaleOffset2(e){this._shaderValues.setVector(Jr.DIFFUSESCALEOFFSET2,e)}set diffuseScaleOffset3(e){this._shaderValues.setVector(Jr.DIFFUSESCALEOFFSET3,e)}set diffuseScaleOffset4(e){this._shaderValues.setVector(Jr.DIFFUSESCALEOFFSET4,e)}set diffuseScaleOffset5(e){this._shaderValues.setVector(Jr.DIFFUSESCALEOFFSET5,e)}set renderMode(e){switch(e){case Jr.RENDERMODE_OPAQUE:this.renderQueue=t.Material.RENDERQUEUE_OPAQUE,this.depthWrite=!0,this.cull=Ee.CULL_BACK,this.blend=Ee.BLEND_DISABLE,this.depthTest=Ee.DEPTHTEST_LESS;break;case Jr.RENDERMODE_TRANSPARENT:this.renderQueue=t.Material.RENDERQUEUE_OPAQUE,this.depthWrite=!1,this.cull=Ee.CULL_BACK,this.blend=Ee.BLEND_ENABLE_ALL,this.blendSrc=Ee.BLENDPARAM_SRC_ALPHA,this.blendDst=Ee.BLENDPARAM_ONE_MINUS_SRC_ALPHA,this.depthTest=Ee.DEPTHTEST_LEQUAL;break;default:throw new Error("ExtendTerrainMaterial:renderMode value error.")}}constructor(){super(),this.setShaderName("ExtendTerrain"),this.renderMode=Jr.RENDERMODE_OPAQUE}_setDetailNum(e){switch(e){case 1:this._shaderValues.addDefine(Jr.SHADERDEFINE_DETAIL_NUM1),this._shaderValues.removeDefine(Jr.SHADERDEFINE_DETAIL_NUM2),this._shaderValues.removeDefine(Jr.SHADERDEFINE_DETAIL_NUM3),this._shaderValues.removeDefine(Jr.SHADERDEFINE_DETAIL_NUM4),this._shaderValues.removeDefine(Jr.SHADERDEFINE_DETAIL_NUM5);break;case 2:this._shaderValues.addDefine(Jr.SHADERDEFINE_DETAIL_NUM2),this._shaderValues.removeDefine(Jr.SHADERDEFINE_DETAIL_NUM1),this._shaderValues.removeDefine(Jr.SHADERDEFINE_DETAIL_NUM3),this._shaderValues.removeDefine(Jr.SHADERDEFINE_DETAIL_NUM4),this._shaderValues.removeDefine(Jr.SHADERDEFINE_DETAIL_NUM5);break;case 3:this._shaderValues.addDefine(Jr.SHADERDEFINE_DETAIL_NUM3),this._shaderValues.removeDefine(Jr.SHADERDEFINE_DETAIL_NUM1),this._shaderValues.removeDefine(Jr.SHADERDEFINE_DETAIL_NUM2),this._shaderValues.removeDefine(Jr.SHADERDEFINE_DETAIL_NUM4),this._shaderValues.removeDefine(Jr.SHADERDEFINE_DETAIL_NUM5);break;case 4:this._shaderValues.addDefine(Jr.SHADERDEFINE_DETAIL_NUM4),this._shaderValues.removeDefine(Jr.SHADERDEFINE_DETAIL_NUM1),this._shaderValues.removeDefine(Jr.SHADERDEFINE_DETAIL_NUM2),this._shaderValues.removeDefine(Jr.SHADERDEFINE_DETAIL_NUM3),this._shaderValues.removeDefine(Jr.SHADERDEFINE_DETAIL_NUM5);break;case 5:this._shaderValues.addDefine(Jr.SHADERDEFINE_DETAIL_NUM5),this._shaderValues.removeDefine(Jr.SHADERDEFINE_DETAIL_NUM1),this._shaderValues.removeDefine(Jr.SHADERDEFINE_DETAIL_NUM2),this._shaderValues.removeDefine(Jr.SHADERDEFINE_DETAIL_NUM3),this._shaderValues.removeDefine(Jr.SHADERDEFINE_DETAIL_NUM4)}}clone(){var e=new Jr;return this.cloneTo(e),e}}Jr.RENDERMODE_OPAQUE=1,Jr.RENDERMODE_TRANSPARENT=2;class qr extends j{constructor(){super(),this._projectionViewWorldMatrix=new t.Matrix4x4}_getcommonUniformMap(){return["Sprite3D","TrailRender"]}_createBaseRenderNode(){return A.Render3DModuleDataFactory.createMeshRenderNode()}_onAdded(){super._onAdded(),this._trailFilter=new Mr(this),this._setRenderElements()}get time(){return this._trailFilter.time}set time(e){this._trailFilter.time=e}get minVertexDistance(){return this._trailFilter.minVertexDistance}set minVertexDistance(e){this._trailFilter.minVertexDistance=e}get widthMultiplier(){return this._trailFilter.widthMultiplier}set widthMultiplier(e){this._trailFilter.widthMultiplier=e}get widthCurve(){return this._trailFilter.widthCurve}set widthCurve(e){this._trailFilter.widthCurve=e}get colorGradient(){return this._trailFilter.colorGradient}set colorGradient(e){this._trailFilter.colorGradient=e}get textureMode(){return this._trailFilter.textureMode}set textureMode(e){this._trailFilter.textureMode=e}get alignment(){return this._trailFilter.alignment}set alignment(e){this._trailFilter.alignment=e}_onEnable(){super._onEnable(),this.owner._transform.position.cloneTo(this._trailFilter._lastPosition)}renderUpdate(e){this._calculateBoundingBox(),this._renderElements.forEach(((t,r)=>{var n,a;let i=t._geometry;t._renderElementOBJ.isRender=i._prepareRender(e),i._updateRenderParams(e);let s=null!==(n=this.sharedMaterial)&&void 0!==n?n:Jt.defaultMaterial;s=null!==(a=this.sharedMaterials[r])&&void 0!==a?a:s,t.material=s,t._renderElementOBJ.materialRenderQueue=s.renderQueue}))}get bounds(){return this._bounds}_calculateBoundingBox(){let e=ie._instance;this.boundsChange=!1,this._trailFilter._update(e)}clear(){this._trailFilter.clear()}_onDestroy(){this._trailFilter.destroy(),super._onDestroy()}_cloneTo(e){super._cloneTo(e);let t=e;t.time=this.time,t.minVertexDistance=this.minVertexDistance;var r=[],n=this.widthCurve;for(let e=0,t=this.widthCurve.length;e<t;e++)r.push(n[e].clone());t.widthCurve=r,t.colorGradient=this.colorGradient.clone(),t.textureMode=this.textureMode,t.alignment=this.alignment}}class $r{constructor(){this._coefficients=new Float32Array(27)}getCoefficient(e,t){return this._coefficients[9*e+t]}setCoefficient(e,t,r){this._coefficients[9*e+t]=r}setCoefficients(e,t,r,n,a,i,s,o,l,h){var d=9*e;this._coefficients[d]=t,this._coefficients[++d]=r,this._coefficients[++d]=n,this._coefficients[++d]=a,this._coefficients[++d]=i,this._coefficients[++d]=s,this._coefficients[++d]=o,this._coefficients[++d]=l,this._coefficients[++d]=h}cloneTo(e){if(this!==e)for(var t=this._coefficients,r=e._coefficients,n=0;n<27;n++)r[n]=t[n]}}$r._default=new $r;class en{static surfaceArea(e,t){return Math.atan2(e*t,Math.sqrt(e*e+t*t+1))}static uv2Dir(e,r,n,a){switch(n){case t.TextureCubeFace.PositiveX:a.x=1,a.y=-r,a.z=-e;break;case t.TextureCubeFace.NegativeX:a.x=-1,a.y=-r,a.z=e;break;case t.TextureCubeFace.PositiveY:a.x=e,a.y=1,a.z=r;break;case t.TextureCubeFace.NegativeY:a.x=e,a.y=-1,a.z=-r;break;case t.TextureCubeFace.PositiveZ:a.x=e,a.y=-r,a.z=1;break;case t.TextureCubeFace.NegativeZ:a.x=-e,a.y=-r,a.z=-1}}static sh_eval_9(e,t,r,n){const a=Math.sqrt,i=Math.PI;switch(e){case 0:return.5*a(1/i);case 1:return.5*-r*a(3/i);case 2:return.5*n*a(3/i);case 3:return.5*-t*a(3/i);case 4:return t*r*.5*a(15/i);case 5:return-r*n*.5*a(15/i);case 6:return.25*(3*n*n-1)*a(5/i);case 7:return-t*n*.5*a(15/i);case 8:return.25*(t*t-r*r)*a(15/i);default:return 0}}static CalCubemapSH(e,r,n,a=!0){let i=n,s=n,o=this._tempSHR.fill(0),l=this._tempSHG.fill(0),h=this._tempSHB.fill(0),d=new t.Vector3;for(let n=0;n<6;n++){let c=e[n];for(let e=0;e<s;e++)for(let u=0;u<i;u++){let _=(u+.5)/i*2-1,m=(e+.5)/s*2-1,f=1/i,g=1/s,p=_-f,S=m-g,T=_+f,E=m+g,x=this.surfaceArea(p,S)-this.surfaceArea(p,E)-this.surfaceArea(T,S)+this.surfaceArea(T,E);this.uv2Dir(_,m,n,d),t.Vector3.normalize(d,d);let A=(u+e*i)*r,D=c[A],R=c[A+1],M=c[A+2];a&&(D=t.Color.gammaToLinearSpace(D),R=t.Color.gammaToLinearSpace(R),M=t.Color.gammaToLinearSpace(M));for(let e=0;e<this.SH_Count;e++){let t=this.sh_eval_9(e,d.x,d.y,d.z);o[e]+=D*t*x,l[e]+=R*t*x,h[e]+=M*t*x}}}let c=new $r;for(let e=0;e<this.SH_Count;e++){let t=this.k[e],r=o[e];c.setCoefficient(0,e,r*t);let n=l[e];c.setCoefficient(1,e,n*t);let a=h[e];c.setCoefficient(2,e,a*t)}return c}static CalGradientSH(e,r,n,a=!0){console.time("Gradient SH");let i=this._tempSkyPixels,s=this._tempEquatorPixels,o=this._tempGroundPixels;const fillPixelBuffer=(e,r,n)=>{let a=new t.Color(r.x,r.y,r.z,1);n&&a.toLinear(a);let i=Math.min(a.r,1),s=Math.min(a.g,1),o=Math.min(a.b,1);for(let t=0;t<e.length;t+=3)e[t]=i,e[t+1]=s,e[t+2]=o};fillPixelBuffer(i,e,a),fillPixelBuffer(s,r,a),fillPixelBuffer(o,n,a);let l=[];l[t.TextureCubeFace.PositiveY]=i,l[t.TextureCubeFace.NegativeY]=o,l[t.TextureCubeFace.PositiveX]=s,l[t.TextureCubeFace.NegativeX]=s,l[t.TextureCubeFace.PositiveZ]=s,l[t.TextureCubeFace.NegativeZ]=s;let h=en.CalCubemapSH(l,3,this.GradientSimulateSize,!1);return console.timeEnd("Gradient SH"),h}}en._tempSHR=new Float32Array(9),en._tempSHG=new Float32Array(9),en._tempSHB=new Float32Array(9),en.k=[.28209479177387814,-.32573500793527993,.32573500793527993,-.32573500793527993,.2731371076480198,-.2731371076480198,.07884789131313,-.2731371076480198,.1365685538240099],en.GradientSimulateSize=3,en.SH_Count=9,en._tempSkyPixels=new Float32Array(en.GradientSimulateSize*en.GradientSimulateSize*3),en._tempEquatorPixels=new Float32Array(en.GradientSimulateSize*en.GradientSimulateSize*3),en._tempGroundPixels=new Float32Array(en.GradientSimulateSize*en.GradientSimulateSize*3);class tn extends Ue{get direction(){return this._direction}set direction(e){e.cloneTo(this.direction),this._dataModule.setDirection(this._direction)}get shadowCascadesMode(){return this._dataModule.shadowCascadesMode}set shadowCascadesMode(e){this._dataModule.shadowCascadesMode=e}get shadowTwoCascadeSplits(){return this._dataModule.shadowTwoCascadeSplits}set shadowTwoCascadeSplits(e){this._dataModule.shadowTwoCascadeSplits=e}get shadowFourCascadeSplits(){return this._shadowFourCascadeSplits}set shadowFourCascadeSplits(e){if(e.x>e.y||e.y>e.z||e.z>1)throw"DiretionLight:Invalid value.";e.cloneTo(this._shadowFourCascadeSplits),this._dataModule.setShadowFourCascadeSplits(this._shadowFourCascadeSplits)}constructor(){super(),this._direction=new t.Vector3,this._shadowTwoCascadeSplits=1/3,this._shadowFourCascadeSplits=new t.Vector3,this._lightType=e.LightType.Directional,this.shadowCascadesMode=e.ShadowCascadesMode.NoCascades,this.shadowFourCascadeSplits=new t.Vector3(1/15,.2,7/15),this.shadowTwoCascadeSplits=1/3}_creatModuleData(){this._dataModule=A.Render3DModuleDataFactory.createDirectLight()}_addToLightQueue(){this.owner.scene._directionLights.add(this)}_removeFromLightQueue(){this.owner.scene._directionLights.remove(this)}_create(){return new tn}}class rn extends Ue{get range(){return this._range}set range(e){this._range=e,this._dataModule.range=e}constructor(){super(),this._lightType=e.LightType.Point,this.range=6}_creatModuleData(){this._dataModule=A.Render3DModuleDataFactory.createPointLight()}_addToLightQueue(){this.owner.scene._pointLights.add(this)}_removeFromLightQueue(){this.owner.scene._pointLights.remove(this)}_parse(e,t){super._parse(e,t),this.range=e.range}_cloneTo(t){super._cloneTo(t);var r=t;r.range=this.range,r._lightType=e.LightType.Point}_create(){return new rn}}class nn extends Ue{get direction(){return this._direction}set direction(e){e.cloneTo(this.direction),this._dataModule.setDirection(this._direction)}get spotAngle(){return this._dataModule.spotAngle}set spotAngle(e){this._dataModule.spotAngle=Math.max(Math.min(e,179),0)}get range(){return this._dataModule.spotRange}set range(e){this._dataModule.spotRange=e}constructor(){super(),this.spotAngle=30,this.range=10,this._direction=new t.Vector3,this._lightType=e.LightType.Spot}_creatModuleData(){this._dataModule=A.Render3DModuleDataFactory.createSpotLight()}_addToLightQueue(){this.owner.scene._spotLights.add(this)}_removeFromLightQueue(){this.owner.scene._spotLights.remove(this)}_parse(e,t){super._parse(e,t),this.range=e.range,this.spotAngle=e.spotAngle}_cloneTo(e){super._cloneTo(e);var t=e;t.range=this.range,t.spotAngle=this.spotAngle}_create(){return new nn}}class an extends z{static getID(){return an.volumetricCount++}constructor(){super(),this._type=X.VolumetricGIType,this._probeCounts=new t.Vector3,this._probeStep=new t.Vector3,this._params=new t.Vector4(8,16,0,0),this._dataModule=A.Render3DModuleDataFactory.createVolumetricGI(),this._dataModule.setParams(this._params),this._volumetricProbeID=an.getID(),this._dataModule.intensity=1}_onEnable(){super._onEnable(),this._dataModule.updateMark=Q.Scene3D._updateMark}get irradiance(){return this._irradiance}set irradiance(e){this._irradiance!=e&&(this._irradiance&&this._irradiance._removeReference(),e?(e._addReference(),this._dataModule.irradiance=e._texture):this._dataModule.irradiance=null,this._irradiance=e,this._irradiance=e,this._dataModule.updateMark=Q.Scene3D._updateMark)}get distance(){return this._distance}set distance(e){this._distance!=e&&(this._distance&&this._distance._removeReference(),e?(e._addReference(),this._dataModule.distance=e._texture):this._dataModule.distance=null,this._distance=e,this._distance=e,this._dataModule.updateMark=Q.Scene3D._updateMark)}get normalBias(){return this._params.z}set normalBias(e){this._params.z=e,this._dataModule.setParams(this._params),this._dataModule.updateMark=Q.Scene3D._updateMark}get viewBias(){return this._params.w}set viewBias(e){this._params.w=e,this._dataModule.setParams(this._params),this._dataModule.updateMark=Q.Scene3D._updateMark}get irradianceTexel(){return this._params.x}get distanceTexel(){return this._params.y}get intensity(){return this._dataModule.intensity}set intensity(e){e!=this._dataModule.intensity&&(e=Math.max(e,0),this._dataModule.updateMark=Q.Scene3D._updateMark)}get probeCounts(){return this._probeCounts}set probeCounts(e){e.equal(this._probeCounts)||(e.cloneTo(this._probeCounts),this._dataModule.setProbeCounts(e),this._dataModule.updateMark=Q.Scene3D._updateMark)}get probeStep(){return this._probeStep}set probeStep(e){e.equal(this._probeStep)||(e.cloneTo(this._probeStep),this._dataModule.setProbeStep(e),this._dataModule.updateMark=Q.Scene3D._updateMark)}_reCaculateBoundBox(){super._reCaculateBoundBox(),this.bounds.cloneTo(this._dataModule.bound)}_onDestroy(){this.irradiance=null,this.distance=null}_cloneTo(e){e.irradiance=this.irradiance,e.distance=this.distance,this._probeCounts.cloneTo(e._probeCounts),this.probeStep.cloneTo(e.probeStep),e.normalBias=this.normalBias,e.viewBias=this.viewBias,e.intensity=this.intensity}}an.volumetricCount=0,e.AreaShape=void 0,(Ur=e.AreaShape||(e.AreaShape={}))[Ur.rectangle=0]="rectangle",Ur[Ur.ellipse=1]="ellipse";class sn extends Ue{constructor(){super(),this._lightType=e.LightType.Area,this._lightmapBakedType=e.LightMode.bakeOnly,this._spread=90,this._maxBounces=1024,this._size=new t.Vector2(1,1),this._areaShape=e.AreaShape.rectangle,this._power=100}_creatModuleData(){this._dataModule={transform:null,range:0,shadowResolution:1,shadowDistance:1,shadowMode:null,shadowStrength:1,shadowDepthBias:1,shadowNormalBias:1,shadowNearPlane:1}}get lightmapBakedType(){return e.LightMode.bakeOnly}set lightmapBakedType(t){this._lightmapBakedType=e.LightMode.bakeOnly}get shape(){return this._areaShape}set shape(e){this._areaShape=e}get power(){return this._power}set power(e){this._power=e}get size(){return this._size}set size(e){e&&e.cloneTo(this._size)}get spread(){return this._spread}set spread(e){this._spread=Math.min(Math.max(0,e),180)}get maxBounces(){return this._maxBounces}set maxBounces(e){this._maxBounces=e}_addToLightQueue(){}_removeFromLightQueue(){}_parse(e,t){super._parse(e,t)}_cloneTo(e){super._cloneTo(e)}_create(){return new sn}}const on=new t.Vector3;new t.Vector3;class ln{constructor(e){this._mincullRate=e,this._renders=[],this._cachSprite3D=[]}get mincullRate(){return this._mincullRate}set mincullRate(e){this._mincullRate=e}set group(e){if(e!=this._group){if(this._group)for(let e=0,r=this._renders.length;e<r;e++){let r=this._renders[e];r.owner.transform.off(t.Event.TRANSFORM_CHANGED,this._group._updateRecaculateFlag),r._LOD=-1}this._group=e;for(let e=0,r=this._renders.length;e<r;e++){let r=this._renders[e];r.owner.transform.on(t.Event.TRANSFORM_CHANGED,this._group,this._group._updateRecaculateFlag),r._LOD=this._lodIndex}}}get renders(){return this._cachSprite3D}set renders(e){this._cachSprite3D=e;for(var t=0,r=e.length;t<r;t++)this.addNode(e[t])}addNode(e){if(!e)return;let r=e;if(r._isRenderNode>0){let n=r.components;for(let e of n)e instanceof j&&-1==this._renders.indexOf(e)&&this._renders.push(e);this._group&&e.transform.on(t.Event.TRANSFORM_CHANGED,this._group,this._group._updateRecaculateFlag)}for(var n=0,a=e.numChildren;n<a;n++)this.addNode(e.getChildAt(n))}removeNode(r){let n=r;if(n._isRenderNode>0){let a,i=n.components;for(let n of i)n instanceof j&&-1==(a=this._renders.indexOf(n))&&(this._renders.splice(a,1),n.setRenderbitFlag(e.RenderBitFlag.RenderBitFlag_CullFlag,!1),this._group&&r.transform.off(t.Event.TRANSFORM_CHANGED,this._group._updateRecaculateFlag))}for(var a=0,i=r.numChildren;a<i;a++)this.removeNode(r.getChildAt(a))}removeAllRender(){this._renders.forEach((t=>{t.setRenderbitFlag(e.RenderBitFlag.RenderBitFlag_CullFlag,!1)}))}}class hn extends t.Component{constructor(){super(),this._needcaculateBounds=!1,this._lods=[],this._visialIndex=-1,this._bounds=new H,this._lodPosition=new t.Vector3,this.runInEditor=!0}shadowCullPass(){return!1}get lods(){return this._lods}set lods(e){this._lods=e;for(var t=0,r=this._lods.length;t<r;t++){let e=this._lods[t];e._lodIndex=t,e.group=this}this._updateRecaculateFlag(),this._lodCount=this._lods.length}get nowRate(){return this._nowRate}get bounds(){return this.recalculateBounds(),this._bounds}_onEnable(){super._onEnable();for(var e=0,t=this._lods.length;e<t;e++)this._setLODinvisible(e);this._visialIndex=-1,this._applyVisibleRate(1)}_onDisable(){super._onDisable(),this._lods.forEach((e=>{e.removeAllRender()}))}_applyVisibleRate(e){for(var t=0;t<this._lodCount;t++){if(e>this._lods[t].mincullRate)return-1==t?(this._setLODvisible(t),void(this._visialIndex=t)):t==this._visialIndex?void 0:(-1!=this._visialIndex&&this._setLODinvisible(this._visialIndex),this._setLODvisible(t),void(this._visialIndex=t))}-1!=this._visialIndex&&(this._setLODinvisible(this._visialIndex),this._visialIndex=-1)}_setLODvisible(t){let r=this._lods[t];for(var n=0,a=r._renders.length;n<a;n++)r._renders[n].setRenderbitFlag(e.RenderBitFlag.RenderBitFlag_CullFlag,!1)}_setLODinvisible(t){let r=this._lods[t];for(var n=0,a=r._renders.length;n<a;n++)r._renders[n].setRenderbitFlag(e.RenderBitFlag.RenderBitFlag_CullFlag,!0)}onDestroy(){this._lods.forEach((e=>{let t=e._renders;for(var r=0;r<t.length;r++)e.removeNode(t[r].owner)}))}_updateRecaculateFlag(){this._needcaculateBounds=!0}_cloneTo(e){super._cloneTo(e);let cloneHierachFun=(e,t,r)=>{let n=((e,t)=>{let r=[],n=e;for(;n;)n instanceof B&&r.push(n),n=n.parent;let a=t;for(;a&&-1==r.indexOf(a);)a=a.parent;return a})(e,t);if(!n)return null;let a=[];T._getHierarchyPath(n,e,a);let i=[];T._getHierarchyPath(n,t,i);let s=T._getParentNodeByHierarchyPath(r,a);return s?T._getNodeByHierarchyPath(s,i):null},t=[];for(let r=0,n=this._lodCount;r<n;r++){let n=this._lods[r],a=new ln(n.mincullRate);t.push(a),n._renders.forEach((t=>{let r=cloneHierachFun(this.owner,t.owner,e.owner);r&&a.addNode(r)}))}e.lods=t}recalculateBounds(){if(!this._needcaculateBounds)return;let e=!0;for(let t=0,r=this._lods.length;t<r;t++){this._lods[t]._renders.forEach((t=>{e?(t.bounds.cloneTo(this._bounds),e=!1):H.merge(this._bounds,t.bounds,this._bounds)}))}this._lodPosition=this._bounds._imp.getCenter();let t=this._bounds.getExtent();this._size=2*Math.max(t.x,t.y,t.z),this._needcaculateBounds=!1}onPreRender(){this.recalculateBounds();let e=this.owner.scene.cullInfoCamera,r=e.maxlocalYDistance,n=e.boundFrustum;t.Vector3.subtract(this._lodPosition,e.transform.position,on);let a=on.length();if(a>e.farPlane||0==n.containsPoint(this._lodPosition))return;let i=a/e.farPlane*r,s=this._size/i;this._nowRate=s,this._applyVisibleRate(s)}}class dn{constructor(){this.startPosition=new t.Vector3,this.endPosition=new t.Vector3,this.startColor=new t.Color,this.endColor=new t.Color,this.startNormal=new t.Vector3,this.endNormal=new t.Vector3}cloneTo(e){this.startPosition.cloneTo(e.startPosition),this.endPosition.cloneTo(e.endPosition),this.startColor.cloneTo(e.startColor),this.endColor.cloneTo(e.endColor),this.startNormal.cloneTo(e.startPosition),this.endNormal.cloneTo(e.endPosition)}}class cn extends Z{constructor(e,r){super(t.MeshTopology.Lines,t.DrawType.DrawArray),this._floatCountPerVertices=10,this._minUpdate=Number.MAX_VALUE,this._maxUpdate=Number.MIN_VALUE,this._floatBound=new Float32Array(6),this._calculateBound=!0,this._maxLineCount=0,this._lineCount=0;var n=2*r;this._ownerRender=e,this._maxLineCount=r,this._vertices=new Float32Array(n*this._floatCountPerVertices),this._vertexBuffer=A.renderOBJCreate.createVertexBuffer3D(Xt.vertexDeclaration.vertexStride*n,t.BufferUsage.Static,!1),this._vertexBuffer.vertexDeclaration=Xt.vertexDeclaration;var a=new t.BufferState;this.bufferState=a,this.bufferState.applyState([this._vertexBuffer],null);var i=cn._tempVector0,s=cn._tempVector1;i.setValue(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE),s.setValue(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE),this._bounds=new H(i,s)}_getType(){return cn._type}_resizeLineData(e){var r=2*e,n=this._vertices;this._vertexBuffer.destroy(),this._maxLineCount=e;var a=r*this._floatCountPerVertices;this._vertices=new Float32Array(a),this._vertexBuffer=A.renderOBJCreate.createVertexBuffer3D(Xt.vertexDeclaration.vertexStride*r,t.BufferUsage.Static,!1),this._vertexBuffer.vertexDeclaration=Xt.vertexDeclaration,a<n.length?(this._vertices.set(new Float32Array(n.buffer,0,a)),this._vertexBuffer.setData(this._vertices.buffer,0,0,4*a)):(this._vertices.set(n),this._vertexBuffer.setData(this._vertices.buffer,0,0,4*n.length)),this.bufferState.applyState([this._vertexBuffer],null),this._minUpdate=Number.MAX_VALUE,this._maxUpdate=Number.MIN_VALUE}_updateLineVertices(e,r,n,a,i,s=null,o=null){r&&(this._vertices[e+0]=r.x,this._vertices[e+1]=r.y,this._vertices[e+2]=r.z),a&&(this._vertices[e+3]=a.r,this._vertices[e+4]=a.g,this._vertices[e+5]=a.b,this._vertices[e+6]=a.a),s&&(this._vertices[e+7]=s.x,this._vertices[e+8]=s.y,this._vertices[e+9]=s.z),n&&(this._vertices[e+10]=n.x,this._vertices[e+11]=n.y,this._vertices[e+12]=n.z),i&&(this._vertices[e+13]=i.r,this._vertices[e+14]=i.g,this._vertices[e+16]=i.b,this._vertices[e+16]=i.a),o&&(this._vertices[e+17]=o.x,this._vertices[e+18]=o.y,this._vertices[e+19]=o.z),this._minUpdate=Math.min(this._minUpdate,e),this._maxUpdate=Math.max(this._maxUpdate,e+2*this._floatCountPerVertices);var l=this._bounds,h=this._floatBound,d=l.getMin(),c=l.getMax();t.Vector3.min(d,r,d),t.Vector3.min(d,n,d),t.Vector3.max(c,r,c),t.Vector3.max(c,n,c),l.setMin(d),l.setMax(c),h[0]=d.x,h[1]=d.y,h[2]=d.z,h[3]=c.x,h[4]=c.y,h[5]=c.z,this._ownerRender.boundsChange=!0}_reCalculateBound(){if(this._calculateBound){var e=this._vertices,t=cn._tempVector0,r=cn._tempVector1;t.setValue(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE),r.setValue(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE);for(var n=0;n<2*this._lineCount;++n){var a=this._floatCountPerVertices*n,i=e[a+0],s=e[a+1],o=e[a+2];t.x=Math.min(i,t.x),t.y=Math.min(s,t.y),t.z=Math.min(o,t.z),r.x=Math.max(i,r.x),r.y=Math.max(s,r.y),r.z=Math.max(o,r.z)}this._bounds.setMin(t),this._bounds.setMax(r);var l=this._floatBound;l[0]=t.x,l[1]=t.y,l[2]=t.z,l[3]=r.x,l[4]=r.y,l[5]=r.z,this._calculateBound=!1}}_removeLineData(e){var t=2*this._floatCountPerVertices,r=e+1,n=e*t,a=this._vertices,i=new Float32Array(a.buffer,r*t*4,(this._lineCount-r)*t);a.set(i,n),this._minUpdate=Math.min(this._minUpdate,n),this._maxUpdate=Math.max(this._maxUpdate,n+i.length),this._lineCount--;var s=this._floatBound,o=a[n],l=a[n+1],h=a[n+2],d=a[n+7],c=a[n+8],u=a[n+9],_=s[0],m=s[1],f=s[2],g=s[3],p=s[4],S=s[5];o!==_&&o!==g&&l!==m&&l!==p&&h!==f&&h!==S&&d!==_&&d!==g&&c!==m&&c!==p&&u!==f&&u!==S||(this._calculateBound=!0)}_updateLineData(e,t,r,n,a,i=null,s=null){var o=2*this._floatCountPerVertices;this._updateLineVertices(e*o,t,r,n,a,i,s),this._calculateBound=!0}_updateLineDatas(e,t){for(var r=2*this._floatCountPerVertices,n=t.length,a=0;a<n;a++){var i=t[a];this._updateLineVertices((e+a)*r,i.startPosition,i.endPosition,i.startColor,i.endColor,i.startNormal,i.endNormal)}this._calculateBound=t.length>0}_getLineData(e,t){var r=t.startPosition,n=t.startColor,a=t.endPosition,i=t.endColor,s=t.startNormal,o=t.endNormal,l=this._vertices,h=e*this._floatCountPerVertices*2;r.x=l[h+0],r.y=l[h+1],r.z=l[h+2],n.r=l[h+3],n.g=l[h+4],n.b=l[h+5],n.a=l[h+6],s.x=l[h+7],s.y=l[h+8],s.z=l[h+9],a.x=l[h+10],a.y=l[h+11],a.z=l[h+12],i.r=l[h+13],i.g=l[h+14],i.b=l[h+15],i.a=l[h+16],o.x=l[h+17],o.y=l[h+18],o.z=l[h+19]}_prepareRender(e){return!0}_updateRenderParams(e){this.clearRenderParams(),this._minUpdate!==Number.MAX_VALUE&&this._maxUpdate!==Number.MIN_VALUE&&(this._vertexBuffer.setData(this._vertices.buffer,4*this._minUpdate,4*this._minUpdate,4*(this._maxUpdate-this._minUpdate)),this._minUpdate=Number.MAX_VALUE,this._maxUpdate=Number.MIN_VALUE),this._lineCount>0&&this.setDrawArrayParams(0,2*this._lineCount)}destroy(){this._destroyed||(super.destroy(),this.bufferState.destroy(),this._vertexBuffer.destroy(),this._bufferState=null,this._vertexBuffer=null,this._vertices=null)}}cn._tempVector0=new t.Vector3,cn._tempVector1=new t.Vector3,cn._type=Z._typeCounter++;class un extends j{constructor(){super(),this._isRenderActive=!1,this._isInRenders=!1,this._needUpdatelines=!1,this._lines=[],this._projectionViewWorldMatrix=new t.Matrix4x4,this._pixelLineFilter=new cn(this,20),this._baseRenderNode.shaderData.addDefine(G.SHADERDEFINE_COLOR),this.geometryBounds=this._pixelLineFilter._bounds}get bounds(){return this._pixelLineFilter._reCalculateBound(),super.bounds}get pixelLinesDatas(){return this._needUpdatelines&&this._updateLineDatas(),this._lines}set pixelLinesDatas(e){this.clear(),this.addLines(e)}get maxLineCount(){return this._pixelLineFilter._maxLineCount}set maxLineCount(e){this._pixelLineFilter._resizeLineData(e),this._pixelLineFilter._lineCount=Math.min(this._pixelLineFilter._lineCount,e)}get lineCount(){return this._pixelLineFilter._lineCount}_onAdded(){super._onAdded(),this._changeRenderObjects(0,Wr.defaultMaterial)}_onEnable(){this._isRenderActive=!0,0!=this._pixelLineFilter._lineCount&&(this.owner.scene._addRenderObject(this),this._isInRenders=!0),this._setBelongScene(this.owner.scene)}_onDisable(){this._pixelLineFilter&&0!=this._pixelLineFilter._lineCount&&this._isRenderActive&&(this.owner.scene._removeRenderObject(this),this._isInRenders=!1),this._isRenderActive=!1,this._setUnBelongScene()}_createBaseRenderNode(){return A.Render3DModuleDataFactory.createMeshRenderNode()}renderUpdate(e){this._renderElements.forEach(((t,r)=>{var n,a;t._renderElementOBJ.isRender=t._geometry._prepareRender(e),t._geometry._updateRenderParams(e);let i=null!==(n=this.sharedMaterial)&&void 0!==n?n:lt.defaultMaterial;i=null!==(a=this.sharedMaterials[r])&&void 0!==a?a:i,t.material=i,t._renderElementOBJ.materialRenderQueue=i.renderQueue}))}_changeRenderObjects(e,t){var r=this._renderElements;t||(t=Wr.defaultMaterial);var n=r[e];n||(n=r[e]=new te),n.setTransform(this.owner._transform),n.setGeometry(this._pixelLineFilter),n.render=this,n.material=t,this._setRenderElements()}_pixelLinesDataChange(e){if(null!=e){let t=parseInt(e),r=this._lines[t];r&&this.setLine(t,r.startPosition,r.endPosition,r.startColor,r.endColor)}}addLine(e,t,r,n){if(this._pixelLineFilter._lineCount===this._pixelLineFilter._maxLineCount)throw"PixelLineSprite3D: lineCount has equal with maxLineCount.";this._pixelLineFilter._updateLineData(this._pixelLineFilter._lineCount++,e,t,r,n),this._isRenderActive&&!this._isInRenders&&this._pixelLineFilter._lineCount>0&&(this.owner.scene&&this.owner.scene._addRenderObject(this),this._isInRenders=!0),this._needUpdatelines=!0}addLineWithNormal(e,t,r,n,a,i){if(this._pixelLineFilter._lineCount===this._pixelLineFilter._maxLineCount)throw"PixelLineSprite3D: lineCount has equal with maxLineCount.";this._pixelLineFilter._updateLineData(this._pixelLineFilter._lineCount++,e,t,r,n,a,i),this._isRenderActive&&!this._isInRenders&&this._pixelLineFilter._lineCount>0&&(this.owner.scene&&this.owner.scene._addRenderObject(this),this._isInRenders=!0),this._needUpdatelines=!0}addLines(e){var t=this._pixelLineFilter._lineCount,r=e.length;if(t+r>this._pixelLineFilter._maxLineCount)throw"PixelLineSprite3D: lineCount plus lines count must less than maxLineCount.";this._pixelLineFilter._updateLineDatas(t,e),this._pixelLineFilter._lineCount+=r,this.boundsChange=!0,this._isRenderActive&&!this._isInRenders&&this._pixelLineFilter._lineCount>0&&(this.owner.scene&&this.owner.scene._addRenderObject(this),this._isInRenders=!0),this._needUpdatelines=!0}removeLine(e){if(!(e<this._pixelLineFilter._lineCount))throw"PixelLineSprite3D: index must less than lineCount.";this._pixelLineFilter._removeLineData(e),this._isRenderActive&&this._isInRenders&&0==this._pixelLineFilter._lineCount&&(this.owner.scene&&this.owner.scene._removeRenderObject(this),this._isInRenders=!1),this._needUpdatelines=!0}setLine(e,t,r,n,a){if(!(e<this._pixelLineFilter._lineCount))throw"PixelLineSprite3D: index must less than lineCount.";{this._pixelLineFilter._updateLineData(e,t,r,n,a);let i=this._lines[e];i&&(n.cloneTo(i.startColor),a.cloneTo(i.endColor),t.cloneTo(i.startPosition),r.cloneTo(i.endPosition))}}setLineWithNormal(e,t,r,n,a,i,s){if(!(e<this._pixelLineFilter._lineCount))throw"PixelLineSprite3D: index must less than lineCount.";{this._pixelLineFilter._updateLineData(e,t,r,n,a,i,s);let o=this._lines[e];o&&(n.cloneTo(o.startColor),a.cloneTo(o.endColor),t.cloneTo(o.startPosition),r.cloneTo(o.endPosition),i&&i.cloneTo(o.startNormal),s&&s.cloneTo(o.endNormal))}}getLine(e,t){if(!(e<this.lineCount))throw"PixelLineSprite3D: index must less than lineCount.";this._pixelLineFilter._getLineData(e,t)}_updateLineDatas(){let e=this.lineCount;this._lines=[];for(let t=0;t<e;t++){let e=new dn;this.getLine(t,e),this._lines.push(e)}this._needUpdatelines=!1}clear(){this._pixelLineFilter._lineCount=0,this._isRenderActive&&this._isInRenders&&(this.owner.scene&&this.owner.scene._removeRenderObject(this),this._isInRenders=!1)}_onDestroy(){this._pixelLineFilter.destroy(),this._pixelLineFilter=null,super._onDestroy()}_cloneTo(e){super._cloneTo(e);let t=e;t.maxLineCount=this.maxLineCount;const r=this.lineCount;let n=new dn;for(let e=0,a=r;e<a;e++)this.getLine(e,n),t.addLine(n.startPosition,n.endPosition,n.startColor,n.endColor)}}class _n{get currentState(){return this._currentState}set currentState(e){this._currentState=e,this._currentState.curTransition=null}get normalizedTime(){return this._normalizedTime}get duration(){return this._duration}get animatorState(){return this._currentState}constructor(){this._currentState=null}_resetPlayState(e,t){this._finish=!1,this._playEventIndex=0,this._startPlayTime=e,this._elapsedTime=e,this._lastIsFront=!0,this._normalizedTime=this._elapsedTime/t;var r=this._normalizedTime%1;this._normalizedPlayTime=r<0?r+1:r}_cloneTo(e){e._finish=this._finish,e._startPlayTime=this._startPlayTime,e._playEventIndex=this._playEventIndex,e._elapsedTime=this._elapsedTime,e._normalizedTime=this._normalizedTime,e._normalizedPlayTime=this._normalizedPlayTime,e._lastIsFront=this._lastIsFront}}class mn{get defaultState(){return this._defaultState}set defaultState(e){this._defaultState=e}get avatarMask(){return this._avatarMask}set avatarMask(e){this._avatarMask=e}get defaultStateName(){return this._defaultState?this._defaultState.name:null}set defaultStateName(e){if(this._defaultState=this.getAnimatorState(e),null==this._defaultState)if(0==this._states.length)this._defaultStateNameCatch=e;else for(var t=this._states.length-1;t>=0;t--)if(this._states[t].name==e){this._defaultState=this._states[t];break}}get states(){return this._states}set states(e){if(this._states!==e){if(this._states.length>0){let t=this._states.filter((t=>-1==e.indexOf(t)));for(let e of t)this.removeState(e)}if(e.length>0){let t=e.filter((e=>-1==this._states.indexOf(e)));for(let e of t)this.addState(e)}this._states.length=0,this._states.push(...e)}}constructor(e){this._referenceCount=0,this._playType=-1,this._crossDuration=-1,this._crossMark=0,this._crossNodesOwnersCount=0,this._crossNodesOwners=[],this._crossNodesOwnersIndicesMap={},this._srcCrossClipNodeIndices=[],this._destCrossClipNodeIndices=[],this._states=[],this._playStateInfo=new _n,this._crossPlayStateInfo=new _n,this.blendingMode=mn.BLENDINGMODE_OVERRIDE,this.defaultWeight=1,this.playOnWake=!0,this.enable=!0,this.name=e}_removeClip(e,t,r){var n=r._clip,a=e[t];if(e.splice(t,1),this._animator){var i=n._nodes,s=a._nodeOwners;n._removeReference();for(var o=0,l=i.count;o<l;o++)this._animator._removeKeyframeNodeOwner(s,i.getNodeByIndex(o))}}_getReferenceCount(){return this._referenceCount}_addReference(e=1){for(var t=0,r=this._states.length;t<r;t++)this._states[t]._addReference(e);this._referenceCount+=e}_removeReference(e=1){for(var t=0,r=this._states.length;t<r;t++)this._states[t]._removeReference(e);this._referenceCount-=e}_clearReference(){this._removeReference(-this._referenceCount)}getCurrentPlayState(){return this._playStateInfo}getAnimatorState(e){var t;for(let r=0;r<this._states.length;r++)if(this._states[r].name==e){t=this._states[r];break}return t||null}addState(e){var t=e.name;if(this.getAnimatorState(t))throw"AnimatorControllerLayer:this stat's name has exist.";this._states.push(e),t==this._defaultStateNameCatch&&(this._defaultState=e,this._defaultStateNameCatch=null),this._animator&&(e._clip&&e._clip._addReference(),this._animator._getOwnersByClip(e))}removeState(e){for(var t=this._states,r=-1,n=0,a=t.length;n<a;n++)if(t[n]===e){r=n;break}-1!==r&&this._removeClip(t,r,e)}destroy(){this._clearReference(),this._states=[],this._playStateInfo=null,this._crossPlayStateInfo=null,this._defaultState=null}cloneTo(e){var t=e;t.name=this.name,t.blendingMode=this.blendingMode,t.defaultWeight=this.defaultWeight,t.playOnWake=this.playOnWake,this.avatarMask&&(t.avatarMask=this._avatarMask.clone())}clone(){var e=new mn(this.name);return this.cloneTo(e),e}}mn.BLENDINGMODE_OVERRIDE=0,mn.BLENDINGMODE_ADDTIVE=1;class gn{static getAnimatorResource(e,r){return"simpleSkinnedMeshRenderer"===r?e.getComponent(xr):e.getComponent(t.ClassUtils.getClass(r))}}class pn extends t.EventDispatcher{get clip(){return this._clip}set clip(r){if(this._clip!==r){if(this._clip&&this._referenceCount>0&&this._clip._removeReference(this._referenceCount),r){var n=this._realtimeDatas,a=r._nodes,i=a.count;this._currentFrameIndices=new Int16Array(i),this._resetFrameIndices(),this._referenceCount>0&&r._addReference(this._referenceCount),this._realtimeDatas.length=i;for(var s=0;s<i;s++)switch(a.getNodeByIndex(s).type){case e.KeyFrameValueType.Float:break;case e.KeyFrameValueType.Position:case e.KeyFrameValueType.Scale:case e.KeyFrameValueType.RotationEuler:case e.KeyFrameValueType.Vector3:n[s]=new t.Vector3;break;case e.KeyFrameValueType.Rotation:n[s]=new t.Quaternion;break;case e.KeyFrameValueType.Vector2:n[s]=new t.Vector2;break;case e.KeyFrameValueType.Vector4:case e.KeyFrameValueType.Color:n[s]=new t.Vector4;break;default:throw"AnimationClipParser04:unknown type."}}this._clip=r}}get islooping(){return 0!=this._isLooping?1==this._isLooping:this._clip.islooping}get transitions(){return this._transitions}set transitions(e){this._transitions=e}get soloTransitions(){return this._soloTransitions}set soloTransitions(e){this._soloTransitions=e}constructor(){super(),this._referenceCount=0,this._clip=null,this._nodeOwners=[],this._currentFrameIndices=null,this._isLooping=0,this._realtimeDatas=[],this._scripts=null,this._transitions=[],this._soloTransitions=[],this.speed=1,this.clipStart=0,this.clipEnd=1,this.cycleOffset=0}_eventStart(e,t){if(this.event(pn.EVENT_OnStateEnter),this._scripts)for(var r=0,n=this._scripts.length;r<n;r++)this._scripts[r].setPlayScriptInfo(e,t,this),this._scripts[r].onStateEnter()}_eventExit(){if(this.event(pn.EVENT_OnStateExit),this.curTransition=null,this._scripts)for(let e=0,t=this._scripts.length;e<t;e++)this._scripts[e].onStateExit()}_eventStateUpdate(e){if(this.event(pn.EVENT_OnStateUpdate,e),this._scripts)for(var t=0,r=this._scripts.length;t<r;t++)this._scripts[t].onStateUpdate(e)}_eventLoop(){if(this.event(pn.EVENT_OnStateLoop),this._scripts)for(let e=0,t=this._scripts.length;e<t;e++)this._scripts[e].onStateLoop&&this._scripts[e].onStateLoop()}_eventtransition(e,t){let r=this._soloTransitions.length;if(r>0){for(var n=0;n<r;n++)if(this._soloTransitions[n].check(e,t))return this._soloTransitions[n];return null}let a=this._transitions.length;for(n=0;n<a;n++)if(this._transitions[n].check(e,t))return this._transitions[n];return null}_getReferenceCount(){return this._referenceCount}_addReference(e=1){this._clip&&this._clip._addReference(e),this._referenceCount+=e}_removeReference(e=1){this._clip&&this._clip._removeReference(e),this._referenceCount-=e}_clearReference(){this._removeReference(-this._referenceCount)}_resetFrameIndices(){for(var e=0,t=this._currentFrameIndices.length;e<t;e++)this._currentFrameIndices[e]=-1}addScript(e){var t=new e;return this._scripts=this._scripts||[],this._scripts.push(t),t}getScript(e){if(this._scripts)for(var t=0,r=this._scripts.length;t<r;t++){var n=this._scripts[t];if(n instanceof e)return n}return null}getScripts(e){var t=null;if(this._scripts)for(var r=0,n=this._scripts.length;r<n;r++){var a=this._scripts[r];a instanceof e&&(t=t||[]).push(a)}return t}cloneTo(e){var t=e;t.name=this.name,t.speed=this.speed,t.clipStart=this.clipStart,t.clipEnd=this.clipEnd,t.clip=this._clip}clone(){var e=new pn;return this.cloneTo(e),e}}pn.EVENT_OnStateEnter="OnStartEnter",pn.EVENT_OnStateUpdate="OnStateUpdate",pn.EVENT_OnStateLoop="OnStateLoop",pn.EVENT_OnStateExit="OnStateExit";class Sn{constructor(e){this._avatarPathMap=(null==e?void 0:e._avatarPathMap)||{}}getTransformActive(e){return this._avatarPathMap[e]}setTransformActive(e,t){this._avatarPathMap[e]=t}getAllTranfromPath(){return this._avatarPathMap}clone(){var e=new Sn;return this.cloneTo(e),e}cloneTo(e){var t=e;for(var r in this._avatarPathMap)t.setTransformActive(r,this._avatarPathMap[r])}}class Tn extends t.Component{get controller(){return this._controller}set controller(e){this._controller=e,this._controller&&this._controller.updateTo(this)}get speed(){return this._speed}set speed(e){this._speed=e}set updateMode(e){this._updateMode=e}set lowUpdateDelty(e){this._lowUpdateDelty=e}get controllerLayerCount(){return this._controllerLayers.length}get animatorParams(){return this._animatorParams}set animatorParams(e){this._animatorParams=e}get sleep(){return this._finishSleep}set sleep(e){this._finishSleep=e}constructor(){super(),this._keyframeNodeOwners=[],this._updateMode=t.AnimatorUpdateMode.Normal,this._lowUpdateDelty=20,this._animatorParams={},this._linkAvatarSpritesData={},this._linkAvatarSprites=[],this._renderableSprites=[],this.cullingMode=Tn.CULLINGMODE_CULLCOMPLETELY,this._finishSleep=!1,this._controllerLayers=[],this._speed=1,this._keyframeNodeOwnerMap={},this._updateMark=0}_addKeyframeNodeOwner(e,r,n){var a=r._indexInList,i=r.fullPath,s=this._keyframeNodeOwnerMap[i];let o=!1;if(s)s.referenceCount++,e[a]=s;else{for(var l=n,h=0,d=r.propertyCount;h<d&&((l=l[r.getPropertyByIndex(h)])instanceof t.Material&&(o=!0),l);h++);(s=this._keyframeNodeOwnerMap[i]=new f).isMaterial=o,s.fullPath=i,s.indexInList=this._keyframeNodeOwners.length,s.referenceCount=1,s.propertyOwner=n,s.nodePath=r.nodePath,s.callbackFunData=r.callbackFunData,s.callParams=r.callParams,s.getCallbackNode();var c=r.propertyCount,u=[];for(h=0;h<c;h++)u[h]=r.getPropertyByIndex(h);if(s.property=u,s.type=r.type,l)if(0===r.type)s.defaultValue=l;else{var _=new l.constructor;l.cloneTo(_),s.defaultValue=_,s.value=new l.constructor,s.crossFixedValue=new l.constructor}this._keyframeNodeOwners.push(s),e[a]=s}}_removeKeyframeNodeOwner(e,t){var r=t.fullPath,n=this._keyframeNodeOwnerMap[r];n&&(n.referenceCount--,0===n.referenceCount&&(delete this._keyframeNodeOwnerMap[r],this._keyframeNodeOwners.splice(this._keyframeNodeOwners.indexOf(n),1)),e[t._indexInList]=null)}_getOwnersByClip(e){if(e._clip){var t=e._clip._nodes,r=t.count,n=e._nodeOwners;n.length=r;for(var a=0;a<r;a++){for(var i=t.getNodeByIndex(a),s=this.owner,o=0,l=i.ownerPathCount;o<l;o++){var h=i.getOwnerPathByIndex(o);if(""===h)break;if(!(s=s.getChildByName(h)))break}if(s){var d=i.propertyOwner;const e=s;d&&(s=s[d]),s||(s=gn.getAnimatorResource(e,d)),s&&this._addKeyframeNodeOwner(n,i,s)}}}}_updatePlayer(e,t,r,n,a){var i=e._clip._duration*(e.clipEnd-e.clipStart),s=t._elapsedTime,o=s+r;t._lastElapsedTime=s,t._elapsedTime=o;var l=o/i;t._normalizedTime=l;var h=l%1;if(t._normalizedPlayTime=h<0?h+1:h,t._duration=i,o>=i)if(n){let t=Math.floor(o/i);Math.floor(s/i)!=t&&e._eventLoop()}else t._finish=!0,t._elapsedTime=i,t._normalizedPlayTime=1;!t._finish&&e._eventStateUpdate(t._normalizedPlayTime),this._applyTransition(e,a,e._eventtransition(t._normalizedPlayTime,this.animatorParams))}_applyTransition(e,t,r){r&&r!=e.curTransition&&(e.curTransition=r,this.crossFade(r.destState.name,r.transduration,t,r.transstartoffset))}_updateStateFinish(e,t){t._finish&&e._eventExit()}_updateEventScript(e,r){if(!this.owner._getBit(t.NodeFlags.HAS_SCRIPT))return;let n=e._clip,a=n._animationEvents;if(!a||0==a.length||null==r.animatorState)return;let i=n._duration,s=r._normalizedPlayTime*i,o=r._parentPlayTime;null==o&&(o=i*r.animatorState.clipStart),s<o&&this._eventScript(a,o,i*r.animatorState.clipEnd),this._eventScript(a,o,s),r._parentPlayTime=s}_eventScript(e,t,r){let n=this.owner.components;for(let a=0,i=e.length;a<i;a++){let i=e[a];if(i.time>t&&i.time<=r)for(let e=0,t=n.length;e<t;e++){let t=n[e];if(t._isScript()){let e=t[i.eventName];e&&e.apply(t,i.params)}}else if(i.time>r)break}}_updateClipDatas(e,t,r,n=null){var a=e._clip,i=a._duration,s=e.clipStart*i+r._normalizedPlayTime*r._duration,o=e._currentFrameIndices,l=r._elapsedTime>r._lastElapsedTime;a._evaluateClipDatasRealTime(a._nodes,s,o,t,l,e._realtimeDatas,n)}_applyFloat(e,t,r,n,a,i){if(t.updateMark===this._updateMark)if(r)e+=n*i;else{e=e+n*(i-e)}else if(a)e=r?t.defaultValue+i:i;else if(r)e=t.defaultValue+n*i;else{var s=t.defaultValue;e=s+n*(i-s)}return e}_applyVec2(e,t,r,n,a,i){if(!e)return null;if(t.updateMark===this._updateMark)if(r)e.x+=n*i.x,e.y+=n*i.y;else{var s=e;e.x=s.x+n*(i.x-s.x),e.y=s.y+n*(i.y-s.y)}else if(a)r?(e.x=t.defaultValue.x+i.x,e.y=t.defaultValue.y+i.y):i.cloneTo(e);else if(r)e.x=t.defaultValue.x+n*i.x,e.y=t.defaultValue.y+n*i.y;else{var o=t.defaultValue;e.x=o.x+n*(i.x-o.x),e.y=o.y+n*(i.y-o.y)}return e}_applyVec3(e,t,r,n,a,i){if(!e)return null;if(t.updateMark===this._updateMark)if(r)e.x+=n*i.x,e.y+=n*i.y,e.z+=n*i.z;else{var s=e;e.x=s.x+n*(i.x-s.x),e.y=s.y+n*(i.y-s.y),e.z=s.z+n*(i.z-s.z)}else if(a)r?(e.x=t.defaultValue.x+i.x,e.y=t.defaultValue.y+i.y,e.z=t.defaultValue.z+i.z):i.cloneTo(e);else if(r)e.x=t.defaultValue.x+n*i.x,e.y=t.defaultValue.y+n*i.y,e.z=t.defaultValue.z+n*i.z;else{var o=t.defaultValue;e.x=o.x+n*(i.x-o.x),e.y=o.y+n*(i.y-o.y),e.z=o.z+n*(i.z-o.z)}return e}_applyVec4(e,t,r,n,a,i){if(!e)return null;if(t.updateMark===this._updateMark)if(r)e.x+=n*i.x,e.y+=n*i.y,e.z+=n*i.z,e.w+=n*i.w;else{var s=e;e.x=s.x+n*(i.x-s.x),e.y=s.y+n*(i.y-s.y),e.z=s.z+n*(i.z-s.z),e.w=s.w+n*(i.w-s.w)}else if(a)r?(e.x=t.defaultValue.x+i.x,e.y=t.defaultValue.y+i.y,e.z=t.defaultValue.z+i.z,e.w=t.defaultValue.w+i.w):i.cloneTo(e);else if(r)e.x=t.defaultValue.x+n*i.x,e.y=t.defaultValue.y+n*i.y,e.z=t.defaultValue.z+n*i.z,e.w=t.defaultValue.w+n*i.w;else{var o=t.defaultValue;e.x=o.x+n*(i.x-o.x),e.y=o.y+n*(i.y-o.y),e.z=o.z+n*(i.z-o.z),e.w=o.w+n*(i.w-o.w)}return e}_applyColor(e,t,r,n,a,i){if(!e)return null;if(t.updateMark===this._updateMark)if(r)e.r+=n*i.x,e.g+=n*i.y,e.b+=n*i.z,e.a+=n*i.w;else{var s=e;e.r=s.r+n*(i.x-s.r),e.g=s.g+n*(i.y-s.g),e.b=s.b+n*(i.z-s.b),e.a=s.a+n*(i.w-s.a)}else if(a)r?(e.r=t.defaultValue.r+i.x,e.g=t.defaultValue.g+i.y,e.b=t.defaultValue.b+i.z,e.a=t.defaultValue.a+i.w):e.setValue(i.x,i.y,i.z,i.w);else if(r)e.r=t.defaultValue.r+n*i.x,e.g=t.defaultValue.g+n*i.y,e.b=t.defaultValue.b+n*i.z,e.a=t.defaultValue.a+n*i.w;else{var o=t.defaultValue;e.r=o.r+n*(i.x-o.r),e.g=o.g+n*(i.y-o.g),e.b=o.b+n*(i.z-o.b),e.a=o.a+n*(i.w-o.a)}return e}_applyPositionAndRotationEuler(e,t,r,n,a,i){if(e.updateMark===this._updateMark)if(t)i.x+=r*a.x,i.y+=r*a.y,i.z+=r*a.z;else{var s=i.x,o=i.y,l=i.z;i.x=s+r*(a.x-s),i.y=o+r*(a.y-o),i.z=l+r*(a.z-l)}else if(n)if(t){var h=e.defaultValue;i.x=h.x+a.x,i.y=h.y+a.y,i.z=h.z+a.z}else i.x=a.x,i.y=a.y,i.z=a.z;else if(h=e.defaultValue,t)i.x=h.x+r*a.x,i.y=h.y+r*a.y,i.z=h.z+r*a.z;else{var d=h.x,c=h.y,u=h.z;i.x=d+r*(a.x-d),i.y=c+r*(a.y-c),i.z=u+r*(a.z-u)}}_applyRotation(e,r,n,a,i,s){if(e.updateMark===this._updateMark)if(r){var o=Tn._tempQuaternion1;T.quaternionWeight(i,n,o),o.normalize(o),t.Quaternion.multiply(s,o,s)}else t.Quaternion.lerp(s,i,n,s);else if(a)if(r){var l=e.defaultValue;t.Quaternion.multiply(l,i,s)}else s.x=i.x,s.y=i.y,s.z=i.z,s.w=i.w;else l=e.defaultValue,r?(o=Tn._tempQuaternion1,T.quaternionWeight(i,n,o),o.normalize(o),t.Quaternion.multiply(l,o,s)):t.Quaternion.lerp(l,i,n,s)}_applyScale(e,t,r,n,a,i){if(e.updateMark===this._updateMark)if(t){var s=Tn._tempVector31;T.scaleWeight(a,r,s),i.x=i.x*s.x,i.y=i.y*s.y,i.z=i.z*s.z}else T.scaleBlend(i,a,r,i);else if(n)if(t){var o=e.defaultValue;i.x=o.x*a.x,i.y=o.y*a.y,i.z=o.z*a.z}else i.x=a.x,i.y=a.y,i.z=a.z;else o=e.defaultValue,t?(s=Tn._tempVector31,T.scaleWeight(a,r,s),i.x=o.x*s.x,i.y=o.y*s.y,i.z=o.z*s.z):T.scaleBlend(o,a,r,i)}_applyCrossData(r,n,a,i,s,o,l){var h=r.propertyOwner;let d;if(h){switch(r.type){case e.KeyFrameValueType.Float:for(var c=(C=r.property).length-1,u=0;u<c&&(h=h[C[u]]);u++);var _=s+l*(o-s);r.value=_,d=C[c],r.isMaterial?h&&h.setFloat(d,this._applyFloat(h.getFloat(d),r,n,a,i,_)):h&&(h[d]=this._applyFloat(h[d],r,n,a,i,_)),r.callbackFun&&r.animatorDataSetCallBack();break;case e.KeyFrameValueType.Position:var m=h.localPosition,f=r.value,g=s.x,p=s.y,S=s.z;f.x=g+l*(o.x-g),f.y=p+l*(o.y-p),f.z=S+l*(o.z-S),this._applyPositionAndRotationEuler(r,n,a,i,f,m),h.localPosition=m;break;case e.KeyFrameValueType.Rotation:var E=h.localRotation,x=r.value;t.Quaternion.lerp(s,o,l,x),this._applyRotation(r,n,a,i,x,E),h.localRotation=E;break;case e.KeyFrameValueType.Scale:var A=h.localScale,D=r.value;T.scaleBlend(s,o,l,D),this._applyScale(r,n,a,i,D,A),h.localScale=A;break;case e.KeyFrameValueType.RotationEuler:var R=h.localRotationEuler,M=r.value;g=s.x,p=s.y,S=s.z,M.x=g+l*(o.x-g),M.y=p+l*(o.y-p),M.z=S+l*(o.z-S),this._applyPositionAndRotationEuler(r,n,a,i,M,R),h.localRotationEuler=R;break;case e.KeyFrameValueType.Color:for(c=(C=r.property).length-1,u=0;u<c&&(h=h[C[u]]);u++);let v=r.value;v.x=s.r+l*(o.r-s.r),v.y=s.g+l*(o.g-s.g),v.z=s.b+l*(o.b-s.b),v.w=s.a+l*(o.a-s.a),r.value=v,d=C[c],r.isMaterial?h&&h.setColor(d,this._applyColor(h.getColor(d),r,n,a,i,v)):h&&(h[d]=this._applyColor(h[d],r,n,a,i,v)),r.callbackFun&&r.animatorDataSetCallBack();break;case e.KeyFrameValueType.Vector2:for(c=(C=r.property).length-1,u=0;u<c&&(h=h[C[u]]);u++);let y=r.value;y.x=s.r+l*(o.r-s.r),y.y=s.g+l*(o.g-s.g),r.value=y,d=C[c],r.isMaterial?h&&h.setVector2(d,this._applyVec2(h.getVector2(d),r,n,a,i,y)):h&&(h[d]=this._applyVec2(h[d],r,n,a,i,y)),r.callbackFun&&r.animatorDataSetCallBack();break;case e.KeyFrameValueType.Vector4:for(c=(C=r.property).length-1,u=0;u<c&&(h=h[C[u]]);u++);let I=r.value;I.x=s.x+l*(o.x-s.x),I.y=s.y+l*(o.y-s.y),I.z=s.z+l*(o.z-s.z),r.value=I,d=C[c],r.isMaterial?h&&h.setVector4(d,this._applyVec4(h.getVector4(d),r,n,a,i,I)):h&&(h[d]=this._applyVec4(h[d],r,n,a,i,I)),r.callbackFun&&r.animatorDataSetCallBack();break;case e.KeyFrameValueType.Vector3:var C;for(c=(C=r.property).length-1,u=0;u<c&&(h=h[C[u]]);u++);let L=r.value;L.x=s.x+l*(o.x-s.x),L.y=s.y+l*(o.y-s.y),L.z=s.z+l*(o.z-s.z),r.value=L,d=C[c],r.isMaterial?h&&h.setVector3(d,this._applyVec3(h.getVector3(d),r,n,a,i,L)):h&&(h[d]=this._applyVec3(h[d],r,n,a,i,L)),r.callbackFun&&r.animatorDataSetCallBack()}r.updateMark=this._updateMark}}_setClipDatasToNode(t,r,n,a,i=null){for(var s=t._realtimeDatas,o=t._clip._nodes,l=t._nodeOwners,h=0,d=o.count;h<d;h++){var c=l[h];if(c){var u=o.getNodeByIndex(h);if(i.avatarMask&&!i.avatarMask.getTransformActive(u.nodePath))continue;var _=c.propertyOwner;let t;if(_){switch(c.type){case e.KeyFrameValueType.Float:for(var m=(E=c.property).length-1,f=0;f<m&&(_=_[E[f]]);f++);let i=E[m];c.isMaterial?_&&_.setFloat(i,this._applyFloat(0,c,r,n,a,s[h])):(_&&(_[i]=this._applyFloat(_[i],c,r,n,a,s[h])),c.callbackFun&&c.animatorDataSetCallBack());break;case e.KeyFrameValueType.Position:var g=_.localPosition;this._applyPositionAndRotationEuler(c,r,n,a,s[h],g),_.localPosition=g;break;case e.KeyFrameValueType.Rotation:var p=_.localRotation;this._applyRotation(c,r,n,a,s[h],p),_.localRotation=p;break;case e.KeyFrameValueType.Scale:var S=_.localScale;this._applyScale(c,r,n,a,s[h],S),_.localScale=S;break;case e.KeyFrameValueType.RotationEuler:var T=_.localRotationEuler;this._applyPositionAndRotationEuler(c,r,n,a,s[h],T),_.localRotationEuler=T;break;case e.KeyFrameValueType.Vector2:for(m=(E=c.property).length-1,f=0;f<m&&(_=_[E[f]]);f++);t=E[m],c.isMaterial?_&&_.getVector2(t)&&_.setVector2(t,this._applyVec2(_.getVector2(t),c,r,n,a,s[h])):(_&&(_[t]=this._applyVec2(_[t],c,r,n,a,s[h])),c.callbackFun&&c.animatorDataSetCallBack());break;case e.KeyFrameValueType.Vector3:for(m=(E=c.property).length-1,f=0;f<m&&(_=_[E[f]]);f++);t=E[m],c.isMaterial?_&&_.getVector3(t)&&_.setVector3(t,this._applyVec3(_.getVector3(t),c,r,n,a,s[h])):(_&&(_[t]=this._applyVec3(_[t],c,r,n,a,s[h])),c.callbackFun&&c.animatorDataSetCallBack());break;case e.KeyFrameValueType.Vector4:for(m=(E=c.property).length-1,f=0;f<m&&(_=_[E[f]]);f++);t=E[m],c.isMaterial?_&&_.getVector4(t)&&_.setVector4(t,this._applyVec4(_.getVector4(t),c,r,n,a,s[h])):(_&&(_[t]=this._applyVec4(_[t],c,r,n,a,s[h])),c.callbackFun&&c.animatorDataSetCallBack());break;case e.KeyFrameValueType.Color:var E;for(m=(E=c.property).length-1,f=0;f<m&&(_=_[E[f]]);f++);t=E[m],c.isMaterial?_&&_.getColor(t)&&_.setColor(t,this._applyColor(_.getColor(t),c,r,n,a,s[h])):(_&&(_[t]=this._applyColor(_[t],c,r,n,a,s[h])),c.callbackFun&&c.animatorDataSetCallBack())}c.updateMark=this._updateMark}}}}_setCrossClipDatasToNode(e,t,r,n,a){for(var i=e._crossNodesOwners,s=e._crossNodesOwnersCount,o=e.blendingMode!==mn.BLENDINGMODE_OVERRIDE,l=e.defaultWeight,h=r._realtimeDatas,d=e._destCrossClipNodeIndices,c=r._nodeOwners,u=t._realtimeDatas,_=e._srcCrossClipNodeIndices,m=t._nodeOwners,f=0;f<s;f++){var g=i[f];if(g){var p=_[f],S=d[f];if(-1==p&&-1==S)continue;var T=-1!==p?u[p]:c[S].defaultValue;if(null==T)continue;var E=-1!==S?h[S]:m[p].defaultValue;if(E||(E=m[p].defaultValue),null==E)continue;e.avatarMask&&!e.avatarMask.getTransformActive(g.nodePath)||this._applyCrossData(g,o,l,a,T,E,n)}}}_setFixedCrossClipDatasToNode(e,t,r,n){for(var a=e._crossNodesOwners,i=e._crossNodesOwnersCount,s=e.blendingMode!==mn.BLENDINGMODE_OVERRIDE,o=e.defaultWeight,l=t._realtimeDatas,h=e._destCrossClipNodeIndices,d=0;d<i;d++){var c=a[d];if(c){var u,_=h[d],m=c.crossFixedValue;u=-1!=_&&l[_]?l[_]:c.defaultValue,this._applyCrossData(c,s,o,n,m,u,r)}}}_revertDefaultKeyframeNodes(t){for(var r=t._nodeOwners,n=0,a=r.length;n<a;n++){var i=r[n];if(i){var s=i.propertyOwner;let t;if(s)switch(i.type){case e.KeyFrameValueType.Float:for(var o=(f=i.property).length-1,l=0;l<o&&(s=s[f[l]]);l++);let r=f[o];i.isMaterial?s&&s.setFloat(r,i.defaultValue):(s&&(s[r]=i.defaultValue),i.callbackFun&&i.animatorDataSetCallBack());break;case e.KeyFrameValueType.Position:var h=s.localPosition,d=i.defaultValue;h.x=d.x,h.y=d.y,h.z=d.z,s.localPosition=h;break;case e.KeyFrameValueType.Rotation:var c=s.localRotation,u=i.defaultValue;c.x=u.x,c.y=u.y,c.z=u.z,c.w=u.w,s.localRotation=c;break;case e.KeyFrameValueType.Scale:var _=s.localScale;d=i.defaultValue,_.x=d.x,_.y=d.y,_.z=d.z,s.localScale=_;break;case e.KeyFrameValueType.RotationEuler:var m=s.localRotationEuler;d=i.defaultValue,m.x=d.x,m.y=d.y,m.z=d.z,s.localRotationEuler=m;break;case e.KeyFrameValueType.Vector2:for(o=(f=i.property).length-1,l=0;l<o&&(s=s[f[l]]);l++);t=f[o],i.isMaterial?s&&s.getVector2(t)&&s.setVector2(t,i.defaultValue):(s&&(s[t]=i.defaultValue),i.callbackFun&&i.animatorDataSetCallBack());break;case e.KeyFrameValueType.Vector3:for(o=(f=i.property).length-1,l=0;l<o&&(s=s[f[l]]);l++);t=f[o],i.isMaterial?s&&s.getVector3(t)&&s.setVector3(t,i.defaultValue):(s&&(s[t]=i.defaultValue),i.callbackFun&&i.animatorDataSetCallBack());break;case e.KeyFrameValueType.Vector4:for(o=(f=i.property).length-1,l=0;l<o&&(s=s[f[l]]);l++);t=f[o],i.isMaterial?s&&s.getVector3(t)&&s.setVector3(t,i.defaultValue):(s&&(s[t]=i.defaultValue),i.callbackFun&&i.animatorDataSetCallBack());break;case e.KeyFrameValueType.Color:var f;for(o=(f=i.property).length-1,l=0;l<o&&(s=s[f[l]]);l++);t=f[o];let n=Tn._tempColor;n.r=i.defaultValue.x,n.g=i.defaultValue.y,n.b=i.defaultValue.z,n.a=i.defaultValue.w,i.isMaterial?s&&s.getColor(t)&&s.setColor(t,n):(s&&(s[t]=n),i.callbackFun&&i.animatorDataSetCallBack());break;default:throw"Animator:unknown type."}}}}onAfterDeserialize(){let e=this.controllerLayers;if(e&&null==this.controller){delete this.controllerLayers,this._controllerLayers.length=0;for(let t of e)this.addControllerLayer(t)}}_onEnable(){for(let e=0,t=this._controllerLayers.length;e<t;e++)if(this._controllerLayers[e].playOnWake){let t=this.getDefaultState(e);t&&this.play(null,e,t.cycleOffset)}}_onDestroy(){for(let e=0,t=this._controllerLayers.length;e<t;e++)this._controllerLayers[e]._removeReference()}_applyUpdateMode(e){let r;switch(this._updateMode){case t.AnimatorUpdateMode.Normal:r=e;break;case t.AnimatorUpdateMode.LowFrame:r=t.Stat.loopCount%this._lowUpdateDelty==0?e*this._lowUpdateDelty:0;break;case t.AnimatorUpdateMode.UnScaleTime:r=0}return r}_handleSpriteOwnersBySprite(e,t,r){for(var n=0,a=this._controllerLayers.length;n<a;n++)if(this._controllerLayers[n].enable)for(var i=this._controllerLayers[n]._states,s=0,o=i.length;s<o;s++){var l=i[s],h=l._clip,d=t.join("/"),c=h._nodesMap[d];if(c)for(var u=l._nodeOwners,_=0,m=c.length;_<m;_++)e?this._addKeyframeNodeOwner(u,c[_],r):this._removeKeyframeNodeOwner(u,c[_])}}_parse(e){for(var r=e.playOnWake,n=e.layers,a=0;a<n.length;a++){var i=n[a],s=new mn(i.name);s.defaultWeight=0===a?1:i.weight;var o=i.blendingMode;o&&(s.blendingMode=o),this.addControllerLayer(s);for(var l=i.states,h=0,d=l.length;h<d;h++){var c=l[h],u=c.clipPath;if(u){var _,m=c.name;if(_=t.Loader.getRes(u)){var f=new pn;f.name=m,f.clip=_,c.speed&&(f.speed=c.speed),s.addState(f),0===h&&(this.getControllerLayer(a).defaultState=f)}}}void 0!==r&&(s.playOnWake=r);let e=i.avatarMask;if(e){let t=new Sn;for(var g in s.avatarMask=t,e)t.setTransformActive(g,e[g])}}var p=e.cullingMode;void 0!==p&&(this.cullingMode=p)}onUpdate(){let e=this.owner._scene.timer._delta/1e3;var r,n;if((e=this._applyUpdateMode(e),0!==this._speed&&0!==e)&&t.Stat.enableAnimatorUpdate)for(this._updateMark++,r=0,n=this._controllerLayers.length;r<n;r++){var a=this._controllerLayers[r];if(a.enable){var i=a._playStateInfo;if(!this.sleep||!i._finish||0!=a._playType){var s=a._crossPlayStateInfo;switch(d=a.blendingMode!==mn.BLENDINGMODE_OVERRIDE,a._playType){case 0:var o=i.currentState;o._clip;var l=this._speed*o.speed,h=i._finish;h||this._updatePlayer(o,i,e*l,o.islooping,r);var d=a.blendingMode!==mn.BLENDINGMODE_OVERRIDE;this._updateClipDatas(o,d,i,a.avatarMask),this._setClipDatasToNode(o,d,a.defaultWeight,0===r,a),h||this._updateEventScript(o,i),h||this._updateStateFinish(o,i);break;case 1:(o=i.currentState)._clip;var c=a._crossPlayState,u=c._clip,_=a._crossDuration,m=s._startPlayTime,f=u._duration-m,g=_>f&&0!=f?f/_:1,p=this._speed*c.speed;this._updatePlayer(c,s,e*g*p,u.islooping,r);var S=(s._elapsedTime-m)/g/_,T=!1;S>=1?(this._updateClipDatas(c,d,s,a.avatarMask),this._setClipDatasToNode(c,d,a.defaultWeight,0===r,a),a._playType=0,i.currentState=c,s._cloneTo(i)):(i._finish||(l=this._speed*o.speed,T=!0,this._updatePlayer(o,i,e*l,o.islooping,r),this._updateClipDatas(o,d,i,a.avatarMask)),this._updateClipDatas(c,d,s,a.avatarMask),this._setCrossClipDatasToNode(a,o,c,S,0===r)),this._updateEventScript(o,i),this._updateEventScript(c,s),this._updateStateFinish(c,s),T&&this._updateStateFinish(i.currentState,i);break;case 2:u=(c=a._crossPlayState)._clip,_=a._crossDuration,m=s._startPlayTime,g=_>(f=u._duration-m)?f/_:1,p=this._speed*c.speed,this._updatePlayer(c,s,e*g*p,c.islooping,r),(S=(s._elapsedTime-m)/g/_)>=1?(this._updateClipDatas(c,d,s,a.avatarMask),this._setClipDatasToNode(c,d,1,0===r,a),a._playType=0,i.currentState=c,s._cloneTo(i)):(this._updateClipDatas(c,d,s,a.avatarMask),this._setFixedCrossClipDatasToNode(a,c,S,0===r)),this._updateEventScript(c,s),this._updateStateFinish(c,s)}}}}}_cloneTo(e){var t=e;t.cullingMode=this.cullingMode;for(var r=0,n=this._controllerLayers.length;r<n;r++){var a=this._controllerLayers[r];t.addControllerLayer(a.clone());for(var i=a._states,s=0,o=i.length;s<o;s++){var l=i[s].clone(),h=t.getControllerLayer(r);h.addState(l),0==s&&(h.defaultState=l)}}t.controller=this._controller}getDefaultState(e=0){return this._controllerLayers[e].defaultState}addState(e,t=0){this._controllerLayers[t].addState(e),console.warn("Animator:this function is discard,please use animatorControllerLayer.addState() instead.")}removeState(e,t=0){this._controllerLayers[t].removeState(e),console.warn("Animator:this function is discard,please use animatorControllerLayer.removeState() instead.")}addControllerLayer(e){this._controllerLayers.push(e),e._animator=this,e._addReference();for(var t=e._states,r=0,n=t.length;r<n;r++)this._getOwnersByClip(t[r])}getControllerLayer(e=0){return this._controllerLayers[e]}play(e=null,t=0,r=Number.NEGATIVE_INFINITY){var n=this._controllerLayers[t];if(n){var a=n.defaultState;if(!e&&!a)throw new Error("Animator:must have default clip value,please set clip property.");var i=n._playStateInfo,s=i.currentState,o=e?n.getAnimatorState(e):a;if(!o._clip)return;var l=o._clip._duration,h=o._clip._duration*(o.clipEnd-o.clipStart);s!==o?(r!==Number.NEGATIVE_INFINITY?i._resetPlayState(l*r,h):i._resetPlayState(0,h),null!==s&&s!==o&&this._revertDefaultKeyframeNodes(s),n._playType=0,i.currentState=o):r!==Number.NEGATIVE_INFINITY&&(i._resetPlayState(l*r,h),n._playType=0),o._scripts,o._eventStart(this,t)}else console.warn("Invalid layerIndex "+t+".");this.owner._scene&&this.onUpdate()}crossFade(e,t,r=0,n=Number.NEGATIVE_INFINITY){var a=this._controllerLayers[r];if(a){var i=a.getAnimatorState(e);if(i){var s=a._playType;if(-1===s)return void this.play(e,r,n);var o=a._crossPlayStateInfo,l=a._crossNodesOwners,h=a._crossNodesOwnersIndicesMap,d=a._playStateInfo.currentState,c=i._nodeOwners,u=a._destCrossClipNodeIndices,_=i._clip,m=_._nodes,f=_._nodesDic,g=0;switch(s){case 0:var p=d._nodeOwners,S=a._srcCrossClipNodeIndices,T=d._clip,E=T._nodes,x=T._nodesDic;a._playType=1;var A=++a._crossMark;g=a._crossNodesOwnersCount=0;for(var D=0,R=E.count;D<R;D++){var M=E.getNodeByIndex(D),C=M._indexInList,v=p[C];if(v){var y=M.fullPath;S[g]=C;var I=f[y];u[g]=I?I._indexInList:-1,h[y]=A,l[g]=v,g++}}for(D=0,R=m.count;D<R;D++){var L=(I=m.getNodeByIndex(D))._indexInList,B=c[L];if(B){var O=I.fullPath;x[O]||(S[g]=-1,u[g]=L,h[O]=A,l[g]=B,g++)}}break;case 1:case 2:for(a._playType=2,D=0,R=l.length;D<R;D++){var w=l[D];w.saveCrossFixedValue(),I=f[w.fullPath],u[D]=I?I._indexInList:-1}for(g=a._crossNodesOwnersCount,A=a._crossMark,D=0,R=m.count;D<R;D++)(B=c[L=(I=m.getNodeByIndex(D))._indexInList])&&h[O=I.fullPath]!==A&&(u[g]=L,h[O]=A,w=c[L],l[g]=w,w.saveCrossFixedValue(),g++)}a._crossNodesOwnersCount=g,a._crossPlayState=i,a._crossDuration=d._clip._duration*t,n!==Number.NEGATIVE_INFINITY?o._resetPlayState(_._duration*n,a._crossDuration):o._resetPlayState(0,a._crossDuration),i._eventStart(this,r)}else console.warn("Invalid name "+r+".")}else console.warn("Invalid layerIndex "+r+".")}setParamsTrigger(e){let r;r="number"==typeof e?e:t.AnimatorStateCondition.conditionNameToID(e),this._animatorParams[r]=!0}setParamsNumber(e,r){let n;n="number"==typeof e?e:t.AnimatorStateCondition.conditionNameToID(e),this._animatorParams[n]=r}setParamsBool(e,r){let n;n="number"==typeof e?e:t.AnimatorStateCondition.conditionNameToID(e),this._animatorParams[n]=r}getParamsvalue(e){let r;return r="number"==typeof e?e:t.AnimatorStateCondition.conditionNameToID(e),this._animatorParams[r]}getCurrentAnimatorPlayState(e=0){return this._controllerLayers[e]._playStateInfo}}Tn._tempVector31=new t.Vector3,Tn._tempColor=new t.Color,Tn._tempQuaternion1=new t.Quaternion,Tn.CULLINGMODE_ALWAYSANIMATE=0,Tn.CULLINGMODE_CULLCOMPLETELY=2;class En{constructor(){this._conditions=[],this._exitByTime=!0,this._exitTime=.85,this._transduration=.15,this._transstartoffset=0,this._mute=!1}get name(){return this._name}set name(e){this._name=e}get mute(){return this._mute}set mute(e){this._mute=e}get destState(){return this._destState}set destState(e){this._destState=e}get conditions(){return this._conditions}set conditions(e){for(var t=this._conditions.length-1;t>=0;t--)this.removeCondition(this._conditions[t]);for(t=0;t<e.length;t++)this.addCondition(e[t])}get exitByTime(){return this._exitByTime}set exitByTime(e){this._exitByTime=e}set transduration(e){this._transduration=Math.max(0,Math.min(e,1))}get transduration(){return this._transduration}set transstartoffset(e){this._transstartoffset=Math.max(0,Math.min(e,1))}get transstartoffset(){return this._transstartoffset}get exitTime(){return this._exitTime}set exitTime(e){this._exitTime=Math.max(0,Math.min(e,1))}addCondition(e){-1==this._conditions.indexOf(e)&&this._conditions.push(e)}removeCondition(e){let t=this._conditions.indexOf(e);-1!=t&&this._conditions.splice(t,0)}get isAndOperEnabled(){return this._isAndOperEnabled}set isAndOperEnabled(e){this._isAndOperEnabled=e}check(e,r){if(this._mute)return!1;if(0==this._conditions.length){if(e>=this._exitTime)return!0}else{if(this._exitByTime&&e<this._exitTime)return!1;if(this._isAndOperEnabled){let e;for(var n=0;n<this._conditions.length;n++){let a=this._conditions[n];if(!a.checkState(r[a.id]))return!1;a.type==t.AniStateConditionType.Trigger&&e.push(a.id)}return!0}for(n=0;n<this._conditions.length;n++){let e=this._conditions[n];if(e.checkState(r[e.id]))return e.type==t.AniStateConditionType.Trigger&&(r[e.id]=!1),!0}}return!1}}class xn extends t.Resource{constructor(e){super();let r=t.AnimatorControllerParse.parse(e);this.data=r.ret,this.clipsID=r.clipsID}getLayers(){let e=this.data.controllerLayers,t=[];for(let r=e.length-1;r>=0;r--){let n=e[r],a=new mn(n.name);n.avatarMask&&(a.avatarMask=n.avatarMask),t.unshift(a);for(let e in n)if("avatarMask"!=e&&"name"!=e&&"states"!=e&&null!=n[e])try{a[e]=n[e]}catch(e){}this.getState(n.states,a,this.data)}return t}updateTo(e){let r=e._controllerLayers;for(let e=0,t=r.length;e<t;e++)r[e]._removeReference();r.length=0;let n=this.getLayers();for(let t=0,r=n.length;t<r;t++)e.addControllerLayer(n[t]);let a=this.data.animatorParams;if(a)for(let r=a.length-1;r>=0;r--){let n=a[r];if(t.AniParmType.Bool==n.type)e.setParamsBool(n.name,Boolean(n.val));else if(t.AniParmType.Float==n.type){let t=Number(n.val);isNaN(t)&&(t=0),e.setParamsNumber(n.name,t)}else t.AniParmType.Trigger==n.type&&n.val&&e.setParamsTrigger(n.name)}}createState(e,r,n){if(!e)return null;let a={},i=null;for(let s=e.length-1;s>=0;s--){let o=e[s],l=o.states;if(l){let e=this.createState(l,r,n);e&&(r[o.id]=e.states[e.id]);continue}if(0>Number(o.id)){if("-1"==o.id){let e=o.soloTransitions;e&&0<e.length&&(i=e[0].id)}continue}let h=new pn;r[o.id]=h,a[o.id]=h;for(let e in o)try{if("scripts"==e){let r=o[e];if(r&&Array.isArray(r))for(let e=r.length-1;e>=0;e--){let n=r[e];n&&0==n.indexOf("res://")&&(n=n.substring(6));let a=t.ClassUtils.getClass(n);a&&h.addScript(a)}continue}if("soloTransitions"==e)continue;null!=o[e]&&(h[e]=o[e])}catch(e){}n.addState(h)}return{id:i,states:a}}setExitTransition(e,t,r,n,a){for(let i in e){let s=r[i];if(s){let o=s.transitions,l=s.soloTransitions,h=e[i];for(let e=t.length-1;e>=0;e--){let s=t[e];if("-3"!=s.id)for(let e=h.length-1;e>=0;e--){let t=h[e],a=new En;a.destState=r[s.id],s.conditions&&this.addConditions(s.conditions,a,n),t.conditions&&this.addConditions(t.conditions,a,n);for(let e in s)"solo"!=e&&"id"!=e&&"conditions"!=e&&(a[e]=s[e]);s.solo?l.unshift(a):o.unshift(a)}else null==a[i]&&(a[i]=[]),a[i].push(s)}}}}setTransitions(e,t,r,n,a){if(!e)return null;let i={};for(let a=e.length-1;a>=0;a--){let s=e[a];if(s.states){let e=this.setTransitions(s.states,t,r,n,s);if(e){let r=s.soloTransitions;r&&this.setExitTransition(e,r,t,n,i)}}}for(let s=e.length-1;s>=0;s--){let o=e[s];if(o.states)continue;if("-1"==o.id){if(o.soloTransitions&&0<o.soloTransitions.length){null==a?r.defaultState=t[o.soloTransitions[0].id]:t[a.id]=t[o.soloTransitions[0].id];continue}}else{if("-2"==o.id){let e=o.soloTransitions;if(e)for(let r=e.length-1;r>=0;r--){let a=e[r],i=t[a.id];if(i)for(let e in t){let r=t[e],s=new En;s.destState=i,a.conditions&&this.addConditions(a.conditions,s,n);for(let e in a)"solo"!=e&&"id"!=e&&"conditions"!=e&&(s[e]=a[e]);a.solo?r.soloTransitions.unshift(s):r.transitions.unshift(s)}}continue}if("-3"==o.id)continue}let l=o.soloTransitions;if(l&&t[o.id]){let e=t[o.id].transitions,r=t[o.id].soloTransitions;for(let a=l.length-1;a>=0;a--){let s=l[a];if("-3"==s.id){null==i[o.id]&&(i[o.id]=[]),i[o.id].push(s);continue}let h=new En;t[s.id]&&(h.destState=t[s.id]),s.conditions&&this.addConditions(s.conditions,h,n);for(let e in s)"solo"!=e&&"id"!=e&&"conditions"!=e&&(h[e]=s[e]);s.solo?r.unshift(h):e.unshift(h)}}}return i}getState(e,t,r){if(e){let n={};this.createState(e,n,t),this.setTransitions(e,n,t,r)}}addConditions(e,r,n){let a=n.animatorParams;if(null!=a&&0!=a.length)for(let n=0,i=e.length;n<i;n++){let i,s=e[n],o=null;for(let e=a.length-1;e>=0;e--)if(a[e].id==s.id){o=a[e];break}if(null==o)return;if(o.type==t.AniParmType.Bool){let e=new t.AnimatorStateBoolCondition(o.name);e.compareFlag=Boolean(s.checkValue),i=e}else if(o.type==t.AniParmType.Float){let e=new t.AnimatorStateNumberCondition(o.name);e.numberValue=Number(s.checkValue),e.compareFlag=s.type,i=e}else if(o.type==t.AniParmType.Trigger){i=new t.AnimatorStateTriggerCondition(o.name)}r.addCondition(i)}}}class An{constructor(){this.updateMark=-1,this.indexInList=-1,this.batched=!1}}class Dn{constructor(){this._instanceBatchOpaqueMarks=[],this.updateCountMark=0}_getData(e,t,r){return null==r&&(r=Array),"boolean"==typeof e?t[e?0:1]||(t[e?0:1]=new r):t[e]||(t[e]=new r)}getInstanceBatchOpaquaMark(e){let t=!!e._transform&&e._transform._isFrontFaceInvert,r=e._baseRender._receiveShadow,n=(e._material._id<<17)+(e._geometry._id<<2)+(Number(t)<<1)+Number(r),a=((e._baseRender._probReflection?e._baseRender._probReflection._reflectionProbeID:-1)+1<<10)+(e._baseRender.lightmapIndex+1<<20)+((e._baseRender._lightProb?e._baseRender._lightProb._volumetricProbeID:-1)+1);var i=this._getData(n,this._instanceBatchOpaqueMarks);return this._getData(a,i,An)}}Dn.instance=new Dn;const Rn=new t.Vector3;class Mn extends j{constructor(){super(),this._lodInstanceRenderElement={},this._RenderBitFlag=e.RenderBitFlag.RenderBitFlag_Batch,this._renderElements=[],this._lodInstanceRenderElement[-1]=[],this._batchList=new t.SingletonList}get checkLOD(){return this._checkLOD}set checkLOD(e){this._checkLOD=e}get lodCullRateArray(){return this._lodRateArray}set lodCullRateArray(e){this._checkLOD&&(e.sort(((e,t)=>t-e)),this._lodRateArray=e)}_canBatch(e){return e._batchRender,!1}_onEnable(){if(super._onEnable(),this._batchList)for(let e=0,t=this._batchList.length;e<t;e++)this._batchList.elements[e].setRenderbitFlag(this._RenderBitFlag,!0)}_onDisable(){if(super._onDisable(),this._batchList)for(let e=0,t=this._batchList.length;e<t;e++)this._batchList.elements[e].setRenderbitFlag(this._RenderBitFlag,!1)}_changeLOD(e){this._cacheLod!=e&&(this._cacheLod==this.lodCullRateArray.length-1&&(e=-1),this._renderElements=this._lodInstanceRenderElement[e],this._lodInstanceRenderElement[e]&&-1!=e?(this._renderElements||(this._renderElements=[]),this._renderElements=this._renderElements.concat(this._lodInstanceRenderElement[-1])):this._renderElements=this._lodInstanceRenderElement[-1])}onPreRender(){if(!this.checkLOD||!this._lodRateArray||this._lodRateArray.length<1)this._changeLOD(0);else{let e=this.owner.scene.cullInfoCamera,r=e.maxlocalYDistance;t.Vector3.subtract(this._bounds._imp.getCenter(),e.transform.position,Rn);let n=Rn.length()/e.farPlane*r,a=this._lodsize/n;for(let e=0;e<this._lodRateArray.length;e++)if(!(a<this._lodRateArray[e])){this._changeLOD(e);break}}}_batchOneRender(e){return!1}_removeOneRender(e){}_updateOneRender(e){}addList(e){for(var t=0,r=e.length;t<r;t++){let r=e[t];this._canBatch(r)&&this._batchList.add(r)}}reBatch(){let e=this._batchList.length,t=this._batchList.elements;for(var r=0;r<e;r++){let e=t[r];this._batchOneRender(e)}}_restorRenderNode(){for(let e=0,t=this._batchList.length;e<t;e++)this._removeOneRender(this._batchList.elements[e])}_clear(){this._restorRenderNode(),this._renderElements=[],this._batchList.destroy(),this._batchList=new t.SingletonList,this._lodInstanceRenderElement={},this._lodInstanceRenderElement[-1]=[]}}class Cn extends Mn{constructor(){super(),this._insBatchMarksNums=[],this._insElementMarksArray=[],this._instanceBatchminNums=10,this._updateChangeElement=[],this.checkLOD=!0,this._batchManager=new Dn,this._RenderBitFlag=e.RenderBitFlag.RenderBitFlag_InstanceBatch}_isRenderNodeAllCanInstanceBatch(e){let t=e._renderElements;for(var r=0,n=t.length;r<n;r++){if(!t[r].material._shader._enableInstancing)return!1}return!0}_sumInstanceBatch(e){let t=e._renderElements;for(var r=0,n=t.length;r<n;r++){let e=t[r];var a=this._batchManager.getInstanceBatchOpaquaMark(e);-1==a.indexInList&&(a.indexInList=this._insBatchMarksNums.length,this._insBatchMarksNums.push(0)),this._insBatchMarksNums[a.indexInList]+=1}}_batchOneElement(e,t){var r=this._batchManager.getInstanceBatchOpaquaMark(e);if(-1==r.indexInList)return;let n=this._insElementMarksArray[r.indexInList];n||(n=this._createInstanceElement(e,t,r));let a=n._instanceBatchElementList;a.length==tr.maxInstanceCount&&(this._insBatchMarksNums.push(this._insBatchMarksNums[r.indexInList]),r.indexInList=this._insBatchMarksNums.length-1,n=this._createInstanceElement(e,t,r),a=n._instanceBatchElementList),-1==a.indexof(e)&&(a.add(e),n._isUpdataData=!0,-1==this._updateChangeElement.indexOf(n)&&this._updateChangeElement.push(n))}_removeOneElement(e,t){this._batchManager.getInstanceBatchOpaquaMark(e).indexInList}_updateOneElement(e,t){}_createInstanceElement(e,t,r){let n=new tr;n.render=t,n._geometry.subMesh=e._geometry,n.material=e.material,n.setTransform(null),n.renderSubShader=e.renderSubShader;let a=n._instanceBatchElementList;return a.length=0,a.add(e),this._insElementMarksArray[r.indexInList]=n,r.batched=!0,this._lodInstanceRenderElement[t._LOD]||(this._lodInstanceRenderElement[t._LOD]=[]),this._lodInstanceRenderElement[t._LOD].push(n),n}_canBatch(e){let t=e._renderElements;for(var r=0,n=t.length;r<n;r++){let e=t[r];var a=this._batchManager.getInstanceBatchOpaquaMark(e);if(this._insBatchMarksNums[a.indexInList]<this._instanceBatchminNums||e.material.renderQueue>=3e3)return!1}return!0}_calculateBoundingBox(){let e=this._bounds;for(let t=0,r=this._batchList.length;t<r;t++)0==t?this._batchList.elements[t].bounds.cloneTo(e):H.merge(e,this._batchList.elements[t].bounds,e);let t=this._bounds.getExtent();return this._lodsize=2*Math.max(t.x,t.y,t.z),this._bounds}_onDestroy(){super._onDestroy()}_batchOneRender(t){if(!this._canBatch(t))return!1;this.boundsChange=!0;let r=t._renderElements;for(let e=0,n=r.length;e<n;e++){let n=r[e];this._batchOneElement(n,t)}return t._batchRender=this,t.setRenderbitFlag(e.RenderBitFlag.RenderBitFlag_InstanceBatch,!0),!0}_removeOneRender(t){if(this._canBatch(t)&&-1!=this._batchList.indexof(t)){this.boundsChange=!0;let r=t._renderElements;for(let e=0,n=r.length;e<n;e++){let n=r[e];this._removeOneElement(n,t)}t._batchRender=null,t.setRenderbitFlag(e.RenderBitFlag.RenderBitFlag_InstanceBatch,!1)}}_updateOneRender(e){if(this._canBatch(e)&&-1!=this._batchList.indexof(e)){this.boundsChange=!0;let t=e._renderElements;for(let r=0,n=t.length;r<n;r++){let n=t[r];this._updateOneElement(n,e)}}}_clear(){super._clear(),this._insElementMarksArray.forEach((e=>{e&&e.destroy()})),this._insElementMarksArray=[],this._updateChangeElement=[],this._insBatchMarksNums=[]}addList(e){this._batchList||(this._batchList=new t.SingletonList);let r=[];for(var n=0;n<e.length;n++){let t=e[n];t._batchRender||this._isRenderNodeAllCanInstanceBatch(t)&&(r.push(t),this._sumInstanceBatch(t))}n=0;for(var a=r.length;n<a;n++){let e=r[n];this._canBatch(e)&&this._batchList.add(e)}}reBatch(){let e=this._batchList.length,t=this._batchList.elements;for(var r=0;r<e;r++){let e=t[r];this._batchOneRender(e)}}}class vn extends Mn{_addList(e){}}class yn extends z{_getStaticInstanceBatchRender(){let e=this.owner.getComponent(Cn);return e||(e=this.owner.addComponent(Cn)),e}_getStatiVertexMergeBatchRender(){let e=this.owner.getComponent(vn);return e||(e=this.owner.addComponent(vn)),e}get checkLOD(){return this._checkLOD}set checkLOD(e){this._checkLOD=e,this._enableStaticInstanceBatch&&(this._instanceBatchRender.checkLOD=e),this._enableStaticVertexMergeBatch&&(this._vertexMergeBatchRender.checkLOD=e),this._enableCustomBatch&&this._customBatchs.forEach((t=>{t.checkLOD=e}))}get enableStaticInstanceBatchRender(){return this._enableStaticInstanceBatch}set enableStaticInstanceBatchRender(e){!this._instanceBatchRender&&e&&(this._instanceBatchRender=this._getStaticInstanceBatchRender()),e!=this._enableStaticInstanceBatch&&(this._instanceBatchRender.enabled=!!e,this._enableStaticInstanceBatch=e)}get enableMergeBatchRender(){return this._enableStaticVertexMergeBatch}set enableMergeBatchRender(e){!this._vertexMergeBatchRender&&e&&(this._vertexMergeBatchRender=this._getStatiVertexMergeBatchRender()),e!=this._enableStaticVertexMergeBatch&&(this._vertexMergeBatchRender.enabled=!!e,this._enableStaticVertexMergeBatch=e)}get enableCustomBatchRender(){return this._enableCustomBatch}set enableCustomBatchRender(e){this._enableCustomBatch=e,this._customBatchs.forEach((t=>{t.enabled=e}))}get customBatchRenders(){return this._customBatchs}set customBatchRenders(e){this._customBatchs&&this._customBatchs.forEach((e=>{this.owner._destroyComponent(e)})),this._customBatchs=e,this._customBatchs.forEach((e=>{this.owner.addComponentInstance(e)})),this.enableCustomBatchRender=this._enableCustomBatch}constructor(){super(),this._customBatchs=[],this.checkLOD=!0,this._enableStaticInstanceBatch=!1,this._enableStaticVertexMergeBatch=!1,this._cacheRender=new t.SingletonList,this._batchRender=new t.SingletonList,this._enableCustomBatch=!1}_restorRenderNode(){this.enableCustomBatchRender&&this._customBatchs.forEach((e=>{e._clear()})),this._enableStaticInstanceBatch&&this._instanceBatchRender._clear(),this.enableCustomBatchRender&&this._vertexMergeBatchRender._clear()}__addRenderNodeToBatch(e){this.enableCustomBatchRender&&this._customBatchs.forEach((t=>{t._batchOneRender(e)})),this._enableStaticInstanceBatch&&this._instanceBatchRender._batchOneRender(e)||!this.enableCustomBatchRender||this._vertexMergeBatchRender._batchOneRender(e)}__removeRenderNodeFromBatch(e){e._batchRender._removeOneRender(e)}_onEnable(){super._onEnable(),this._enableStaticInstanceBatch&&this._instanceBatchRender&&(this._instanceBatchRender.enabled=!0),this._enableStaticVertexMergeBatch&&this._vertexMergeBatchRender&&(this._vertexMergeBatchRender.enabled=!0),this.enableCustomBatchRender&&this._customBatchs.forEach((e=>{e.enabled=!0}))}_onDisable(){super._onDisable(),this._enableStaticInstanceBatch&&this._instanceBatchRender&&(this._instanceBatchRender.enabled=!1),this._enableStaticVertexMergeBatch&&this._vertexMergeBatchRender&&(this._vertexMergeBatchRender.enabled=!1),this.enableCustomBatchRender&&this._customBatchs.forEach((e=>{e.enabled=!1}))}_addRenderNode(t){if(t.renderNode.staticMask==e.StaticFlag.StaticBatch){if(-1!=this._cacheRender.indexof(t))return;this._cacheRender.add(t),this._batchRender.length>0&&this.__addRenderNodeToBatch(t)}}_removeRenderNode(t){t.renderNode.staticMask==e.StaticFlag.StaticBatch&&-1!=this._batchRender.indexof(t)&&(this.__removeRenderNodeFromBatch(t),this._batchRender.remove(t))}_VolumeChange(){super._VolumeChange(),this._cacheRender.clear()}onStart(){this.reBatch()}reBatch(){this._cacheRender.elements.length=this._cacheRender.length,this._batchRender.clear(),this._restorRenderNode(),this.enableCustomBatchRender&&this._customBatchs.forEach((e=>{e.addList(this._cacheRender.elements),e.reBatch()})),this._enableStaticInstanceBatch&&(this._instanceBatchRender.addList(this._cacheRender.elements),this._instanceBatchRender.reBatch()),this.enableCustomBatchRender&&(this._vertexMergeBatchRender.addList(this._cacheRender.elements),this._vertexMergeBatchRender.reBatch());for(var e=0,t=this._cacheRender.length;e<t;e++)this._cacheRender.elements[e]._batchRender&&this._batchRender.add(this._cacheRender.elements[e])}}class In extends Z{constructor(e){super(t.MeshTopology.Triangles,t.DrawType.DrawElement),this._owner=e,this.bufferState=new t.BufferState,this._bound=new H,this._createBuffer(),this.indexFormat=t.IndexFormat.UInt16}get bounds(){return this._bound}_createBuffer(){var e=t.VertexMesh.getVertexDeclaration("POSITION,NORMAL,UV"),r=.5,n=.5;this._vertex=new Float32Array([-.5,n,0,0,0,1,0,0,r,n,0,0,0,1,1,0,-.5,-.5,0,0,0,1,0,1,r,-.5,0,0,0,1,1,1]),this._index=new Uint16Array([0,1,2,3,2,1]),this._vertexBuffer=A.renderOBJCreate.createVertexBuffer3D(4*this._vertex.length,t.BufferUsage.Dynamic,!1),this._vertexBuffer.vertexDeclaration=e,this._vertexBuffer.setData(this._vertex.buffer),this._indexBuffer=A.renderOBJCreate.createIndexBuffer3D(t.IndexFormat.UInt16,this._index.length,t.BufferUsage.Static,!1),this._indexBuffer.setData(this._index),this.bufferState=new t.BufferState,this.bufferState.applyState([this._vertexBuffer],this._indexBuffer),this._bound.setExtent(new t.Vector3(r,n,r)),this._bound.setCenter(new t.Vector3(0,0,0)),this._positionArray=[new t.Vector3,new t.Vector3,new t.Vector3,new t.Vector3],this._positionArray[0].set(-.5,r,0),this._positionArray[1].set(n,r,0),this._positionArray[2].set(-.5,-.5,0),this._positionArray[3].set(n,-.5,0)}_resizeViewVertexData(e,r,n,a,i){var s=e.x/2,o=e.y/2;a?(In.tempV0.set(-s,o,0),T.billboardTrans(In.tempV0,r,n,this._positionArray[0]),In.tempV0.set(s,o,0),T.billboardTrans(In.tempV0,r,n,this._positionArray[1]),In.tempV0.set(-s,-o,0),T.billboardTrans(In.tempV0,r,n,this._positionArray[2]),In.tempV0.set(s,-o,0),T.billboardTrans(In.tempV0,r,n,this._positionArray[3]),this._vertex[3]=this._vertex[11]=this._vertex[19]=this._vertex[27]=-r.x,this._vertex[4]=this._vertex[12]=this._vertex[20]=this._vertex[28]=-r.y,this._vertex[5]=this._vertex[13]=this._vertex[21]=this._vertex[29]=-r.z):(this._positionArray[0].set(-s,o,0),this._positionArray[1].set(s,o,0),this._positionArray[2].set(-s,-o,0),this._positionArray[3].set(s,-o,0)),t.Vector3.add(this._positionArray[0],i,this._positionArray[0]),t.Vector3.add(this._positionArray[1],i,this._positionArray[1]),t.Vector3.add(this._positionArray[2],i,this._positionArray[2]),t.Vector3.add(this._positionArray[3],i,this._positionArray[3]),this._changeVertex(e)}_resizeVertexData(e){var t=e.x/2,r=e.y/2;this._positionArray[0].set(-t,r,0),this._positionArray[1].set(t,r,0),this._positionArray[2].set(-t,-r,0),this._positionArray[3].set(t,-r,0),this._changeVertex(e)}_resizeWorldVertexData(e,r){let applyMat=(e,r)=>(t.Vector3.transformV3ToV3(e,r,e),e);var n=e.x/2,a=e.y/2;this._positionArray[0].set(-n,a,0),this._positionArray[1].set(n,a,0),this._positionArray[2].set(-n,-a,0),this._positionArray[3].set(n,-a,0),applyMat(this._positionArray[0],r),applyMat(this._positionArray[1],r),applyMat(this._positionArray[2],r),applyMat(this._positionArray[3],r),this._changeVertex(e)}_changeVertex(e){this._vertex[0]=this._positionArray[0].x,this._vertex[1]=this._positionArray[0].y,this._vertex[2]=this._positionArray[0].z,this._vertex[8]=this._positionArray[1].x,this._vertex[9]=this._positionArray[1].y,this._vertex[10]=this._positionArray[1].z,this._vertex[16]=this._positionArray[2].x,this._vertex[17]=this._positionArray[2].y,this._vertex[18]=this._positionArray[2].z,this._vertex[24]=this._positionArray[3].x,this._vertex[25]=this._positionArray[3].y,this._vertex[26]=this._positionArray[3].z,this._vertexBuffer.setData(this._vertex.buffer,0,0,4*this._vertex.length),In.tempV0.setValue(e.x/2,e.y/2,0),this._bound.setExtent(In.tempV0);let t=(this._positionArray[3].x-this._positionArray[2].x)/2,r=(this._positionArray[0].y-this._positionArray[2].y)/2;In.tempV0.setValue(this._positionArray[2].x+t,this._positionArray[2].y+r,this._positionArray[2].z),this._bound.setCenter(In.tempV0)}_updateRenderParams(e){this.clearRenderParams(),this.setDrawElemenParams(6,0)}destroy(){super.destroy(),this.bufferState.destroy(),this._vertexBuffer.destroy(),this._indexBuffer.destroy(),this.bufferState=null,this._vertexBuffer=null,this._indexBuffer=null,delete this._vertex,delete this._index}}In.tempV0=new t.Vector3,In._type=Z._typeCounter++;class Ln extends j{get sprite(){return this._uisprite}set sprite(e){e!=this._uisprite&&(this._uisprite=e,this._shellSprite.removeChildren(0,this._shellSprite.numChildren-1),e&&this._shellSprite.addChild(e),this._resizeRT(),this.boundsChange=!0)}get prefab(){return this._prefab}set prefab(e){this._prefab=e,this.sprite=e?e.create():null}get scale(){return this._size}set scale(e){e.x<=0||e.y<=0||(e.cloneTo(this._size),this._resizeRT(),this.boundsChange=!0,this._scale.setValue(e.x,e.y,1))}get renderMode(){return this.sharedMaterial||(this.sharedMaterial=this._ui3DMat),this.sharedMaterial.materialRenderMode}set renderMode(e){this.sharedMaterial.materialRenderMode=e,this.boundsChange=!0}get cull(){let e=this.sharedMaterial;return e||(e=this._ui3DMat),e.cull}set cull(e){this.sharedMaterial&&(this.sharedMaterial.cull=e)}get resolutionRate(){return this._resolutionRate}set resolutionRate(e){e<=0||this._resolutionRate!=e&&(this._resolutionRate=e,this._resizeRT())}get billboard(){return this._view}set billboard(e){this._view=e,this._sizeChange=!0,this.boundsChange=!0}get enableHit(){return this._hit}set enableHit(e){this._hit=e}constructor(){super(),this._sizeChange=!0,this._view=!0,this._bindPropertyName="u_AlbedoTexture",this._hit=!1,this._worldParams=new t.Vector4,this._uiPlane=new O(new t.Vector3,0),this._size=new t.Vector2(1,1),this._resolutionRate=128,this._shellSprite=new t.Sprite,this._shellSprite.name="UI3D",this._shellSprite._setBit(t.NodeFlags.DISPLAYED_INSTAGE,!0),this._shellSprite._setBit(t.NodeFlags.ACTIVE_INHIERARCHY,!0),this._shellSprite._parent=t.ILaya.stage,this._baseRenderNode.shaderData.addDefine(G.SHADERDEFINE_UV0),this._matrix=new t.Matrix4x4,this._scale=new t.Vector3(1,1,1)}_creatDefaultMat(){this._ui3DMat||(this._ui3DMat=new lt,this._ui3DMat.materialRenderMode=t.MaterialRenderMode.RENDERMODE_OPAQUE,this._ui3DMat.cull=Ee.CULL_BACK)}_addRenderElement(){var e=this._renderElements;this.sharedMaterial||(this._creatDefaultMat(),this.sharedMaterial=this._ui3DMat),this._setMaterialTexture();var t=this.sharedMaterial,r=new te;r.setTransform(this.owner._transform),r.render=this,r.material=t,r.renderSubShader=r.material.shader.getSubShaderAt(0),this._geometry=new In(this),r.setGeometry(this._geometry),e.push(r),this._setRenderElements(),this.geometryBounds=this._geometry.bounds}_resizeRT(){let e=this._size.x*this._resolutionRate,r=this._size.y*this._resolutionRate,n=!t.LayaGL.renderEngine._screenInvertY;this._rendertexure2D?this._rendertexure2D.width==e&&this._rendertexure2D.height==r||(this._rendertexure2D.destroy(),this._rendertexure2D=new t.RenderTexture2D(e,r,t.RenderTargetFormat.R8G8B8A8,t.RenderTargetFormat.None),this._rendertexure2D._invertY=n,this._setMaterialTexture()):(this._rendertexure2D=new t.RenderTexture2D(e,r,t.RenderTargetFormat.R8G8B8A8,t.RenderTargetFormat.None),this._rendertexure2D._invertY=n),this._submitRT()}onPreRender(){if(this.billboard){this._sizeChange=!1;let e=this.owner.scene.cullInfoCamera;t.Matrix4x4.createAffineTransformation(this._transform.position,e.transform.rotation,this._scale,this._matrix)}else this._sizeChange&&(this._sizeChange=!1,this._transform.worldMatrix.cloneTo(this._matrix))}_parseHit(e){let r,n,a=Ln._ray;if(!this._uisprite||!t.LayaEnv.isPlaying)return null;this._matrix.invert(Ln.TempMatrix),t.Vector3.transformCoordinate(e.origin,Ln.TempMatrix,a.origin),t.Vector3.TransformNormal(e.direction,Ln.TempMatrix,a.direction),a.direction.normalize();let i=0,s=0,o=-a.origin.z/a.direction.z;if(o<0)return null;r=a.origin.x+o*a.direction.x,n=a.origin.y+o*a.direction.y,i=r+.5,s=n+.5;let l=i*this._rendertexure2D.width,h=(1-s)*this._rendertexure2D.height,d=t.InputManager.inst.getSpriteUnderPoint(this._uisprite,l,h);return d||null}getUITexture(){return this._rendertexure2D}_getCameraDistance(e){return t.Vector3.distance(e,this.owner.transform.position)}_renderUpdate(e){let t=this._baseRenderNode.shaderData;t.setMatrix4x4(B.WORLDMATRIX,this._matrix);let r=this.owner.transform,n=this._worldParams;n.x=r.getFrontFaceValue(),t.setVector(B.WORLDINVERTFRONT,n)}renderUpdate(e){this._renderElements.forEach((t=>{let r=t._geometry;t._renderElementOBJ.isRender=r._prepareRender(e),r._updateRenderParams(e)}))}_submitRT(){this._rendertexure2D&&this._shellSprite.drawToTexture(this._rendertexure2D.width,this._rendertexure2D.height,0,0,this._rendertexure2D),this._setMaterialTexture()}_setMaterialTexture(){this._rendertexure2D?(this.sharedMaterial.addDefine(lt.SHADERDEFINE_ALBEDOTEXTURE),this.sharedMaterial.setTexture(this._bindPropertyName,this._rendertexure2D)):this.sharedMaterial.removeDefine(lt.SHADERDEFINE_ALBEDOTEXTURE)}_checkUIPos(e){return!!this.enableHit&&this._parseHit(e)}_calculateBoundingBox(){var e=this._transform.worldMatrix;this._geometry.bounds._tranform(e,this._bounds)}_onAdded(){super._onAdded(),this._addRenderElement()}_onDisable(){super._onDisable(),this.owner.transform.off(t.Event.TRANSFORM_CHANGED,this,this._transByRotate),this.owner.scene._UI3DManager.remove(this)}_onEnable(){super._onEnable(),this.owner.scene._UI3DManager.add(this),this.owner.transform.on(t.Event.TRANSFORM_CHANGED,this,this._transByRotate),this._transByRotate()}_onDestroy(){super._onDestroy(),this._rendertexure2D&&this._rendertexure2D.destroy(),this._uisprite&&this._uisprite.destroy(),this._shellSprite&&this._shellSprite.destroy(),this._ui3DMat&&this._ui3DMat.destroy(),this._resolutionRate=null,this._uiPlane=null,this._size=null,this._scale=null,this._matrix=null}_transByRotate(){this.billboard||(this._sizeChange=!0),this.boundsChange=!0}}Ln.TempMatrix=new t.Matrix4x4,Ln.temp0=new t.Vector3,Ln.temp1=new t.Vector3,Ln.temp2=new t.Vector3,Ln.DEBUG=!1,Ln._ray=new w(new t.Vector3,new t.Vector3);var Bn;t.Loader.registerLoader(["lani"],class{load(e){let r=t.AssetDb.inst.getSubAssetURL(e.url,e.uuid,null,"lani");return e.loader.fetch(r,"arraybuffer",e.progress.createCallback(),e.options).then((e=>e?x._parse(e):null))}},t.Loader.ANIMATIONCLIP);class On{constructor(){Bn||(Bn={"WhiteTextureCube.ltc":t.TextureCube.whiteTexture,"BlackTextureCube.ltc":t.TextureCube.blackTexture,"GrayTextureCube.ltc":t.TextureCube.grayTexture})}load(e){if(-1!=e.url.indexOf("internal/")){let r=Bn[t.Utils.getBaseName(e.url)];if(r)return Promise.resolve(r)}if("ktx"==e.ext||"cubemap"==e.ext){let r=e.url;return"cubemap"==e.ext&&(r=t.AssetDb.inst.getSubAssetURL(r,e.uuid,"0","ktx")),e.loader.fetch(r,"arraybuffer",e.progress.createCallback(),e.options).then((r=>{if(!r)return null;let n=t.KTXTextureInfo.getKTXTextureInfo(r);if(n.dimension!=t.TextureDimension.Cube)return t.Loader.warn("ktxInfo.dimension != TextureDimension.Cube! "+e.url),null;let a=new t.TextureCube(n.width,n.format,n.mipmapCount>1,n.sRGB);a.setKTXData(n);let i=e.obsoluteInst;return i&&i instanceof t.TextureCube&&(a=this.move(i,a)),a}))}return"ltcb"==e.ext||"ltcb.ls"==e.ext?e.loader.fetch(e.url,"arraybuffer",e.progress.createCallback(),e.options).then((r=>{if(!r)return null;let n=new t.Byte(r),a=n.readUTFString();if("LAYATEXTURECUBE:0000"!==a)return console.warn(`CubemapBinLoader: unknow version. ${a}`),null;let i=n.readUint8(),s=n.getUint8(),o=n.readUint16(),l=n.getUint8(),h=n.getUint8(),d=n.getUint8(),c=n.getUint8(),u=new t.TextureCube(o,i,s>1);u.setPixelsData(null,!1,!1),u.filterMode=l,u.wrapModeU=h,u.wrapModeV=d,u.anisoLevel=c;let _=n.pos,m=o;for(let e=0;e<s;e++){let t=new Array(6),n=m*m*u._getFormatByteCount();for(let e=0;e<6;e++)t[e]=new Uint8Array(r,_,n),_+=n;u.updateSubPixelsData(t,0,0,m,m,e,!1,!1,!1),m/=2}let f=e.obsoluteInst;return f&&f instanceof t.TextureCube&&(u=this.move(f,u)),u})):e.loader.fetch(e.url,"json",e.progress.createCallback(.2),e.options).then((r=>{if(!r)return null;let n=t.URL.getPath(e.url),a=[t.URL.join(n,r.front),t.URL.join(n,r.back),t.URL.join(n,r.left),t.URL.join(n,r.right),t.URL.join(n,r.up),t.URL.join(n,r.down)];return Promise.all(a.map((t=>t?e.loader.fetch(t,"image",e.progress.createCallback(),e.options):Promise.resolve(null)))).then((r=>{var n,a;let i=e.options.constructParams,s=i?i[0]:null!==(a=null===(n=r[0])||void 0===n?void 0:n.width)&&void 0!==a?a:1,o=i?i[1]:t.TextureFormat.R8G8B8A8,l=!!i&&i[3],h=!i||i[5],d=new t.TextureCube(s,o,l,h);d.setImageData(r,!1,!1);let c=e.obsoluteInst;return c&&c instanceof t.TextureCube&&(d=this.move(c,d)),d}))}))}move(e,r){return e._texture=r._texture,e._format=r.format,e.width=r.width,e.height=r.height,e.obsolute=!1,delete t.Resource._idResourcesMap[r.id],e}}t.Loader.registerLoader(["ltc","ltcb","ltcb.ls","cubemap"],On,t.Loader.TEXTURECUBE);t.Loader.registerLoader(["tex2darray"],class{load(e){return e.loader.fetch(e.url,"json",e.progress.createCallback(),e.options).then((r=>{if(!r)return null;let n=r.textures;if(n){let a=[],i=t.URL.getPath(e.url);for(let e=n.length-1;e>=0;e--)a.unshift(t.URL.join(i,n[e]));return Promise.all(a.map((t=>t?e.loader.fetch(t,"image",e.progress.createCallback(),e.options):Promise.resolve(null)))).then((e=>{let n=new t.Texture2DArray(r.width,r.height,r.depth,r.format,r.mipmap,!1,r.sRGB);return n.setImageData(e,r.premultiplyAlpha,r.invertY),n}))}return new t.Texture2DArray(r.width,r.height,r.depth,r.format,r.mipmap,!1,r.sRGB)}))}},t.Loader.TEXTURECUBE);class wn{static parse(e,t,r,n){wn._mesh=r,wn._subMeshes=n,wn._version=t,wn._readData=e,wn.READ_DATA(),wn.READ_BLOCK(),wn.READ_STRINGS();for(var a=0,i=wn._BLOCK.count;a<i;a++){wn._readData.pos=wn._BLOCK.blockStarts[a];var s=wn._readData.getUint16(),o=wn._strings[s],l=wn["READ_"+o];if(null==l)throw new Error("model file err,no this function:"+s+" "+o);l.call(null)}wn._strings.length=0,wn._readData=null,wn._version=null,wn._mesh=null,wn._subMeshes=null}static _readString(){return wn._strings[wn._readData.getUint16()]}static READ_DATA(){wn._DATA.offset=wn._readData.getUint32(),wn._DATA.size=wn._readData.getUint32()}static READ_BLOCK(){for(var e=wn._BLOCK.count=wn._readData.getUint16(),t=wn._BLOCK.blockStarts=[],r=wn._BLOCK.blockLengths=[],n=0;n<e;n++)t.push(wn._readData.getUint32()),r.push(wn._readData.getUint32())}static READ_STRINGS(){var e=wn._readData.getUint32(),t=wn._readData.getUint16(),r=wn._readData.pos;wn._readData.pos=e+wn._DATA.offset;for(var n=0;n<t;n++)wn._strings[n]=wn._readData.readUTFString();wn._readData.pos=r}static READ_MESH(){wn._readString();var e,r=wn._readData.__getBuffer(),n=0,a=wn._readData.getInt16(),i=wn._DATA.offset;for(e=0;e<a;e++){var s,o=i+wn._readData.getUint32(),l=wn._readData.getUint32(),h=r.slice(o,o+l),d=new Float32Array(h),c=wn._readString();switch(wn._version){case"LAYAMODEL:0301":case"LAYAMODEL:0400":s=t.VertexMesh.getVertexDeclaration(c);break;case"LAYAMODEL:0401":s=t.VertexMesh.getVertexDeclaration(c,!1);break;default:throw new Error("LoadModelV03: unknown version.")}if(!s)throw new Error("LoadModelV03: unknown vertexDeclaration.");var u=A.renderOBJCreate.createVertexBuffer3D(4*d.length,t.BufferUsage.Static,!0);u.vertexDeclaration=s,u.setData(d.buffer),wn._mesh._vertexBuffer=u,wn._mesh._vertexCount+=u._byteLength/s.vertexStride,n+=4*d.length}var _=i+wn._readData.getUint32(),m=wn._readData.getUint32(),f=new Uint16Array(r.slice(_,_+m)),g=A.renderOBJCreate.createIndexBuffer3D(t.IndexFormat.UInt16,m/2,t.BufferUsage.Static,!0);g.setData(f),wn._mesh._indexBuffer=g,n+=2*g.indexCount,wn._mesh._setBuffer(wn._mesh._vertexBuffer,g),wn._mesh._setCPUMemory(n),wn._mesh._setGPUMemory(n);var p=wn._mesh._boneNames=[],S=wn._readData.getUint16();for(p.length=S,e=0;e<S;e++)p[e]=wn._strings[wn._readData.getUint16()];wn._readData.pos+=8;var T=wn._readData.getUint32(),E=wn._readData.getUint32(),x=new Float32Array(r.slice(i+T,i+T+E)),D=x.length,R=wn._mesh._inverseBindPosesBuffer=new ArrayBuffer(4*D);for(wn._mesh._inverseBindPoses=[],wn._mesh._instanceBufferStateType=0!=D?ar.MESH_INSTANCEBUFFER_TYPE_SIMPLEANIMATOR:ar.MESH_INSTANCEBUFFER_TYPE_NORMAL,e=0;e<D;e+=16){var M=new t.Matrix4x4(x[e+0],x[e+1],x[e+2],x[e+3],x[e+4],x[e+5],x[e+6],x[e+7],x[e+8],x[e+9],x[e+10],x[e+11],x[e+12],x[e+13],x[e+14],x[e+15],new Float32Array(R,4*e,16));wn._mesh._inverseBindPoses[e/16]=M}return!0}static READ_SUBMESH(){var e=wn._readData.__getBuffer(),t=new rr(wn._mesh);wn._readData.getInt16(),wn._readData.getUint32(),wn._readData.getUint32();var r=wn._readData.getUint32(),n=wn._readData.getUint32(),a=wn._mesh._indexBuffer;t._indexBuffer=a,t._setIndexRange(r,n);var i=wn._mesh._vertexBuffer;t._vertexBuffer=i;var s=wn._DATA.offset,o=t._subIndexBufferStart,l=t._subIndexBufferCount,h=t._boneIndicesList,d=wn._readData.getUint16();o.length=d,l.length=d,h.length=d;var c=wn._mesh._skinnedMatrixCaches,u=wn._subMeshes.length;c.length=wn._mesh._inverseBindPoses.length;for(var _=0;_<d;_++){o[_]=wn._readData.getUint32(),l[_]=wn._readData.getUint32();for(var m=wn._readData.getUint32(),f=wn._readData.getUint32(),g=h[_]=new Uint16Array(e.slice(s+m,s+m+f)),p=g.length,S=0;S<p;S++){var T=g[S];c[T]||(c[T]=new nr(u,_,S))}}return wn._subMeshes.push(t),!0}}wn._BLOCK={count:0},wn._DATA={offset:0,size:0},wn._strings=[];class Pn{constructor(){this.fullWeight=1}}class Nn{constructor(){this.targetCount=0,this.targets=new Array}getTargetByIndex(e){return this.targets[e]}addTarget(e){this.targetCount++,this.targets.push(e),this.targets.sort(((e,t)=>e.fullWeight-t.fullWeight))}}class Vn{constructor(){this.targets=new Array,this.channels=new Array,this.bounds=new H,this.params=new t.Vector4}addMorphChannel(e){e._index=this.channels.length,this.channels.push(e),e.targets.forEach((e=>{e._index=this.targets.length,this.targets.push(e)}))}getMorphChannel(e){return this.channels.find((t=>t.name==e))}getMorphChannelbyIndex(e){return this.channels[e]}get targetCount(){return this.targets.length}get channelCount(){return this.channels.length}initData(){if(t.LayaGL.renderEngine.getCapable(t.RenderCapable.Texture3D)){let e=this.targets.length,r=t.LayaGL.renderEngine.getParams(t.RenderParams.MAX_Texture_Size),n=this.vertexCount,a=this.vertexDec,i=a.vertexStride/4,s=a.vertexElementCount;this.elementCount=s;let o=Math.floor(s*n/r)+1,l=4;this.targetTexture=new t.Texture2DArray(r,o,e,t.TextureFormat.R32G32B32A32,!1,!1,!1),this.targetTexture.filterMode=t.FilterMode.Point,this.targetTexture.anisoLevel=1,this.targetTexture.lock=!0;let h=new Float32Array(r*o*e*l).fill(0),d=this.attributeOffset=new t.Vector4(0,0,0,0);d.x=a._vertexElements.indexOf(a.getVertexElementByUsage(t.VertexMesh.MESH_POSITION0)),d.y=a._vertexElements.indexOf(a.getVertexElementByUsage(t.VertexMesh.MESH_NORMAL0)),d.z=a._vertexElements.indexOf(a.getVertexElementByUsage(t.VertexMesh.MESH_TANGENT0));let c=r*o;for(let r=0;r<e;r++){let e=this.targets[r];for(let o=0;o<n;o++){let n=(r*c+o*s)*l;a._vertexElements.forEach(((r,a)=>{let s=n+4*a,l=r.offset/4,d=o*i+l;switch(r.elementUsage){case t.VertexMesh.MESH_POSITION0:case t.VertexMesh.MESH_NORMAL0:h[s]=e.data[d],h[s+1]=e.data[d+1],h[s+2]=e.data[d+2];break;case t.VertexMesh.MESH_TANGENT0:h[s]=e.data[d],h[s+1]=e.data[d+1],h[s+2]=e.data[d+2],h[s+3]=e.data[d+3]}}))}}this.targetTexture.setPixelsData(h,!1,!1),this.params.setValue(this.targetTexture.width,this.targetTexture.height,this.elementCount,this.channelCount)}}destroy(){this.targetTexture&&(this.targetTexture.lock=!1,this.targetTexture.destroy(),this.targetTexture=null),this.targets=null,this.channels=null}clone(){let e=new Vn;e.bounds.setMin(this.bounds.getMin()),e.bounds.setMax(this.bounds.getMax()),e.vertexCount=this.vertexCount,e.vertexDec=this.vertexDec;let t=this.channelCount;for(let r=0;r<t;r++){let t=this.getMorphChannelbyIndex(r),n=new Nn;n.name=t.name;let a=t.targetCount;for(let e=0;e<a;e++){let r=t.getTargetByIndex(e),a=new Pn;a.name=r.name,a.fullWeight=r.fullWeight,a.data=new Float32Array(r.data),n.addTarget(a)}e.addMorphChannel(n)}return e.initData(),e}}class bn{static parse(e,t,r,n){bn._mesh=r,bn._subMeshes=n,bn._version=t,bn._readData=e,bn.READ_DATA(),bn.READ_BLOCK(),bn.READ_STRINGS();for(var a=0,i=bn._BLOCK.count;a<i;a++){bn._readData.pos=bn._BLOCK.blockStarts[a];var s=bn._readData.getUint16(),o=bn._strings[s],l=bn["READ_"+o];null==l?console.warn("model file err,no this function:"+s+" "+o):l.call(null)}bn._strings.length=0,bn._readData=null,bn._version=null,bn._mesh=null,bn._subMeshes=null}static _readString(){return bn._strings[bn._readData.getUint16()]}static READ_DATA(){bn._DATA.offset=bn._readData.getUint32(),bn._DATA.size=bn._readData.getUint32()}static READ_BLOCK(){for(var e=bn._BLOCK.count=bn._readData.getUint16(),t=bn._BLOCK.blockStarts=[],r=bn._BLOCK.blockLengths=[],n=0;n<e;n++)t.push(bn._readData.getUint32()),r.push(bn._readData.getUint32())}static READ_STRINGS(){var e=bn._readData.getUint32(),t=bn._readData.getUint16(),r=bn._readData.pos;bn._readData.pos=e+bn._DATA.offset;for(var n=0;n<t;n++)bn._strings[n]=bn._readData.readUTFString();bn._readData.pos=r}static READ_MESH(){var e,r=0;bn._readString();var n=bn._readData,a=n.__getBuffer(),i=n.getInt16(),s=bn._DATA.offset;for(e=0;e<i;e++){var o,l,h,d=s+n.getUint32(),c=n.getUint32(),u=bn._readString(),_=t.VertexMesh.getVertexDeclaration(u,!1),m=_.vertexStride,f=u.split(","),g=f.length,p=bn._mesh;switch(bn._version){case"LAYAMODEL:05":case"LAYAMODEL:0501":case"LAYAMODEL:0502":o=a.slice(d,d+c*m),l=new Float32Array(o),h=new Uint8Array(o);break;case"LAYAMODEL:COMPRESSION_05":case"LAYAMODEL:COMPRESSION_0501":o=new ArrayBuffer(m*c),l=new Float32Array(o),h=new Uint8Array(o);var S=n.pos;n.pos=d;for(var T=0;T<c;T++)for(var E,x=T*m,D=0;D<g;D++)switch(f[D]){case"POSITION":l[E=x/4]=t.HalfFloatUtils.convertToNumber(n.getUint16()),l[E+1]=t.HalfFloatUtils.convertToNumber(n.getUint16()),l[E+2]=t.HalfFloatUtils.convertToNumber(n.getUint16()),x+=12;break;case"NORMAL":l[E=x/4]=n.getUint8()/127.5-1,l[E+1]=n.getUint8()/127.5-1,l[E+2]=n.getUint8()/127.5-1,x+=12;break;case"COLOR":case"BLENDWEIGHT":l[E=x/4]=n.getUint8()/255,l[E+1]=n.getUint8()/255,l[E+2]=n.getUint8()/255,l[E+3]=n.getUint8()/255,x+=16;break;case"UV":case"UV1":l[E=x/4]=t.HalfFloatUtils.convertToNumber(n.getUint16()),l[E+1]=t.HalfFloatUtils.convertToNumber(n.getUint16()),x+=8;break;case"BLENDINDICES":h[x]=n.getUint8(),h[x+1]=n.getUint8(),h[x+2]=n.getUint8(),h[x+3]=n.getUint8(),x+=4;break;case"TANGENT":l[E=x/4]=n.getUint8()/127.5-1,l[E+1]=n.getUint8()/127.5-1,l[E+2]=n.getUint8()/127.5-1,l[E+3]=n.getUint8()/127.5-1,x+=16}n.pos=S}var R=A.renderOBJCreate.createVertexBuffer3D(o.byteLength,t.BufferUsage.Static,!0);R.vertexDeclaration=_,R.setData(o);c=R._byteLength/_.vertexStride;p._indexFormat=c>65535?t.IndexFormat.UInt32:t.IndexFormat.UInt16,p._vertexBuffer=R,p._vertexCount+=c,r+=4*l.length}var M,C=s+n.getUint32(),v=n.getUint32();M=p.indexFormat==t.IndexFormat.UInt32?new Uint32Array(a.slice(C,C+v)):new Uint16Array(a.slice(C,C+v));var y=A.renderOBJCreate.createIndexBuffer3D(p.indexFormat,M.length,t.BufferUsage.Static,!0);if(y.setData(M),p._indexBuffer=y,p._setBuffer(p._vertexBuffer,y),r+=2*y.indexCount,p._setCPUMemory(r),p._setGPUMemory(r),"LAYAMODEL:0501"==bn._version||"LAYAMODEL:COMPRESSION_0501"==bn._version||"LAYAMODEL:0502"==bn._version){var I=p.bounds,L=I.getMin(),B=I.getMax();L.setValue(n.getFloat32(),n.getFloat32(),n.getFloat32()),B.setValue(n.getFloat32(),n.getFloat32(),n.getFloat32()),I.setMin(L),I.setMax(B),p.bounds=I}var O=p._boneNames=[],w=n.getUint16();for(O.length=w,e=0;e<w;e++)O[e]=bn._strings[n.getUint16()];var P=n.getUint32(),N=n.getUint32(),V=new Float32Array(a.slice(s+P,s+P+N)),b=V.length,F=p._inverseBindPosesBuffer=new ArrayBuffer(4*b);for(p._inverseBindPoses=[],p._instanceBufferStateType=0!=b?ar.MESH_INSTANCEBUFFER_TYPE_SIMPLEANIMATOR:ar.MESH_INSTANCEBUFFER_TYPE_NORMAL,e=0;e<b;e+=16){var U=new t.Matrix4x4(V[e+0],V[e+1],V[e+2],V[e+3],V[e+4],V[e+5],V[e+6],V[e+7],V[e+8],V[e+9],V[e+10],V[e+11],V[e+12],V[e+13],V[e+14],V[e+15],new Float32Array(F,4*e,16));p._inverseBindPoses[e/16]=U}return!0}static READ_SUBMESH(){var e=bn._readData,t=e.__getBuffer(),r=new rr(bn._mesh);e.getInt16();var n=e.getUint32(),a=e.getUint32(),i=bn._mesh._indexBuffer;r._indexBuffer=i,r._setIndexRange(n,a);var s=bn._mesh._vertexBuffer;r._vertexBuffer=s;var o=bn._DATA.offset,l=r._subIndexBufferStart,h=r._subIndexBufferCount,d=r._boneIndicesList,c=e.getUint16();l.length=c,h.length=c,d.length=c;var u=bn._mesh._skinnedMatrixCaches,_=bn._subMeshes.length;u.length=bn._mesh._inverseBindPoses.length;for(var m=0;m<c;m++){l[m]=e.getUint32(),h[m]=e.getUint32();for(var f=e.getUint32(),g=e.getUint32(),p=d[m]=new Uint16Array(t.slice(o+f,o+f+g)),S=0,T=p.length;S<T;S++){var E=p[S];u[E]||(u[E]=new nr(_,m,S))}}return bn._subMeshes.push(r),!0}static READ_MORPH(){let e=bn._readData,r=e.__getBuffer(),n=bn._DATA.offset,a=bn._mesh,i=a.morphTargetData=new Vn,s=bn._strings[e.getUint16()];i.vertexDec=t.VertexMesh.getVertexDeclaration(s);let o=i.bounds,l=o.getMin(),h=o.getMax();l.set(e.getFloat32(),e.getFloat32(),e.getFloat32()),h.set(e.getFloat32(),e.getFloat32(),e.getFloat32()),o.setMin(l),o.setMax(h);let d=e.readUint16();for(let t=0;t<d;t++){let t=new Nn;t.name=bn._strings[e.getUint16()];let a=e.readUint16();for(let i=0;i<a;i++){let a=new Pn,i=bn._strings[e.getUint16()];a.name=i,a.fullWeight=e.readFloat32();let s=e.readUint32(),o=e.readUint32();a.data=new Float32Array(r.slice(n+s,n+s+o)),t.addTarget(a)}i.addMorphChannel(t)}return i.vertexCount=a.vertexCount,i.initData(),!0}static READ_UVSIZE(){bn._mesh._width=bn._readData.readUint16(),bn._mesh._height=bn._readData.readUint16()}}bn._BLOCK={count:0},bn._DATA={offset:0,size:0},bn._strings=[];class Fn{static _parse(e){var t=new ar;return Fn.read(e,t,t._subMeshes),t}static read(e,r,n){var a=new t.Byte(e);a.pos=0;var i=a.readUTFString();switch(i){case"LAYAMODEL:0301":case"LAYAMODEL:0400":case"LAYAMODEL:0401":wn.parse(a,i,r,n);break;case"LAYAMODEL:05":case"LAYAMODEL:COMPRESSION_05":case"LAYAMODEL:0501":case"LAYAMODEL:COMPRESSION_0501":case"LAYAMODEL:0502":bn.parse(a,i,r,n);break;default:throw new Error("unknown mesh version: "+i)}r._setSubMeshes(n),"LAYAMODEL:0501"!=i&&"LAYAMODEL:COMPRESSION_0501"!=i&&"LAYAMODEL:0502"!=i&&r.calculateBounds()}}t.Loader.registerLoader(["lm"],class{load(e){let r=t.AssetDb.inst.getSubAssetURL(e.url,e.uuid,null,"lm");return e.loader.fetch(r,"arraybuffer",e.progress.createCallback(),e.options).then((e=>e?Fn._parse(e):null))}},t.Loader.MESH);class Un{static _createSprite3DInstance(e,t,r){let n;switch(e.type){case"Scene3D":n=new Qr;break;case"Sprite3D":n=new B;break;case"MeshSprite3D":n=new ht,r&&e.props.isStatic&&r.push(n);break;case"SkinnedMeshSprite3D":n=new Zt;break;case"SimpleSkinnedMeshSprite3D":n=new Ar;break;case"ShuriKenParticle3D":n=new Yt;break;case"Camera":n=new Kr;break;case"ReflectionProbe":n=new B,n.addComponent(K);break;default:throw new Error("Utils3D:unidentified class type in (.lh) file.")}let a=e.child;if(a)for(let e=0,i=a.length;e<i;e++){let i=Un._createSprite3DInstance(a[e],t,r);n.addChild(i)}return t[e.instanceID]=n,n}static _createComponentInstance(e,r,n){let a=r[e.instanceID];a._parse(e.props,r);let i=e.child;if(i)for(let e=0,t=i.length;e<t;e++)Un._createComponentInstance(i[e],r,n);let s=e.components;if(s)for(let e=0,r=s.length;e<r;e++){let r=s[e],i=t.ClassUtils.getClass(r.type);if(i){a.addComponent(i)._parse(r,n)}else console.warn(`Unidentified component type: ${r.type}.`)}}static _createNodeByJson02(e,t){let r={},n={component:[],data:[]},a=Un._createSprite3DInstance(e,r,t);return Un._createComponentInstance(e,r,n),Un._createInteractInstance(n,r),a}static _createInteractInstance(e,t){let r=e.component,n=e.data;for(let e=0,a=r.length;e<a;e++)r[e]._parseInteractive(n[e],t)}static parse(e){let t,r=e.data,n=[];switch(e.version){case"LAYAHIERARCHY:02":case"LAYASCENE3D:02":t=Un._createNodeByJson02(r,n);break;default:t=Un._createNodeByJson(r,n)}return t}static _createNodeByJson(e,r){let n;switch(e.type){case"Scene3D":n=new Qr;break;case"Sprite3D":n=new B;break;case"MeshSprite3D":n=new ht,r&&e.props.isStatic&&r.push(n);break;case"SkinnedMeshSprite3D":n=new Zt;break;case"ShuriKenParticle3D":n=new Yt;break;case"Camera":n=new Kr;break;default:throw new Error(`Unidentified node type ${e.type}`)}let a=e.child;if(a)for(let e=0,t=a.length;e<t;e++){let t=Un._createNodeByJson(a[e],r);n.addChild(t)}let i=e.components;if(i)for(let e=0,r=i.length;e<r;e++){let r=i[e],a=t.ClassUtils.getClass(r.type);if(a){n.addComponent(a)._parse(r)}else console.warn(`Unidentified component type: ${r.type}.`)}return n._parse(e.props,null),n}static collectResourceLinks(e,r){let n={},a=[];function addInnerUrl(e,i,s,o){let l=n[e];return void 0===l&&(l=t.URL.join(r,e),a.push({url:l,type:i,constructParams:s,propertyParams:o}),n[e]=l),l}return function check(e){let r=e.props;switch(e.type){case"Scene3D":let n=r.lightmaps;if(n)for(let e=0,r=n.length;e<r;e++){let r=n[e];if(r.path)r.path=addInnerUrl(r.path,t.Loader.TEXTURE2D,r.constructParams,r.propertyParams);else{let e=r.color;e.path=addInnerUrl(e.path,t.Loader.TEXTURE2D,e.constructParams,e.propertyParams);let n=r.direction;n&&(n.path=addInnerUrl(n.path,t.Loader.TEXTURE2D,n.constructParams,n.propertyParams))}}let a=r.reflectionTexture;a&&(r.reflection=addInnerUrl(a,t.Loader.TEXTURECUBE));let i=r.reflection;if(i&&(r.reflection=addInnerUrl(i,t.Loader.TEXTURECUBE)),r.sky){let e=r.sky.material;e&&(e.path=addInnerUrl(e.path,t.Loader.MATERIAL))}break;case"Camera":let s=r.skyboxMaterial;s&&(s.path=addInnerUrl(s.path,t.Loader.MATERIAL));break;case"TrailSprite3D":case"MeshSprite3D":case"SkinnedMeshSprite3D":case"SimpleSkinnedMeshSprite3D":let o=r.meshPath;o&&(r.meshPath=addInnerUrl(o,t.Loader.MESH));let l=r.materials;if(l)for(let e=0,r=l.length;e<r;e++)l[e].path=addInnerUrl(l[e].path,t.Loader.MATERIAL);"SimpleSkinnedMeshSprite3D"==e.type&&r.animatorTexture&&(r.animatorTexture=addInnerUrl(r.animatorTexture,t.Loader.TEXTURE2D));break;case"ShuriKenParticle3D":if(r.main){let e=r.renderer.resources,n=e.mesh,a=e.material;n&&(e.mesh=addInnerUrl(n,t.Loader.MESH)),a&&(e.material=addInnerUrl(a,t.Loader.MATERIAL))}else{let e=r.meshPath;e&&(r.meshPath=addInnerUrl(e,t.Loader.MESH)),r.material.path=addInnerUrl(r.material.path,t.Loader.MATERIAL)}break;case"Terrain":addInnerUrl(r.dataPath,t.Loader.TERRAINRES);break;case"ReflectionProbe":let h=r.reflection;h&&(r.reflection=addInnerUrl(h,t.Loader.TEXTURECUBE))}let n=e.components;if(n)for(let e=0,r=n.length;e<r;e++){let r=n[e];switch(r.type){case"Animator":let e=r.clipPaths;if(e)for(let r=0,n=e.length;r<n;r++)e[r]=addInnerUrl(e[r],t.Loader.ANIMATIONCLIP);else{let e=r.layers;for(let r=0;r<e.length;r++){let n=e[r].states;for(let e=0,r=n.length;e<r;e++){let r=n[e].clipPath;r&&(n[e].clipPath=addInnerUrl(r,t.Loader.ANIMATIONCLIP))}}}break;case"PhysicsCollider":case"Rigidbody3D":case"CharacterController":let n=r.shapes;for(let e=0;e<n.length;e++){let r=n[e];if("MeshColliderShape"===r.type){let e=r.mesh;e&&(r.mesh=addInnerUrl(e,t.Loader.MESH))}}}}let a=e.child;if(a)for(let e=0,t=a.length;e<t;e++)check(a[e])}(e.data),a}}t.HierarchyLoader.v2=Un;t.Loader.registerLoader(["lavm"],class{load(e){return e.loader.fetch(e.url,"json",e.progress.createCallback(),e.options).then((e=>e?new Sn(e):null))}});t.Loader.registerLoader(["glsl","vs","fs"],class{load(e){let r=e.url;return e.loader.fetch(r,"text",e.progress.createCallback(),e.options).then((r=>r?t.ShaderCompile.addInclude(e.url,r,!0):null))}});t.Loader.registerLoader(["controller"],class{load(e){return e.loader.fetch(e.url,"json",e.progress.createCallback(.2),e.options).then((t=>{let r=new xn(t);if(r.data&&r.data.controllerLayers){let t=r.data.controllerLayers,n=[];for(let r=t.length-1;r>=0;r--){t[r].avatarMask&&this.loadAvatarMask(t[r],n,e);let a=t[r].states;this.loadStates(a,n,e)}return Promise.all(n).then((()=>r))}return r}))}loadAvatarMask(e,r,n){let a=t.URL.getPath(n.url);if(e.avatarMask&&e.avatarMask._$uuid&&""!=e.avatarMask._$uuid){let i=t.URL.getResURLByUUID(e.avatarMask._$uuid);i.startsWith("res://")||(i=t.URL.join(a,i)),r.push(n.loader.load(i).then((t=>{e.avatarMask=t})))}else e.avatarMask=null}loadStates(e,r,n){let a=t.URL.getPath(n.url);for(let i=e.length-1;i>=0;i--){if(e[i].clip&&e[i].clip._$uuid){let s=t.URL.getResURLByUUID(e[i].clip._$uuid);s.startsWith("res://")||(s=t.URL.join(a,s)),r.push(n.loader.load(s).then((t=>{e[i].clip=t})))}e[i].states&&this.loadStates(e[i].states,r,n)}}});class Gn{constructor(){this.succeeded=!1,this.collider=null,this.point=new t.Vector3,this.normal=new t.Vector3,this.hitFraction=0,this._inPool=!1}}const Hn=new t.Vector2,zn=new w(new t.Vector3,new t.Vector3),kn=new Gn;t.InputManager.prototype.getSprite3DUnderPoint=function(r,n){kn.succeeded=!1;var a=r*=this._stage.clientScaleX,i=n*=this._stage.clientScaleY,s=r/t.Render._mainCanvas.width,o=n/t.Render._mainCanvas.height;r=this._stage.width*s,n=this._stage.height*o,Hn.setValue(r,n);for(let r of this._stage._scene3Ds){let n=r._physicsManager,s=r._UI3DManager,o=r._cameraPool;for(let r=o.length-1;r>=0;r--){let l=o[r],h=l.viewport,d=t.Config3D.pixelRatio;if(a>=h.x&&i>=h.y&&a<=h.width/d&&i<=h.height/d){l.viewportPointToRay(Hn,zn);let t=s.rayCast(zn);if(t)return t;if(!n)continue;if(n.rayCast(zn,kn)||l.clearFlag===e.CameraClearFlags.SolidColor||l.clearFlag===e.CameraClearFlags.Sky)break}}if(kn.succeeded)return kn.collider.owner}return null};let Wn=t.ClassUtils.regClass;Wn("Sprite3D",B),Wn("Scene3D",Qr),Wn("Camera",Kr),Wn("LightSprite",jr),Wn("AreaLightCom",sn),Wn("DirectionLightCom",tn),Wn("PointLightCom",rn),Wn("SpotLightCom",nn),Wn("RenderableSprite3D",U),Wn("MeshSprite3D",ht),Wn("MeshFilter",Te),Wn("BaseRender",j),Wn("MeshRenderer",De),Wn("SimpleSkinnedMeshSprite3D",Ar),Wn("SkinnedMeshSprite3D",Zt),Wn("SkinnedMeshRenderer",jt),Wn("SimpleSkinnedMeshRenderer",xr),Wn("SkyRenderer",ee),Wn("TrailFilter",Mr),Wn("TrailRenderer",qr),Wn("PixelLineRenderer",un),Wn("PixelLineData",dn),Wn("Gradient",ct),Wn("Transform3D",F),Wn("Lightmap",be),Wn("ReflectionProbe",K),Wn("VolumetricGI",an),Wn("StaticBatchVolume",yn),Wn("StaticInstanceBatchRender",Cn),Wn("SphericalHarmonicsL2",$r),Wn("Viewport",t.Viewport),Wn("Bounds",H),Wn("BoundBox",At),Wn("TextureCube",t.TextureCube),Wn("Mesh",ar),Wn("FloatKeyframe",h),Wn("RenderTexture",t.RenderTexture),Wn("Animator",Tn),Wn("AnimatorController",xn),Wn("AnimatorControllerLayer",mn),Wn("AnimatorState",pn),Wn("AnimationClip",x),Wn("AvatarMask",Sn),Wn("UI3D",Ln),Wn("Material",t.Material),Wn("BlinnPhongMaterial",xe),Wn("EffectMaterial",Zr),Wn("ExtendTerrainMaterial",Jr),Wn("PBRStandardMaterial",it),Wn("SkyBoxMaterial",st),Wn("SkyPanoramicMaterial",Cr),Wn("SkyProceduralMaterial",ot),Wn("UnlitMaterial",lt),Wn("ShurikenParticleMaterial",kt),Wn("TrailMaterial",Jt),Wn("ShuriKenParticle3D",Yt),Wn("ShurikenParticleRenderer",Wt),Wn("ShurikenParticleSystem",Ht),Wn("Burst",ut),Wn("Emission",Ft),Wn("BaseShape",Dt),Wn("BoxShape",Mt),Wn("CircleShape",Ct),Wn("ConeShape",vt),Wn("HemisphereShape",yt),Wn("SphereShape",It),Wn("FrameOverTime",ft),Wn("GradientAngularVelocity",pt),Wn("GradientColor",_t),Wn("GradientDataInt",St),Wn("GradientDataNumber",gt),Wn("GradientSize",Tt),Wn("GradientVelocity",Et),Wn("StartFrame",Bt),Wn("TextureSheetAnimation",Ot),Wn("ColorOverLifetime",mt),Wn("RotationOverLifetime",xt),Wn("SizeOverLifetime",Lt),Wn("VelocityOverLifetime",wt),Wn("LODInfo",ln),Wn("LODGroup",hn),Wn("DirectionLightCom",tn),Wn("MeshRenderer",De),Wn("MeshFilter",Te),Wn("MeshRenderer",De),Wn("SkinnedMeshRenderer",jt),Wn("SimpleSkinnedMeshRenderer",xr),Wn("SkyRenderer",ee),Wn("PostProcess",Je),Wn("PostProcessEffect",Xe),Wn("BloomEffect",yr),Wn("GaussianDoF",Or),Wn("ScalableAO",Lr),Wn("ColorGradEffect",Ze),Wn("LensFlareEffect",kr),Wn("LensFlareElement",Hr),Wn("LensFlareData",zr);class Yn{load(e){return e.loader.fetch(e.url,"json",e.progress.createCallback(),e.options).then((r=>{if(!r)return null;let n=new zr,a=t.URL.getPath(e.url),i=[],s=r.elements;if(s)for(let r=s.length-1;r>=0;r--){let n=s[r];if(n.texture&&n.texture._$uuid&&""!=n.texture._$uuid){let r=t.URL.getResURLByUUID(n.texture._$uuid);r.startsWith("res://")||(r=t.URL.join(a,r)),i.push(e.loader.load(r).then((e=>{n.texture=e})))}n.tint&&(n.tint=new t.Color(n.tint.r,n.tint.g,n.tint.b,n.tint.a)),n.positionOffset&&(n.positionOffset=new t.Vector2(n.positionOffset.x,n.positionOffset.y)),n.scale&&(n.scale=new t.Vector2(n.scale.x,n.scale.y))}return Promise.all(i).then((()=>(n.elements=s,n)))}))}}t.Loader.registerLoader(["lensflare"],Yn);var Xn={};class Qn{constructor(){Xn||(Xn={default:t.Texture2DArray.defaultTexture})}load(e){if(-1!=e.url.indexOf("internal/")){const r=Xn[t.Utils.getBaseName(e.url)];if(r)return Promise.resolve(r)}return e.loader.fetch(e.url,"json",e.progress.createCallback(),e.options).then((r=>{if(!r)return null;let n=r.width,a=r.height,i=r.depth,s=r.format,o=r.mipmap,l=r.sRGB,h=!!r.premultiplyAlpha,d=!!r.invertY,c=r.textures,u=[];for(let e=0;e<c.length;e++)u.push(c[e]);return Promise.all(u.map((t=>t?e.loader.fetch(t,"image",e.progress.createCallback(),e.options):Promise.resolve(null)))).then((e=>{if(t.LayaGL.renderEngine.getCapable(t.RenderCapable.Texture3D)){let r=new t.Texture2DArray(n,a,i,s,o,l);return r.setImageData(e,h,d),r}return null}))}))}}t.Loader.registerLoader(["tex2darray"],Qn,t.Loader.TEXTURE2DARRAY);class Kn{get min(){return this.getMin()}set min(e){this.setMin(e)}get max(){return this.getMax()}set max(e){this.setMax(e)}setMin(e){var t=this._boundBox.min;e!==t&&e.cloneTo(t),this._setUpdateFlag(Kn._UPDATE_CENTER|Kn._UPDATE_EXTENT,!0),this._setUpdateFlag(Kn._UPDATE_MIN,!1)}getMin(){var e=this._boundBox.min;return this._getUpdateFlag(Kn._UPDATE_MIN)&&(this._getMin(this.getCenter(),this.getExtent(),e),this._setUpdateFlag(Kn._UPDATE_MIN,!1)),e}setMax(e){var t=this._boundBox.max;e!==t&&e.cloneTo(t),this._setUpdateFlag(Kn._UPDATE_CENTER|Kn._UPDATE_EXTENT,!0),this._setUpdateFlag(Kn._UPDATE_MAX,!1)}getMax(){var e=this._boundBox.max;return this._getUpdateFlag(Kn._UPDATE_MAX)&&(this._getMax(this.getCenter(),this.getExtent(),e),this._setUpdateFlag(Kn._UPDATE_MAX,!1)),e}setCenter(e){e!==this._center&&e.cloneTo(this._center),this._getMin(this._center,this._extent,this._boundBox.min),this._getMax(this._center,this._extent,this._boundBox.max),this._setUpdateFlag(Kn._UPDATE_CENTER|Kn._UPDATE_MIN|Kn._UPDATE_MAX,!1)}getCenter(){return this._getUpdateFlag(Kn._UPDATE_CENTER)&&(this._getCenter(this.getMin(),this.getMax(),this._center),this._setUpdateFlag(Kn._UPDATE_CENTER,!1)),this._center}setExtent(e){e!==this._extent&&e.cloneTo(this._extent),this._getMin(this._center,this._extent,this._boundBox.min),this._getMax(this._center,this._extent,this._boundBox.max),this._setUpdateFlag(Kn._UPDATE_CENTER|Kn._UPDATE_MIN|Kn._UPDATE_MAX,!1)}getExtent(){return this._getUpdateFlag(Kn._UPDATE_EXTENT)&&(this._getExtent(this.getMin(),this.getMax(),this._extent),this._setUpdateFlag(Kn._UPDATE_EXTENT,!1)),this._extent}constructor(e,r){this._updateFlag=0,this._center=new t.Vector3,this._extent=new t.Vector3,this._boundBox=new At(new t.Vector3,new t.Vector3),e&&e.cloneTo(this._boundBox.min),r&&r.cloneTo(this._boundBox.max),this._setUpdateFlag(Kn._UPDATE_MIN|Kn._UPDATE_MAX,!1),this._setUpdateFlag(Kn._UPDATE_CENTER|Kn._UPDATE_EXTENT,!0)}_getUpdateFlag(e){return 0!=(this._updateFlag&e)}_setUpdateFlag(e,t){t?this._updateFlag|=e:this._updateFlag&=~e}_getCenter(e,r,n){t.Vector3.add(e,r,n),t.Vector3.scale(n,.5,n)}_getExtent(e,r,n){t.Vector3.subtract(r,e,n),t.Vector3.scale(n,.5,n)}_getMin(e,r,n){t.Vector3.subtract(e,r,n)}_getMax(e,r,n){t.Vector3.add(e,r,n)}_rotateExtents(e,t,r){var n=e.x,a=e.y,i=e.z,s=t.elements;r.x=Math.abs(s[0]*n)+Math.abs(s[4]*a)+Math.abs(s[8]*i),r.y=Math.abs(s[1]*n)+Math.abs(s[5]*a)+Math.abs(s[9]*i),r.z=Math.abs(s[2]*n)+Math.abs(s[6]*a)+Math.abs(s[10]*i)}_tranform(e,r){var n=r._center,a=r._extent;t.Vector3.transformCoordinate(this.getCenter(),e,n),this._rotateExtents(this.getExtent(),e,a),r._boundBox.setCenterAndExtent(n,a),r._updateFlag=0}_getBoundBox(){if(this._updateFlag&Kn._UPDATE_MIN){var e=this._boundBox.min;this._getMin(this.getCenter(),this.getExtent(),e),this._setUpdateFlag(Kn._UPDATE_MIN,!1)}if(this._updateFlag&Kn._UPDATE_MAX){var t=this._boundBox.max;this._getMax(this.getCenter(),this.getExtent(),t),this._setUpdateFlag(Kn._UPDATE_MAX,!1)}return this._boundBox}calculateBoundsintersection(e){var t=this.getMax(),r=this.getMin(),n=e.getMax(),a=e.getMin(),i=jn,s=Zn,o=this.getExtent(),l=e.getExtent();return i.setValue(Math.max(t.x,n.x)-Math.min(r.x,a.x),Math.max(t.y,n.y)-Math.min(r.y,a.y),Math.max(t.z,n.z)-Math.min(r.z,a.z)),s.setValue(2*(o.x+l.x),2*(o.y+l.y),2*(o.z+l.z)),i.x>s.x||i.y>s.y||i.z>s.z?-1:(s.x-i.x)*(s.y-i.y)*(s.z-i.z)}cloneTo(e){var t=e;this.getMin().cloneTo(t._boundBox.min),this.getMax().cloneTo(t._boundBox.max),this.getCenter().cloneTo(t._center),this.getExtent().cloneTo(t._extent),t._updateFlag=0}clone(){var e=new Kn(new t.Vector3,new t.Vector3);return this.cloneTo(e),e}}Kn._UPDATE_MIN=1,Kn._UPDATE_MAX=2,Kn._UPDATE_CENTER=4,Kn._UPDATE_EXTENT=8;const jn=new t.Vector3,Zn=new t.Vector3;class Jn{get center(){return this._center}set center(e){e.cloneTo(this._center)}get radius(){return this._radius}set radius(e){this._radius=e}constructor(e=new t.Vector3,r=0){this._center=e,this._radius=r}toDefault(){this._center.toDefault(),this._radius=0}static createFromSubPoints(e,r,n,a){if(null==e)throw new Error("points");if(r<0||r>=e.length)throw new Error("start"+r+"Must be in the range [0, "+(e.length-1)+"]");if(n<0||r+n>e.length)throw new Error("count"+n+"Must be in the range <= "+e.length+"}");var i=r+n,s=Jn._tempVector3;s.x=0,s.y=0,s.z=0;for(var o=r;o<i;++o)t.Vector3.add(e[o],s,s);var l=a.center;t.Vector3.scale(s,1/n,l);var h=0;for(o=r;o<i;++o){var d=t.Vector3.distanceSquared(l,e[o]);d>h&&(h=d)}a.radius=Math.sqrt(h)}static createfromPoints(e,t){if(null==e)throw new Error("points");Jn.createFromSubPoints(e,0,e.length,t)}intersectsRayDistance(e){return N.intersectsRayAndSphereRD(e,this)}intersectsRayPoint(e,t){return N.intersectsRayAndSphereRP(e,this,t)}cloneTo(e){var t=e;this._center.cloneTo(t._center),t._radius=this._radius}clone(){var e=new Jn(new t.Vector3,0);return this.cloneTo(e),e}}Jn._tempVector3=new t.Vector3;class qn{constructor(e){if(!(e instanceof Array)||4!==e.length)throw new Error("Rand:Seed must be an array with 4 numbers");this._state0U=0|e[0],this._state0L=0|e[1],this._state1U=0|e[2],this._state1L=0|e[3]}randomint(){var e=this._state0U,t=this._state0L,r=this._state1U,n=this._state1L,a=(n>>>0)+(t>>>0),i=r+e+(a/2>>>31)>>>0,s=a>>>0;this._state0U=r,this._state0L=n;var o=0,l=0;o=(e^=o=e<<23|(-512&t)>>>9)^r,l=(t^=l=t<<23)^n;o^=e>>>18,l^=t>>>18|(262143&e)<<14;return o^=r>>>5,l^=n>>>5|(31&r)<<27,this._state1U=o,this._state1L=l,[i,s]}random(){var e=this.randomint(),t=e[0],r=1023<<20|t>>>12,n=0|(e[1]>>>12|(4095&t)<<20);return qn._CONVERTION_BUFFER.setUint32(0,r,!1),qn._CONVERTION_BUFFER.setUint32(4,n,!1),qn._CONVERTION_BUFFER.getFloat64(0,!1)-1}}var $n,ea,ta,ra,na,aa,ia,sa;qn._CONVERTION_BUFFER=new DataView(new ArrayBuffer(8)),qn.defaultRand=new qn([0,Date.now()/65536,0,Date.now()%65536]),e.ShadowLightType=void 0,($n=e.ShadowLightType||(e.ShadowLightType={}))[$n.DirectionLight=0]="DirectionLight",$n[$n.SpotLight=1]="SpotLight",$n[$n.PointLight=2]="PointLight";class oa{constructor(){this.boundFrustum=new V(new t.Matrix4x4)}}class la{}la.COLLISIONFILTERGROUP_DEFAULTFILTER=1,la.COLLISIONFILTERGROUP_STATICFILTER=2,la.COLLISIONFILTERGROUP_KINEMATICFILTER=4,la.COLLISIONFILTERGROUP_DEBRISFILTER=8,la.COLLISIONFILTERGROUP_SENSORTRIGGER=16,la.COLLISIONFILTERGROUP_CHARACTERFILTER=32,la.COLLISIONFILTERGROUP_CUSTOMFILTER1=64,la.COLLISIONFILTERGROUP_CUSTOMFILTER2=128,la.COLLISIONFILTERGROUP_CUSTOMFILTER3=256,la.COLLISIONFILTERGROUP_CUSTOMFILTER4=512,la.COLLISIONFILTERGROUP_CUSTOMFILTER5=1024,la.COLLISIONFILTERGROUP_CUSTOMFILTER6=2048,la.COLLISIONFILTERGROUP_CUSTOMFILTER7=4096,la.COLLISIONFILTERGROUP_CUSTOMFILTER8=8192,la.COLLISIONFILTERGROUP_CUSTOMFILTER9=16384,la.COLLISIONFILTERGROUP_CUSTOMFILTER10=32768,la.COLLISIONFILTERGROUP_ALLFILTER=-1,la.PHYSXDEFAULTMASKVALUE=4294967295;class ha{static get fullScreen(){return new ha(-1,-1)}get width(){return-1===this._width?ie.clientWidth:this._width}get height(){return-1===this._height?ie.clientHeight:this._height}constructor(e,t){this._width=0,this._height=0,this._width=e,this._height=t}}e.RenderCMDType=void 0,(ea=e.RenderCMDType||(e.RenderCMDType={}))[ea.DrawNode=0]="DrawNode",ea[ea.DrawElement=1]="DrawElement",ea[ea.Blit=2]="Blit",ea[ea.ChangeData=3]="ChangeData",ea[ea.ChangeShaderDefine=4]="ChangeShaderDefine",ea[ea.ChangeViewPort=5]="ChangeViewPort",ea[ea.ChangeRenderTarget=6]="ChangeRenderTarget";class da{get indexType(){return this._indexType}get indexTypeByteCount(){return this._indexTypeByteCount}get indexCount(){return this._indexCount}get canRead(){return this._canRead}constructor(e,r,n=t.BufferUsage.Static,a=!1){switch(this._indexType=t.IndexFormat.UInt16,this._deviceBuffer=t.LayaGL.renderDeviceFactory.createIndexBuffer(n),this._deviceBuffer.indexType=this._indexType=e,this._deviceBuffer.indexCount=this._indexCount=r,this._canRead=a,this.bufferUsage=n,e){case t.IndexFormat.UInt32:this._indexTypeByteCount=4;break;case t.IndexFormat.UInt16:this._indexTypeByteCount=2;break;case t.IndexFormat.UInt8:this._indexTypeByteCount=1;break;default:throw new Error("unidentification index type.")}var i=this._indexTypeByteCount*r;if(this._byteLength=i,this._deviceBuffer._setIndexDataLength(i),a)switch(e){case t.IndexFormat.UInt32:this._buffer=new Uint32Array(r);break;case t.IndexFormat.UInt16:this._buffer=new Uint16Array(r);break;case t.IndexFormat.UInt8:this._buffer=new Uint8Array(r)}}setData(e,r=0,n=0,a=4294967295){var i=this._indexTypeByteCount;if(0!==n||4294967295!==a)switch(this._indexType){case t.IndexFormat.UInt32:e=new Uint32Array(e.buffer,n*i,a);break;case t.IndexFormat.UInt16:e=new Uint16Array(e.buffer,n*i,a);break;case t.IndexFormat.UInt8:e=new Uint8Array(e.buffer,n*i,a)}if(this._deviceBuffer._setIndexData(e,r*i),this._canRead)if(0!==r||0!==n||4294967295!==a){var s=this._buffer.length-r;if(a>s&&(a=s),typeof e==typeof this._buffer&&e.length==a)this._buffer.set(e,r);else for(var o=0;o<a;o++)this._buffer[r+o]=e[o]}else this._buffer=e}getData(){if(this._canRead)return this._buffer;throw new Error("Can't read data from VertexBuffer with only write flag!")}destroy(){this._deviceBuffer.destroy(),this._buffer=null,this._byteLength=0,this._indexCount=0}}class ca{get vertexDeclaration(){return this._deviceBuffer.vertexDeclaration}set vertexDeclaration(e){this._deviceBuffer.vertexDeclaration=e}get instanceBuffer(){return this._deviceBuffer.instanceBuffer}set instanceBuffer(e){this._deviceBuffer.instanceBuffer=e}get canRead(){return this._canRead}constructor(e,r,n=!1){this._float32Reader=null,this._deviceBuffer=t.LayaGL.renderDeviceFactory.createVertexBuffer(r),this._canRead=n,this._byteLength=e,this._deviceBuffer.setDataLength(e),this.bufferUsage=r,this._canRead&&(this._buffer=new Uint8Array(e),this._float32Reader=new Float32Array(this._buffer.buffer))}setData(e,t=0,r=0,n=Number.MAX_SAFE_INTEGER){if(this._deviceBuffer.setData(e,t,r,n),0!==r||n!==Number.MAX_SAFE_INTEGER){var a=new Uint8Array(e,r,n);this._canRead&&this._buffer.set(a,t)}else this._canRead&&this._buffer.set(new Uint8Array(e),t)}getUint8Data(){if(this._canRead)return this._buffer;throw new Error("Can't read data from VertexBuffer with only write flag!")}getFloat32Data(){if(this._canRead)return this._float32Reader;throw new Error("Can't read data from VertexBuffer with only write flag!")}markAsUnreadbale(){this._canRead=!1,this._buffer=null,this._float32Reader=null}destroy(){this._deviceBuffer.destroy(),this._buffer=null,this._float32Reader=null,this._byteLength=0}}class ua{createVertexBuffer3D(e,t,r=!1){return new ca(e,t,r)}createIndexBuffer3D(e,r,n=t.BufferUsage.Static,a=!1){return new da(e,r,n,a)}}t.Laya.addBeforeInitCallback((()=>{A.renderOBJCreate||(A.renderOBJCreate=new ua)})),e.ECharacterCapable=void 0,(ta=e.ECharacterCapable||(e.ECharacterCapable={}))[ta.Charcater_Gravity=0]="Charcater_Gravity",ta[ta.Charcater_CollisionGroup=1]="Charcater_CollisionGroup",ta[ta.Charcater_WorldPosition=2]="Charcater_WorldPosition",ta[ta.Charcater_Move=3]="Charcater_Move",ta[ta.Charcater_Jump=4]="Charcater_Jump",ta[ta.Charcater_StepOffset=5]="Charcater_StepOffset",ta[ta.Character_UpDirection=6]="Character_UpDirection",ta[ta.Character_FallSpeed=7]="Character_FallSpeed",ta[ta.Character_SlopeLimit=8]="Character_SlopeLimit",ta[ta.Character_PushForce=9]="Character_PushForce",ta[ta.Character_Radius=10]="Character_Radius",ta[ta.Character_Height=11]="Character_Height",ta[ta.Character_offset=12]="Character_offset",ta[ta.Character_Skin=13]="Character_Skin",ta[ta.Character_minDistance=14]="Character_minDistance",ta[ta.Character_EventFilter=15]="Character_EventFilter",ta[ta.Character_SimulateGravity=16]="Character_SimulateGravity",e.EColliderCapable=void 0,(ra=e.EColliderCapable||(e.EColliderCapable={}))[ra.Collider_CollisionGroup=0]="Collider_CollisionGroup",ra[ra.Collider_Friction=1]="Collider_Friction",ra[ra.Collider_RollingFriction=2]="Collider_RollingFriction",ra[ra.Collider_Restitution=3]="Collider_Restitution",ra[ra.Collider_AllowTrigger=4]="Collider_AllowTrigger",ra[ra.Collider_DynamicFriction=5]="Collider_DynamicFriction",ra[ra.Collider_StaticFriction=6]="Collider_StaticFriction",ra[ra.Collider_BounceCombine=7]="Collider_BounceCombine",ra[ra.Collider_FrictionCombine=8]="Collider_FrictionCombine",ra[ra.Collider_EventFilter=9]="Collider_EventFilter",ra[ra.Collider_CollisionDetectionMode=10]="Collider_CollisionDetectionMode",ra[ra.RigidBody_CanKinematic=11]="RigidBody_CanKinematic",ra[ra.RigidBody_AllowSleep=12]="RigidBody_AllowSleep",ra[ra.RigidBody_Gravity=13]="RigidBody_Gravity",ra[ra.RigidBody_LinearDamp=14]="RigidBody_LinearDamp",ra[ra.RigidBody_AngularDamp=15]="RigidBody_AngularDamp",ra[ra.RigidBody_LinearVelocity=16]="RigidBody_LinearVelocity",ra[ra.RigidBody_AngularVelocity=17]="RigidBody_AngularVelocity",ra[ra.RigidBody_Mass=18]="RigidBody_Mass",ra[ra.RigidBody_WorldPosition=19]="RigidBody_WorldPosition",ra[ra.RigidBody_WorldOrientation=20]="RigidBody_WorldOrientation",ra[ra.RigidBody_InertiaTensor=21]="RigidBody_InertiaTensor",ra[ra.RigidBody_MassCenter=22]="RigidBody_MassCenter",ra[ra.RigidBody_MaxAngularVelocity=23]="RigidBody_MaxAngularVelocity",ra[ra.RigidBody_MaxDepenetrationVelocity=24]="RigidBody_MaxDepenetrationVelocity",ra[ra.RigidBody_SleepThreshold=25]="RigidBody_SleepThreshold",ra[ra.RigidBody_SleepAngularVelocity=26]="RigidBody_SleepAngularVelocity",ra[ra.RigidBody_SolverIterations=27]="RigidBody_SolverIterations",ra[ra.RigidBody_AllowDetectionMode=28]="RigidBody_AllowDetectionMode",ra[ra.RigidBody_AllowKinematic=29]="RigidBody_AllowKinematic",ra[ra.RigidBody_AllowCharacter=30]="RigidBody_AllowCharacter",ra[ra.RigidBody_LinearFactor=31]="RigidBody_LinearFactor",ra[ra.RigidBody_AngularFactor=32]="RigidBody_AngularFactor",ra[ra.RigidBody_ApplyForce=33]="RigidBody_ApplyForce",ra[ra.RigidBody_ClearForce=34]="RigidBody_ClearForce",ra[ra.RigidBody_ApplyForceWithOffset=35]="RigidBody_ApplyForceWithOffset",ra[ra.RigidBody_ApplyTorque=36]="RigidBody_ApplyTorque",ra[ra.RigidBody_ApplyImpulse=37]="RigidBody_ApplyImpulse",ra[ra.RigidBody_ApplyTorqueImpulse=38]="RigidBody_ApplyTorqueImpulse",e.EJointCapable=void 0,(na=e.EJointCapable||(e.EJointCapable={}))[na.Joint_Anchor=0]="Joint_Anchor",na[na.Joint_ConnectAnchor=1]="Joint_ConnectAnchor";class _a{static cullingRenderBounds(e,t){for(var r=t.cullPlaneCount,n=t.cullPlanes,a=e._imp.getMin(),i=e._imp.getMax(),s=a.x,o=a.y,l=a.z,h=i.x,d=i.y,c=i.z,u=!0,_=0;_<r;_++){var m=n[_],f=m.normal;if(m.distance+f.x*(f.x<0?s:h)+f.y*(f.y<0?o:d)+f.z*(f.z<0?l:c)<0){u=!1;break}}return u}}_a._tempV30=new t.Vector3,_a._tempV31=new t.Vector3;class ma extends Kr{constructor(){super(...arguments),this.isWebXR=!0}get renderTarget(){return this._internalRenderTexture}set renderTarget(e){this._internalRenderTexture=e}set clientWidth(e){this._clientWidth=e}set clientHeight(e){this._clientHeight=e}get clientWidth(){return this._clientWidth}get clientHeight(){return this._clientHeight}_restoreView(e){var t,r,n=this.viewport,a=n.width,i=n.height;this._needInternalRenderTexture()?(t=0,r=0):(t=n.x,r=this._getCanvasHeight()-n.y-i),e.viewport(t,r,a,i)}render(){if(this.activeInHierarchy){this.viewport;var e=ie._instance;e.scene=this._scene,e.pipelineMode=e.configPipeLineMode}}_renderMainPass(e,t,r,n,a,i){}_calculateProjectionMatrix(){}clear(e){e.viewport(0,0,this._clientWidth,this._clientHeight),e.scissor(0,0,this._clientWidth,this._clientHeight),e.clearColor(this.clearColor.r,this.clearColor.g,this.clearColor.b,this.clearColor.a),t.RenderStateContext.setDepthMask(!0),e.clear(e.COLOR_BUFFER_BIT|e.DEPTH_BUFFER_BIT)}destroy(){super.destroy(!0)}}class fa extends t.RenderTexture{constructor(){super(1,1,1,t.RenderTargetFormat.STENCIL_8,!1,1),this.frameLoop=-1}set frameBuffer(e){this._frameBuffer=e}_create(e,t){}}class ga extends t.EventDispatcher{constructor(){super(),this.currentTimestamp=-1,this.defaultHeightCompensation=1.7,this._sessionEnded=!1}get referenceSpace(){return this._referenceSpace}set referenceSpace(e){this._referenceSpace=e}get sessionMode(){return this._sessionMode}exitXR(){this.endXRRenderLoop(),this.event(ga.EVENT_MANAGER_END)}initializeXRGL(e,t){return t.makeXRCompatible().then((()=>!0))}initializeAsync(){return this._xrNavigator=navigator,this._xrNavigator.xr?Promise.resolve():Promise.reject("WebXR not available")}isSessionSupportedAsync(e){if(!navigator.xr)return Promise.resolve(!1);this._xrNavigator=navigator;return navigator.xr.isSessionSupported||navigator.xr.supportsSession?navigator.xr.isSessionSupported(e):Promise.resolve(!1)}initializeSessionAsync(e="immersive-vr",t={}){return this._xrNavigator.xr.requestSession("immersive-vr").then((t=>(this.session=t,this._sessionMode=e,this._sessionEnded=!1,this.session.addEventListener("end",(()=>{this._sessionEnded=!0,this.exitXR()}),{once:!0}),this.session)))}resetReferenceSpace(){this.referenceSpace=this.baseReferenceSpace}runXRRenderLoop(){this.session.requestAnimationFrame.bind(this.session);let fn=(e,r)=>{this._updateByXrFrame(r,e),this.event(ga.EVENT_FRAME_LOOP,[r]),t.ILaya.stage._loop(),this.session.requestAnimationFrame(fn)};this.session.requestAnimationFrame(fn)}endXRRenderLoop(){}_updateByXrFrame(e,t){this.currentFrame=e,this.currentTimestamp=t}setReferenceSpaceTypeAsync(e="local-floor"){return this.session.requestReferenceSpace(e).then((e=>e),(e=>this.session.requestReferenceSpace("viewer").then((e=>{const t=new XRRigidTransform({x:0,y:-this.defaultHeightCompensation,z:0});return e.getOffsetReferenceSpace(t)}),(e=>{throw'XR initialization failed: required "viewer" reference space type not supported.'})))).then((e=>(this.referenceSpace=this.baseReferenceSpace=e,this.referenceSpace)))}updateRenderStateAsync(e){return e.baseLayer&&(this._baseLayer=e.baseLayer),this.session.updateRenderState(e)}get currentFrameRate(){var e;return null===(e=this.session)||void 0===e?void 0:e.frameRate}get supportedFrameRates(){var e;return null===(e=this.session)||void 0===e?void 0:e.supportedFrameRates}updateTargetFrameRate(e){return this.session.updateTargetFrameRate(e)}destroy(){this._sessionEnded||this.exitXR()}}ga.EVENT_MANAGER_END="xrManagerDestory",ga.EVENT_FRAME_LOOP="xrFrameLoop";class pa{get position(){return this._position}set position(e){e.cloneTo(this._position)}get rotationQuaternion(){return this._referenceQuaternion}set rotationQuaternion(e){e.cloneTo(this._referenceQuaternion)}get rigCameras(){return this._rigCameras}constructor(e,r=null){this._referenceQuaternion=new t.Quaternion,this._referencedPosition=new t.Vector3,this._firstFrame=!0,this._XRRenderTexture=new fa,this._rigCameras=new Array,this._position=new t.Vector3,this.owner=e,this.owner.enableRender=!1,this.owner.aspectRatio||console.warn("owner is not Camera"),this._webXRSessionManager=r,this._webXRSessionManager.on(ga.EVENT_FRAME_LOOP,this,this._updateFromXRSession),this._webXRSessionManager.on(ga.EVENT_FRAME_LOOP,this,this._updateReferenceSpace),this._webXRSessionManager.on(ga.EVENT_MANAGER_END,this,this.destroy)}_updateFromXRSession(){let e=this._webXRSessionManager.currentFrame&&this._webXRSessionManager.currentFrame.getViewerPose(this._webXRSessionManager.referenceSpace);const t=e.transform.position,r=e.transform.orientation;this._referenceQuaternion.setValue(r.x,r.y,r.z,r.w),this._referencedPosition.setValue(t.x,t.y,t.z),this._firstFrame?(this._firstFrame=!1,this.position.y+=this._referencedPosition.y,this._referenceQuaternion.setValue(0,0,0,1)):(this.rotationQuaternion=this._referenceQuaternion,this.position=this._referencedPosition),this.rigCameras.length!==e.views.length&&this._updateNumberOfRigCameras(e.views.length),e.views.forEach(((e,t)=>{const r=this.rigCameras[t];"right"===e.eye?r.name="right":"left"===e.eye&&(r.name="left");const n=e.transform.position,a=e.transform.orientation;if(r.transform.position.setValue(n.x,n.y,n.z),r.transform.rotation.setValue(a.x,a.y,a.z,a.w),r.transform.position=r.transform.position,r.transform.rotation=r.transform.rotation,this._webXRSessionManager.session.renderState.baseLayer){var i=this._webXRSessionManager.session.renderState.baseLayer.getViewport(e),s=this._webXRSessionManager.session.renderState.baseLayer.framebufferWidth,o=this._webXRSessionManager.session.renderState.baseLayer.framebufferHeight;this._XRRenderTexture.frameBuffer=this._webXRSessionManager.session.renderState.baseLayer.framebuffer,r.renderTarget=this._XRRenderTexture,r.clientWidth=s,r.clientHeight=o;var l=r.viewport;l.x=i.x,l.y=i.y,l.width=i.width,l.height=i.height,r.viewport=l,r.projectionMatrix.cloneByArray(e.projectionMatrix)}}))}_updateNumberOfRigCameras(e=1){for(;this.rigCameras.length<e;){var t=new ma(this.owner.aspectRatio,this.owner.nearPlane,this.owner.farPlane);t.clearFlag=this.owner.clearFlag,t.clearColor=this.owner.clearColor,this.owner.addChild(t),this.rigCameras.push(t)}for(;this.rigCameras.length>e;){let e=this.rigCameras.pop();this.owner.removeChild(e)}}_updateReferenceSpace(){}destroy(){this.owner.enableRender=!0,this._webXRSessionManager.off(ga.EVENT_FRAME_LOOP,this,this._updateFromXRSession),this._webXRSessionManager.off(ga.EVENT_FRAME_LOOP,this,this._updateReferenceSpace),this._webXRSessionManager.off(ga.EVENT_MANAGER_END,this,this.destroy),this._rigCameras.forEach((e=>{e.destroy()})),this._rigCameras=null,this._XRRenderTexture.destroy()}}class Sa extends t.EventDispatcher{constructor(e,t){super(),this.axisData=new Array,this.handness=e,this.axisData.length=t,this.axisLength=t}update(e){for(let r=0,n=0;r<e.axes.length;r+=2,++n)this.axisData[n]||(this.axisData[n]=new t.Vector2),this.axisData[n].setValue(e.axes[r],e.axes[r+1]),this.outPutStickValue(this.axisData[n],n)}outPutStickValue(e,t){const r=Sa.EVENT_OUTPUT+t.toString();this.event(r,[e])}destroy(){for(let e=0;e<this.axisLength;e++){let t=Sa.EVENT_OUTPUT+e.toString();this.offAll(t)}}}Sa.EVENT_OUTPUT="outputAxi_id";class Ta extends t.EventDispatcher{constructor(e,t){super(),this.lastTouch=!1,this.lastPress=!1,this.lastPressValue=0,this.touch=!1,this.press=!1,this.pressValue=0,this.handness=e,this.index=t}update(e){this.lastTouch=this.touch,this.lastPress=this.press,this.lastPressValue=this.pressValue,this.touch=e.touched,this.press=e.pressed,this.pressValue=e.value,(this.lastTouch||this.touch)&&(this.lastTouch!=this.touch&&this.touch?this.touchEnter():this.lastTouch==this.touch&&this.touch?this.touchStay():this.lastTouch==this.touch||this.touch||this.touchOut(),this.lastPress!=this.press&&this.press?this.pressEnter():this.lastPress==this.press&&this.press?this.pressStay():this.lastPress==this.press||this.press||this.pressOut(),this.touch&&this.outpressed())}touchEnter(){this.event(Ta.EVENT_TOUCH_ENTER)}touchStay(){this.event(Ta.EVENT_TOUCH_STAY)}touchOut(){this.event(Ta.EVENT_TOUCH_OUT)}pressEnter(){this.event(Ta.EVENT_PRESS_ENTER)}pressStay(){this.event(Ta.EVENT_PRESS_STAY)}pressOut(){this.event(Ta.EVENT_PRESS_OUT)}outpressed(){this.event(Ta.EVENT_PRESS_VALUE,[this.pressValue])}destroy(){this.offAll(Ta.EVENT_PRESS_ENTER),this.offAll(Ta.EVENT_PRESS_STAY),this.offAll(Ta.EVENT_PRESS_OUT),this.offAll(Ta.EVENT_PRESS_ENTER),this.offAll(Ta.EVENT_PRESS_STAY),this.offAll(Ta.EVENT_PRESS_OUT),this.offAll(Ta.EVENT_PRESS_VALUE)}}Ta.EVENT_TOUCH_ENTER="touchEnter",Ta.EVENT_TOUCH_STAY="touchStay",Ta.EVENT_TOUCH_OUT="touchOut",Ta.EVENT_PRESS_ENTER="pressEnter",Ta.EVENT_PRESS_STAY="pressStay",Ta.EVENT_PRESS_OUT="pressOut",Ta.EVENT_PRESS_VALUE="outpressed";class Ea extends t.EventDispatcher{constructor(e){super(),this.preButtonEventList=[],this.preAxisEventList=[],this.handness=e,this.position=new t.Vector3,this.rotation=new t.Quaternion,this.ray=new w(new t.Vector3,new t.Vector3)}_updateByXRPose(e,r){const n=e.getPose(this._inputSource.targetRaySpace,r);if(this._lastXRPose=n,n){const e=n.transform.position,r=n.transform.orientation;Ea.tempQua.setValue(r.x,r.y,r.z,r.w),this.ray.origin.setValue(e.x,e.y,e.z),t.Vector3.transformQuat(t.Vector3.UnitZ,Ea.tempQua,this.ray.direction),t.Vector3.scale(this.ray.direction,-1,this.ray.direction)}if(this._inputSource.gripSpace){let t=e.getPose(this._inputSource.gripSpace,r);if(t){const e=t.transform.position,r=t.transform.orientation;this.position.setValue(e.x,e.y,e.z),this.rotation.setValue(r.x,r.y,r.z,r.w)}}this.event(Ea.EVENT_FRAMEUPDATA_WEBXRINPUT,[this]),this._handleProcessGamepad()}_handleProcessGamepad(){const e=this._inputSource.gamepad;if(this.gamepadAxis||(this.gamepadAxis=new Sa(this.handness,e.axes.length),this.preAxisEventList.forEach((e=>{this.gamepadAxis.on(e.eventnam,e.caller,e.listener)}))),!this.gamepadButton){this.gamepadButton=[];for(let t=0;t<e.buttons.length;++t)this.gamepadButton.push(new Ta(this.handness,t));this.preButtonEventList.forEach((e=>{this.addButtonEvent(e.index,e.type,e.caller,e.listener)}))}this.gamepadAxis.update(e);for(let t=0;t<e.buttons.length;++t){this.gamepadButton[t].update(e.buttons[t])}}addButtonEvent(e,t,r,n){if(this.gamepadButton){this.gamepadButton[e].on(t,r,n)}else this.preButtonEventList.push({index:e,type:t,caller:r,listener:n})}addAxisEvent(e,t,r,n){if(this.gamepadAxis){const a=t+e.toString();this.gamepadAxis.on(a,r,n)}else this.preAxisEventList.push({eventnam:t+e.toString(),caller:r,listener:n})}offAxisEvent(e,t,r,n){if(this.gamepadAxis){const a=t+e.toString();this.gamepadAxis.off(a,r,n)}}offButtonEvent(e,t,r,n){if(this.gamepadButton){this.gamepadButton[e].off(t,r,n)}}destroy(){this.preButtonEventList=null,this.ray=null,this.position=null,this.rotation=null,this.gamepadAxis.destroy(),this.gamepadButton.forEach((e=>{e.destroy()}))}}Ea.HANDNESS_LEFT="left",Ea.HANDNESS_RIGHT="right",Ea.EVENT_FRAMEUPDATA_WEBXRINPUT="frameXRInputUpdate",Ea.tempQua=new t.Quaternion;class xa{constructor(e,r){this.controllers=new Map,this.controllerHandMesh=new Map,this.controllerLineRender=new Map,this.lineColor=t.Color.RED,this.rayLength=2,this.webXRSessionManager=e,this.webXRCameraManager=r,this.webXRSessionManager.on(ga.EVENT_MANAGER_END,this,this.destory),this.webXRSessionManager.on(ga.EVENT_FRAME_LOOP,this,this._updateFromXRFrame)}_updataMeshRender(e){const r=e.handness;if(this.controllerHandMesh.has(r)){let t=this.controllerHandMesh.get(r);t.transform.position=e.position,t.transform.rotation=e.rotation}if(this.controllerLineRender.has(r)){let n=this.controllerLineRender.get(r);n.clear();let a=e.ray;xa.tempVec.setValue(a.origin.x,a.origin.y,a.origin.z),t.Vector3.scale(a.direction,this.rayLength,xa.tempVec1),t.Vector3.add(xa.tempVec,xa.tempVec1,xa.tempVec1),n.addLine(xa.tempVec,xa.tempVec1,this.lineColor,this.lineColor)}}_updateFromXRFrame(e){const t=this.webXRSessionManager.session,r=this.webXRSessionManager.referenceSpace;for(let n of t.inputSources){const t=n.handedness;let a;a=this.controllers.has(t)?this.controllers.get(t):this.getController(t),a&&(a=this.controllers.get(t),a._inputSource=n,a._updateByXRPose(e,r))}}bindMeshNode(e,t){this.controllerHandMesh.set(t,e)}bindRayNode(e,t){this.controllerLineRender.set(t,e)}getController(e){if("left"!=e&&"right"!=e)return null;if(!this.controllers.has(e)){let t=new Ea(e);this.controllers.set(e,t),t.on(Ea.EVENT_FRAMEUPDATA_WEBXRINPUT,this,this._updataMeshRender)}return this.controllers.get(e)}destory(){this.webXRSessionManager.off(ga.EVENT_FRAME_LOOP,this,this._updateFromXRFrame);for(let e in this.controllers)this.controllers.get(e).off("frameXRInputUpdate",this,this._updataMeshRender),this.controllers.get(e).destroy();this.controllers=null,this.controllerHandMesh=null,this.controllerLineRender=null}}xa.tempVec=new t.Vector3,xa.tempVec1=new t.Vector3;class Aa{static supportXR(e){return Aa.xr_Manager.isSessionSupportedAsync(e).then((e=>(Aa.supported=e,e)))}static enterXRAsync(e,r,n){return"immersive-ar"===e&&"unbounded"!==r&&console.warn("We recommend using 'unbounded' reference space type when using 'immersive-ar' session mode"),Aa.xr_Manager.initializeSessionAsync(e).then((()=>Aa.xr_Manager.setReferenceSpaceTypeAsync(r))).then((()=>Aa.xr_Manager.initializeXRGL(e,t.LayaGL.renderEngine.gl))).then((()=>(Aa.glInstance=t.LayaGL.renderEngine.gl,Aa.xr_Manager.updateRenderStateAsync({depthFar:n.depthFar,depthNear:n.depthNear,baseLayer:new XRWebGLLayer(Aa.xr_Manager.session,t.LayaGL.renderEngine.gl)})))).then((()=>(Aa.xr_Manager.runXRRenderLoop(),Aa.xr_Manager)))}static setWebXRCamera(e,t){return new pa(e,t)}static setWebXRInput(e,t){return new xa(e,t)}}Aa.xr_Manager=new ga,Aa.supported=!1,Aa.canvasOptions={antialias:!0,depth:!0,stencil:!1,alpha:!0,multiview:!1,framebufferScaleFactor:1};class Da{constructor(e,t,r,n,a,i){this.destroyed=!1,this.sn=e,this.cluster=t,this.index=r,this.size=n,this.alignedSize=a,this.offset=a*r,this.user=i,this.uploadNum=0,this.moved=!1}needUpload(){this.uploadNum++,this.cluster.needUpload[this.index]=!0}destroy(){return this.destroyed?(console.warn("UniformBufferBlock: object alreay destroyed!"),!1):(this.cluster=null,this.user=null,this.destroyed=!0,!0)}}class Ra{constructor(e,t,r){this.sn=0,this.needUpload=[],this.destroyed=!1,this.blocks=[],this.expand=10,this.manager=r,this.blockSize=e,this.blockNum=t,this.totalSize=e*t,this.data=new ArrayBuffer(this.totalSize),this.move=new Uint8Array(this.blockSize),this.buffer=this.manager.createGPUBuffer(this.totalSize),this.needUpload.length=this.blockNum,this.needUpload.fill(!1),this.manager.statisGPUMemory(this.totalSize)}get usedNum(){return this.blocks.length}_expandBuffer(){let e=this.blockNum;this.blockNum+=this.expand,this.blockNum>this.manager.clusterMaxBlock&&(this.blockNum=this.manager.clusterMaxBlock),e=this.blockNum-e,this.totalSize=this.blockSize*this.blockNum;const t=this.blockSize*this.expand;this.needUpload=this.needUpload.concat(new Array(e).fill(!1));const r=new ArrayBuffer(this.totalSize);new Uint8Array(r).set(new Uint8Array(this.data)),this.data=r,this.buffer=this.manager.createGPUBuffer(this.totalSize),this.manager.statisGPUMemory(t),this.blocks.forEach((e=>e&&e.user.notifyGPUBufferChange())),this.manager.renderContext.notifyGPUBufferChange()}_moveBlock(e){const t=this.blocks.length;if(e>=t)return;const r=new Uint8Array(this.data),n=this.blockSize;for(let a=e+1;a<t;a++){const e=a*n,t=e+n,i=e-n;r.copyWithin(i,e,t),this.needUpload[a-1]=this.needUpload[a],this.blocks[a-1]=this.blocks[a],this.blocks[a-1]&&(this.blocks[a-1].index--,this.blocks[a-1].offset-=n,this.blocks[a-1].user.notifyGPUBufferChange())}this.blocks.length--,this.manager.renderContext.notifyGPUBufferChange()}getBlock(e,t){const r=roundUp(e,this.manager.byteAlign);if(r!==this.blockSize)return console.warn("WebGPUBufferCluster: 获取内存块时, 长度错误!"),null;const n=this._getBlockWithExpand(),a=new Da(this.manager.snCounter++,this,n,e,r,t);return this.blocks[n]=a,a}freeBlock(e){const t=this.blocks.indexOf(e);return-1!==t&&(t===this.blocks.length-1?this.blocks.length--:(this.blocks[t]=null,this.needUpload[t]=!1),e.destroy(),!0)}upload(){let e=0,t=0,r=!1,n=-1,a=-1,i=0,s=0;for(let o=0,l=this.blocks.length;o<l;o++)this.needUpload[o]?(-1===n&&(n=o),a=o,r=!0,this.needUpload[o]=!1):r&&(i=n*this.blockSize,s=(a-n+1)*this.blockSize,this.manager.writeBuffer(this.buffer,this.data,i,s),e++,t+=s,n=-1,a=-1,r=!1);r&&(i=n*this.blockSize,s=(a-n+1)*this.blockSize,this.manager.writeBuffer(this.buffer,this.data,i,s),e++,t+=s),this.manager.uploadNum+=e,this.manager.uploadByte+=t,this.manager.statisUpload(e,t)}optimize(){for(let e=this.blocks.length-1;e>-1;e--){const t=this.blocks[e];if(t&&t.uploadNum>this.manager.uploadThreshold&&!t.moved&&e>0){const r=this.needUpload[e],n=this.blockSize,a=new Uint8Array(this.data);this.move.set(new Uint8Array(this.data,n*e,n));for(let t=e-1;t>=0;t--){const e=t*n,r=e+n,i=e+n;a.copyWithin(i,e,r),this.needUpload[t+1]=this.needUpload[t],this.blocks[t+1]=this.blocks[t],this.blocks[t+1]&&(this.blocks[t+1].index++,this.blocks[t+1].offset+=n,this.blocks[t+1].user.notifyGPUBufferChange())}a.set(this.move),this.needUpload[0]=r,t.index=0,t.offset=0,t.moved=!0,this.blocks[0]=t,this.blocks[0].user.notifyGPUBufferChange(),this.manager.renderContext.notifyGPUBufferChange(),this.manager.moveNum++;break}}}removeHole(){for(let e=this.blocks.length-1;e>-1;e--)if(!this.blocks[e]){this._moveBlock(e);break}}clear(e){this.blocks.forEach((e=>e&&e.destroy())),this.blocks.length=0,null!=e&&e>0&&e!==this.blockNum?(this.blockNum=e,this.totalSize=this.blockSize*this.blockNum,this.buffer=this.manager.createGPUBuffer(this.totalSize),this.data=new ArrayBuffer(this.totalSize)):(this.blockNum=0,this.totalSize=0,this.buffer=null,this.data=null),this.needUpload.length=this.blockNum,this.needUpload.fill(!1)}_getBlockWithExpand(){for(let e=this.blocks.length-1;e>-1;e--)if(!this.blocks[e])return e;return this.blocks.length<this.blockNum||this._expandBuffer(),this.blocks.length}destroy(){var e;return this.destroyed?(console.warn("UniformBufferCluster: object alreay destroyed!"),!1):(this.clear(),null!==(e=this.buffer.destroy)&&void 0!==e||this.buffer.destroy(),this.manager.statisGPUMemory(-this.totalSize),this.destroyed=!0,!0)}}function roundUp(e,t){return((e+t-1)/t|0)*t}class Ma{constructor(e,t){this.destroyed=!1,this.data=new ArrayBuffer(e),this.buffer=t.getBufferAlone(e),this.manager=t,this.size=e,this.alignedSize=roundUp(e,t.byteAlign)}upload(){const e=performance.now();this.manager.writeBuffer(this.buffer,this.data,0,this.size),this.manager.timeCostSum+=performance.now()-e,this.manager.timeCostCount++,this.manager.timeCostCount>100&&(this.manager.timeCostAvg=this.manager.timeCostSum/this.manager.timeCostCount*1e3|0,this.manager.timeCostSum=0,this.manager.timeCostCount=0),this.manager.uploadNum++,this.manager.uploadByte+=this.size,this.manager.statisUpload(1,this.size)}destroy(){var e;return this.destroyed?(console.warn("UniformBufferAlone: object alreay destroyed!"),!1):(this.data=null,null!==(e=this.buffer.destroy)&&void 0!==e||this.buffer.destroy(),this.manager.statisGPUMemory(-this.size),this.destroyed=!0,!0)}}class Ca{constructor(e,t,r,n){this.destroyed=!1,this.name=e,this.strId="",this.items=new Map,this.itemNum=0,this.data=n,this.size=t,this.manager=r,this.needUpload=!1,r.useBigBuffer?(this.bufferBlock=r.getBlock(t,this),this.offset=this.bufferBlock.offset):this.bufferAlone=new Ma(t,r)}notifyGPUBufferChange(){const e=this.bufferBlock.offset-this.offset;this.offset=this.bufferBlock.offset,this.items.forEach((t=>{const r=Ca._typeArray(t.type);t.view=new r(this.bufferBlock.cluster.data,t.view.byteOffset+e,t.size/r.BYTES_PER_ELEMENT)})),this.clearGPUBufferBind(),this.needUpload=!0}clearGPUBufferBind(){}addUniform(e,t,r,n,a,i,s,o){this.items.has(e)||(this.items.set(e,this._getUniformItem(t,Ca._typeArray(r),r,n,a,i,s,o)),this.strId.length>0&&(this.strId+="|"),this.strId+=e,this.itemNum++)}setUniformData(e,t){const r=this.items.get(e);if(r)if(this.needUpload=!0,1==r.count)switch(r.type){case"int":case"float":r.view[0]=t;break;case"vec2":r.view[0]=t.x,r.view[1]=t.y;break;case"vec3":r.view[0]=t.x,r.view[1]=t.y,r.view[2]=t.z;break;case"vec4":r.view[0]=t.x,r.view[1]=t.y,r.view[2]=t.z,r.view[3]=t.w;break;case"mat3":for(let e=0;e<3;e++)r.view[4*e+0]=t.elements[3*e+0],r.view[4*e+1]=t.elements[3*e+1],r.view[4*e+2]=t.elements[3*e+2];break;case"mat4":r.view.set(t.elements)}else{const e=r.count*r.elements,n=r.size/r.count/r.view.BYTES_PER_ELEMENT;for(let a=0,i=0;a<e;a+=r.elements,i+=n)r.view.set(t.subarray(a,a+r.elements),i)}}setBool(e,t){const r=this.items.get(e);r&&(r.view[0]=t?1:0,this.needUpload=!0)}setBoolArray(e,t){const r=this.items.get(e);if(r){for(let e=0,n=Math.min(r.count,t.length);e<n;e++)r.view[e]=t[e]?1:0;this.needUpload=!0}}setInt(e,t){const r=this.items.get(e);r&&(r.view[0]=t,this.needUpload=!0)}setIntArray(e,t){const r=this.items.get(e);if(r){for(let e=0,n=Math.min(r.count,t.length);e<n;e++)r.view[e]=t[e];this.needUpload=!0}}setFloat(e,t){const r=this.items.get(e);r&&(r.view[0]=t,this.needUpload=!0)}setFloatArray(e,t){const r=this.items.get(e);if(r){for(let e=0,n=Math.min(r.count,t.length);e<n;e++)r.view[e]=t[e];this.needUpload=!0}}setVector2(e,t){const r=this.items.get(e);r&&(r.view[0]=t.x,r.view[1]=t.y,this.needUpload=!0)}setVector2Array(e,t){const r=this.items.get(e);if(r){for(let e=0,n=Math.min(r.count,t.length);e<n;e++)r.view[2*e+0]=t[e].x,r.view[2*e+1]=t[e].y;this.needUpload=!0}}setVector3(e,t){const r=this.items.get(e);r&&(r.view[0]=t.x,r.view[1]=t.y,r.view[2]=t.z,this.needUpload=!0)}setVector3Array(e,t){const r=this.items.get(e);if(r){for(let e=0,n=Math.min(r.count,t.length);e<n;e++)r.view[4*e+0]=t[e].x,r.view[4*e+1]=t[e].y,r.view[4*e+2]=t[e].z;this.needUpload=!0}}setVector4(e,t){const r=this.items.get(e);r&&(r.view[0]=t.x,r.view[1]=t.y,r.view[2]=t.z,r.view[3]=t.w,this.needUpload=!0)}setVector4Array(e,t){const r=this.items.get(e);if(r){for(let e=0,n=Math.min(r.count,t.length);e<n;e++)r.view[4*e+0]=t[e].x,r.view[4*e+1]=t[e].y,r.view[4*e+2]=t[e].z,r.view[4*e+3]=t[e].w;this.needUpload=!0}}setMatrix3x3(e,t){const r=this.items.get(e);if(r){for(let e=0;e<3;e++)r.view[4*e+0]=t.elements[3*e+0],r.view[4*e+1]=t.elements[3*e+1],r.view[4*e+2]=t.elements[3*e+2];this.needUpload=!0}}setMatrix3x3Array(e,t){const r=this.items.get(e);if(r){for(let e=0,n=Math.min(r.count,t.length);e<n;e++)for(let n=0;n<3;n++)r.view[16*e+4*n+0]=t[e].elements[3*n+0],r.view[16*e+4*n+1]=t[e].elements[3*n+1],r.view[16*e+4*n+2]=t[e].elements[3*n+2];this.needUpload=!0}}setMatrix4x4(e,t){const r=this.items.get(e);r&&(r.view.set(t.elements),this.needUpload=!0)}setMatrix4x4Array(e,t){const r=this.items.get(e);if(r){for(let e=0,n=Math.min(r.count,t.length);e<n;e++)r.view.set(t[e].elements,16*e);this.needUpload=!0}}setBuffer(e,t){this.setUniformData(e,t)}getUniform(e){return this.items.get(e)}hasUniform(e){return this.items.has(e)}isMe(e){return this.strId===e}upload(){this.needUpload&&(this.manager.useBigBuffer?this.bufferBlock.needUpload():this.bufferAlone.upload(),this.needUpload=!1)}clear(){this.manager.useBigBuffer?new Uint8Array(this.bufferBlock.cluster.data).fill(0,this.bufferBlock.offset,this.bufferBlock.offset+this.bufferBlock.size):new Uint8Array(this.bufferAlone.data).fill(0),this.strId="",this.items.clear(),this.itemNum=0,this.needUpload=!1}destroy(){return this.destroyed?(console.warn("UniformBufferUser: object alreay destroyed!"),!1):(this.manager.useBigBuffer?this.manager.freeBlock(this.bufferBlock):this.bufferAlone.destroy(),this.destroyed=!0,!0)}_getUniformItem(e,t,r,n,a,i,s,o){let l;return l=this.manager.useBigBuffer?new t(this.bufferBlock.cluster.data,this.bufferBlock.offset+n,i/t.BYTES_PER_ELEMENT):new t(this.bufferAlone.data,n,i/t.BYTES_PER_ELEMENT),{name:e,view:l,type:r,align:a,size:i,elements:s,count:o}}static _typeArray(e){return"int"===e?Int32Array:Float32Array}}e.D6MotionType=void 0,(aa=e.D6MotionType||(e.D6MotionType={}))[aa.eX=0]="eX",aa[aa.eY=1]="eY",aa[aa.eZ=2]="eZ",aa[aa.eTWIST=3]="eTWIST",aa[aa.eSWING1=4]="eSWING1",aa[aa.eSWING2=5]="eSWING2",e.D6Axis=void 0,(ia=e.D6Axis||(e.D6Axis={}))[ia.eLOCKED=0]="eLOCKED",ia[ia.eLIMITED=1]="eLIMITED",ia[ia.eFREE=2]="eFREE",e.D6Drive=void 0,(sa=e.D6Drive||(e.D6Drive={}))[sa.eX=0]="eX",sa[sa.eY=1]="eY",sa[sa.eZ=2]="eZ",sa[sa.eSWING=3]="eSWING",sa[sa.eTWIST=4]="eTWIST",sa[sa.eSLERP=5]="eSLERP";var va=t.Script;class ya extends j{constructor(){super(),this._singleton=!1}get curHLODRS(){return this._curHLODRS}set curHLODRS(e){this._curHLODRS||(this._renderElements=[],this._renderElements.push(new te),this._renderElements[0].render=this),e!=this._curHLODRS&&(this._changeMesh(e.HLODMesh),this._curHLODRS=e,this._createRenderelementByHLODElement(this._curHLODRS,this._renderElements[0]))}_createRenderelementByHLODElement(e,t){t.setGeometry(e.HLODMesh),t.material=e.material}_changeMesh(e){var t=this._baseRenderNode.shaderData;this.boundsChange=!0;let r=Te._meshVerticeDefine;if(this.curHLODRS){Se.getMeshDefine(this.curHLODRS.HLODMesh.batchMesh,r);for(var n=0,a=r.length;n<a;n++)t.removeDefine(Te._meshVerticeDefine[n])}if(e){Se.getMeshDefine(e.batchMesh,r);for(n=0,a=Te._meshVerticeDefine.length;n<a;n++)t.addDefine(Te._meshVerticeDefine[n])}this._curSubBatchMeshBounds.length=e.batchSubMeshInfo.length;for(let t=0,r=e.batchSubMeshInfo.length;t<r;t++)this._curSubBatchMeshBounds[t]=this._curSubBatchMeshBounds[t]?this._curSubBatchMeshBounds[t]:new H}_applyLightMapParams(){if(this._scene){var e=this._baseRenderNode.shaderData,t=this._curHLODRS.lightmap;t&&t.lightmapColor?(e.setTexture(U.LIGHTMAP,t.lightmapColor),e.addDefine(U.SAHDERDEFINE_LIGHTMAP),t.lightmapDirection?(e.setTexture(U.LIGHTMAP_DIRECTION,t.lightmapDirection),e.addDefine(U.SHADERDEFINE_LIGHTMAP_DIRECTIONAL)):e.removeDefine(U.SHADERDEFINE_LIGHTMAP_DIRECTIONAL)):(e.removeDefine(U.SAHDERDEFINE_LIGHTMAP),e.removeDefine(U.SHADERDEFINE_LIGHTMAP_DIRECTIONAL))}}_calculateBoundingBox(){if(this._curHLODRS){var e=this._curHLODRS.HLODMesh;if(e){var t=this._transform.worldMatrix;e.batchMesh.bounds._tranform(t,this._bounds)}for(let r=0,n=this._curSubBatchMeshBounds.length;r<n;r++)e.batchSubMeshInfo[r].bounds._tranform(t,this._curSubBatchMeshBounds[r])}}_renderUpdate(e){this._applyLightMapParams(),this._baseRenderNode.shaderData.setMatrix4x4(B.WORLDMATRIX,this._transform.worldMatrix)}_needRender(e,t){if(e){if(e.intersects(this.bounds)){let t=this.curHLODRS.HLODMesh.drawSubMeshs,r=this._curHLODRS.HLODMesh.batchSubMeshInfo;t.length=0;for(let n=0,a=this._curSubBatchMeshBounds.length;n<a;n++)e.intersects(this._curSubBatchMeshBounds[n])&&t.push(r[n]);return this._curHLODRS.HLODMesh.drawSubMeshs=t,!0}return!1}return!0}onEnable(){super.onEnable()}onDisable(){super.onDisable()}onDestroy(){super.onDestroy(),this._renderElements.forEach((e=>{e.material._removeReference(),e.destroy()})),this._renderElements=null}_cloneTo(e){}}const Ia=new t.Vector3;class La extends t.Component{constructor(){super(),this._singleton=!0}get bounds(){return this._bounds}set bounds(e){this._bounds=e,this.recalculateBounds()}get lodResource(){return this._resourceList}set lodResource(e){this._resourceList=e}get lodCullRateArray(){return this._lodRateArray}set lodCullRateArray(e){e.sort(((e,t)=>t-e)),this._lodRateArray=e}_applyLODResource(e){this._curLODSource=e;let t=e.resources;for(let e=0,r=t.length;e<r;e++){let r=this.owner.addComponent(ya);this._curRender.push(r),r.curHLODRS=t[e]}}_releaseGroupRender(){this._curRender.forEach((e=>{e.destroy()})),this._curRender=[]}recalculateBounds(){let e=this._bounds.getExtent();this._size=2*Math.max(e.x,e.y,e.z)}onPreRender(){let e=this.owner.scene.cullInfoCamera,r=e.maxlocalYDistance,n=e.boundFrustum;t.Vector3.subtract(this.owner.transform.position,e.transform.position,Ia);let a=Ia.length();if(a>e.farPlane||0==n.containsPoint(this.owner.transform.position))return;let i=a/e.farPlane*r,s=this._size/i;for(let e=0;e<this._lodRateArray.length;e++)if(!(s<this._lodRateArray[e])){this.applyResource(this._resourceList[e]);break}}onUpdate(){this._curLODSource.updateMark=Kr._updateMark}applyResource(e){e!=this._curLODSource&&(e.loaded?this._curLODSource&&(this._releaseGroupRender(),this._applyLODResource(e)):e.load(this.applyResource,this))}onEnable(){super.onEnable()}onDisable(){super.onDisable()}onDestroy(){super.onDestroy()}_cloneTo(e){throw"cant clone HLOD"}}class Ba{constructor(){this.indexStart=0,this.indexCount=0,this.meshBounds=new H(new t.Vector3,new t.Vector3),this.needRender=!1}}class Oa extends Z{constructor(){super(t.MeshTopology.Triangles,t.DrawType.DrawElement),this.subInfos=[]}addSubMesh(e,t,r){let n=new Ba;n.indexCount=e,n.indexStart=t,r.cloneTo(n.meshBounds),this.subInfos.push(n)}_getType(){return Oa._type}_updateRenderParams(e){this.clearRenderParams();let r=e.camera.transform.position;this.subInfos.sort(((e,n)=>{let a=e.meshBounds.getCenter(),i=t.Vector3.distanceSquared(a,r),s=n.meshBounds.getCenter();return i-t.Vector3.distanceSquared(s,r)}));for(const e of this.subInfos)e.needRender&&this.setDrawElemenParams(e.indexCount,e.indexStart*this.indexByteCount)}_prepareRender(e){return!!this.subInfos.find((e=>e.needRender))}destroy(){for(const e of this.subInfos);this.subInfos=null}}Oa._type=Z._typeCounter++;const wa=new t.Matrix4x4,Pa=[0,1,2],Na=[0,2,1];class Va{static create(e){let r,n=new Va,a=e.vertexCount,i=e.indexCount,s=e.vertexDec,o=s.vertexStride/4,l=new ArrayBuffer(s.vertexStride*a),h=new Float32Array(l),d=t.IndexFormat.UInt16,c=2;a>65535?(d=t.IndexFormat.UInt32,c=4,r=new Uint32Array(i)):r=new Uint16Array(i);let u,_=0,m=0,f=0;for(const a of e.renders){let e=a.lightmapScaleOffset;u||(u=n.bounds,a.bounds.cloneTo(u)),H.merge(u,a.bounds,u);let i=a.owner,l=i.transform._isFrontFaceInvert,g=i.transform.worldMatrix,p=wa;g.invert(p),p.transpose();let S=a.getMesh(),E=S.vertexCount,x=S.indexCount,A=S._vertexBuffer.getFloat32Data();h.set(A,_);for(let r=0;r<E;r++){let n=r*o;for(const r of s._vertexElements)switch(n+=r.offset/4,r.elementUsage){case t.VertexMesh.MESH_POSITION0:T.transformVector3ArrayToVector3ArrayCoordinate(A,n,g,h,_+n);break;case t.VertexMesh.MESH_NORMAL0:case t.VertexMesh.MESH_TANGENT0:T.transformVector3ArrayToVector3ArrayNormal(A,n,p,h,_+n);break;case t.VertexMesh.MESH_TEXTURECOORDINATE1:T.transformLightingMapTexcoordArray(A,n,e,h,_+n)}}let D=S._indexBuffer.getData(),R=l?Na:Pa;for(let e=0;e<x;e+=3)r[f+e]=D[e+R[0]]+m,r[f+e+1]=D[e+R[1]]+m,r[f+e+2]=D[e+R[2]]+m;let M=S.subMeshCount;for(let e=0;e<M;e++){let t=a.sharedMaterials[e]||xe.defaultMaterial,r=n._staticSubMeshes.get(t);r||(r=new Oa,r.indexByteCount=c,n._staticSubMeshes.set(t,r),r.bufferState=n._bufferState,r.indexFormat=d);let i=S.getSubMesh(e);r.addSubMesh(i.indexCount,i._indexStart+f,a.bounds)}_+=A.length,m+=E,f+=D.length}let g=A.renderOBJCreate.createVertexBuffer3D(l.byteLength,t.BufferUsage.Static,!1);g.vertexDeclaration=s,g.setData(l);let p=A.renderOBJCreate.createIndexBuffer3D(d,i,t.BufferUsage.Static,!1);return p.setData(r),n.setBuffer(g,p),n}constructor(){this._bufferState=new t.BufferState,this._staticSubMeshes=new Map,this.bounds=new H}setBuffer(e,t){let r=this._bufferState;this._vertexBuffer=e,this._indexBuffer=t,r.applyState([e],t)}destroy(){this._staticSubMeshes.forEach((e=>{e.destroy()})),this._staticSubMeshes.clear(),this._staticSubMeshes=null,this._bufferState.destroy()}}class ba extends te{constructor(){super()}getInvertFront(){return!1}}class Fa extends j{static create(e){let t=new Fa;return t.mergeInfo=e,t}get staticMesh(){return this._staticMesh}get mergeInfo(){return this._mergeInfo}set mergeInfo(e){this._mergeInfo=e;let t=Va.create(e);this._staticMesh=t,this.lightmapIndex=e.lightmapIndex,this._staticMesh=t,this.geometryBounds=t.bounds;let r=Te._meshVerticeDefine,n=this._baseRenderNode.shaderData;this._getMeshDefine(t,r);for(const e of r)n.addDefine(e);this._renderElements.forEach((e=>{e.material._removeReference(),e.destroy()})),this._renderElements=[],t._staticSubMeshes.forEach(((e,t)=>{let r=new ba;this._renderElements.push(r),r.render=this,r.material=t,r.setGeometry(e),t._addReference()})),t.bounds.cloneTo(this.bounds)}constructor(){super(),this._singleton=!1}_calculateBoundingBox(){}_renderUpdate(e){}_getMeshDefine(e,r){let n=e._vertexBuffer.vertexDeclaration._vertexElements;for(const e of n)switch(e.elementUsage){case t.VertexMesh.MESH_COLOR0:r.push(G.SHADERDEFINE_COLOR);break;case t.VertexMesh.MESH_TEXTURECOORDINATE0:r.push(G.SHADERDEFINE_UV0);break;case t.VertexMesh.MESH_TEXTURECOORDINATE1:r.push(G.SHADERDEFINE_UV1);break;case t.VertexMesh.MESH_TANGENT0:r.push(G.SHADERDEFINE_TANGENT)}}_needRender(e,t){if(e){if(e.intersects(this.bounds)){let t=!1;return this.staticMesh._staticSubMeshes.forEach((r=>{for(const n of r.subInfos)n.needRender=e.intersects(n.meshBounds),t=t||n.needRender})),t}return!1}return!0}onEnable(){super.onEnable(),this.mergeInfo.renders.forEach((t=>{t.setRenderbitFlag(e.RenderBitFlag.RenderBitFlag_Batch,!0)}))}onDisable(){super.onDisable(),this.mergeInfo.renders.forEach((t=>{t.setRenderbitFlag(e.RenderBitFlag.RenderBitFlag_Batch,!1)}))}onDestroy(){super.onDestroy(),this._renderElements.forEach((e=>{e.material._removeReference(),e.destroy()})),this._renderElements=null,this._staticMesh.destroy(),this._staticMesh=null}_cloneTo(e){e.mergeInfo=this.mergeInfo}}class Ua{static create(e){let t=e.getMesh(),r=new Ua;return r.lightmapIndex=e.lightmapIndex,r.receiveShadow=e.receiveShadow,r.vertexDec=t?t.getVertexDeclaration():null,r}get renders(){return this._renders}constructor(){this._renders=[],this.vertexCount=0,this.indexCount=0}match(e){let t=e.getMesh();e.owner;let r=!0;return r=r&&this.lightmapIndex==e.lightmapIndex,r=r&&this.receiveShadow==e.receiveShadow,r=r&&this.vertexDec==t.getVertexDeclaration(),r}addElement(e){this.renders.push(e);let t=e.getMesh();this.vertexCount+=t.vertexCount,this.indexCount+=t.indexCount}destroy(){this._renders=null}}class Ga{get gradientCount(){return this._currentLength/3}constructor(){this._currentLength=0,this._elements=new Float32Array(12)}add(e,t){this._currentLength<8?(6===this._currentLength&&1!==e&&(e=1,console.log("GradientDataVector2 warning:the forth key is  be force set to 1.")),this._elements[this._currentLength++]=e,this._elements[this._currentLength++]=t.x,this._elements[this._currentLength++]=t.y):console.log("GradientDataVector2 warning:data count must lessEqual than 4")}cloneTo(e){var t=e;t._currentLength=this._currentLength;for(var r=t._elements,n=0,a=this._elements.length;n<a;n++)r[n]=this._elements[n]}clone(){var e=new Ga;return this.cloneTo(e),e}}class Ha{constructor(){this._isNeedUpdate=!1}createInstanceVertexBuffer3D(){this._instanceData=new Float32Array(ye.maxInstanceCount*this._vertexStride),this._vertexBuffer=A.renderOBJCreate.createVertexBuffer3D(4*this._instanceData.length,t.BufferUsage.Dynamic,!1),this._vertexBuffer.vertexDeclaration=this._vertexDeclaration,this._vertexBuffer.instanceBuffer=!0}updateVertexBufferData(e){if(!this._isNeedUpdate)return;let t,r=this._instanceData,n=this._value,a=this._value.length,i=this._vertexStride,s=0;switch(this._value instanceof Float32Array||(s=1),s){case 0:r.set(n,0);break;case 1:for(let e=0;e<a;e++)t=n[e],t.writeTo(r,e*i)}this._vertexBuffer._deviceBuffer.setDataLength(this._vertexBuffer._byteLength),this._vertexBuffer.setData(r.buffer,0,0,4*e*i)}destroy(){delete this._value,delete this._instanceData,this._vertexDeclaration=null,this._vertexBuffer.destroy()}}var za;e.InstanceLocation=void 0,(za=e.InstanceLocation||(e.InstanceLocation={}))[za.CUSTOME0=12]="CUSTOME0",za[za.CUSTOME1=13]="CUSTOME1",za[za.CUSTOME2=14]="CUSTOME2",za[za.CUSTOME3=15]="CUSTOME3";class ka{constructor(){this._type=0,this._propertyMap={}}_checkPropertyLegal(e,t,r,n){if(n._vertexDeclaration._vertexElements[0]._elementFormat!==e)throw"Data exists and format does not match";if(n._name!==t)throw"You cannot add a new property to an existing attributeLocation,Please use another attributeLocation"}_creatProperty(e,r,n,a,i){var s=this._propertyMap[i]=new Ha;s._name=e,s._value=r,s._vertexDeclaration=new t.VertexDeclaration(n,[new t.VertexElement(0,a,i)]),s._isNeedUpdate=!0,s._vertexStride=n/4,s.createInstanceVertexBuffer3D()}setVectorArray(e,r,n){var a=this._propertyMap[n];a?(this._checkPropertyLegal(t.VertexElementFormat.Vector4,e,n,a),a._value=r,a._isNeedUpdate=!0):this._creatProperty(e,r,16,t.VertexElementFormat.Vector4,n)}setVector3Array(e,r,n){var a=this._propertyMap[n];a?(this._checkPropertyLegal(t.VertexElementFormat.Vector3,e,n,a),a._value=r,a._isNeedUpdate=!0):this._creatProperty(e,r,12,t.VertexElementFormat.Vector3,n)}setVector2Array(e,r,n){var a=this._propertyMap[n];a?(this._checkPropertyLegal(t.VertexElementFormat.Vector2,e,n,a),a._value=r,a._isNeedUpdate=!0):this._creatProperty(e,r,8,t.VertexElementFormat.Vector2,n)}setNumberArray(e,r,n){var a=this._propertyMap[n];a?(this._checkPropertyLegal(t.VertexElementFormat.Single,e,n,a),a._value=r,a._isNeedUpdate=!0):this._creatProperty(e,r,4,t.VertexElementFormat.Single,n)}getPropertyArray(e){var t=this._propertyMap[e];return t?t._value:null}clear(){for(var e in this._propertyMap)this._propertyMap[e].destroy();this._propertyMap={}}}ka.INSTANCETYPE_ATTRIBUTE=0,ka.INSTANCETYPE_UNIFORMBUFFER=1,e.ACESShaderLib=Tr,e.AlternateLightQueue=Ve,e.AnimationClip=x,e.AnimationClipParser03=u,e.AnimationClipParser04=g,e.AnimationEvent=i,e.Animator=Tn,e.AnimatorController=xn,e.AnimatorControllerLayer=mn,e.AnimatorPlayState=_n,e.AnimatorResource=gn,e.AnimatorState=pn,e.AnimatorStateScript=class{setPlayScriptInfo(e,t,r){this.playStateInfo.animator=e,this.playStateInfo.layerindex=t,this.playStateInfo.playState=r}constructor(){this.playStateInfo={animator:null,layerindex:-1,playState:null}}onStateEnter(){}onStateUpdate(e){}onStateExit(){}onStateLoop(){}},e.AnimatorTransition=En,e.AreaLightCom=sn,e.AvatarMask=Sn,e.AxiGamepad=Sa,e.BaseCamera=ae,e.BaseRender=j,e.BaseShape=Dt,e.BatchMark=An,e.BatchRender=Mn,e.BlinnPhongMaterial=xe,e.BlinnPhongShaderInit=cr,e.BlitFrameBufferCMD=ze,e.BlitQuadCMDData=class{get element(){return this._element}set element(e){this._element=e}get dest(){return this._dest}set dest(e){this._dest=e}get viewport(){return this._viewport}set viewport(e){this._viewport=e}get scissor(){return this._scissor}set scissor(e){this._scissor=e}get source(){return this._source}set source(e){this._source=e}get offsetScale(){return this._offsetScale}set offsetScale(e){this._offsetScale=e}apply(e){throw new Error("Method not implemented.")}},e.BlitScreenQuadCMD=le,e.BlitScreenShaderInit=or,e.BloomEffect=yr,e.BoundBox=At,e.BoundFrustum=V,e.BoundSphere=Jn,e.Bounds=H,e.BoundsImpl=Kn,e.BoxShape=Mt,e.Burst=ut,e.ButtonGamepad=Ta,e.Camera=Kr,e.CameraCullInfo=oa,e.CircleShape=Ct,e.Cluster=we,e.Collision=class{constructor(){this._lastUpdateFrame=-2147483648,this._updateFrame=-2147483648,this._isTrigger=!1,this.contacts=[],this._inPool=!1}_setUpdateFrame(e){this._lastUpdateFrame=this._updateFrame,this._updateFrame=e}},e.CollisionUtils=N,e.ColorGradEffect=Ze,e.ColorOverLifetime=mt,e.Command=oe,e.CommandBuffer=Be,e.CommandUniformMap=class{constructor(e){}addShaderUniform(e,t,r,n=null){throw"need override it"}addShaderUniformArray(e,t,r,n,a=""){throw"need override it"}addShaderBlockUniform(e,t,r){throw"need override it"}},e.ConeShape=vt,e.ContactPoint=class{constructor(){this._idCounter=0,this._colliderA=null,this._colliderB=null,this.distance=0,this.normal=new t.Vector3,this.positionOnA=new t.Vector3,this.positionOnB=new t.Vector3,this._id=++this._idCounter}},e.ContainmentType=P,e.CubemapLoader=On,e.DepthCasterData=r,e.DepthPass=n,e.DirectionLightCom=tn,e.DrawElementCMDData=class{setRenderelements(e){throw new Error("Method not implemented.")}apply(e){throw new Error("Method not implemented.")}},e.DrawMeshCMD=Re,e.DrawMeshInstancedCMD=ye,e.DrawNodeCMDData=class{get node(){return this._node}set node(e){this._node=e}get destShaderData(){return this._destShaderData}set destShaderData(e){this._destShaderData=e}get destSubShader(){return this._destSubShader}set destSubShader(e){this._destSubShader=e}get subMeshIndex(){return this._subMeshIndex}set subMeshIndex(e){this._subMeshIndex=e}apply(e){throw new Error("Method not implemented.")}},e.DrawRenderCMD=Me,e.DrawRenderElementCMD=Le,e.EffectMaterial=Zr,e.Emission=Ft,e.ExtendTerrainMaterial=Jr,e.FloatKeyframe=h,e.FrameOverTime=ft,e.FrustumCulling=_a,e.GaussianDoF=Or,e.GeometryElement=Z,e.Gradient=ct,e.GradientAngularVelocity=pt,e.GradientColor=_t,e.GradientDataInt=St,e.GradientDataNumber=gt,e.GradientDataVector2=Ga,e.GradientMode=dt,e.GradientSize=Tt,e.GradientVelocity=Et,e.HLOD=La,e.HLODBatchMesh=class extends Z{constructor(){super(t.MeshTopology.Triangles,t.DrawType.DrawElement)}get batchMesh(){return this._mesh}set batchMesh(e){this._mesh!=e&&(this._mesh&&this._mesh._removeReference(),this.indexFormat=e.indexFormat,this._mesh=e,this._mesh._addReference())}get batchSubMeshInfo(){return this._batchSubMeshInfos}set batchSubMeshInfo(e){this._batchSubMeshInfos=e}get drawSubMeshs(){return this._drawSubMeshs}set drawSubMeshs(e){this._drawSubMeshs=e}_prepareRender(e){return this._mesh._uploadVerticesData(),!0}_updateRenderParams(e){var r,n=this._mesh;switch(n.indexFormat){case t.IndexFormat.UInt32:r=4;break;case t.IndexFormat.UInt16:r=2;break;case t.IndexFormat.UInt8:r=1}this.clearRenderParams(),this.bufferState=n._bufferState,this._drawSubMeshs&&this._drawSubMeshs.forEach((e=>{this.setDrawElemenParams(e.drawPramas.y,e.drawPramas.x*r)}))}destroy(){this._mesh&&this._mesh._removeReference(),delete this._batchSubMeshInfos,delete this._drawSubMeshs}},e.HLODBatchSubMesh=class{},e.HLODConfig=class{},e.HLODElement=class{get material(){return this._material}set material(e){this._material!=e&&(this._material&&this._material._removeReference(),this._material=e,this._material._addReference())}get lightmap(){return this._lightmap}set lightmap(e){this._lightmap!=e&&(this._lightmap&&(this._lightmap.lightmapColor._removeReference(),this._lightmap.lightmapDirection._removeReference()),this._lightmap=e,this._lightmap.lightmapColor._addReference(),this._lightmap.lightmapDirection._addReference()),this._lightmap=e}release(){this.HLODMesh.destroy(),this.material.destroy(),this.lightmap&&(this._lightmap.lightmapColor.destroy(),this._lightmap.lightmapDirection.destroy())}},e.HLODRender=ya,e.HLODResourceGroup=class{load(e,r){this.loaded||t.Laya.loader.load(this.url,t.Handler.create(this,(t=>{e.apply(r,[this]),this.loaded=!0}),[this]))}release(){this.resources.forEach((e=>{e.release()})),this.loaded=!1}},e.HemisphereShape=yt,e.HitResult=Gn,e.ILaya3D=Q,e.IndexBuffer3D=da,e.InstanceBatchManager=Dn,e.InstanceRenderElement=tr,e.Keyframe=l,e.KeyframeNode=a,e.KeyframeNodeList=p,e.KeyframeNodeOwner=f,e.LODGroup=hn,e.LODInfo=ln,e.Laya3D=Xr,e.Laya3DRender=A,e.LengencyRenderEngine3DFactory=ua,e.LensFlareCMD=Pr,e.LensFlareData=zr,e.LensFlareEffect=kr,e.LensFlareElement=Hr,e.LensFlareElementGeomtry=wr,e.LensFlareSettingsLoader=Yn,e.LensFlareShaderInit=Gr,e.Light=Ue,e.LightQueue=Ne,e.LightSprite=jr,e.Lightmap=be,e.LoadModelV04=wn,e.LoadModelV05=bn,e.MaterialInstanceProperty=Ha,e.MaterialInstancePropertyBlock=ka,e.Mesh=ar,e.MeshFilter=Te,e.MeshInstanceGeometry=ve,e.MeshReader=Fn,e.MeshRenderer=De,e.MeshSprite3D=ht,e.MeshSprite3DShaderDeclaration=G,e.MeshUtil=Se,e.MorphTarget=Pn,e.MorphTargetChannel=Nn,e.MorphTargetData=Vn,e.PBRDefaultDFG=qe,e.PBRMaterial=at,e.PBRShaderLib=$e,e.PBRStandardMaterial=it,e.PBRStandardShaderInit=_r,e.ParticleShuriKenShaderInit=fr,e.Physics3DStatInfo=Yr,e.Physics3DUtils=la,e.PhysicsSettings=Pe,e.Picker=b,e.PixelLineData=dn,e.PixelLineFilter=cn,e.PixelLineMaterial=Wr,e.PixelLineRenderer=un,e.PixelLineSprite3D=class extends U{get maxLineCount(){return this._render.maxLineCount}set maxLineCount(e){this._render.maxLineCount=e}get lineCount(){return this._render.lineCount}get pixelLineRenderer(){return this._render}constructor(e=2,t=null){super(t),this._isRenderActive=!1,this._isInRenders=!1,this._render=this.addComponent(un),this._geometryFilter=this._render._pixelLineFilter,this._render.maxLineCount=e,(this._render.material=new lt).enableVertexColor=!0}addLine(e,t,r,n){this._render.addLine(e,t,r,n)}addLines(e){this._render.addLines(e)}removeLine(e){this._render.removeLine(e)}setLine(e,t,r,n,a){this._render.setLine(e,t,r,n,a)}getLine(e,t){this._render.getLine(e,t)}clear(){this._render.clear()}_create(){return new B}},e.PixelLineVertex=Xt,e.Plane=O,e.PointLightCom=rn,e.PostProcess=Je,e.PostProcessEffect=Xe,e.PostProcessRenderContext=Ye,e.PrimitiveMesh=ir,e.QuaternionKeyframe=d,e.Rand=bt,e.RandX=qn,e.Ray=w,e.ReflectionProbe=K,e.ReflectionProbeManager=k,e.RenderContext3D=ie,e.RenderElement=te,e.RenderState=Ee,e.RenderableSprite3D=U,e.RotationOverLifetime=xt,e.ScalableAO=Lr,e.Scene3D=Qr,e.Scene3DShaderDeclaration=Fe,e.SceneRenderManager=ke,e.SceneRenderManagerOBJ=class{constructor(){this._renders=new t.SingletonList,this._motionRenders=new t.SingletonList,this.baseRenderList=new t.SingletonList}get list(){return this._renders}set list(e){this._renders=e}addRenderObject(e){this._renders.add(e),this.baseRenderList.add(e._baseRenderNode)}removeRenderObject(e){this._renders.remove(e),this.baseRenderList.remove(e._baseRenderNode),this.removeMotionObject(e)}removeMotionObject(e){}updateMotionObjects(){}addMotionObject(e){}destroy(){this._renders.destroy()}},e.ScreenQuad=se,e.Script3D=va,e.SetDefineCMD=de,e.SetGlobalShaderDataCMD=Ce,e.SetRTCMD=Ie,e.SetRenderDataCMD=class{get value(){return this._value}set value(e){this._value=e}get dataType(){return this._dataType}set dataType(e){this._dataType=e}get propertyID(){return this._propertyID}set propertyID(e){this._propertyID=e}get dest(){return this._dest}set dest(e){this._dest=e}apply(e){throw new Error("Method not implemented.")}},e.SetRenderTargetCMD=class{get rt(){return this._rt}set rt(e){this._rt=e}get clearFlag(){return this._clearFlag}set clearFlag(e){this._clearFlag=e}get clearDepthValue(){return this._clearDepthValue}set clearDepthValue(e){this._clearDepthValue=e}get clearStencilValue(){return this._clearStencilValue}set clearStencilValue(e){this._clearStencilValue=e}get clearColorValue(){return this._clearColorValue}set clearColorValue(e){this._clearColorValue=e}apply(e){throw new Error("Method not implemented.")}},e.SetShaderDataCMD=he,e.SetShaderDefineCMD=class{get define(){return this._define}set define(e){this._define=e}get dest(){return this._dest}set dest(e){this._dest=e}get add(){return this._add}set add(e){this._add=e}apply(e){throw new Error("Method not implemented.")}},e.SetViewportCMD=class{get viewport(){return this._viewport}set viewport(e){this._viewport=e}get scissor(){return this._scissor}set scissor(e){this._scissor=e}apply(e){throw new Error("Method not implemented.")}},e.ShaderData=class{constructor(e=null){this._ownerResource=e}_addCheckUBO(e,t,r){throw new Error("Method not implemented.")}_releaseUBOData(){throw new Error("Method not implemented.")}getDefineData(){throw new Error("Method not implemented.")}getData(){throw new Error("Method not implemented.")}addDefine(e){throw new Error("Method not implemented.")}addDefines(e){throw new Error("Method not implemented.")}removeDefine(e){throw new Error("Method not implemented.")}hasDefine(e){throw new Error("Method not implemented.")}clearDefine(){throw new Error("Method not implemented.")}getBool(e){throw new Error("Method not implemented.")}setBool(e,t){throw new Error("Method not implemented.")}getInt(e){throw new Error("Method not implemented.")}setInt(e,t){throw new Error("Method not implemented.")}getNumber(e){throw new Error("Method not implemented.")}setNumber(e,t){throw new Error("Method not implemented.")}getVector2(e){throw new Error("Method not implemented.")}setVector2(e,t){throw new Error("Method not implemented.")}getVector3(e){throw new Error("Method not implemented.")}setVector3(e,t){throw new Error("Method not implemented.")}getVector(e){throw new Error("Method not implemented.")}setVector(e,t){throw new Error("Method not implemented.")}getColor(e){throw new Error("Method not implemented.")}setColor(e,t){throw new Error("Method not implemented.")}getMatrix4x4(e){throw new Error("Method not implemented.")}setMatrix4x4(e,t){throw new Error("Method not implemented.")}getMatrix3x3(e){throw new Error("Method not implemented.")}setMatrix3x3(e,t){throw new Error("Method not implemented.")}getBuffer(e){throw new Error("Method not implemented.")}setBuffer(e,t){throw new Error("Method not implemented.")}setTexture(e,t){throw new Error("Method not implemented.")}getTexture(e){throw new Error("Method not implemented.")}setUniformBuffer(e,t){throw new Error("Method not implemented.")}getUniformBuffer(e){throw new Error("Method not implemented.")}setShaderData(t,r,n){switch(r){case e.ShaderDataType.Int:this.setInt(t,n);break;case e.ShaderDataType.Bool:this.setBool(t,n);break;case e.ShaderDataType.Float:this.setNumber(t,n);break;case e.ShaderDataType.Vector2:this.setVector2(t,n);break;case e.ShaderDataType.Vector3:this.setVector3(t,n);break;case e.ShaderDataType.Vector4:this.setVector(t,n);break;case e.ShaderDataType.Color:this.setColor(t,n);break;case e.ShaderDataType.Matrix4x4:this.setMatrix4x4(t,n);break;case e.ShaderDataType.Matrix3x3:this.setMatrix3x3(t,n);break;case e.ShaderDataType.Texture2D:case e.ShaderDataType.TextureCube:this.setTexture(t,n);break;case e.ShaderDataType.Buffer:this.setBuffer(t,n);break;default:throw new Error(`unkown shader data type: ${r}`)}}getShaderData(t,r){switch(r){case e.ShaderDataType.Int:return this.getInt(t);case e.ShaderDataType.Bool:return this.getBool(t);case e.ShaderDataType.Float:return this.getNumber(t);case e.ShaderDataType.Vector2:return this.getVector2(t);case e.ShaderDataType.Vector3:return this.getVector3(t);case e.ShaderDataType.Vector4:return this.getVector(t);case e.ShaderDataType.Color:return this.getColor(t);case e.ShaderDataType.Matrix4x4:return this.getMatrix4x4(t);case e.ShaderDataType.Texture2D:case e.ShaderDataType.TextureCube:return this.getTexture(t);case e.ShaderDataType.Buffer:return this.getBuffer(t);case e.ShaderDataType.Matrix3x3:return this.getMatrix3x3(t);case e.ShaderDataType.Matrix4x4:return this.getMatrix4x4(t);default:throw"unkone shader data type."}}_setInternalTexture(e,t){throw new Error("Method not implemented.")}cloneTo(e){throw new Error("Method not implemented.")}_cloneUBO(e){throw new Error("Method not implemented.")}clone(){throw new Error("Method not implemented.")}reset(){throw new Error("Method not implemented.")}destroy(){throw new Error("Method not implemented.")}},e.ShaderDataDefaultValue=function(r){switch(r){case e.ShaderDataType.Int:return 0;case e.ShaderDataType.Bool:return!1;case e.ShaderDataType.Float:return 0;case e.ShaderDataType.Vector2:return t.Vector2.ZERO;case e.ShaderDataType.Vector3:return t.Vector3.ZERO;case e.ShaderDataType.Vector4:return t.Vector4.ZERO;case e.ShaderDataType.Color:return t.Color.BLACK;case e.ShaderDataType.Matrix4x4:return t.Matrix4x4.DEFAULT;case e.ShaderDataType.Matrix3x3:return t.Matrix3x3.DEFAULT}return null},e.ShaderDefine=class{constructor(e,t){this._index=e,this._value=t}},e.ShaderInit3D=Er,e.ShadowCasterPass=He,e.ShadowCullInfo=class{},e.ShadowSliceData=class{constructor(){if(this.position=new t.Vector3,this.viewMatrix=new t.Matrix4x4,this.projectionMatrix=new t.Matrix4x4,this.viewProjectMatrix=new t.Matrix4x4,this.cullPlanes=[new O(new t.Vector3,0),new O(new t.Vector3,0),new O(new t.Vector3,0),new O(new t.Vector3,0),new O(new t.Vector3,0),new O(new t.Vector3,0),new O(new t.Vector3,0),new O(new t.Vector3,0),new O(new t.Vector3,0),new O(new t.Vector3,0)],this.splitBoundSphere=new Jn(new t.Vector3,0),this.cameraShaderValue=t.LayaGL.renderDeviceFactory.createShaderData(null),t.Config3D._uniformBlock){let e=t.UniformBufferObject.getBuffer(t.UniformBufferObject.UBONAME_CAMERA,0),r=ae.createCameraUniformBlock();e||(e=t.UniformBufferObject.create(t.UniformBufferObject.UBONAME_CAMERA,t.BufferUsage.Dynamic,r.getbyteLength(),!1)),this.cameraShaderValue._addCheckUBO(t.UniformBufferObject.UBONAME_CAMERA,e,r),this.cameraShaderValue.setUniformBuffer(ae.CAMERAUNIFORMBLOCK,e),this.cameraUBO=e,this.cameraUBData=r}}},e.ShadowSpotData=class{constructor(){if(this.position=new t.Vector3,this.viewMatrix=new t.Matrix4x4,this.projectionMatrix=new t.Matrix4x4,this.viewProjectMatrix=new t.Matrix4x4,this.cameraShaderValue=t.LayaGL.renderDeviceFactory.createShaderData(null),t.Config3D._uniformBlock){let e=t.UniformBufferObject.getBuffer(t.UniformBufferObject.UBONAME_CAMERA,0),r=ae.createCameraUniformBlock();e||(e=t.UniformBufferObject.create(t.UniformBufferObject.UBONAME_CAMERA,t.BufferUsage.Dynamic,r.getbyteLength(),!1)),this.cameraShaderValue._addCheckUBO(t.UniformBufferObject.UBONAME_CAMERA,e,r),this.cameraShaderValue.setUniformBuffer(ae.CAMERAUNIFORMBLOCK,e),this.cameraUBO=e,this.cameraUBData=r}this.cameraCullInfo=new oa}},e.ShadowUtils=Ge,e.ShapeUtils=Rt,e.ShuriKenParticle3D=Yt,e.ShuriKenParticle3DShaderDeclaration=Ut,e.ShurikenParticleData=Gt,e.ShurikenParticleInstanceSystem=zt,e.ShurikenParticleMaterial=kt,e.ShurikenParticleRenderer=Wt,e.ShurikenParticleSystem=Ht,e.SimpleSkinnedMeshRenderer=xr,e.SimpleSkinnedMeshSprite3D=Ar,e.Size=ha,e.SizeOverLifetime=Lt,e.SkinRenderElement=Kt,e.SkinnedMeshRenderer=jt,e.SkinnedMeshSprite3D=Zt,e.SkinnedMeshSprite3DShaderDeclaration=Qt,e.SkyBox=J,e.SkyBoxMaterial=st,e.SkyBoxShaderInit=mr,e.SkyDome=$,e.SkyPanoramicMaterial=Cr,e.SkyPanoramicShaderInit=pr,e.SkyProceduralMaterial=ot,e.SkyProceduralShaderInit=gr,e.SkyRenderElement=ne,e.SkyRenderer=ee,e.SphereShape=It,e.SphericalHarmonicsL2=$r,e.SphericalHarmonicsL2Generater=en,e.SpotLightCom=nn,e.Sprite3D=B,e.Sprite3DRenderDeclaration=W,e.StartFrame=Bt,e.StatiVertexMergeBatchRender=vn,e.StaticBatchMesh=Va,e.StaticBatchMeshRender=Fa,e.StaticBatchMeshRenderElement=ba,e.StaticBatchSubInfo=Ba,e.StaticBatchSubMesh=Oa,e.StaticBatchVolume=yn,e.StaticInstanceBatchRender=Cn,e.StaticMeshBatchManager=class{constructor(){this.meshVertexDecSet=new Set}combine(e){for(const t of e){let e=!1;for(const r of this.meshVertexDecSet)r.match(t)&&(e=!0,r.addElement(t));if(!e){let e=Ua.create(t);e.addElement(t),this.meshVertexDecSet.add(e)}}let t=[];for(const e of this.meshVertexDecSet)t.push(Fa.create(e));return this.meshVertexDecSet.clear(),t}merge(e){return Fa.create(e)}},e.StaticMeshMergeInfo=Ua,e.SubMesh=rr,e.SubMeshInstanceBatch=$t,e.SubMeshRenderElement=Ae,e.TextMesh=class{get text(){return this._text}set text(e){this._text=e}get fontSize(){return this._fontSize}set fontSize(e){this._fontSize=e}get color(){return this._color}set color(e){this._color=e}constructor(){}},e.Texture2DArrayLoader=Qn,e.TextureGenerator=S,e.TextureSheetAnimation=Ot,e.TrailFilter=Mr,e.TrailGeometry=Rr,e.TrailMaterial=Jt,e.TrailRenderer=qr,e.TrailShaderInit=ur,e.TrailTextureMode=Dr,e.Transform3D=F,e.UI3D=Ln,e.UI3DGeometry=In,e.UI3DManager=We,e.UniformBufferAlone=Ma,e.UniformBufferBlock=Da,e.UniformBufferCluster=Ra,e.UniformBufferManager=class{constructor(e){this.useBigBuffer=!0,this.destroyed=!1,this.snCounter=0,this.byteAlign=256,this.clusterMaxBlock=256,this.uploadThreshold=200,this.moveNum=0,this.uploadNum=0,this.uploadByte=0,this.removeHoleTimer=0,this.timeCostAvg=0,this.timeCostSum=0,this.timeCostCount=0,this.clustersAll=new Map,this.clustersCur=new Map,this.useBigBuffer=e}_addCluster(e,t=10){const r=roundUp(e,this.byteAlign),n=new Ra(r,t,this),a=this.clustersAll.get(r);return a?(a.push(n),n.sn=a.length-1):this.clustersAll.set(r,[n]),this.clustersCur.set(r,n),n}_removeHole(){this.useBigBuffer&&this.clustersAll.forEach((e=>{for(let t=e.length-1;t>-1;t--)e[t].removeHole()}))}startFrame(){this.uploadNum=0,this.uploadByte=0}setRenderContext(e){this.renderContext=e}getBufferAlone(e,t){const r=roundUp(e,this.byteAlign);return this.statisGPUMemory(r),this.createGPUBuffer(r,t)}removeCluster(e,t){const r=roundUp(e,this.byteAlign);if(-1===t)return this.clustersAll.delete(r),void this.clustersCur.delete(r);const n=this.clustersCur.get(r),a=this.clustersAll.get(r);if(a.length>t){if(a.splice(t,1),0===a.length)return this.clustersAll.delete(r),void this.clustersCur.delete(r);for(let e=t;e<a.length;e++)a[e].sn--;if(n.sn===t)if(1===a.length)this.clustersCur.set(r,a[0]);else{let e=0,t=a[0].usedNum;for(let r=1;r<a.length;r++)a[r].usedNum<t&&(e=r,t=a[r].usedNum);this.clustersCur.set(r,a[e])}}}getBlock(e,t){const r=roundUp(e,this.byteAlign);let n=this.clustersCur.get(r);if(!n)return this._addCluster(r).getBlock(e,t);if(n.usedNum<this.clusterMaxBlock)return n.getBlock(e,t);n=null;const a=this.clustersAll.get(r);for(let e=a.length-1;e>-1;e--)if(a[e].usedNum<this.clusterMaxBlock){n=a[e],this.clustersCur.set(r,n);break}return n?n.getBlock(e,t):this._addCluster(r).getBlock(e,t)}freeBlock(e){const t=e.cluster;return!!t&&(!!t.freeBlock(e)&&(0===t.usedNum&&this.removeCluster(t.blockSize,t.sn),!0))}upload(){if(this.useBigBuffer){const e=performance.now();this.clustersAll.forEach((e=>{for(let t=e.length-1;t>-1;t--)e[t].upload(),e[t].optimize()})),this.timeCostSum+=performance.now()-e,this.timeCostCount++,this.timeCostCount>100&&(this.timeCostAvg=this.timeCostSum/this.timeCostCount*1e3|0,this.timeCostSum=0,this.timeCostCount=0),this.removeHoleTimer++,this.removeHoleTimer>1e3&&(this.removeHoleTimer=0,this._removeHole())}}clear(){this.clustersAll.forEach((e=>{for(let t=e.length-1;t>-1;t--)e[t].clear()}))}destroy(){return this.destroyed?(console.warn("UniformBufferManager: object alreay destroyed!"),!1):(this.clear(),this.clustersAll.clear(),this.clustersCur.clear(),this.destroyed=!0,!0)}createGPUBuffer(e,t){}writeBuffer(e,t,r,n){}statisGPUMemory(e){}statisUpload(e,t){}},e.UniformBufferUser=Ca,e.UnlitMaterial=lt,e.UnlitShaderInit=dr,e.Utils3D=T,e.Vector2Keyframe=_,e.Vector3Keyframe=c,e.Vector4Keyframe=m,e.VelocityOverLifetime=wt,e.VertexBuffer3D=ca,e.VertexPositionTerrain=er,e.VertexPositionTexture0=q,e.VertexShuriKenParticle=Pt,e.VertexShurikenParticleBillboard=Nt,e.VertexShurikenParticleMesh=Vt,e.VertexTrail=qt,e.Volume=z,e.VolumeManager=X,e.VolumetricGI=an,e.VolumetricGIManager=Y,e.WebXRCamera=ma,e.WebXRCameraInfo=class{},e.WebXRCameraManager=pa,e.WebXRExperienceHelper=Aa,e.WebXRInput=Ea,e.WebXRInputManager=xa,e.WebXRRenderTexture=fa,e.WebXRSessionManager=ga,e.roundDown=function(e,t){const r=((e+t-1)/t|0)*t;return r>e?r-t:r},e.roundUp=roundUp,e.skinnedMatrixCache=nr,e.volumeIntersectInfo=class{}}(window.Laya=window.Laya||{},Laya);